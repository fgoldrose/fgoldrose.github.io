(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}




var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function _JsArray_initialize$fn(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function _JsArray_initializeFromList$fn(max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function _JsArray_unsafeGet$fn(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function _JsArray_unsafeSet$fn(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function _JsArray_push$fn(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function _JsArray_foldl$fn(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function _JsArray_foldr$fn(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function _JsArray_map$fn(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function _JsArray_indexedMap$fn(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function _JsArray_slice$fn(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function _JsArray_appendN$fn(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log = F2(function _Debug_log$fn(tag, value)
{
	return value;
});

var _Debug_log_UNUSED = F2(function _Debug_log_UNUSED$fn(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString(value)
{
	return '<internals>';
}

function _Debug_toString_UNUSED(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.dv.d3 === region.c4.d3)
	{
		return 'on line ' + region.dv.d3;
	}
	return 'on lines ' + region.dv.d3 + ' through ' + region.c4.d3;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**_UNUSED/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function _Utils_notEqual$fn(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**/
	if (typeof x.$ === 'undefined')
	//*/
	/**_UNUSED/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function _Utils_lt$fn(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function _Utils_le$fn(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function _Utils_gt$fn(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function _Utils_ge$fn(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function _Utils_compare$fn(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: '#0' };

function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil = { $: 0 };
var _List_Nil_UNUSED = { $: '[]' };

function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function _List_map2$fn(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function _List_map3$fn(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function _List_map4$fn(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function _List_map5$fn(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function _List_sortBy$fn(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function _List_sortWith$fn(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function _Basics_add$fn(a, b) { return a + b; });
var _Basics_sub = F2(function _Basics_sub$fn(a, b) { return a - b; });
var _Basics_mul = F2(function _Basics_mul$fn(a, b) { return a * b; });
var _Basics_fdiv = F2(function _Basics_fdiv$fn(a, b) { return a / b; });
var _Basics_idiv = F2(function _Basics_idiv$fn(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function _Basics_remainderBy$fn(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function _Basics_modBy$fn(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function _Basics_and$fn(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function _Basics_xor$fn(a, b) { return a !== b; });



var _String_cons = F2(function _String_cons$fn(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function _String_append$fn(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function _String_map$fn(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function _String_filter$fn(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function _String_foldl$fn(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function _String_foldr$fn(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function _String_split$fn(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function _String_join$fn(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function _String_slice$fn(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function _String_any$fn(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function _String_all$fn(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function _String_contains$fn(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function _String_startsWith$fn(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function _String_endsWith$fn(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function _String_indexes$fn(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**_UNUSED/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function _Json_decodeField$fn(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function _Json_decodeIndex$fn(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function _Json_andThen$fn(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function _Json_map1$fn(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function _Json_map2$fn(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function _Json_map3$fn(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function _Json_map4$fn(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function _Json_map5$fn(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function _Json_map6$fn(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function _Json_map7$fn(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function _Json_map8$fn(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function _Json_runOnString$fn(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function _Json_run$fn(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function _Json_encode$fn(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }

function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function _Json_addField$fn(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);




// STRINGS


var _Parser_isSubString = F5(function _Parser_isSubString$fn(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function _Parser_isSubChar$fn(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function _Parser_isAsciiCode$fn(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function _Parser_chompBase10$fn(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function _Parser_consumeBase$fn(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function _Parser_consumeBase16$fn(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function _Parser_findSubString$fn(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});



var _Bitwise_and = F2(function _Bitwise_and$fn(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function _Bitwise_or$fn(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function _Bitwise_xor$fn(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function _Bitwise_shiftLeftBy$fn(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function _Bitwise_shiftRightBy$fn(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function _Bitwise_shiftRightZfBy$fn(offset, a)
{
	return a >>> offset;
});



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function _Scheduler_andThen$fn(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function _Scheduler_onError$fn(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function _Scheduler_send$fn(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function _Platform_worker$fn(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.iC,
		impl.jq,
		impl.jf,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function _Platform_sendToApp$fn(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function _Platform_sendToSelf$fn(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function _Platform_map$fn(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function _Platform_outgoingPortMap$fn(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function _Platform_incomingPortMap$fn(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(function $elm$core$Array$foldr$fn(func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(function helper$fn(node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(function $elm$core$Dict$foldr$fn(func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === -2) {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $author$project$Elm$Review$Reporter$ConfigurationError = {$: 2};
var $elm$core$Basics$False = 1;
var $author$project$Elm$Review$Main$HumanReadable = 0;
var $author$project$Elm$Review$Main$Mode_DontFix = 0;
var $author$project$Elm$Review$Main$NotAwaiting = {$: 0};
var $elm$core$Maybe$Nothing = {$: 1};
var $author$project$Elm$Review$Reporter$Reviewing = 0;
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $author$project$Elm$Review$Reporter$Source = $elm$core$Basics$identity;
var $elm$core$Basics$True = 0;
var $author$project$Elm$Review$UnsuppressMode$UnsuppressNone = {$: 2};
var $author$project$Elm$Review$Reporter$WithoutDetails = 1;
var $elm$core$Result$Err = function (a) {
	return {$: 1, a: a};
};
var $elm$json$Json$Decode$Failure = F2(function $elm$json$Json$Decode$Failure$fn(a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(function $elm$json$Json$Decode$Field$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(function $elm$json$Json$Decode$Index$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 0, a: a};
};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(function $elm$core$String$join$fn(sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(function $elm$core$String$split$fn(sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(function $elm$core$List$foldl$fn(func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(function $elm$core$List$rangeHelp$fn(lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(function $elm$core$List$range$fn(lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(function $elm$core$List$indexedMap$fn(f, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (var i = 0; xs.b; i++, xs = xs.b) {
    var next = _List_Cons(A2(f, i, xs.a), _List_Nil);
    end.b = next;
    end = next;
  }
  return tmp.b;
});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(function $elm$json$Json$Decode$errorOneOf$fn(i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(function $elm$json$Json$Decode$errorToStringHelp$fn(error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(function $elm$core$Array$Array_elm_builtin$fn(a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(function $elm$core$Basics$logBase$fn(base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$apL = F2(function $elm$core$Basics$apL$fn(f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(function $elm$core$Basics$apR$fn(x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(function $elm$core$Basics$max$fn(x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(function $elm$core$Array$compressNodes$fn(nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(function $elm$core$Array$treeFromBuilder$fn(nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(function $elm$core$Array$builderToArray$fn(reverseNodeList, builder) {
		if (!builder.K) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.S),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.S);
		} else {
			var treeLen = builder.K * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.Z) : builder.Z;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.K);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.S) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.S);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(function $elm$core$Array$initializeHelp$fn(fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{Z: nodeList, K: (len / $elm$core$Array$branchFactor) | 0, S: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(function $elm$core$Array$initialize$fn(len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Result$isOk = function (result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Elm$Review$Main$abort = _Platform_outgoingPort('abort', $elm$json$Json$Encode$string);
var $author$project$Elm$Review$Main$abortForConfigurationErrors = _Platform_outgoingPort('abortForConfigurationErrors', $elm$core$Basics$identity);
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(0),
			pairs));
};
var $author$project$Elm$Review$Main$abortWithDetails = _Platform_outgoingPort(
	'abortWithDetails',
	function ($) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'message',
					$elm$json$Json$Encode$string($.bx)),
					_Utils_Tuple2(
					'title',
					$elm$json$Json$Encode$string($.ej))
				]));
	});
var $elm$core$Basics$composeR = F3(function $elm$core$Basics$composeR$fn(f, g, x) {
		return g(
			f(x));
	});
var $jfmengels$elm_review_simplify$Simplify$Configuration = $elm$core$Basics$identity;
var $jfmengels$elm_review_simplify$Simplify$defaults = {eK: _List_Nil};
var $jfmengels$elm_review$Review$Rule$Rule = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Exceptions$Exceptions = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Exceptions$addFilter = F2(function $jfmengels$elm_review$Review$Exceptions$addFilter$fn(condition, _v0) {
		var conditions = _v0;
		return A2($elm$core$List$cons, condition, conditions);
	});
var $elm$core$String$endsWith = _String_endsWith;
var $elm$core$List$any = F2(function $elm$core$List$any$fn(isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $jfmengels$elm_review$Review$Exceptions$isInAnIgnoredDirectory = F2(function $jfmengels$elm_review$Review$Exceptions$isInAnIgnoredDirectory$fn(directories, path) {
		return A2(
			$elm$core$List$any,
			function (dir) {
				return A2($elm$core$String$startsWith, dir, path);
			},
			directories);
	});
var $elm$core$String$replace = F3(function $elm$core$String$replace$fn(before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $jfmengels$elm_review$Path$makeOSAgnostic = function (path) {
	return A3($elm$core$String$replace, '\\', '/', path);
};
var $elm$core$List$foldrHelper = F4(function $elm$core$List$foldrHelper$fn(fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(function $elm$core$List$foldr$fn(fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(function $elm$core$List$map$fn(f, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; xs.b; xs = xs.b) {
    var next = _List_Cons(f(xs.a), _List_Nil);
    end.b = next;
    end = next;
  }
  return tmp.b;
});
var $elm$core$Basics$not = _Basics_not;
var $jfmengels$elm_review$Review$Exceptions$addDirectories = F2(function $jfmengels$elm_review$Review$Exceptions$addDirectories$fn(directories, exceptions) {
		var cleanedDirectories = A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$jfmengels$elm_review$Path$makeOSAgnostic,
				function (dir) {
					return A2($elm$core$String$endsWith, '/', dir) ? dir : (dir + '/');
				}),
			directories);
		return A2(
			$jfmengels$elm_review$Review$Exceptions$addFilter,
			function (path) {
				return !A2($jfmengels$elm_review$Review$Exceptions$isInAnIgnoredDirectory, cleanedDirectories, path);
			},
			exceptions);
	});
var $jfmengels$elm_review$Review$Rule$ignoreErrorsForDirectories = F2(function $jfmengels$elm_review$Review$Rule$ignoreErrorsForDirectories$fn(directories, _v0) {
		var rule = _v0;
		return {
			C: A2($jfmengels$elm_review$Review$Exceptions$addDirectories, directories, rule.C),
			eI: rule.eI,
			cH: rule.cH,
			v: rule.v,
			i4: rule.i4,
			aM: rule.aM
		};
	});
var $elm$core$List$append = F2(function $elm$core$List$append$fn(xs, ys) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; xs.b; xs = xs.b) {
    var next = _List_Cons(xs.a, _List_Nil);
    end.b = next;
    end = next;
  }
  end.b = ys;

  return tmp.b;
});
var $elm$core$List$concat = function (lists) {
  if (!lists.b) {
    return _List_Nil;
  }
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; lists.b.b; lists = lists.b) {
    var xs = lists.a;
    for (; xs.b; xs = xs.b) {
      var next = _List_Cons(xs.a, _List_Nil);
      end.b = next;
      end = next;
    }
  }
  end.b = lists.a;

  return tmp.b;
};
var $elm$core$List$concatMap = F2(function $elm$core$List$concatMap$fn(f, lists) {
  if (!lists.b) {
    return _List_Nil;
  }
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; lists.b.b; lists = lists.b) {
    var xs = f(lists.a);
    for (; xs.b; xs = xs.b) {
      var next = _List_Cons(xs.a, _List_Nil);
      end.b = next;
      end = next;
    }
  }
  end.b = f(lists.a);

  return tmp.b;
});
var $stil4m$elm_syntax$Elm$Syntax$Node$value = function (_v0) {
	var v = _v0.b;
	return v;
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$declarationName = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 0:
			var _function = _v0.a;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).cH);
		case 1:
			var typeAlias = _v0.a;
			return $elm$core$Maybe$Just(typeAlias.cH);
		case 2:
			var type_ = _v0.a;
			return $elm$core$Maybe$Just(type_.cH);
		case 3:
			var signature = _v0.a;
			return $elm$core$Maybe$Just(signature.cH);
		case 4:
			var operator = _v0.a.iV;
			return $elm$core$Maybe$Just(operator);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review$Review$Rule$Error = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Error$Module = 0;
var $jfmengels$elm_review$Review$Error$NoFixes = {$: 0};
var $jfmengels$elm_review$Review$Rule$error = F2(function $jfmengels$elm_review$Review$Rule$error$fn(_v0, range) {
		var message = _v0.bx;
		var details = _v0.eq;
		return {eq: details, iu: '', dV: $jfmengels$elm_review$Review$Error$NoFixes, bx: message, e4: false, f4: range, f8: '', hO: 0};
	});
var $elm$core$List$filter = F2(function $elm$core$List$filter$fn(f, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; xs.b; xs = xs.b) {
    if (f(xs.a)) {
      var next = _List_Cons(xs.a, _List_Nil);
      end.b = next;
      end = next;
    }
  }
  return tmp.b;
});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(function $elm$core$Dict$get$fn(targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === -2) {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1) {
					case 0:
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 1:
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$member = F2(function $elm$core$Dict$member$fn(key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(function $elm$core$Set$member$fn(key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$member, key, dict);
	});
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForDocsForNonExposedElements = F2(function $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForDocsForNonExposedElements$fn(exposed, docsReferences) {
		return A2(
			$elm$core$List$map,
			function (_v1) {
				var range = _v1.a;
				var name = _v1.b;
				return A2(
					$jfmengels$elm_review$Review$Rule$error,
					{
						eq: _List_fromArray(
							['I couldn\'t find this element among the module\'s exposed elements. Maybe you removed or renamed it recently.', 'Please remove the @docs reference or update the reference to the new name.']),
						bx: 'Found @docs reference for non-exposed `' + (name + '`')
					},
					range);
			},
			A2(
				$elm$core$List$filter,
				function (_v0) {
					var name = _v0.b;
					return !A2($elm$core$Set$member, name, exposed);
				},
				docsReferences));
	});
var $elm$core$Maybe$map = F2(function $elm$core$Maybe$map$fn(f, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Tuple$pair = F2(function $elm$core$Tuple$pair$fn(a, b) {
		return _Utils_Tuple2(a, b);
	});
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docForDeclaration = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 0:
			var _function = _v0.a;
			return A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$pair('function'),
				_function.fB);
		case 1:
			var typeAlias = _v0.a;
			return A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$pair('type'),
				typeAlias.fB);
		case 2:
			var customType = _v0.a;
			return A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$pair('type'),
				customType.fB);
		case 3:
			return $elm$core$Maybe$Nothing;
		case 4:
			return $elm$core$Maybe$Nothing;
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$parser$Parser$Advanced$Good = F3(function $elm$parser$Parser$Advanced$Good$fn(a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
var $elm$parser$Parser$Advanced$getCol = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.gx, s);
};
var $elm$parser$Parser$getCol = $elm$parser$Parser$Advanced$getCol;
var $elm$core$Basics$always = F2(function $elm$core$Basics$always$fn(a, _v0) {
		return a;
	});
var $elm$parser$Parser$Advanced$Bad = F2(function $elm$parser$Parser$Advanced$Bad$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$map2 = F3(function $elm$parser$Parser$Advanced$map2$fn(func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var p = _v2.a;
				var x = _v2.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v2.a;
				var a = _v2.b;
				var s1 = _v2.c;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p1 || p2,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$ignorer = F2(function $elm$parser$Parser$Advanced$ignorer$fn(keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(function $elm$parser$Parser$Advanced$keeper$fn(parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 9, a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(function $elm$parser$Parser$Advanced$Token$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$AddRight = F2(function $elm$parser$Parser$Advanced$AddRight$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(function $elm$parser$Parser$Advanced$DeadEnd$fn(row, col, problem, contextStack) {
		return {gx: col, ih: contextStack, ht: problem, b1: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 0};
var $elm$parser$Parser$Advanced$fromState = F2(function $elm$parser$Parser$Advanced$fromState$fn(s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.b1, s.gx, x, s.p));
	});
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$parser$Parser$Advanced$keyword = function (_v0) {
	var kwd = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(kwd);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, kwd, s.h, s.b1, s.gx, s.f);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return (_Utils_eq(newOffset, -1) || (0 <= A3(
			$elm$parser$Parser$Advanced$isSubChar,
			function (c) {
				return $elm$core$Char$isAlphaNum(c) || (c === '_');
			},
			newOffset,
			s.f))) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{gx: newCol, p: s.p, t: s.t, h: newOffset, b1: newRow, f: s.f});
	};
};
var $elm$parser$Parser$keyword = function (kwd) {
	return $elm$parser$Parser$Advanced$keyword(
		A2(
			$elm$parser$Parser$Advanced$Token,
			kwd,
			$elm$parser$Parser$ExpectingKeyword(kwd)));
};
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(function $elm$parser$Parser$Advanced$chompWhileHelp$fn(isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.f);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.h, offset) < 0,
					0,
					{gx: col, p: s0.p, t: s0.t, h: offset, b1: row, f: s0.f});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return function (s) {
		return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.h, s.b1, s.gx, s);
	};
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return (c === ' ') || ((c === '\n') || (c === '\r'));
	});
var $elm$parser$Parser$spaces = $elm$parser$Parser$Advanced$spaces;
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, a, s);
	};
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docsWithSpacesParser = function (row) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(
					F2(
						function (startColumn, endColumn) {
							return {
								c4: {bH: endColumn, b1: row},
								dv: {bH: startColumn, b1: row}
							};
						})),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$getCol,
				$elm$parser$Parser$keyword('@docs'))),
		$elm$parser$Parser$getCol);
};
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$indexedConcatMap = F2(function $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$indexedConcatMap$fn(_function, list) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (a, _v0) {
					var index = _v0.a;
					var acc = _v0.b;
					return _Utils_Tuple2(
						index + 1,
						A2(
							$elm$core$List$append,
							A2(_function, index, a),
							acc));
				}),
			_Utils_Tuple2(0, _List_Nil),
			list).b;
	});
var $elm$core$String$lines = _String_lines;
var $elm$core$Result$map = F2(function $elm$core$Result$map$fn(func, ra) {
		if (!ra.$) {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$parser$Parser$DeadEnd = F3(function $elm$parser$Parser$DeadEnd$fn(row, col, problem) {
		return {gx: col, ht: problem, b1: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.b1, p.gx, p.ht);
};
var $elm$parser$Parser$Advanced$bagToList = F2(function $elm$parser$Parser$Advanced$bagToList$fn(bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 0:
					return list;
				case 1:
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(function $elm$parser$Parser$Advanced$run$fn(_v0, src) {
		var parse = _v0;
		var _v1 = parse(
			{gx: 1, p: _List_Nil, t: 1, h: 0, b1: 1, f: src});
		if (!_v1.$) {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(function $elm$parser$Parser$run$fn(parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (!_v0.$) {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $elm$core$Result$withDefault = F2(function $elm$core$Result$withDefault$fn(def, result) {
		if (!result.$) {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForDocsInDeclarationDoc = function (node) {
	var _v0 = $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docForDeclaration(node);
	if (!_v0.$) {
		var _v1 = _v0.a;
		var declarationType = _v1.a;
		var _v2 = _v1.b;
		var docRange = _v2.a;
		var docContent = _v2.b;
		return A2(
			$jfmengels$elm_review_documentation$Docs$ReviewAtDocs$indexedConcatMap,
			F2(
				function (lineNumber, lineContent) {
					return A2(
						$elm$core$Result$withDefault,
						_List_Nil,
						A2(
							$elm$core$Result$map,
							function (range) {
								return _List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Rule$error,
										{
											eq: _List_fromArray(
												['@docs can only be used in the module\'s documentation. You should remove this @docs and move it there.']),
											bx: 'Found usage of @docs in a ' + (declarationType + ' documentation')
										},
										range)
									]);
							},
							A2(
								$elm$parser$Parser$run,
								$jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docsWithSpacesParser(lineNumber + docRange.dv.b1),
								lineContent)));
				}),
			$elm$core$String$lines(docContent));
	} else {
		return _List_Nil;
	}
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: -2};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin = F5(function $elm$core$Dict$RBNode_elm_builtin$fn(a, b, c, d, e) {
		return {$: -1, a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance = F5(function $elm$core$Dict$balance$fn(color, key, value, left, right) {
		if ((right.$ === -1) && (!right.a)) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === -1) && (!left.a)) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(function $elm$core$Dict$insertHelp$fn(key, value, dict) {
		if (dict.$ === -2) {
			return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1) {
				case 0:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 1:
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(function $elm$core$Dict$insert$fn(key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Set$insert = F2(function $elm$core$Set$insert$fn(key, _v0) {
		var dict = _v0;
		return A3($elm$core$Dict$insert, key, 0, dict);
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $elm$core$Tuple$mapSecond = F2(function $elm$core$Tuple$mapSecond$fn(func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForDuplicateDocs = function (docsReferences) {
	return A2(
		$elm$core$Tuple$mapSecond,
		A2($elm$core$Basics$composeR, $elm$core$Dict$keys, $elm$core$Set$fromList),
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, _v1) {
					var range = _v0.a;
					var name = _v0.b;
					var errors = _v1.a;
					var previouslyFoundNames = _v1.b;
					var _v2 = A2($elm$core$Dict$get, name, previouslyFoundNames);
					if (!_v2.$) {
						var lineNumber = _v2.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(
									$jfmengels$elm_review$Review$Rule$error,
									{
										eq: _List_fromArray(
											[
												'An element should only be referenced once, but I found a previous reference to it on line ' + ($elm$core$String$fromInt(lineNumber) + '. Please remove one of them.')
											]),
										bx: 'Found duplicate @docs reference for `element`'
									},
									range),
								errors),
							previouslyFoundNames);
					} else {
						return _Utils_Tuple2(
							errors,
							A3($elm$core$Dict$insert, name, range.dv.b1, previouslyFoundNames));
					}
				}),
			_Utils_Tuple2(_List_Nil, $elm$core$Dict$empty),
			docsReferences));
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForExposedElementsWithoutADocsReference = F2(function $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForExposedElementsWithoutADocsReference$fn(allDocsReferences, exposedNodes) {
		return A2(
			$elm$core$List$map,
			function (_v1) {
				var range = _v1.a;
				var name = _v1.b;
				return A2(
					$jfmengels$elm_review$Review$Rule$error,
					{
						eq: _List_fromArray(
							['There is no @docs reference for this element. Maybe you exposed or renamed it recently.', 'Please add a @docs reference to it the module documentation (the one at the top of the module) like this:', '{-|\n@docs ' + (name + '\n-}')]),
						bx: 'Missing @docs reference for exposed `' + (name + '`')
					},
					range);
			},
			A2(
				$elm$core$List$filter,
				function (_v0) {
					var name = _v0.b;
					return !A2($elm$core$Set$member, name, allDocsReferences);
				},
				exposedNodes));
	});
var $elm$core$List$maybeCons = F3(function $elm$core$List$maybeCons$fn(f, mx, xs) {
		var _v0 = f(mx);
		if (!_v0.$) {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(function $elm$core$List$filterMap$fn(f, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; xs.b; xs = xs.b) {
    var m = f(xs.a);
    if (!m.$) {
      var next = _List_Cons(m.a, _List_Nil);
      end.b = next;
      end = next;
    }
  }
  return tmp.b;
});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $stil4m$elm_syntax$Elm$Syntax$Node$Node = F2(function $stil4m$elm_syntax$Elm$Syntax$Node$Node$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$topLevelExposeName = function (_v0) {
	var range = _v0.a;
	var topLevelExpose = _v0.b;
	switch (topLevelExpose.$) {
		case 0:
			var name = topLevelExpose.a;
			return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, name);
		case 1:
			var name = topLevelExpose.a;
			return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, name);
		case 2:
			var name = topLevelExpose.a;
			return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, name);
		default:
			var name = topLevelExpose.a.cH;
			return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, name);
	}
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$declarationListVisitor = F2(function $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$declarationListVisitor$fn(nodes, context) {
		if (context.eH || ($elm$core$List$isEmpty(context.c1) && (!context.eW))) {
			return A2($elm$core$List$concatMap, $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForDocsInDeclarationDoc, nodes);
		} else {
			var exposedNodes = function () {
				var _v1 = context.ex;
				if (!_v1.$) {
					return A2($elm$core$List$filterMap, $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$declarationName, nodes);
				} else {
					var explicit = _v1.a;
					return A2($elm$core$List$map, $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$topLevelExposeName, explicit);
				}
			}();
			var exposed = $elm$core$Set$fromList(
				A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, exposedNodes));
			var _v0 = $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForDuplicateDocs(context.c1);
			var duplicateDocErrors = _v0.a;
			var referencedElements = _v0.b;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						A2($jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForDocsForNonExposedElements, exposed, context.c1),
						A2($jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForExposedElementsWithoutADocsReference, referencedElements, exposedNodes),
						A2($elm$core$List$concatMap, $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$errorsForDocsInDeclarationDoc, nodes),
						duplicateDocErrors
					]));
		}
	});
var $elm$project_metadata_utils$Elm$Module$toString = function (_v0) {
	var name = _v0;
	return name;
};
var $jfmengels$elm_review_documentation$Docs$Utils$ExposedFromProject$exposedModules = function (project) {
	if (project.$ === 1) {
		var _package = project.a;
		var _v1 = _package.gQ;
		if (!_v1.$) {
			var list = _v1.a;
			return $elm$core$Set$fromList(
				A2($elm$core$List$map, $elm$project_metadata_utils$Elm$Module$toString, list));
		} else {
			var list = _v1.a;
			return $elm$core$Set$fromList(
				A2(
					$elm$core$List$map,
					$elm$project_metadata_utils$Elm$Module$toString,
					A2($elm$core$List$concatMap, $elm$core$Tuple$second, list)));
		}
	} else {
		return $elm$core$Set$empty;
	}
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$elmJsonVisitor = F2(function $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$elmJsonVisitor$fn(maybeProject, context) {
		var exposedModules = function () {
			if (!maybeProject.$) {
				var project = maybeProject.a;
				return $jfmengels$elm_review_documentation$Docs$Utils$ExposedFromProject$exposedModules(project);
			} else {
				return $elm$core$Set$empty;
			}
		}();
		return _Utils_update(
			context,
			{ey: exposedModules});
	});
var $jfmengels$elm_review$Review$Rule$AllModulesInParallel = 0;
var $jfmengels$elm_review$Review$Rule$ProjectRuleSchema = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$compactProjectDataVisitors = F2(function $jfmengels$elm_review$Review$Rule$compactProjectDataVisitors$fn(getData, maybeVisitor) {
		if (maybeVisitor.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeVisitor.a;
			return $elm$core$Maybe$Just(
				F2(
					function (rawData, moduleContext) {
						return _Utils_Tuple2(
							_List_Nil,
							A2(
								visitor,
								getData(rawData),
								moduleContext));
					}));
		}
	});
var $jfmengels$elm_review$Review$RequestedData$RequestedData = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$RequestedData$combineJust = F2(function $jfmengels$elm_review$Review$RequestedData$combineJust$fn(_v0, _v1) {
		var a = _v0;
		var b = _v1;
		return {fP: a.fP || b.fP, eZ: a.eZ || b.eZ, fg: a.fg || b.fg};
	});
var $jfmengels$elm_review$Review$RequestedData$none = {fP: false, eZ: false, fg: false};
var $elm$core$Maybe$withDefault = F2(function $elm$core$Maybe$withDefault$fn(_default, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $jfmengels$elm_review$Review$RequestedData$combine = F2(function $jfmengels$elm_review$Review$RequestedData$combine$fn(maybeA, maybeB) {
		if (maybeA.$ === 1) {
			return A2($elm$core$Maybe$withDefault, $jfmengels$elm_review$Review$RequestedData$none, maybeB);
		} else {
			var a = maybeA.a;
			if (!maybeB.$) {
				var b = maybeB.a;
				return A2($jfmengels$elm_review$Review$RequestedData$combineJust, a, b);
			} else {
				return a;
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$RuleProjectVisitor = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$TraverseImportedModulesFirst = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Cache$ProjectFile$outputContext = function (_v0) {
	var entry = _v0;
	return entry.e1;
};
var $jfmengels$elm_review$Review$Cache$ProjectFile$outputContextHash = function (_v0) {
	var entry = _v0;
	return entry.hs;
};
var $jfmengels$elm_review$Review$Rule$findInitialInputContext = F2(function $jfmengels$elm_review$Review$Rule$findInitialInputContext$fn(defaultContext, possibleInputContexts) {
		findInitialInputContext:
		while (true) {
			if (!possibleInputContexts.b) {
				return _Utils_Tuple2(_List_Nil, defaultContext);
			} else {
				if (!possibleInputContexts.a.$) {
					var cacheEntry = possibleInputContexts.a.a;
					return _Utils_Tuple2(
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Cache$ProjectFile$outputContextHash(cacheEntry)
							]),
						$jfmengels$elm_review$Review$Cache$ProjectFile$outputContext(cacheEntry));
				} else {
					var _v1 = possibleInputContexts.a;
					var rest = possibleInputContexts.b;
					var $temp$defaultContext = defaultContext,
						$temp$possibleInputContexts = rest;
					defaultContext = $temp$defaultContext;
					possibleInputContexts = $temp$possibleInputContexts;
					continue findInitialInputContext;
				}
			}
		}
	});
var $elm$core$Dict$foldl = F3(function $elm$core$Dict$foldl$fn(func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === -2) {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$getFolderFromTraversal = function (traversalAndFolder) {
	if (!traversalAndFolder.$) {
		var maybeFolder = traversalAndFolder.a;
		return maybeFolder;
	} else {
		var folder = traversalAndFolder.a;
		return $elm$core$Maybe$Just(folder);
	}
};
var $jfmengels$elm_review$Review$Cache$Module$outputContext = function (_v0) {
	var entry = _v0;
	return entry.e1;
};
var $jfmengels$elm_review$Review$Rule$computeFinalContext = F2(function $jfmengels$elm_review$Review$Rule$computeFinalContext$fn(schema, cache) {
		var traversalAndFolder = function () {
			var _v3 = _Utils_Tuple2(schema.b6, schema.ay);
			if (!_v3.a) {
				var _v4 = _v3.a;
				return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel(schema.ay);
			} else {
				if (!_v3.b.$) {
					var _v5 = _v3.a;
					var folder = _v3.b.a;
					return $jfmengels$elm_review$Review$Rule$TraverseImportedModulesFirst(folder);
				} else {
					var _v6 = _v3.a;
					var _v7 = _v3.b;
					return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel($elm$core$Maybe$Nothing);
				}
			}
		}();
		var _v0 = A2(
			$jfmengels$elm_review$Review$Rule$findInitialInputContext,
			schema.aR,
			_List_fromArray(
				[cache.gF, cache.f6, cache.es]));
		var projectContext = _v0.b;
		var _v1 = $jfmengels$elm_review$Review$Rule$getFolderFromTraversal(traversalAndFolder);
		if (!_v1.$) {
			var foldProjectContexts = _v1.a.cl;
			return A3(
				$elm$core$Dict$foldl,
				F3(
					function (_v2, cacheEntry, acc) {
						return A2(
							foldProjectContexts,
							$jfmengels$elm_review$Review$Cache$Module$outputContext(cacheEntry),
							acc);
					}),
				projectContext,
				cache.aj);
		} else {
			return projectContext;
		}
	});
var $jfmengels$elm_review$Review$Cache$Module$outputContextHash = function (_v0) {
	var entry = _v0;
	return entry.hs;
};
var $jfmengels$elm_review$Review$Cache$ContextHash$ComparableContextHash = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$ContextHash$sort = function(l) { return $elm$core$List$sort(l); }
var $jfmengels$elm_review$Review$Cache$ContextHash$toComparable = function (list) {
	return $jfmengels$elm_review$Review$Cache$ContextHash$sort(list);
};
var $jfmengels$elm_review$Review$Rule$computeFinalContextHashes = F2(function $jfmengels$elm_review$Review$Rule$computeFinalContextHashes$fn(schema, cache) {
		var traversalAndFolder = function () {
			var _v3 = _Utils_Tuple2(schema.b6, schema.ay);
			if (!_v3.a) {
				var _v4 = _v3.a;
				return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel(schema.ay);
			} else {
				if (!_v3.b.$) {
					var _v5 = _v3.a;
					var folder = _v3.b.a;
					return $jfmengels$elm_review$Review$Rule$TraverseImportedModulesFirst(folder);
				} else {
					var _v6 = _v3.a;
					var _v7 = _v3.b;
					return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel($elm$core$Maybe$Nothing);
				}
			}
		}();
		var _v0 = A2(
			$jfmengels$elm_review$Review$Rule$findInitialInputContext,
			schema.aR,
			_List_fromArray(
				[cache.gF, cache.f6, cache.es]));
		var projectContextHash = _v0.a;
		var _v1 = $jfmengels$elm_review$Review$Rule$getFolderFromTraversal(traversalAndFolder);
		if (!_v1.$) {
			return $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(
				A3(
					$elm$core$Dict$foldl,
					F3(
						function (_v2, cacheEntry, acc) {
							return A2(
								$elm$core$List$cons,
								$jfmengels$elm_review$Review$Cache$Module$outputContextHash(cacheEntry),
								acc);
						}),
					projectContextHash,
					cache.aj));
		} else {
			return $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(projectContextHash);
		}
	});
var $jfmengels$elm_review$Review$Cache$EndAnalysis$Entry = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$EndAnalysis$create = F2(function $jfmengels$elm_review$Review$Cache$EndAnalysis$create$fn(inputContextHashes, output_) {
		return {eL: inputContextHashes, f1: output_};
	});
var $jfmengels$elm_review$Review$Cache$EndAnalysis$match = F2(function $jfmengels$elm_review$Review$Cache$EndAnalysis$match$fn(context, _v0) {
		var entry = _v0;
		return _Utils_eq(context, entry.eL);
	});
var $jfmengels$elm_review$Review$Cache$EndAnalysis$output = function (_v0) {
	var entry = _v0;
	return entry.f1;
};
var $jfmengels$elm_review$Review$Rule$reuseProjectRuleCache = F3(function $jfmengels$elm_review$Review$Rule$reuseProjectRuleCache$fn(predicate, getter, cache) {
		var _v0 = getter(cache);
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var value = _v0.a;
			return predicate(value) ? $elm$core$Maybe$Just(value) : $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Review$Rule$createDataExtractVisitor = F3(function $jfmengels$elm_review$Review$Rule$createDataExtractVisitor$fn(schema, raise, cache) {
		var _v0 = schema.c_;
		if (_v0.$ === 1) {
			return F2(
				function (_v1, extracts) {
					return _Utils_Tuple2(
						extracts,
						raise(cache));
				});
		} else {
			var dataExtractor = _v0.a;
			return F2(
				function (reviewOptions, extracts) {
					if (reviewOptions.gT) {
						var inputContextHashes = A2($jfmengels$elm_review$Review$Rule$computeFinalContextHashes, schema, cache);
						var cachePredicate = function (extract) {
							return A2($jfmengels$elm_review$Review$Cache$EndAnalysis$match, inputContextHashes, extract);
						};
						var _v2 = function () {
							var _v3 = A3(
								$jfmengels$elm_review$Review$Rule$reuseProjectRuleCache,
								cachePredicate,
								function ($) {
									return $.gT;
								},
								cache);
							if (!_v3.$) {
								var entry = _v3.a;
								return _Utils_Tuple2(
									$jfmengels$elm_review$Review$Cache$EndAnalysis$output(entry),
									cache);
							} else {
								var inputContext = A2($jfmengels$elm_review$Review$Rule$computeFinalContext, schema, cache);
								var extract = dataExtractor(inputContext);
								return _Utils_Tuple2(
									extract,
									_Utils_update(
										cache,
										{
											gT: $elm$core$Maybe$Just(
												A2($jfmengels$elm_review$Review$Cache$EndAnalysis$create, inputContextHashes, extract))
										}));
							}
						}();
						var extractData = _v2.a;
						var newCache = _v2.b;
						return _Utils_Tuple2(
							A3($elm$core$Dict$insert, schema.cH, extractData, extracts),
							raise(newCache));
					} else {
						return _Utils_Tuple2(
							extracts,
							raise(cache));
					}
				});
		}
	});
var $jfmengels$elm_review$Review$Cache$ProjectFile$Entry = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$ContextHash$ContextHash = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$ContextHash$createContextHashMarker = function (context) {
  return jsonToHash(contextToJson(context));
};

const stringifyMap = new WeakMap();
function contextToJson(context) {
  const isObject = typeof context === 'object';
  if (!isObject) {
    return JSON.stringify(context);
  }
  if (stringifyMap.has(context)) {
    return stringifyMap.get(context);
  } else {
    const json = JSON.stringify(context, global.elmJsonReplacer);
    stringifyMap.set(context, json);
    return json;
  }
}

const contextHashMap = new Map();
function jsonToHash(json) {
  if (contextHashMap.has(json)) {
    return contextHashMap.get(json);
  }
  const hash = A2($jfmengels$elm_review$Vendor$Murmur3$hashString, 0, json);
  contextHashMap.set(json, hash);
  return hash;
}
var $jfmengels$elm_review$Review$Cache$ContextHash$create = function (context) {
	return $jfmengels$elm_review$Review$Cache$ContextHash$createContextHashMarker(context);
};
var $jfmengels$elm_review$Review$Cache$ProjectFile$create = function (entry) {
	return {
		fu: entry.fu,
		bO: entry.bO,
		fS: entry.fS,
		e1: entry.e1,
		hs: $jfmengels$elm_review$Review$Cache$ContextHash$create(entry.e1)
	};
};
var $jfmengels$elm_review$Review$Project$Valid$elmJsonHash = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$second, project.es);
};
var $jfmengels$elm_review$Review$Project$Valid$dependenciesHash = $jfmengels$elm_review$Review$Project$Valid$elmJsonHash;
var $jfmengels$elm_review$Review$Cache$ProjectFile$errors = function (_v0) {
	var entry = _v0;
	return entry.bO;
};
var $jfmengels$elm_review$Review$Rule$errorFilePathInternal = function (_v0) {
	var err = _v0;
	return err.iu;
};
var $elm$core$Basics$composeL = F3(function $elm$core$Basics$composeL$fn(g, f, x) {
		return g(
			f(x));
	});
var $elm$core$List$all = F2(function $elm$core$List$all$fn(isOkay, list) {
  all: while (true) {
    if (!list.b) {
      return true;
    }
    else {
      var x = list.a;
      if (!isOkay(x)) {
        return false;
      }
      list = list.b;
      continue all;
    }
  }
});
var $jfmengels$elm_review$Review$Exceptions$isFileWeWantReportsFor = F2(function $jfmengels$elm_review$Review$Exceptions$isFileWeWantReportsFor$fn(_v0, filePath) {
		var conditions = _v0;
		var allConditions = function (path) {
			return A2(
				$elm$core$List$all,
				function (condition) {
					return condition(path);
				},
				conditions);
		};
		return allConditions(
			$jfmengels$elm_review$Path$makeOSAgnostic(filePath));
	});
var $jfmengels$elm_review$Review$Rule$mapInternalError = F2(function $jfmengels$elm_review$Review$Rule$mapInternalError$fn(fn, _v0) {
		var err = _v0;
		return fn(err);
	});
var $jfmengels$elm_review$Review$Rule$setRuleName = F2(function $jfmengels$elm_review$Review$Rule$setRuleName$fn(ruleName_, error_) {
		return A2(
			$jfmengels$elm_review$Review$Rule$mapInternalError,
			function (err) {
				return _Utils_update(
					err,
					{f8: ruleName_});
			},
			error_);
	});
var $jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName = F3(function $jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName$fn(exceptions, name, errors) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (error_, acc) {
					return A2(
						$jfmengels$elm_review$Review$Exceptions$isFileWeWantReportsFor,
						exceptions,
						$jfmengels$elm_review$Review$Rule$errorFilePathInternal(error_)) ? A2(
						$elm$core$List$cons,
						A2($jfmengels$elm_review$Review$Rule$setRuleName, name, error_),
						acc) : acc;
				}),
			_List_Nil,
			errors);
	});
var $jfmengels$elm_review$Review$Cache$ContentHash$areEqualForMaybe = F2(function $jfmengels$elm_review$Review$Cache$ContentHash$areEqualForMaybe$fn(a, b) {
		var _v0 = _Utils_Tuple2(a, b);
		_v0$2:
		while (true) {
			if (!_v0.a.$) {
				if (!_v0.b.$) {
					var a_ = _v0.a.a;
					var b_ = _v0.b.a;
					return _Utils_eq(a_, b_);
				} else {
					break _v0$2;
				}
			} else {
				if (_v0.b.$ === 1) {
					var _v1 = _v0.a;
					var _v2 = _v0.b;
					return true;
				} else {
					break _v0$2;
				}
			}
		}
		return false;
	});
var $jfmengels$elm_review$Review$Cache$ProjectFile$match = F3(function $jfmengels$elm_review$Review$Cache$ProjectFile$match$fn(contentHash, contexts, _v0) {
		var entry = _v0;
		return A2($jfmengels$elm_review$Review$Cache$ContentHash$areEqualForMaybe, contentHash, entry.fu) && _Utils_eq(contexts, entry.fS);
	});
var $jfmengels$elm_review$Review$Rule$createDependenciesVisitor = F5(function $jfmengels$elm_review$Review$Rule$createDependenciesVisitor$fn(schema, _v0, raise, cache, _v1) {
		var exceptions = _v0.C;
		var allVisitor = _v1.gr;
		var directVisitor = _v1.gL;
		var _v2 = _Utils_Tuple2(allVisitor, directVisitor);
		if ((_v2.a.$ === 1) && (_v2.b.$ === 1)) {
			var _v3 = _v2.a;
			var _v4 = _v2.b;
			return $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Just(
				F2(
					function (project, _v5) {
						var all = _v5.ab;
						var direct = _v5.gK;
						var dependenciesHash = $jfmengels$elm_review$Review$Project$Valid$dependenciesHash(project);
						var _v6 = A2(
							$jfmengels$elm_review$Review$Rule$findInitialInputContext,
							schema.aR,
							_List_fromArray(
								[cache.f6, cache.es]));
						var baseInputContextHash = _v6.a;
						var inputContext = _v6.b;
						var inputContextHash = $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(baseInputContextHash);
						var cachePredicate = function (entry) {
							return A3($jfmengels$elm_review$Review$Cache$ProjectFile$match, dependenciesHash, inputContextHash, entry);
						};
						var _v7 = A3(
							$jfmengels$elm_review$Review$Rule$reuseProjectRuleCache,
							cachePredicate,
							function ($) {
								return $.gF;
							},
							cache);
						if (!_v7.$) {
							var entry = _v7.a;
							return _Utils_Tuple2(
								$jfmengels$elm_review$Review$Cache$ProjectFile$errors(entry),
								raise(cache));
						} else {
							var _v8 = function () {
								if (!directVisitor.$) {
									var directVisitor_ = directVisitor.a;
									return A2(directVisitor_, direct, inputContext);
								} else {
									return _Utils_Tuple2(_List_Nil, inputContext);
								}
							}();
							var errorsForDirect = _v8.a;
							var outputContextForDirect = _v8.b;
							var _v10 = function () {
								if (!allVisitor.$) {
									var allVisitor_ = allVisitor.a;
									return A2(allVisitor_, all, outputContextForDirect);
								} else {
									return _Utils_Tuple2(_List_Nil, outputContextForDirect);
								}
							}();
							var errorsForIndirect = _v10.a;
							var finalOutputContext = _v10.b;
							var errors = A3(
								$jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName,
								exceptions,
								schema.cH,
								A2($elm$core$List$append, errorsForIndirect, errorsForDirect));
							var dependenciesEntry = $jfmengels$elm_review$Review$Cache$ProjectFile$create(
								{fu: dependenciesHash, bO: errors, fS: inputContextHash, e1: finalOutputContext});
							return _Utils_Tuple2(
								errors,
								raise(
									_Utils_update(
										cache,
										{
											gF: $elm$core$Maybe$Just(dependenciesEntry)
										})));
						}
					}));
		}
	});
var $jfmengels$elm_review$Review$Rule$createFinalProjectEvaluationVisitor = F4(function $jfmengels$elm_review$Review$Rule$createFinalProjectEvaluationVisitor$fn(schema, _v0, raise, cache) {
		var exceptions = _v0.C;
		var _v1 = schema.aq;
		if (_v1.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var finalEvaluationFn = _v1.a;
			return $elm$core$Maybe$Just(
				function (_v2) {
					var inputContextHashes = A2($jfmengels$elm_review$Review$Rule$computeFinalContextHashes, schema, cache);
					var cachePredicate = function (entry) {
						return A2($jfmengels$elm_review$Review$Cache$EndAnalysis$match, inputContextHashes, entry);
					};
					var _v3 = A3(
						$jfmengels$elm_review$Review$Rule$reuseProjectRuleCache,
						cachePredicate,
						function ($) {
							return $.cg;
						},
						cache);
					if (!_v3.$) {
						var entry = _v3.a;
						return _Utils_Tuple2(
							$jfmengels$elm_review$Review$Cache$EndAnalysis$output(entry),
							raise(cache));
					} else {
						var errors = A3(
							$jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName,
							exceptions,
							schema.cH,
							finalEvaluationFn(
								A2($jfmengels$elm_review$Review$Rule$computeFinalContext, schema, cache)));
						return _Utils_Tuple2(
							errors,
							raise(
								_Utils_update(
									cache,
									{
										cg: $elm$core$Maybe$Just(
											A2($jfmengels$elm_review$Review$Cache$EndAnalysis$create, inputContextHashes, errors))
									})));
					}
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$applyContextCreator = F4(function $jfmengels$elm_review$Review$Rule$applyContextCreator$fn(data, isFileIgnored, _v0, from) {
		var fn = _v0.a;
		return A3(fn, data, isFileIgnored, from);
	});
var $elm$core$Maybe$andThen = F2(function $elm$core$Maybe$andThen$fn(callback, maybeValue) {
		if (!maybeValue.$) {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$foldl = F3(function $jfmengels$elm_review$Vendor$IntDict$foldl$fn(f, acc, dict) {
		foldl:
		while (true) {
			switch (dict.$) {
				case 0:
					return acc;
				case 1:
					var l = dict.a;
					return A3(f, l.d_, l.e, acc);
				default:
					var i = dict.a;
					var $temp$f = f,
						$temp$acc = A3($jfmengels$elm_review$Vendor$IntDict$foldl, f, acc, i.k),
						$temp$dict = i.l;
					f = $temp$f;
					acc = $temp$acc;
					dict = $temp$dict;
					continue foldl;
			}
		}
	});
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$core$Bitwise$complement = _Bitwise_complement;
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $jfmengels$elm_review$Vendor$IntDict$highestBitSet = function (n) {
	var shiftOr = F2(function shiftOr$fn(i, shift) {
			return i | (i >>> shift);
		});
	var n1 = A2(shiftOr, n, 1);
	var n2 = A2(shiftOr, n1, 2);
	var n3 = A2(shiftOr, n2, 4);
	var n4 = A2(shiftOr, n3, 8);
	var n5 = A2(shiftOr, n4, 16);
	return n5 & (~(n5 >>> 1));
};
var $jfmengels$elm_review$Vendor$IntDict$signBit = $jfmengels$elm_review$Vendor$IntDict$highestBitSet(-1);
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet = function (p) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Bitwise$xor($jfmengels$elm_review$Vendor$IntDict$signBit),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Bitwise$and(p.cW),
			$elm$core$Basics$neq(0)));
};
var $jfmengels$elm_review$Vendor$IntDict$higherBitMask = function (branchingBit) {
	return branchingBit ^ (~(branchingBit - 1));
};
var $jfmengels$elm_review$Vendor$IntDict$prefixMatches = F2(function $jfmengels$elm_review$Vendor$IntDict$prefixMatches$fn(p, n) {
		return _Utils_eq(
			n & $jfmengels$elm_review$Vendor$IntDict$higherBitMask(p.cW),
			p.bf);
	});
var $jfmengels$elm_review$Vendor$IntDict$get = F2(function $jfmengels$elm_review$Vendor$IntDict$get$fn(key, dict) {
		get:
		while (true) {
			switch (dict.$) {
				case 0:
					return $elm$core$Maybe$Nothing;
				case 1:
					var l = dict.a;
					return _Utils_eq(l.d_, key) ? $elm$core$Maybe$Just(l.e) : $elm$core$Maybe$Nothing;
				default:
					var i = dict.a;
					if (!A2($jfmengels$elm_review$Vendor$IntDict$prefixMatches, i.q, key)) {
						return $elm$core$Maybe$Nothing;
					} else {
						if (A2($jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet, i.q, key)) {
							var $temp$key = key,
								$temp$dict = i.l;
							key = $temp$key;
							dict = $temp$dict;
							continue get;
						} else {
							var $temp$key = key,
								$temp$dict = i.k;
							key = $temp$key;
							dict = $temp$dict;
							continue get;
						}
					}
			}
		}
	});
var $jfmengels$elm_review$Vendor$Graph$unGraph = function (graph) {
	var rep = graph;
	return rep;
};
var $jfmengels$elm_review$Vendor$Graph$get = function (nodeId) {
	return A2(
		$elm$core$Basics$composeR,
		$jfmengels$elm_review$Vendor$Graph$unGraph,
		$jfmengels$elm_review$Vendor$IntDict$get(nodeId));
};
var $jfmengels$elm_review$Review$Project$Valid$moduleGraph = function (_v0) {
	var project = _v0;
	return project.hi;
};
var $jfmengels$elm_review$Review$Rule$computeProjectContext = F5(function $jfmengels$elm_review$Review$Rule$computeProjectContext$fn(traversalAndFolder, project, cache, incoming, initial) {
		if (!traversalAndFolder.$) {
			return initial;
		} else {
			var foldProjectContexts = traversalAndFolder.a.cl;
			var graph = $jfmengels$elm_review$Review$Project$Valid$moduleGraph(project);
			return A3(
				$jfmengels$elm_review$Vendor$IntDict$foldl,
				F3(
					function (key, _v1, accContext) {
						var _v2 = A2(
							$elm$core$Maybe$andThen,
							function (graphModule) {
								return A2($elm$core$Dict$get, graphModule.ho.d$, cache);
							},
							A2($jfmengels$elm_review$Vendor$Graph$get, key, graph));
						if (!_v2.$) {
							var importedModuleCache = _v2.a;
							return A2(
								foldProjectContexts,
								$jfmengels$elm_review$Review$Cache$Module$outputContext(importedModuleCache),
								accContext);
						} else {
							return accContext;
						}
					}),
				initial,
				incoming);
		}
	});
var $jfmengels$elm_review$Review$Rule$computeProjectContextHashes = F5(function $jfmengels$elm_review$Review$Rule$computeProjectContextHashes$fn(traversalAndFolder, project, cache, incoming, initial) {
		if (!traversalAndFolder.$) {
			return $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(initial);
		} else {
			var graph = $jfmengels$elm_review$Review$Project$Valid$moduleGraph(project);
			return $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(
				A3(
					$jfmengels$elm_review$Vendor$IntDict$foldl,
					F3(
						function (key, _v1, acc) {
							var _v2 = A2(
								$elm$core$Maybe$andThen,
								function (graphModule) {
									return A2($elm$core$Dict$get, graphModule.ho.d$, cache);
								},
								A2($jfmengels$elm_review$Vendor$Graph$get, key, graph));
							if (!_v2.$) {
								var importedModuleCache = _v2.a;
								return A2(
									$elm$core$List$cons,
									$jfmengels$elm_review$Review$Cache$Module$outputContextHash(importedModuleCache),
									acc);
							} else {
								return acc;
							}
						}),
					initial,
					incoming));
		}
	});
var $jfmengels$elm_review$Review$Cache$Module$Entry = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$Module$create = function (entry) {
	return {
		fu: entry.fu,
		bO: entry.bO,
		eL: entry.eL,
		eN: entry.eN,
		e1: entry.e1,
		hs: $jfmengels$elm_review$Review$Cache$ContextHash$create(entry.e1)
	};
};
var $jfmengels$elm_review$Review$Rule$RuleModuleVisitor = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$qualifyError = F3(function $jfmengels$elm_review$Review$Rule$qualifyError$fn(params, _v0, acc) {
		var err = _v0;
		var newError = (err.iu === '') ? _Utils_update(
			err,
			{iu: params.iu}) : err;
		return A2($jfmengels$elm_review$Review$Exceptions$isFileWeWantReportsFor, params.C, newError.iu) ? A2(
			$elm$core$List$cons,
			A2($jfmengels$elm_review$Review$Rule$setRuleName, params.f8, newError),
			acc) : acc;
	});
var $jfmengels$elm_review$Review$Rule$qualifyErrors = F3(function $jfmengels$elm_review$Review$Rule$qualifyErrors$fn(params, errors, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (err, subAcc) {
					return A3($jfmengels$elm_review$Review$Rule$qualifyError, params, err, subAcc);
				}),
			acc,
			errors);
	});
var $jfmengels$elm_review$Review$Rule$createFinalModuleEvaluationVisitor = F4(function $jfmengels$elm_review$Review$Rule$createFinalModuleEvaluationVisitor$fn(params, raise, errorsAndContext, maybeVisitor) {
		if (maybeVisitor.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeVisitor.a;
			return $elm$core$Maybe$Just(
				function (_v1) {
					var _v2 = errorsAndContext;
					var errors = _v2.a;
					var context = _v2.b;
					return raise(
						_Utils_Tuple2(
							A3(
								$jfmengels$elm_review$Review$Rule$qualifyErrors,
								params,
								visitor(context),
								errors),
							context));
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$accumulate = F3(function $jfmengels$elm_review$Review$Rule$accumulate$fn(params, visitor, _v0) {
		var previousErrors = _v0.a;
		var previousContext = _v0.b;
		var _v1 = visitor(previousContext);
		var newErrors = _v1.a;
		var newContext = _v1.b;
		return _Utils_Tuple2(
			A3($jfmengels$elm_review$Review$Rule$qualifyErrors, params, newErrors, previousErrors),
			newContext);
	});
var $jfmengels$elm_review$Review$Rule$createImportsVisitor = F4(function $jfmengels$elm_review$Review$Rule$createImportsVisitor$fn(params, raise, errorsAndContext, maybeImportVisitors) {
		if (maybeImportVisitors.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeImportVisitors.a;
			return $elm$core$Maybe$Just(
				function (imports) {
					return raise(
						A3(
							$elm$core$List$foldl,
							F2(
								function (import_, initialErrorsAndContext) {
									return A3(
										$jfmengels$elm_review$Review$Rule$accumulate,
										params,
										visitor(import_),
										initialErrorsAndContext);
								}),
							errorsAndContext,
							imports));
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$createVisitor = F4(function $jfmengels$elm_review$Review$Rule$createVisitor$fn(params, raise, errorsAndContext, maybeVisitor) {
		if (maybeVisitor.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeVisitor.a;
			return $elm$core$Maybe$Just(
				function (node) {
					return raise(
						A3(
							$jfmengels$elm_review$Review$Rule$accumulate,
							params,
							visitor(node),
							errorsAndContext));
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$createVisitor2 = F4(function $jfmengels$elm_review$Review$Rule$createVisitor2$fn(params, raise, errorsAndContext, maybeVisitor) {
		if (maybeVisitor.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeVisitor.a;
			return $elm$core$Maybe$Just(
				F2(
					function (a, b) {
						return raise(
							A3(
								$jfmengels$elm_review$Review$Rule$accumulate,
								params,
								A2(visitor, a, b),
								errorsAndContext));
					}));
		}
	});
var $jfmengels$elm_review$Review$Rule$createRuleModuleVisitor = F4(function $jfmengels$elm_review$Review$Rule$createRuleModuleVisitor$fn(schema, params, toRuleProjectVisitor, initialContext) {
    var raise = function (errorsAndContext) {
      function raise(_v0) {
        errorsAndContext.a = _v0.a;
        errorsAndContext.b = _v0.b;
      }
      return {
				a_: A4($jfmengels$elm_review$Review$Rule$createVisitor2, params, raise, errorsAndContext, schema.a_),
				a$: A4($jfmengels$elm_review$Review$Rule$createVisitor2, params, raise, errorsAndContext, schema.a$),
				fs: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.ca),
				a1: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.a1),
				aF: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.aF),
				aG: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.aG),
				dQ: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.bu),
				dR: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.bv),
				fI: A4($jfmengels$elm_review$Review$Rule$createFinalModuleEvaluationVisitor, params, raise, errorsAndContext, schema.aq),
				fR: A4($jfmengels$elm_review$Review$Rule$createImportsVisitor, params, raise, errorsAndContext, schema.cs),
				a8: A4($jfmengels$elm_review$Review$Rule$createVisitor2, params, raise, errorsAndContext, schema.a8),
				a9: A4($jfmengels$elm_review$Review$Rule$createVisitor2, params, raise, errorsAndContext, schema.a9),
				ba: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.ba),
				bb: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.bb),
				gm: function (_v0) {
					return toRuleProjectVisitor(errorsAndContext);
				}
			};
		};
		return raise(
			_Utils_Tuple2(_List_Nil, initialContext));
	});
var $jfmengels$elm_review$Review$Cache$ContentHash$areEqual = F2(function $jfmengels$elm_review$Review$Cache$ContentHash$areEqual$fn(_v0, _v1) {
		var a = _v0;
		var b = _v1;
		return _Utils_eq(a, b);
	});
var $jfmengels$elm_review$Review$Cache$Module$ruleCaresAboutIgnoredFiles = function (_v0) {
	var ignoredFiles = _v0.fP;
	return ignoredFiles;
};
var $jfmengels$elm_review$Review$Cache$Module$match = F4(function $jfmengels$elm_review$Review$Cache$Module$match$fn(contentHash, inputContexts, _v0, _v1) {
		var entry = _v0;
		var isFileIgnored = _v1.eN;
		var requestedData = _v1.i4;
		return A2($jfmengels$elm_review$Review$Cache$ContentHash$areEqual, contentHash, entry.fu) && (_Utils_eq(inputContexts, entry.eL) && ((!$jfmengels$elm_review$Review$Cache$Module$ruleCaresAboutIgnoredFiles(requestedData)) || _Utils_eq(isFileIgnored, entry.eN)));
	});
var $jfmengels$elm_review$Review$Rule$reuseCache = F2(function $jfmengels$elm_review$Review$Rule$reuseCache$fn(predicate, maybeCacheEntry) {
		if (maybeCacheEntry.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var cacheEntry = maybeCacheEntry.a;
			return predicate(cacheEntry) ? maybeCacheEntry : $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitorHelp = F5(function $jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitorHelp$fn(schema, raise, hidden, traversalAndFolder, _v0) {
		var moduleRuleSchema = _v0.a;
		var moduleContextCreator = _v0.b;
		return F4(
			function (project, filePath, moduleContentHash, incoming) {
				var maybeCacheEntry = A2($elm$core$Dict$get, filePath, hidden.h8.aj);
				var isFileIgnored = !A2($jfmengels$elm_review$Review$Exceptions$isFileWeWantReportsFor, hidden.al.C, filePath);
				var _v1 = A2(
					$jfmengels$elm_review$Review$Rule$findInitialInputContext,
					schema.aR,
					_List_fromArray(
						[hidden.h8.gF, hidden.h8.f6, hidden.h8.es]));
				var initialProjectContextHash = _v1.a;
				var initialProjectContext = _v1.b;
				var inputContextHashes = A5($jfmengels$elm_review$Review$Rule$computeProjectContextHashes, traversalAndFolder, project, hidden.h8.aj, incoming, initialProjectContextHash);
				var shouldReuseCache = function (cacheEntry) {
					return A4(
						$jfmengels$elm_review$Review$Cache$Module$match,
						moduleContentHash,
						inputContextHashes,
						cacheEntry,
						{eN: isFileIgnored, i4: hidden.al.i4});
				};
				var _v2 = A2($jfmengels$elm_review$Review$Rule$reuseCache, shouldReuseCache, maybeCacheEntry);
				if (!_v2.$) {
					return $elm$core$Maybe$Nothing;
				} else {
					var inputProjectContext = A5($jfmengels$elm_review$Review$Rule$computeProjectContext, traversalAndFolder, project, hidden.h8.aj, incoming, initialProjectContext);
					return $elm$core$Maybe$Just(
						function (availableData) {
							var toRuleProjectVisitor = function (_v4) {
								var errors = _v4.a;
								var resultModuleContext = _v4.b;
								var outputProjectContext = function () {
									var _v3 = $jfmengels$elm_review$Review$Rule$getFolderFromTraversal(traversalAndFolder);
									if (!_v3.$) {
										var fromModuleToProject = _v3.a.cn;
										return A4($jfmengels$elm_review$Review$Rule$applyContextCreator, availableData, isFileIgnored, fromModuleToProject, resultModuleContext);
									} else {
										return schema.aR;
									}
								}();
								var cacheEntry = $jfmengels$elm_review$Review$Cache$Module$create(
									{fu: moduleContentHash, bO: errors, eL: inputContextHashes, eN: isFileIgnored, e1: outputProjectContext});
								var cache = hidden.h8;
								return raise(
									_Utils_update(
										cache,
										{
											aj: A3($elm$core$Dict$insert, availableData.iu, cacheEntry, cache.aj)
										}));
							};
							var ruleData = {C: hidden.al.C, iu: availableData.iu, f8: schema.cH};
							var initialContext = A4($jfmengels$elm_review$Review$Rule$applyContextCreator, availableData, isFileIgnored, moduleContextCreator, inputProjectContext);
							return A4($jfmengels$elm_review$Review$Rule$createRuleModuleVisitor, moduleRuleSchema, ruleData, toRuleProjectVisitor, initialContext);
						});
				}
			});
	});
var $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Rule$ModuleKey = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$ModuleRuleSchema = $elm$core$Basics$identity;
var $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$ModuleNameLookupTable = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$ModuleNameLookupTable$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$empty = function (currentModuleName) {
	return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$ModuleNameLookupTable, currentModuleName, $elm$core$Dict$empty);
};
var $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange = {
	c4: {bH: 0, b1: 0},
	dv: {bH: 0, b1: 0}
};
var $jfmengels$elm_review$Review$Rule$ContextCreator = F2(function $jfmengels$elm_review$Review$Rule$ContextCreator$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Rule$initContextCreator = function (fromProjectToModule) {
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (_v0, _v1) {
				return fromProjectToModule;
			}),
		$jfmengels$elm_review$Review$RequestedData$none);
};
var $jfmengels$elm_review$Review$Rule$mergeModuleVisitorsHelp = F4(function $jfmengels$elm_review$Review$Rule$mergeModuleVisitorsHelp$fn(ruleName_, initialProjectContext, moduleContextCreator, visitors) {
		var dummyAst = {
			ie: _List_Nil,
			gD: _List_Nil,
			iz: _List_Nil,
			iJ: A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Module$NormalModule(
					{
						fE: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_Nil)),
						eY: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, _List_Nil)
					}))
		};
		var dummyAvailableData = {
			h2: dummyAst,
			eD: $elm$core$Basics$always('dummy'),
			iu: 'dummy file path',
			g8: true,
			d5: $elm$core$Maybe$Nothing,
			eX: 'dummy',
			eZ: $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$empty(_List_Nil)
		};
		var initialModuleContext = A4($jfmengels$elm_review$Review$Rule$applyContextCreator, dummyAvailableData, false, moduleContextCreator, initialProjectContext);
		var emptyModuleVisitor = {
			a_: $elm$core$Maybe$Nothing,
			a$: $elm$core$Maybe$Nothing,
			ca: $elm$core$Maybe$Nothing,
			a1: $elm$core$Maybe$Nothing,
			aF: $elm$core$Maybe$Nothing,
			aG: $elm$core$Maybe$Nothing,
			V: $elm$core$Maybe$Nothing,
			an: $elm$core$Maybe$Nothing,
			X: $elm$core$Maybe$Nothing,
			bu: $elm$core$Maybe$Nothing,
			bv: $elm$core$Maybe$Nothing,
			aq: $elm$core$Maybe$Nothing,
			cs: $elm$core$Maybe$Nothing,
			dZ: $elm$core$Maybe$Just(initialModuleContext),
			a8: $elm$core$Maybe$Nothing,
			a9: $elm$core$Maybe$Nothing,
			az: $jfmengels$elm_review$Review$Rule$initContextCreator(
				$elm$core$Basics$always(initialModuleContext)),
			ba: $elm$core$Maybe$Nothing,
			bb: $elm$core$Maybe$Nothing,
			cH: ruleName_,
			v: false,
			_: $elm$core$Maybe$Nothing
		};
		return _Utils_Tuple2(
			function (_v1) {
				var moduleVisitorSchema = _v1;
				return moduleVisitorSchema;
			}(
				A3(
					$elm$core$List$foldl,
					F2(
						function (addVisitors, _v0) {
							var moduleVisitorSchema = _v0;
							return addVisitors(moduleVisitorSchema);
						}),
					emptyModuleVisitor,
					visitors)),
			moduleContextCreator);
	});
var $jfmengels$elm_review$Review$Rule$mergeModuleVisitors = F4(function $jfmengels$elm_review$Review$Rule$mergeModuleVisitors$fn(ruleName_, initialProjectContext, maybeModuleContextCreator, visitors) {
		if (maybeModuleContextCreator.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var moduleContextCreator = maybeModuleContextCreator.a;
			return $elm$core$List$isEmpty(visitors) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A4($jfmengels$elm_review$Review$Rule$mergeModuleVisitorsHelp, ruleName_, initialProjectContext, moduleContextCreator, visitors));
		}
	});
var $jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitor = F3(function $jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitor$fn(schema, raise, hidden) {
		var _v0 = A4($jfmengels$elm_review$Review$Rule$mergeModuleVisitors, schema.cH, schema.aR, schema.az, schema.cG);
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var moduleRuleSchema = _v0.a;
			var traversalAndFolder = function () {
				var _v1 = _Utils_Tuple2(schema.b6, schema.ay);
				if (!_v1.a) {
					var _v2 = _v1.a;
					return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel(schema.ay);
				} else {
					if (!_v1.b.$) {
						var _v3 = _v1.a;
						var folder = _v1.b.a;
						return $jfmengels$elm_review$Review$Rule$TraverseImportedModulesFirst(folder);
					} else {
						var _v4 = _v1.a;
						var _v5 = _v1.b;
						return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel($elm$core$Maybe$Nothing);
					}
				}
			}();
			return $elm$core$Maybe$Just(
				A5($jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitorHelp, schema, raise, hidden, traversalAndFolder, moduleRuleSchema));
		}
	});
var $jfmengels$elm_review$Review$Rule$createProjectVisitor = F8(function $jfmengels$elm_review$Review$Rule$createProjectVisitor$fn(schema, hidden, maybeVisitor, possibleInputContexts, computeContentHash, cacheGetter, toRuleProjectVisitor, toRuleProjectVisitorWithoutChangingCache) {
		if (maybeVisitor.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeVisitor.a;
			return $elm$core$Maybe$Just(
				F2(
					function (project, data) {
						var contentHash = computeContentHash(project);
						var _v1 = A2($jfmengels$elm_review$Review$Rule$findInitialInputContext, schema.aR, possibleInputContexts);
						var baseInputContextHash = _v1.a;
						var inputContext = _v1.b;
						var inputContextHash = $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(baseInputContextHash);
						var cachePredicate = function (cacheData) {
							return A3($jfmengels$elm_review$Review$Cache$ProjectFile$match, contentHash, inputContextHash, cacheData);
						};
						var _v2 = A3($jfmengels$elm_review$Review$Rule$reuseProjectRuleCache, cachePredicate, cacheGetter, hidden.h8);
						if (!_v2.$) {
							var entry = _v2.a;
							return _Utils_Tuple2(
								$jfmengels$elm_review$Review$Cache$ProjectFile$errors(entry),
								toRuleProjectVisitorWithoutChangingCache(0));
						} else {
							var _v3 = A2(visitor, data, inputContext);
							var errorsForVisitor = _v3.a;
							var outputContext = _v3.b;
							var errors = A3($jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName, hidden.al.C, schema.cH, errorsForVisitor);
							return _Utils_Tuple2(
								errors,
								toRuleProjectVisitor(
									$jfmengels$elm_review$Review$Cache$ProjectFile$create(
										{fu: contentHash, bO: errors, fS: inputContextHash, e1: outputContext})));
						}
					}));
		}
	});
var $jfmengels$elm_review$Review$Cache$Module$errors = function (_v0) {
	var entry = _v0;
	return entry.bO;
};
var $jfmengels$elm_review$Review$Cache$ProjectFile$errorsForMaybe = function (maybeEntry) {
	if (!maybeEntry.$) {
		var entry = maybeEntry.a;
		return entry.bO;
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review$Review$Rule$errorsFromCache = function (cache) {
	return $elm$core$List$concat(
		_List_fromArray(
			[
				A3(
				$elm$core$Dict$foldl,
				F3(
					function (_v0, cacheEntry, acc) {
						return A2(
							$elm$core$List$append,
							$jfmengels$elm_review$Review$Cache$Module$errors(cacheEntry),
							acc);
					}),
				_List_Nil,
				cache.aj),
				$jfmengels$elm_review$Review$Cache$ProjectFile$errorsForMaybe(cache.es),
				$jfmengels$elm_review$Review$Cache$ProjectFile$errorsForMaybe(cache.f6),
				$jfmengels$elm_review$Review$Cache$ProjectFile$errorsForMaybe(cache.gF),
				A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $jfmengels$elm_review$Review$Cache$EndAnalysis$output, cache.cg))
			]));
};
var $jfmengels$elm_review$Review$Rule$finalCacheMarker = F3(function $jfmengels$elm_review$Review$Rule$finalCacheMarker$fn(ruleName, ruleId, cacheEntry) {
    global.saveResultToCache(ruleName, ruleId, cacheEntry);
    return cacheEntry;
  });
var $jfmengels$elm_review$Review$Rule$getErrorsForModule = F2(function $jfmengels$elm_review$Review$Rule$getErrorsForModule$fn(cache, filePath) {
		var _v0 = A2($elm$core$Dict$get, filePath, cache.aj);
		if (!_v0.$) {
			var cacheEntry = _v0.a;
			return $jfmengels$elm_review$Review$Cache$Module$errors(cacheEntry);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$readmeHash = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$second, project.f6);
};
var $jfmengels$elm_review$Review$Project$Valid$doesModuleExist = F2(function $jfmengels$elm_review$Review$Project$Valid$doesModuleExist$fn(path, _v0) {
		var project = _v0;
		return A2($elm$core$Dict$member, path, project.bz);
	});
var $elm$core$Dict$filter = F2(function $elm$core$Dict$filter$fn(isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $jfmengels$elm_review$Review$Rule$removeUnknownModulesFromInitialCache = F2(function $jfmengels$elm_review$Review$Rule$removeUnknownModulesFromInitialCache$fn(validProject, projectRuleCache) {
		return _Utils_update(
			projectRuleCache,
			{
				aj: A2(
					$elm$core$Dict$filter,
					F2(
						function (path, _v0) {
							return A2($jfmengels$elm_review$Review$Project$Valid$doesModuleExist, path, validProject);
						}),
					projectRuleCache.aj)
			});
	});
var $jfmengels$elm_review$Review$Cache$Module$setErrors = F2(function $jfmengels$elm_review$Review$Cache$Module$setErrors$fn(newErrors, _v0) {
		var entry = _v0;
		return _Utils_update(
			entry,
			{bO: newErrors});
	});
var $jfmengels$elm_review$Review$Cache$ProjectFile$setErrors = F2(function $jfmengels$elm_review$Review$Cache$ProjectFile$setErrors$fn(newErrors, maybeEntry) {
		if (!maybeEntry.$) {
			var entry = maybeEntry.a;
			return $elm$core$Maybe$Just(
				_Utils_update(
					entry,
					{bO: newErrors}));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Review$Cache$EndAnalysis$setOutput = F2(function $jfmengels$elm_review$Review$Cache$EndAnalysis$setOutput$fn(newOutput, maybeEntry) {
		if (!maybeEntry.$) {
			var entry = maybeEntry.a;
			return $elm$core$Maybe$Just(
				{eL: entry.eL, f1: newOutput});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(function $elm$core$Dict$removeHelpPrepEQGT$fn(targetKey, dict, color, key, value, left, right) {
		if ((left.$ === -1) && (!left.a)) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === -1) && (right.a === 1)) {
					if (right.d.$ === -1) {
						if (right.d.a === 1) {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(function $elm$core$Dict$removeHelp$fn(targetKey, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === -1) && (left.a === 1)) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === -1) && (!lLeft.a)) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === -1) {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(function $elm$core$Dict$removeHelpEQGT$fn(targetKey, dict) {
		if (dict.$ === -1) {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === -1) {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(function $elm$core$Dict$remove$fn(key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(function $elm$core$Dict$update$fn(targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (!_v0.$) {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $jfmengels$elm_review$Review$Rule$createRuleProjectVisitor = F4(function $jfmengels$elm_review$Review$Rule$createRuleProjectVisitor$fn(schema, initialProject, ruleData, initialCache) {
		var raise = function (hidden) {
			var cache = hidden.h8;
			var raiseCache = function (newCache) {
				return raise(
					{h8: newCache, al: hidden.al});
			};
			return {
				em: function (_v0) {
					return {
						C: hidden.al.C,
						eI: hidden.al.eg,
						cH: schema.cH,
						v: schema.v,
						i4: hidden.al.i4,
						aM: $elm$core$Result$Ok(
							F2(
								function (newProject, newRuleData) {
									return A4($jfmengels$elm_review$Review$Rule$createRuleProjectVisitor, schema, newProject, newRuleData, cache);
								}))
					};
				},
				fv: A3($jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitor, schema, raiseCache, hidden),
				fx: A3($jfmengels$elm_review$Review$Rule$createDataExtractVisitor, schema, raiseCache, cache),
				V: A5(
					$jfmengels$elm_review$Review$Rule$createDependenciesVisitor,
					schema,
					hidden.al,
					raiseCache,
					cache,
					{gr: schema.V, gL: schema.an}),
				X: A8(
					$jfmengels$elm_review$Review$Rule$createProjectVisitor,
					schema,
					hidden,
					schema.X,
					_List_Nil,
					$jfmengels$elm_review$Review$Project$Valid$elmJsonHash,
					function ($) {
						return $.es;
					},
					function (entry) {
						return raiseCache(
							_Utils_update(
								cache,
								{
									es: $elm$core$Maybe$Just(entry)
								}));
					},
					function (_v1) {
						return raise(hidden);
					}),
				fJ: A4($jfmengels$elm_review$Review$Rule$createFinalProjectEvaluationVisitor, schema, hidden.al, raiseCache, cache),
				eG: function (_v2) {
					return $jfmengels$elm_review$Review$Rule$errorsFromCache(
						A3($jfmengels$elm_review$Review$Rule$finalCacheMarker, schema.cH, hidden.al.eg, cache));
				},
				fM: function (filePath) {
					return A2($jfmengels$elm_review$Review$Rule$getErrorsForModule, cache, filePath);
				},
				_: A8(
					$jfmengels$elm_review$Review$Rule$createProjectVisitor,
					schema,
					hidden,
					schema._,
					_List_fromArray(
						[cache.es]),
					$jfmengels$elm_review$Review$Project$Valid$readmeHash,
					function ($) {
						return $.f6;
					},
					function (entry) {
						return raiseCache(
							_Utils_update(
								cache,
								{
									f6: $elm$core$Maybe$Just(entry)
								}));
					},
					function (_v3) {
						return raise(hidden);
					}),
				i4: hidden.al.i4,
				gb: function (newErrors) {
					return raiseCache(
						_Utils_update(
							cache,
							{
								gF: A2($jfmengels$elm_review$Review$Cache$ProjectFile$setErrors, newErrors, cache.gF)
							}));
				},
				gc: function (newErrors) {
					return raiseCache(
						_Utils_update(
							cache,
							{
								es: A2($jfmengels$elm_review$Review$Cache$ProjectFile$setErrors, newErrors, cache.es)
							}));
				},
				gd: function (newErrors) {
					return raiseCache(
						_Utils_update(
							cache,
							{
								cg: A2($jfmengels$elm_review$Review$Cache$EndAnalysis$setOutput, newErrors, cache.cg)
							}));
				},
				ge: F2(
					function (filePath, newErrors) {
						return raiseCache(
							_Utils_update(
								cache,
								{
									aj: A3(
										$elm$core$Dict$update,
										filePath,
										$elm$core$Maybe$map(
											function (entry) {
												return A2($jfmengels$elm_review$Review$Cache$Module$setErrors, newErrors, entry);
											}),
										cache.aj)
								}));
					}),
				gf: function (newErrors) {
					return raiseCache(
						_Utils_update(
							cache,
							{
								f6: A2($jfmengels$elm_review$Review$Cache$ProjectFile$setErrors, newErrors, cache.f6)
							}));
				}
			};
		};
		return raise(
			{
				h8: A2($jfmengels$elm_review$Review$Rule$removeUnknownModulesFromInitialCache, initialProject, initialCache),
				al: ruleData
			});
	});
var $jfmengels$elm_review$Review$Rule$emptyCache = {gF: $elm$core$Maybe$Nothing, es: $elm$core$Maybe$Nothing, gT: $elm$core$Maybe$Nothing, cg: $elm$core$Maybe$Nothing, aj: $elm$core$Dict$empty, f6: $elm$core$Maybe$Nothing};
var $jfmengels$elm_review$Review$Exceptions$init = _List_Nil;
var $jfmengels$elm_review$Review$Rule$initialCacheMarker = F3(function $jfmengels$elm_review$Review$Rule$initialCacheMarker$fn(ruleName, ruleId, defaultCache) {
    return global.loadResultFromCache(ruleName, ruleId) || defaultCache;
  });
var $jfmengels$elm_review$Review$Rule$requestedDataFromContextCreator = function (_v0) {
	var requestedData = _v0.b;
	return requestedData;
};
var $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema = function (_v0) {
	var schema = _v0;
	return {
		C: $jfmengels$elm_review$Review$Exceptions$init,
		eI: 0,
		cH: schema.cH,
		v: schema.v,
		i4: A2(
			$jfmengels$elm_review$Review$RequestedData$combine,
			A2($elm$core$Maybe$map, $jfmengels$elm_review$Review$Rule$requestedDataFromContextCreator, schema.az),
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.cn;
					},
					$jfmengels$elm_review$Review$Rule$requestedDataFromContextCreator),
				schema.ay)),
		aM: $elm$core$Result$Ok(
			F2(
				function (project, ruleData) {
					return A4(
						$jfmengels$elm_review$Review$Rule$createRuleProjectVisitor,
						schema,
						project,
						ruleData,
						A3($jfmengels$elm_review$Review$Rule$initialCacheMarker, schema.cH, ruleData.eg, $jfmengels$elm_review$Review$Rule$emptyCache));
				}))
	};
};
var $jfmengels$elm_review$Review$Rule$removeExtensibleRecordTypeVariable = function (_function) {
	return A2(
		$elm$core$Basics$composeR,
		_function,
		function (_v0) {
			var param = _v0;
			return param;
		});
};
var $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema = function (moduleVisitor) {
	var schema = moduleVisitor;
	var _v0 = schema.dZ;
	if (!_v0.$) {
		var initialModuleContext = _v0.a;
		return $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
			{
				c_: $elm$core$Maybe$Nothing,
				V: A2($jfmengels$elm_review$Review$Rule$compactProjectDataVisitors, $elm$core$Basics$identity, schema.V),
				an: A2($jfmengels$elm_review$Review$Rule$compactProjectDataVisitors, $elm$core$Basics$identity, schema.an),
				X: A2(
					$jfmengels$elm_review$Review$Rule$compactProjectDataVisitors,
					$elm$core$Maybe$map(
						function ($) {
							return $.o;
						}),
					schema.X),
				aq: $elm$core$Maybe$Nothing,
				ay: $elm$core$Maybe$Nothing,
				aR: initialModuleContext,
				az: $elm$core$Maybe$Just(
					$jfmengels$elm_review$Review$Rule$initContextCreator($elm$core$Basics$identity)),
				cG: _List_fromArray(
					[
						$jfmengels$elm_review$Review$Rule$removeExtensibleRecordTypeVariable(
						$elm$core$Basics$always(moduleVisitor))
					]),
				cH: schema.cH,
				v: schema.v,
				_: A2(
					$jfmengels$elm_review$Review$Rule$compactProjectDataVisitors,
					$elm$core$Maybe$map(
						function ($) {
							return $.dD;
						}),
					schema._),
				b6: 0
			});
	} else {
		return $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
			{
				c_: $elm$core$Maybe$Nothing,
				V: $elm$core$Maybe$Nothing,
				an: $elm$core$Maybe$Nothing,
				X: $elm$core$Maybe$Nothing,
				aq: $elm$core$Maybe$Nothing,
				ay: $elm$core$Maybe$Nothing,
				aR: 0,
				az: $elm$core$Maybe$Just(schema.az),
				cG: _List_fromArray(
					[
						$jfmengels$elm_review$Review$Rule$removeExtensibleRecordTypeVariable(
						$elm$core$Basics$always(moduleVisitor))
					]),
				cH: schema.cH,
				v: schema.v,
				_: $elm$core$Maybe$Nothing,
				b6: 0
			});
	}
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$All = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$initialContext = {
	c1: _List_Nil,
	ex: $stil4m$elm_syntax$Elm$Syntax$Exposing$All($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange),
	ey: $elm$core$Set$empty,
	eH: false,
	eW: false
};
var $stil4m$elm_syntax$Elm$Syntax$Module$exposingList = function (m) {
	switch (m.$) {
		case 0:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.fE);
		case 1:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.fE);
		default:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.fE);
	}
};
var $stil4m$elm_syntax$Elm$Syntax$Module$moduleName = function (m) {
	switch (m.$) {
		case 0:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.eY);
		case 1:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.eY);
		default:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.eY);
	}
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$moduleDefinitionVisitor = F2(function $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$moduleDefinitionVisitor$fn(node, context) {
		return _Utils_Tuple2(
			_List_Nil,
			_Utils_update(
				context,
				{
					ex: $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(node)),
					eW: A2(
						$elm$core$Set$member,
						A2(
							$elm$core$String$join,
							'.',
							$stil4m$elm_syntax$Elm$Syntax$Module$moduleName(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(node))),
						context.ey)
				}));
	});
var $elm$parser$Parser$Forbidden = 0;
var $elm$parser$Parser$ExpectingVariable = {$: 7};
var $elm$core$String$slice = _String_slice;
var $elm$parser$Parser$Advanced$varHelp = F7(function $elm$parser$Parser$Advanced$varHelp$fn(isGood, offset, row, col, src, indent, context) {
		varHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, src);
			if (_Utils_eq(newOffset, -1)) {
				return {gx: col, p: context, t: indent, h: offset, b1: row, f: src};
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$variable = function (i) {
	return function (s) {
		var firstOffset = A3($elm$parser$Parser$Advanced$isSubChar, i.dv, s.h, s.f);
		if (_Utils_eq(firstOffset, -1)) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, i.gP));
		} else {
			var s1 = _Utils_eq(firstOffset, -2) ? A7($elm$parser$Parser$Advanced$varHelp, i.g6, s.h + 1, s.b1 + 1, 1, s.f, s.t, s.p) : A7($elm$parser$Parser$Advanced$varHelp, i.g6, firstOffset, s.b1, s.gx + 1, s.f, s.t, s.p);
			var name = A3($elm$core$String$slice, s.h, s1.h, s.f);
			return A2($elm$core$Set$member, name, i.hz) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, i.gP)) : A3($elm$parser$Parser$Advanced$Good, true, name, s1);
		}
	};
};
var $elm$parser$Parser$variable = function (i) {
	return $elm$parser$Parser$Advanced$variable(
		{gP: $elm$parser$Parser$ExpectingVariable, g6: i.g6, hz: i.hz, dv: i.dv});
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docsItemParser = function (row) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					F3(
						function (startColumn, name, endColumn) {
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{
									c4: {bH: endColumn, b1: row},
									dv: {bH: startColumn, b1: row}
								},
								name);
						})),
				$elm$parser$Parser$getCol),
			$elm$parser$Parser$variable(
				{
					g6: function (c) {
						return $elm$core$Char$isAlphaNum(c) || (c === '_');
					},
					hz: $elm$core$Set$empty,
					dv: $elm$core$Char$isAlpha
				})),
		$elm$parser$Parser$getCol);
};
var $elm$parser$Parser$Advanced$andThen = F2(function $elm$parser$Parser$Advanced$andThen$fn(callback, _v0) {
		var parseA = _v0;
		return function (s0) {
			var _v1 = parseA(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				var _v2 = callback(a);
				var parseB = _v2;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$loopHelp = F4(function $elm$parser$Parser$Advanced$loopHelp$fn(p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0;
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (!step.$) {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(function $elm$parser$Parser$Advanced$loop$fn(state, callback) {
		return function (s) {
			return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
		};
	});
var $elm$parser$Parser$Advanced$map = F2(function $elm$parser$Parser$Advanced$map$fn(func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					func(a),
					s1);
			} else {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			}
		};
	});
var $elm$parser$Parser$Advanced$Append = F2(function $elm$parser$Parser$Advanced$Append$fn(a, b) {
		return {$: 2, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(function $elm$parser$Parser$Advanced$oneOfHelp$fn(s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (!_v1.$) {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
	};
};
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$Advanced$revAlways = F2(function $elm$parser$Parser$Advanced$revAlways$fn(_v0, b) {
		return b;
	});
var $elm$parser$Parser$Advanced$skip = F2(function $elm$parser$Parser$Advanced$skip$fn(iParser, kParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$parser$Parser$Advanced$revAlways, iParser, kParser);
	});
var $elm$parser$Parser$Advanced$sequenceEndForbidden = F5(function $elm$parser$Parser$Advanced$sequenceEndForbidden$fn(ender, ws, parseItem, sep, revItems) {
		var chompRest = function (item) {
			return A5(
				$elm$parser$Parser$Advanced$sequenceEndForbidden,
				ender,
				ws,
				parseItem,
				sep,
				A2($elm$core$List$cons, item, revItems));
		};
		return A2(
			$elm$parser$Parser$Advanced$skip,
			ws,
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$skip,
						sep,
						A2(
							$elm$parser$Parser$Advanced$skip,
							ws,
							A2(
								$elm$parser$Parser$Advanced$map,
								function (item) {
									return $elm$parser$Parser$Advanced$Loop(
										A2($elm$core$List$cons, item, revItems));
								},
								parseItem))),
						A2(
						$elm$parser$Parser$Advanced$map,
						function (_v0) {
							return $elm$parser$Parser$Advanced$Done(
								$elm$core$List$reverse(revItems));
						},
						ender)
					])));
	});
var $elm$parser$Parser$Advanced$sequenceEndMandatory = F4(function $elm$parser$Parser$Advanced$sequenceEndMandatory$fn(ws, parseItem, sep, revItems) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (item) {
						return $elm$parser$Parser$Advanced$Loop(
							A2($elm$core$List$cons, item, revItems));
					},
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						parseItem,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							ws,
							A2($elm$parser$Parser$Advanced$ignorer, sep, ws)))),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(revItems));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $elm$parser$Parser$Advanced$sequenceEndOptional = F5(function $elm$parser$Parser$Advanced$sequenceEndOptional$fn(ender, ws, parseItem, sep, revItems) {
		var parseEnd = A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $elm$parser$Parser$Advanced$Done(
					$elm$core$List$reverse(revItems));
			},
			ender);
		return A2(
			$elm$parser$Parser$Advanced$skip,
			ws,
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$skip,
						sep,
						A2(
							$elm$parser$Parser$Advanced$skip,
							ws,
							$elm$parser$Parser$Advanced$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$Advanced$map,
										function (item) {
											return $elm$parser$Parser$Advanced$Loop(
												A2($elm$core$List$cons, item, revItems));
										},
										parseItem),
										parseEnd
									])))),
						parseEnd
					])));
	});
var $elm$parser$Parser$Advanced$sequenceEnd = F5(function $elm$parser$Parser$Advanced$sequenceEnd$fn(ender, ws, parseItem, sep, trailing) {
		var chompRest = function (item) {
			switch (trailing) {
				case 0:
					return A2(
						$elm$parser$Parser$Advanced$loop,
						_List_fromArray(
							[item]),
						A4($elm$parser$Parser$Advanced$sequenceEndForbidden, ender, ws, parseItem, sep));
				case 1:
					return A2(
						$elm$parser$Parser$Advanced$loop,
						_List_fromArray(
							[item]),
						A4($elm$parser$Parser$Advanced$sequenceEndOptional, ender, ws, parseItem, sep));
				default:
					return A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$skip,
							ws,
							A2(
								$elm$parser$Parser$Advanced$skip,
								sep,
								A2(
									$elm$parser$Parser$Advanced$skip,
									ws,
									A2(
										$elm$parser$Parser$Advanced$loop,
										_List_fromArray(
											[item]),
										A3($elm$parser$Parser$Advanced$sequenceEndMandatory, ws, parseItem, sep))))),
						ender);
			}
		};
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($elm$parser$Parser$Advanced$andThen, chompRest, parseItem),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return _List_Nil;
					},
					ender)
				]));
	});
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.h, s.b1, s.gx, s.f);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{gx: newCol, p: s.p, t: s.t, h: newOffset, b1: newRow, f: s.f});
	};
};
var $elm$parser$Parser$Advanced$sequence = function (i) {
	return A2(
		$elm$parser$Parser$Advanced$skip,
		$elm$parser$Parser$Advanced$token(i.dv),
		A2(
			$elm$parser$Parser$Advanced$skip,
			i.hG,
			A5(
				$elm$parser$Parser$Advanced$sequenceEnd,
				$elm$parser$Parser$Advanced$token(i.c4),
				i.hG,
				i.hc,
				$elm$parser$Parser$Advanced$token(i.hE),
				i.hT)));
};
var $elm$parser$Parser$Advanced$Forbidden = 0;
var $elm$parser$Parser$Advanced$Mandatory = 2;
var $elm$parser$Parser$Advanced$Optional = 1;
var $elm$parser$Parser$toAdvancedTrailing = function (trailing) {
	switch (trailing) {
		case 0:
			return 0;
		case 1:
			return 1;
		default:
			return 2;
	}
};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$sequence = function (i) {
	return $elm$parser$Parser$Advanced$sequence(
		{
			c4: $elm$parser$Parser$toToken(i.c4),
			hc: i.hc,
			hE: $elm$parser$Parser$toToken(i.hE),
			hG: i.hG,
			dv: $elm$parser$Parser$toToken(i.dv),
			hT: $elm$parser$Parser$toAdvancedTrailing(i.hT)
		});
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docElementsParser = function (startRow) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$keyword('@docs')),
			$elm$parser$Parser$spaces),
		$elm$parser$Parser$sequence(
			{
				c4: '',
				hc: $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docsItemParser(startRow),
				hE: ',',
				hG: $elm$parser$Parser$spaces,
				dv: '',
				hT: 0
			}));
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$collectDocStatements = function (_v0) {
	var lineNumber = _v0.a;
	var string = _v0.b;
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		A2(
			$elm$parser$Parser$run,
			$jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docElementsParser(lineNumber),
			string));
};
var $elm$core$List$partition = F2(function $elm$core$List$partition$fn(f, xs) {
  var truesHead = _List_Cons(undefined, _List_Nil);
  var falsesHead = _List_Cons(undefined, _List_Nil);
  var truesEnd = truesHead;
  var falsesEnd = falsesHead;
  for (; xs.b; xs = xs.b) {
    var next = _List_Cons(xs.a, _List_Nil);
    if (f(xs.a)) {
      truesEnd.b = next;
      truesEnd = next;
    } else {
      falsesEnd.b = next;
      falsesEnd = next;
    }
  }
  return _Utils_Tuple2(truesHead.b, falsesHead.b);
});
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$reportDocsOnFirstLine = F2(function $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$reportDocsOnFirstLine$fn(lineNumber, line) {
		return A2(
			$elm$core$Result$withDefault,
			_List_Nil,
			A2(
				$elm$core$Result$map,
				function (range) {
					return _List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Rule$error,
							{
								eq: _List_fromArray(
									['Using @docs on the first line will make for a broken documentation once published. Please move it to the beginning of the next line.']),
								bx: 'Found @docs on the first line'
							},
							range)
						]);
				},
				A2(
					$elm$parser$Parser$run,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$keyword('{-|')),
						$jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docsWithSpacesParser(lineNumber)),
					line)));
	});
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$reportIndentedDocs = function (_v0) {
	var lineNumber = _v0.a;
	var line = _v0.b;
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		A2(
			$elm$core$Result$map,
			function (range) {
				return _List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Rule$error,
						{
							eq: _List_fromArray(
								['@docs need to be at the beginning of a line, otherwise they can lead to broken documentation once published. on the first line will make for a broken documentation once published. Please remove the leading spaces']),
							bx: 'Found indented @docs'
						},
						range)
					]);
			},
			A2(
				$elm$parser$Parser$run,
				$jfmengels$elm_review_documentation$Docs$ReviewAtDocs$docsWithSpacesParser(lineNumber),
				line)));
};
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$moduleDocumentationVisitor = F2(function $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$moduleDocumentationVisitor$fn(moduleDocumentation, context) {
		if (!moduleDocumentation.$) {
			var _v1 = moduleDocumentation.a;
			var range = _v1.a;
			var comment = _v1.b;
			var _v2 = $elm$core$String$lines(comment);
			if (_v2.b) {
				var firstLine = _v2.a;
				var restOfLines = _v2.b;
				var _v3 = A2(
					$elm$core$List$partition,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Tuple$second,
						$elm$core$String$startsWith('@docs ')),
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (index, line) {
								return _Utils_Tuple2((index + range.dv.b1) + 1, line);
							}),
						restOfLines));
				var linesThatStartWithAtDocs = _v3.a;
				var linesThatDontStartWithAtDocs = _v3.b;
				var misformedDocsErrors = A2(
					$elm$core$List$append,
					A2($jfmengels$elm_review_documentation$Docs$ReviewAtDocs$reportDocsOnFirstLine, range.dv.b1, firstLine),
					A2($elm$core$List$concatMap, $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$reportIndentedDocs, linesThatDontStartWithAtDocs));
				return _Utils_Tuple2(
					misformedDocsErrors,
					_Utils_update(
						context,
						{
							c1: A2($elm$core$List$concatMap, $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$collectDocStatements, linesThatStartWithAtDocs),
							eH: !$elm$core$List$isEmpty(misformedDocsErrors)
						}));
			} else {
				return _Utils_Tuple2(_List_Nil, context);
			}
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review$Review$Rule$newModuleRuleSchema = F2(function $jfmengels$elm_review$Review$Rule$newModuleRuleSchema$fn(name, initialModuleContext) {
		return {
			a_: $elm$core$Maybe$Nothing,
			a$: $elm$core$Maybe$Nothing,
			ca: $elm$core$Maybe$Nothing,
			a1: $elm$core$Maybe$Nothing,
			aF: $elm$core$Maybe$Nothing,
			aG: $elm$core$Maybe$Nothing,
			V: $elm$core$Maybe$Nothing,
			an: $elm$core$Maybe$Nothing,
			X: $elm$core$Maybe$Nothing,
			bu: $elm$core$Maybe$Nothing,
			bv: $elm$core$Maybe$Nothing,
			aq: $elm$core$Maybe$Nothing,
			cs: $elm$core$Maybe$Nothing,
			dZ: $elm$core$Maybe$Just(initialModuleContext),
			a8: $elm$core$Maybe$Nothing,
			a9: $elm$core$Maybe$Nothing,
			az: $jfmengels$elm_review$Review$Rule$initContextCreator(
				$elm$core$Basics$always(initialModuleContext)),
			ba: $elm$core$Maybe$Nothing,
			bb: $elm$core$Maybe$Nothing,
			cH: name,
			v: false,
			_: $elm$core$Maybe$Nothing
		};
	});
var $jfmengels$elm_review$Review$Rule$combineVisitors = F2(function $jfmengels$elm_review$Review$Rule$combineVisitors$fn(newVisitor, maybePreviousVisitor) {
		if (maybePreviousVisitor.$ === 1) {
			return newVisitor;
		} else {
			var previousVisitor = maybePreviousVisitor.a;
			return F2(
				function (node, moduleContext) {
					var _v1 = A2(previousVisitor, node, moduleContext);
					var errorsAfterFirstVisit = _v1.a;
					var contextAfterFirstVisit = _v1.b;
					var _v2 = A2(newVisitor, node, contextAfterFirstVisit);
					var errorsAfterSecondVisit = _v2.a;
					var contextAfterSecondVisit = _v2.b;
					return _Utils_Tuple2(
						A2($elm$core$List$append, errorsAfterFirstVisit, errorsAfterSecondVisit),
						contextAfterSecondVisit);
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$withDeclarationListVisitor = F2(function $jfmengels$elm_review$Review$Rule$withDeclarationListVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				a1: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors, visitor, schema.a1))
			});
	});
var $jfmengels$elm_review$Review$Rule$combineContextOnlyVisitor = F2(function $jfmengels$elm_review$Review$Rule$combineContextOnlyVisitor$fn(newVisitor, maybePreviousVisitor) {
		if (maybePreviousVisitor.$ === 1) {
			return newVisitor;
		} else {
			var previousVisitor = maybePreviousVisitor.a;
			return F2(
				function (a, moduleContext) {
					return A2(
						newVisitor,
						a,
						A2(previousVisitor, a, moduleContext));
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$withElmJsonModuleVisitor = F2(function $jfmengels$elm_review$Review$Rule$withElmJsonModuleVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				X: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineContextOnlyVisitor, visitor, schema.X))
			});
	});
var $jfmengels$elm_review$Review$Rule$withModuleDefinitionVisitor = F2(function $jfmengels$elm_review$Review$Rule$withModuleDefinitionVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				ba: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors, visitor, schema.ba))
			});
	});
var $jfmengels$elm_review$Review$Rule$withModuleDocumentationVisitor = F2(function $jfmengels$elm_review$Review$Rule$withModuleDocumentationVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				bb: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors, visitor, schema.bb))
			});
	});
var $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	A2(
		$jfmengels$elm_review$Review$Rule$withDeclarationListVisitor,
		F2(
			function (nodes, context) {
				return _Utils_Tuple2(
					A2($jfmengels$elm_review_documentation$Docs$ReviewAtDocs$declarationListVisitor, nodes, context),
					context);
			}),
		A2(
			$jfmengels$elm_review$Review$Rule$withModuleDocumentationVisitor,
			$jfmengels$elm_review_documentation$Docs$ReviewAtDocs$moduleDocumentationVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withModuleDefinitionVisitor,
				$jfmengels$elm_review_documentation$Docs$ReviewAtDocs$moduleDefinitionVisitor,
				A2(
					$jfmengels$elm_review$Review$Rule$withElmJsonModuleVisitor,
					$jfmengels$elm_review_documentation$Docs$ReviewAtDocs$elmJsonVisitor,
					A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchema, 'Docs.ReviewAtDocs', $jfmengels$elm_review_documentation$Docs$ReviewAtDocs$initialContext))))));
var $jfmengels$elm_review_common$NoConfusingPrefixOperator$nonCommutativeOperators = $elm$core$Set$fromList(
	_List_fromArray(
		['-', '/', '//', '^', '<', '>', '<=', '>=', '++', '|>', '<|', '>>', '<<', '|.', '|=', '</>', '<?>']));
var $stil4m$elm_syntax$Elm$Syntax$Node$range = function (_v0) {
	var r = _v0.a;
	return r;
};
var $jfmengels$elm_review_common$NoConfusingPrefixOperator$expressionVisitor = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	if ((_v0.$ === 1) && _v0.a.b) {
		var _v1 = _v0.a;
		var fn = _v1.a;
		var restOfArgs = _v1.b;
		var _v2 = $stil4m$elm_syntax$Elm$Syntax$Node$value(fn);
		if (_v2.$ === 5) {
			var operator = _v2.a;
			if (A2($elm$core$Set$member, operator, $jfmengels$elm_review_common$NoConfusingPrefixOperator$nonCommutativeOperators)) {
				var simpleOp = '`a ' + (operator + ' b`');
				var suggestion = ($elm$core$List$length(restOfArgs) !== 2) ? ('`\\b -> a ' + (operator + ' b`')) : simpleOp;
				var inverseLambda = '`\\a -> b ' + (operator + ' a`');
				return _List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Rule$error,
						{
							eq: _List_fromArray(
								['Prefix operators for operators like this one are very error-prone. While ' + (simpleOp + (' is easy to understand, it is not as obvious to a reader that `(' + (operator + (') b` is the same as ' + (inverseLambda + '.'))))), 'Prefer using the form ' + (suggestion + ' which will be a lot easier to understand and to get right.')]),
							bx: 'Found a confusing usage of prefix operator'
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$range(fn))
					]);
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor = F2(function $jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				bu: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors, visitor, schema.bu))
			});
	});
var $jfmengels$elm_review$Review$Rule$withSimpleExpressionVisitor = F2(function $jfmengels$elm_review$Review$Rule$withSimpleExpressionVisitor$fn(visitor, schema) {
		return A2(
			$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
			F2(
				function (node, moduleContext) {
					return _Utils_Tuple2(
						visitor(node),
						moduleContext);
				}),
			schema);
	});
var $jfmengels$elm_review_common$NoConfusingPrefixOperator$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	A2(
		$jfmengels$elm_review$Review$Rule$withSimpleExpressionVisitor,
		$jfmengels$elm_review_common$NoConfusingPrefixOperator$expressionVisitor,
		A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchema, 'NoConfusingPrefixOperator', 0)));
var $jfmengels$elm_review$Review$Error$Available = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Rule$withFixes = F2(function $jfmengels$elm_review$Review$Rule$withFixes$fn(fixes, error_) {
		return A2(
			$jfmengels$elm_review$Review$Rule$mapInternalError,
			function (err) {
				if ($elm$core$List$isEmpty(fixes)) {
					return _Utils_update(
						err,
						{dV: $jfmengels$elm_review$Review$Error$NoFixes});
				} else {
					var _v0 = err.hO;
					switch (_v0) {
						case 0:
							return _Utils_update(
								err,
								{
									dV: $jfmengels$elm_review$Review$Error$Available(fixes)
								});
						case 2:
							return _Utils_update(
								err,
								{
									dV: $jfmengels$elm_review$Review$Error$Available(fixes)
								});
						case 1:
							return err;
						case 3:
							return err;
						default:
							return err;
					}
				}
			},
			error_);
	});
var $jfmengels$elm_review$Review$Rule$errorWithFix = F3(function $jfmengels$elm_review$Review$Rule$errorWithFix$fn(info, range, fixes) {
		return A2(
			$jfmengels$elm_review$Review$Rule$withFixes,
			fixes,
			A2($jfmengels$elm_review$Review$Rule$error, info, range));
	});
var $jfmengels$elm_review$Review$Fix$Internal$Removal = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Fix$removeRange = $jfmengels$elm_review$Review$Fix$Internal$Removal;
var $jfmengels$elm_review_debug$NoDebug$Log$error = F2(function $jfmengels$elm_review_debug$NoDebug$Log$error$fn(node, rangeToRemove) {
		return A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['`Debug.log` is useful when developing, but is not meant to be shipped to production or published in a package. I suggest removing its use before committing and attempting to push to production.']),
				bx: 'Remove the use of `Debug.log` before shipping to production'
			},
			$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
			function () {
				if (!rangeToRemove.$) {
					var range = rangeToRemove.a;
					return _List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(range)
						]);
				} else {
					return _List_Nil;
				}
			}());
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$toRangeLike = function (_v0) {
	var start = _v0.dv;
	return (start.b1 << 16) + start.bH;
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt$fn(_v0, range) {
		var dict = _v0.b;
		return A2(
			$elm$core$Dict$get,
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$toRangeLike(range),
			dict);
	});
var $jfmengels$elm_review_debug$NoDebug$Log$handleWhenSingleArg = F3(function $jfmengels$elm_review_debug$NoDebug$Log$handleWhenSingleArg$fn(rangeToPotentiallyRemove, context, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if ((((_v0.$ === 1) && _v0.a.b) && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'log')) {
			var _v1 = _v0.a;
			var logFunctionNode = _v1.a;
			var logFunctionRange = logFunctionNode.a;
			var _v2 = logFunctionNode.b;
			var logArguments = _v1.b;
			var _v3 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, context.s, logFunctionRange);
			if ((((!_v3.$) && _v3.a.b) && (_v3.a.a === 'Debug')) && (!_v3.a.b.b)) {
				var _v4 = _v3.a;
				var rangeToRemove = function () {
					if (logArguments.b && (!logArguments.b.b)) {
						return $elm$core$Maybe$Just(
							rangeToPotentiallyRemove(0));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}();
				return _Utils_Tuple2(
					_List_fromArray(
						[
							A2($jfmengels$elm_review_debug$NoDebug$Log$error, logFunctionNode, rangeToRemove)
						]),
					_Utils_update(
						context,
						{
							cL: A2(
								$elm$core$List$cons,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
								A2($elm$core$List$cons, logFunctionRange, context.cL))
						}));
			} else {
				return _Utils_Tuple2(_List_Nil, context);
			}
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $elm$core$List$member = F2(function $elm$core$List$member$fn(x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor$fn(_v0, _v1) {
		var dict = _v0.b;
		var range = _v1.a;
		return A2(
			$elm$core$Dict$get,
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$toRangeLike(range),
			dict);
	});
var $jfmengels$elm_review_debug$NoDebug$Log$reportIfDebugLog = F3(function $jfmengels$elm_review_debug$NoDebug$Log$reportIfDebugLog$fn(node, context, rangeToRemove) {
		if (A2(
			$elm$core$List$member,
			$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
			context.cL)) {
			return _Utils_Tuple2(_List_Nil, context);
		} else {
			var _v0 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, context.s, node);
			if ((((!_v0.$) && _v0.a.b) && (_v0.a.a === 'Debug')) && (!_v0.a.b.b)) {
				var _v1 = _v0.a;
				return _Utils_Tuple2(
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review_debug$NoDebug$Log$error,
							node,
							rangeToRemove(0))
						]),
					_Utils_update(
						context,
						{
							cL: A2(
								$elm$core$List$cons,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
								context.cL)
						}));
			} else {
				return _Utils_Tuple2(_List_Nil, context);
			}
		}
	});
var $jfmengels$elm_review_debug$NoDebug$Log$expressionVisitor = F2(function $jfmengels$elm_review_debug$NoDebug$Log$expressionVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$6:
		while (true) {
			switch (_v0.$) {
				case 2:
					switch (_v0.a) {
						case '|>':
							var left = _v0.c;
							var right = _v0.d;
							return A3(
								$jfmengels$elm_review_debug$NoDebug$Log$handleWhenSingleArg,
								function (_v1) {
									return {
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).c4,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).c4
									};
								},
								context,
								right);
						case '<|':
							var left = _v0.c;
							var right = _v0.d;
							return A3(
								$jfmengels$elm_review_debug$NoDebug$Log$handleWhenSingleArg,
								function (_v2) {
									return {
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).dv,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv
									};
								},
								context,
								left);
						case '<<':
							var left = _v0.c;
							var right = _v0.d;
							var _v3 = A3(
								$jfmengels$elm_review_debug$NoDebug$Log$handleWhenSingleArg,
								function (_v4) {
									return {
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).dv,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv
									};
								},
								context,
								left);
							var errorsLeft = _v3.a;
							var contextAfterLeft = _v3.b;
							var _v5 = A3(
								$jfmengels$elm_review_debug$NoDebug$Log$handleWhenSingleArg,
								function (_v6) {
									return {
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).c4,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).c4
									};
								},
								contextAfterLeft,
								right);
							var errorsRight = _v5.a;
							var contextAfterRight = _v5.b;
							return _Utils_Tuple2(
								_Utils_ap(errorsLeft, errorsRight),
								contextAfterRight);
						case '>>':
							var left = _v0.c;
							var right = _v0.d;
							var _v7 = A3(
								$jfmengels$elm_review_debug$NoDebug$Log$handleWhenSingleArg,
								function (_v8) {
									return {
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).dv,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv
									};
								},
								context,
								left);
							var errorsLeft = _v7.a;
							var contextAfterLeft = _v7.b;
							var _v9 = A3(
								$jfmengels$elm_review_debug$NoDebug$Log$handleWhenSingleArg,
								function (_v10) {
									return {
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).c4,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).c4
									};
								},
								contextAfterLeft,
								right);
							var errorsRight = _v9.a;
							var contextAfterRight = _v9.b;
							return _Utils_Tuple2(
								_Utils_ap(errorsLeft, errorsRight),
								contextAfterRight);
						default:
							break _v0$6;
					}
				case 1:
					if ((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'log')) {
						var _v11 = _v0.a;
						var logFunctionNode = _v11.a;
						var logFunctionRange = logFunctionNode.a;
						var _v12 = logFunctionNode.b;
						var logArguments = _v11.b;
						var rangeToRemove = function (_v15) {
							if ((logArguments.b && logArguments.b.b) && (!logArguments.b.b.b)) {
								var _v14 = logArguments.b;
								var valueToLog = _v14.a;
								return $elm$core$Maybe$Just(
									{
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(valueToLog).dv,
										dv: logFunctionRange.dv
									});
							} else {
								return $elm$core$Maybe$Nothing;
							}
						};
						return A3($jfmengels$elm_review_debug$NoDebug$Log$reportIfDebugLog, logFunctionNode, context, rangeToRemove);
					} else {
						break _v0$6;
					}
				case 3:
					if (_v0.b === 'log') {
						return A3(
							$jfmengels$elm_review_debug$NoDebug$Log$reportIfDebugLog,
							node,
							context,
							$elm$core$Basics$always($elm$core$Maybe$Nothing));
					} else {
						break _v0$6;
					}
				default:
					break _v0$6;
			}
		}
		return _Utils_Tuple2(_List_Nil, context);
	});
var $jfmengels$elm_review$Review$Rule$withModuleNameLookupTable = function (_v0) {
	var fn = _v0.a;
	var requested = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(fn, data, isFileIgnored, data.eZ);
			}),
		_Utils_update(
			requested,
			{eZ: true}));
};
var $jfmengels$elm_review_debug$NoDebug$Log$initContext = $jfmengels$elm_review$Review$Rule$withModuleNameLookupTable(
	$jfmengels$elm_review$Review$Rule$initContextCreator(
		F2(
			function (lookupTable, _v0) {
				return {s: lookupTable, cL: _List_Nil};
			})));
var $jfmengels$elm_review$Review$Rule$newModuleRuleSchemaUsingContextCreator = F2(function $jfmengels$elm_review$Review$Rule$newModuleRuleSchemaUsingContextCreator$fn(name, moduleContextCreator) {
		return {a_: $elm$core$Maybe$Nothing, a$: $elm$core$Maybe$Nothing, ca: $elm$core$Maybe$Nothing, a1: $elm$core$Maybe$Nothing, aF: $elm$core$Maybe$Nothing, aG: $elm$core$Maybe$Nothing, V: $elm$core$Maybe$Nothing, an: $elm$core$Maybe$Nothing, X: $elm$core$Maybe$Nothing, bu: $elm$core$Maybe$Nothing, bv: $elm$core$Maybe$Nothing, aq: $elm$core$Maybe$Nothing, cs: $elm$core$Maybe$Nothing, dZ: $elm$core$Maybe$Nothing, a8: $elm$core$Maybe$Nothing, a9: $elm$core$Maybe$Nothing, az: moduleContextCreator, ba: $elm$core$Maybe$Nothing, bb: $elm$core$Maybe$Nothing, cH: name, v: false, _: $elm$core$Maybe$Nothing};
	});
var $jfmengels$elm_review$Review$Rule$providesFixesForModuleRule = function (_v0) {
	var moduleRuleSchema = _v0;
	return _Utils_update(
		moduleRuleSchema,
		{v: true});
};
var $jfmengels$elm_review_debug$NoDebug$Log$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	$jfmengels$elm_review$Review$Rule$providesFixesForModuleRule(
		A2(
			$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
			$jfmengels$elm_review_debug$NoDebug$Log$expressionVisitor,
			A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchemaUsingContextCreator, 'NoDebug.Log', $jfmengels$elm_review_debug$NoDebug$Log$initContext))));
var $jfmengels$elm_review_debug$NoDebug$TodoOrToString$expressionVisitor = F2(function $jfmengels$elm_review_debug$NoDebug$TodoOrToString$expressionVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 3) {
			var name = _v0.b;
			if ((name === 'todo') || (name === 'toString')) {
				var _v1 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, context, node);
				if ((((!_v1.$) && _v1.a.b) && (_v1.a.a === 'Debug')) && (!_v1.a.b.b)) {
					var _v2 = _v1.a;
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Rule$error,
								{
									eq: _List_fromArray(
										['`Debug.' + (name + '` can be useful when developing, but is not meant to be shipped to production or published in a package. I suggest removing its use before committing and attempting to push to production.')]),
									bx: 'Remove the use of `Debug.' + (name + '` before shipping to production')
								},
								$stil4m$elm_syntax$Elm$Syntax$Node$range(node))
							]),
						context);
				} else {
					return _Utils_Tuple2(_List_Nil, context);
				}
			} else {
				return _Utils_Tuple2(_List_Nil, context);
			}
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_debug$NoDebug$TodoOrToString$init = $jfmengels$elm_review$Review$Rule$withModuleNameLookupTable(
	$jfmengels$elm_review$Review$Rule$initContextCreator(
		F2(
			function (lookupTable, _v0) {
				return lookupTable;
			})));
var $jfmengels$elm_review_debug$NoDebug$TodoOrToString$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	A2(
		$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
		$jfmengels$elm_review_debug$NoDebug$TodoOrToString$expressionVisitor,
		A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchemaUsingContextCreator, 'NoDebug.TodoOrToString', $jfmengels$elm_review_debug$NoDebug$TodoOrToString$init)));
var $jfmengels$elm_review_common$NoExposingEverything$ExposingOk = {$: 0};
var $jfmengels$elm_review_common$NoExposingEverything$functionDeclarationName = function (_v0) {
	var declaration = _v0.ii;
	return $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).cH);
};
var $jfmengels$elm_review_common$NoExposingEverything$exposingDeclarationName = function (_v0) {
	var declaration = _v0.b;
	switch (declaration.$) {
		case 1:
			var name = declaration.a.cH;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(name);
		case 2:
			var name = declaration.a.cH;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(name) + '(..)';
		case 0:
			var _function = declaration.a;
			return $jfmengels$elm_review_common$NoExposingEverything$functionDeclarationName(_function);
		case 4:
			var operator = declaration.a.iV;
			return '(' + ($stil4m$elm_syntax$Elm$Syntax$Node$value(operator) + ')');
		case 3:
			var name = declaration.a.cH;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(name);
		default:
			return '';
	}
};
var $jfmengels$elm_review_common$NoExposingEverything$exposingDeclarationList = function (declarations) {
	return A2($elm$core$List$map, $jfmengels$elm_review_common$NoExposingEverything$exposingDeclarationName, declarations);
};
var $jfmengels$elm_review$Review$Fix$Internal$Replacement = F2(function $jfmengels$elm_review$Review$Fix$Internal$Replacement$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Fix$replaceRangeBy = $jfmengels$elm_review$Review$Fix$Internal$Replacement;
var $jfmengels$elm_review_common$NoExposingEverything$declarationListVisitor = F2(function $jfmengels$elm_review_common$NoExposingEverything$declarationListVisitor$fn(declarations, context) {
		if (context.$ === 1) {
			var range = context.a;
			return _Utils_Tuple2(
				_List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['Modules should have hidden implementation details with an explicit API so that the module is used in a proper and controlled way. The users of this module should not have to know about what is inside a module it is using, and they shouldn\'t need to access its internal details. Therefore, the API should be explicitly defined and ideally as small as possible.']),
							bx: 'Module exposes everything implicitly \"(..)\"'
						},
						{
							c4: {bH: range.c4.bH + 1, b1: range.c4.b1},
							dv: {bH: range.dv.bH - 1, b1: range.dv.b1}
						},
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								range,
								A2(
									$elm$core$String$join,
									', ',
									$jfmengels$elm_review_common$NoExposingEverything$exposingDeclarationList(declarations)))
							]))
					]),
				context);
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_common$NoExposingEverything$ExposingAll = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_common$NoExposingEverything$moduleDefinitionVisitor = F2(function $jfmengels$elm_review_common$NoExposingEverything$moduleDefinitionVisitor$fn(moduleNode, _v0) {
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(moduleNode));
		if (!_v1.$) {
			var range = _v1.a;
			return _Utils_Tuple2(
				_List_Nil,
				$jfmengels$elm_review_common$NoExposingEverything$ExposingAll(range));
		} else {
			return _Utils_Tuple2(_List_Nil, $jfmengels$elm_review_common$NoExposingEverything$ExposingOk);
		}
	});
var $jfmengels$elm_review_common$NoExposingEverything$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	$jfmengels$elm_review$Review$Rule$providesFixesForModuleRule(
		A2(
			$jfmengels$elm_review$Review$Rule$withDeclarationListVisitor,
			$jfmengels$elm_review_common$NoExposingEverything$declarationListVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withModuleDefinitionVisitor,
				$jfmengels$elm_review_common$NoExposingEverything$moduleDefinitionVisitor,
				A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchema, 'NoExposingEverything', $jfmengels$elm_review_common$NoExposingEverything$ExposingOk)))));
var $jfmengels$elm_review_common$NoImportingEverything$exceptionsToSet = function (exceptions) {
	return $elm$core$Set$fromList(
		A2(
			$elm$core$List$map,
			$elm$core$String$split('.'),
			exceptions));
};
var $jfmengels$elm_review_common$NoImportingEverything$moduleName = function (node) {
	return $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(node).eY);
};
var $jfmengels$elm_review_common$NoImportingEverything$importVisitor = F2(function $jfmengels$elm_review_common$NoImportingEverything$importVisitor$fn(exceptions, node) {
		if (A2(
			$elm$core$Set$member,
			$jfmengels$elm_review_common$NoImportingEverything$moduleName(node),
			exceptions)) {
			return _List_Nil;
		} else {
			var _v0 = A2(
				$elm$core$Maybe$map,
				$stil4m$elm_syntax$Elm$Syntax$Node$value,
				$stil4m$elm_syntax$Elm$Syntax$Node$value(node).fE);
			if ((!_v0.$) && (!_v0.a.$)) {
				var range = _v0.a.a;
				return _List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Rule$error,
						{
							eq: _List_fromArray(
								['When you import everything from a module it becomes harder to know where a function or a type comes from.']),
							bx: 'Prefer listing what you wish to import and/or using qualified imports'
						},
						{
							c4: {bH: range.c4.bH + 1, b1: range.c4.b1},
							dv: {bH: range.dv.bH - 1, b1: range.dv.b1}
						})
					]);
			} else {
				return _List_Nil;
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$withImportVisitor = F2(function $jfmengels$elm_review$Review$Rule$withImportVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				cs: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors, visitor, schema.cs))
			});
	});
var $jfmengels$elm_review$Review$Rule$withSimpleImportVisitor = F2(function $jfmengels$elm_review$Review$Rule$withSimpleImportVisitor$fn(visitor, schema) {
		return A2(
			$jfmengels$elm_review$Review$Rule$withImportVisitor,
			F2(
				function (node, moduleContext) {
					return _Utils_Tuple2(
						visitor(node),
						moduleContext);
				}),
			schema);
	});
var $jfmengels$elm_review_common$NoImportingEverything$rule = function (exceptions) {
	return $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
		A2(
			$jfmengels$elm_review$Review$Rule$withSimpleImportVisitor,
			$jfmengels$elm_review_common$NoImportingEverything$importVisitor(
				$jfmengels$elm_review_common$NoImportingEverything$exceptionsToSet(exceptions)),
			A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchema, 'NoImportingEverything', 0)));
};
var $jfmengels$elm_review_common$NoMissingTypeAnnotation$declarationVisitor = function (declaration) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
	if (!_v0.$) {
		var _function = _v0.a;
		var _v1 = _function.i7;
		if (_v1.$ === 1) {
			var name = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).cH;
			return _List_fromArray(
				[
					A2(
					$jfmengels$elm_review$Review$Rule$error,
					{
						eq: _List_fromArray(
							['Type annotations help you understand what happens in the code, and it will help the compiler give better error messages.']),
						bx: 'Missing type annotation for `' + ($stil4m$elm_syntax$Elm$Syntax$Node$value(name) + '`')
					},
					$stil4m$elm_syntax$Elm$Syntax$Node$range(name))
				]);
		} else {
			return _List_Nil;
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor = F2(function $jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				aF: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors, visitor, schema.aF))
			});
	});
var $jfmengels$elm_review$Review$Rule$withSimpleDeclarationVisitor = F2(function $jfmengels$elm_review$Review$Rule$withSimpleDeclarationVisitor$fn(visitor, schema) {
		return A2(
			$jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor,
			F2(
				function (node, moduleContext) {
					return _Utils_Tuple2(
						visitor(node),
						moduleContext);
				}),
			schema);
	});
var $jfmengels$elm_review_common$NoMissingTypeAnnotation$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	A2(
		$jfmengels$elm_review$Review$Rule$withSimpleDeclarationVisitor,
		$jfmengels$elm_review_common$NoMissingTypeAnnotation$declarationVisitor,
		A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchema, 'NoMissingTypeAnnotation', 0)));
var $jfmengels$elm_review_common$NoMissingTypeExpose$Package = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$addExposedModule = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$addExposedModule$fn(moduleName, exposedModules) {
		if (!exposedModules.$) {
			return exposedModules;
		} else {
			var list = exposedModules.a;
			return $jfmengels$elm_review_common$NoMissingTypeExpose$Package(
				A2($elm$core$Set$insert, moduleName, list));
		}
	});
var $jfmengels$elm_review$Review$Project$Dependency$modules = function (_v0) {
	var dependency = _v0;
	return dependency.aU;
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedModulesForDependency = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedModulesForDependency$fn(dependency, exposedModules) {
		return A3(
			$elm$core$List$foldl,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.cH;
				},
				$jfmengels$elm_review_common$NoMissingTypeExpose$addExposedModule),
			exposedModules,
			$jfmengels$elm_review$Review$Project$Dependency$modules(dependency));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$dependencyDictVisitor = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$dependencyDictVisitor$fn(dependencies, context) {
		return _Utils_Tuple2(
			_List_Nil,
			_Utils_update(
				context,
				{
					ao: A3(
						$elm$core$List$foldl,
						$jfmengels$elm_review_common$NoMissingTypeExpose$exposedModulesForDependency,
						context.ao,
						$elm$core$Dict$values(dependencies))
				}));
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$Application = {$: 0};
var $jfmengels$elm_review_common$NoMissingTypeExpose$elmProjectExposedList = function (exposed) {
	if (!exposed.$) {
		var list = exposed.a;
		return A3(
			$elm$core$List$foldl,
			A2($elm$core$Basics$composeR, $elm$project_metadata_utils$Elm$Module$toString, $elm$core$Set$insert),
			$elm$core$Set$empty,
			list);
	} else {
		var dict = exposed.a;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v1, acc) {
					var list = _v1.b;
					return A3(
						$elm$core$List$foldl,
						A2($elm$core$Basics$composeR, $elm$project_metadata_utils$Elm$Module$toString, $elm$core$Set$insert),
						acc,
						list);
				}),
			$elm$core$Set$empty,
			dict);
	}
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedModulesForElmJson = function (project) {
	if (project.$ === 1) {
		var exposed = project.a.gQ;
		return $jfmengels$elm_review_common$NoMissingTypeExpose$Package(
			$jfmengels$elm_review_common$NoMissingTypeExpose$elmProjectExposedList(exposed));
	} else {
		return $jfmengels$elm_review_common$NoMissingTypeExpose$Application;
	}
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$elmJsonVisitor = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$elmJsonVisitor$fn(maybeProject, context) {
		if (!maybeProject.$) {
			var project = maybeProject.a.o;
			return _Utils_Tuple2(
				_List_Nil,
				_Utils_update(
					context,
					{
						ao: $jfmengels$elm_review_common$NoMissingTypeExpose$exposedModulesForElmJson(project)
					}));
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $elm$core$Dict$union = F2(function $elm$core$Dict$union$fn(t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$core$Set$union = F2(function $elm$core$Set$union$fn(_v0, _v1) {
		var dict1 = _v0;
		var dict2 = _v1;
		return A2($elm$core$Dict$union, dict1, dict2);
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$foldExposedModules = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$foldExposedModules$fn(newExposedModules, oldExposedModules) {
		var _v0 = _Utils_Tuple2(oldExposedModules, newExposedModules);
		if (!_v0.a.$) {
			if (!_v0.b.$) {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $jfmengels$elm_review_common$NoMissingTypeExpose$Application;
			} else {
				var _v3 = _v0.a;
				return newExposedModules;
			}
		} else {
			if (!_v0.b.$) {
				var _v4 = _v0.b;
				return oldExposedModules;
			} else {
				var oldList = _v0.a.a;
				var newList = _v0.b.a;
				return $jfmengels$elm_review_common$NoMissingTypeExpose$Package(
					A2($elm$core$Set$union, newList, oldList));
			}
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$foldModuleTypesHelp = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$foldModuleTypesHelp$fn(moduleName, newTypes, moduleTypes) {
		var _v0 = A2($elm$core$Dict$get, moduleName, moduleTypes);
		if (!_v0.$) {
			var oldTypes = _v0.a;
			return A3(
				$elm$core$Dict$insert,
				moduleName,
				A2($elm$core$Set$union, oldTypes, newTypes),
				moduleTypes);
		} else {
			return A3($elm$core$Dict$insert, moduleName, newTypes, moduleTypes);
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$foldModuleTypes = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$foldModuleTypes$fn(newModuleTypes, oldModuleTypes) {
		return A3($elm$core$Dict$foldl, $jfmengels$elm_review_common$NoMissingTypeExpose$foldModuleTypesHelp, newModuleTypes, oldModuleTypes);
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$foldProjectContexts = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$foldProjectContexts$fn(_new, old) {
		return {
			ao: A2($jfmengels$elm_review_common$NoMissingTypeExpose$foldExposedModules, _new.ao, old.ao),
			by: A2($jfmengels$elm_review_common$NoMissingTypeExpose$foldModuleTypes, _new.by, old.by)
		};
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$initialProjectContext = {ao: $jfmengels$elm_review_common$NoMissingTypeExpose$Application, by: $elm$core$Dict$empty};
var $elm$core$Dict$singleton = F2(function $elm$core$Dict$singleton$fn(key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $jfmengels$elm_review$Review$Rule$moduleNameNode = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 0:
			var data = _v0.a;
			return data.eY;
		case 1:
			var data = _v0.a;
			return data.eY;
		default:
			var data = _v0.a;
			return data.eY;
	}
};
var $jfmengels$elm_review$Review$Rule$withModuleName = function (_v0) {
	var fn = _v0.a;
	var requestedData = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(
					fn,
					data,
					isFileIgnored,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review$Review$Rule$moduleNameNode(data.h2.iJ)));
			}),
		requestedData);
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$fromModuleToProjectContext = $jfmengels$elm_review$Review$Rule$withModuleName(
	$jfmengels$elm_review$Review$Rule$initContextCreator(
		F2(
			function (moduleName, context) {
				var _v0 = context.aK;
				if (!_v0.$) {
					var exposedTypes = _v0.a.dP;
					return _Utils_update(
						$jfmengels$elm_review_common$NoMissingTypeExpose$initialProjectContext,
						{
							by: A2($elm$core$Dict$singleton, moduleName, exposedTypes)
						});
				} else {
					return $jfmengels$elm_review_common$NoMissingTypeExpose$initialProjectContext;
				}
			})));
var $jfmengels$elm_review_common$NoMissingTypeExpose$ExposedModule = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$initialExposedModuleType = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$initialExposedModuleType$fn(exposedModules, moduleTypes) {
		return $jfmengels$elm_review_common$NoMissingTypeExpose$ExposedModule(
			{
				dI: $elm$core$Set$empty,
				ao: exposedModules,
				dO: _List_Nil,
				bt: $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_Nil),
				eB: $elm$core$Maybe$Nothing,
				by: moduleTypes
			});
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$InternalModule = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$initialInternalModuleType = $jfmengels$elm_review_common$NoMissingTypeExpose$InternalModule(
	{
		dP: $elm$core$Set$empty,
		bt: $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_Nil)
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$isModuleExposed = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$isModuleExposed$fn(exposedModules, moduleName) {
		if (!exposedModules.$) {
			return true;
		} else {
			var list = exposedModules.a;
			return A2(
				$elm$core$Set$member,
				A2($elm$core$String$join, '.', moduleName),
				list);
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$fromProjectToModuleContext = $jfmengels$elm_review$Review$Rule$withModuleName(
	$jfmengels$elm_review$Review$Rule$withModuleNameLookupTable(
		$jfmengels$elm_review$Review$Rule$initContextCreator(
			F3(
				function (lookupTable, moduleName, _v0) {
					var exposedModules = _v0.ao;
					var moduleTypes = _v0.by;
					var moduleType = A2($jfmengels$elm_review_common$NoMissingTypeExpose$isModuleExposed, exposedModules, moduleName) ? A2($jfmengels$elm_review_common$NoMissingTypeExpose$initialExposedModuleType, exposedModules, moduleTypes) : $jfmengels$elm_review_common$NoMissingTypeExpose$initialInternalModuleType;
					return {
						s: lookupTable,
						aK: moduleType,
						aA: $elm$core$Set$fromList(
							$elm$core$Dict$keys(moduleTypes))
					};
				}))));
var $jfmengels$elm_review_common$NoMissingTypeExpose$rememberDeclaredType = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$rememberDeclaredType$fn(_v0, declaredTypes) {
		var name = _v0.b;
		return A2($elm$core$Set$insert, name, declaredTypes);
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$declaredTypesForDeclaration = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$declaredTypesForDeclaration$fn(_v0, declaredTypes) {
		var declaration = _v0.b;
		switch (declaration.$) {
			case 2:
				var name = declaration.a.cH;
				return A2($jfmengels$elm_review_common$NoMissingTypeExpose$rememberDeclaredType, name, declaredTypes);
			case 1:
				var name = declaration.a.cH;
				return A2($jfmengels$elm_review_common$NoMissingTypeExpose$rememberDeclaredType, name, declaredTypes);
			default:
				return declaredTypes;
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$declaredTypesForDeclarationList = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$declaredTypesForDeclarationList$fn(list, declaredTypes) {
		return A3($elm$core$List$foldl, $jfmengels$elm_review_common$NoMissingTypeExpose$declaredTypesForDeclaration, declaredTypes, list);
	});
var $stil4m$elm_syntax$Elm$Syntax$Node$map = F2(function $stil4m$elm_syntax$Elm$Syntax$Node$map$fn(f, _v0) {
		var r = _v0.a;
		var a = _v0.b;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			r,
			f(a));
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForRecordField = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForRecordField$fn(lookupTable, _v5, exposedSignatureTypes) {
		var _v6 = _v5.b;
		var typeAnnotation = _v6.b;
		return A3(
			$jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForTypeAnnotations,
			lookupTable,
			_List_fromArray(
				[typeAnnotation]),
			exposedSignatureTypes);
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForRecordFieldList = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForRecordFieldList$fn(lookupTable, fields, exposedSignatureTypes) {
		return A3(
			$elm$core$List$foldl,
			$jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForRecordField(lookupTable),
			exposedSignatureTypes,
			fields);
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForTypeAnnotations = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForTypeAnnotations$fn(lookupTable, typeAnnotations, acc) {
		exposedSignatureTypesForTypeAnnotations:
		while (true) {
			if (!typeAnnotations.b) {
				return acc;
			} else {
				var typeAnnotation = typeAnnotations.a;
				var rest = typeAnnotations.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(typeAnnotation);
				switch (_v1.$) {
					case 1:
						var name = _v1.a;
						var list = _v1.b;
						var newAcc = function () {
							var _v2 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, name);
							if (!_v2.$) {
								var moduleName = _v2.a;
								return A2(
									$elm$core$List$cons,
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$map,
										function (_v3) {
											var typeName = _v3.b;
											return _Utils_Tuple2(moduleName, typeName);
										},
										name),
									acc);
							} else {
								return A2($elm$core$List$cons, name, acc);
							}
						}();
						var $temp$lookupTable = lookupTable,
							$temp$typeAnnotations = _Utils_ap(list, rest),
							$temp$acc = newAcc;
						lookupTable = $temp$lookupTable;
						typeAnnotations = $temp$typeAnnotations;
						acc = $temp$acc;
						continue exposedSignatureTypesForTypeAnnotations;
					case 6:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$lookupTable = lookupTable,
							$temp$typeAnnotations = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, rest)),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						typeAnnotations = $temp$typeAnnotations;
						acc = $temp$acc;
						continue exposedSignatureTypesForTypeAnnotations;
					case 3:
						var list = _v1.a;
						var $temp$lookupTable = lookupTable,
							$temp$typeAnnotations = list,
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						typeAnnotations = $temp$typeAnnotations;
						acc = $temp$acc;
						continue exposedSignatureTypesForTypeAnnotations;
					case 4:
						var fields = _v1.a;
						return A3($jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForRecordFieldList, lookupTable, fields, acc);
					case 5:
						var _v4 = _v1.b;
						var fields = _v4.b;
						return A3($jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForRecordFieldList, lookupTable, fields, acc);
					case 2:
						return acc;
					default:
						return acc;
				}
			}
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$isExposingATypeNamed = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$isExposingATypeNamed$fn(needle, _v0) {
		var topLevelExpose = _v0.b;
		switch (topLevelExpose.$) {
			case 0:
				return false;
			case 1:
				return false;
			case 2:
				var name = topLevelExpose.a;
				return _Utils_eq(name, needle);
			default:
				var name = topLevelExpose.a.cH;
				return _Utils_eq(name, needle);
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$isTypeExposed = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$isTypeExposed$fn(exposes, name) {
		if (!exposes.$) {
			return true;
		} else {
			var list = exposes.a;
			return A2(
				$elm$core$List$any,
				$jfmengels$elm_review_common$NoMissingTypeExpose$isExposingATypeNamed(name),
				list);
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForAlias = F5(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForAlias$fn(lookupTable, exposes, _v0, typeAnnotation, exposedSignatureTypes) {
		var name = _v0.b;
		if (A2($jfmengels$elm_review_common$NoMissingTypeExpose$isTypeExposed, exposes, name)) {
			if (typeAnnotation.b.$ === 1) {
				var _v2 = typeAnnotation.b;
				var list = _v2.b;
				return A3($jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForTypeAnnotations, lookupTable, list, exposedSignatureTypes);
			} else {
				return A3(
					$jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForTypeAnnotations,
					lookupTable,
					_List_fromArray(
						[typeAnnotation]),
					exposedSignatureTypes);
			}
		} else {
			return exposedSignatureTypes;
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$isExposingAnOpenTypeNamed = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$isExposingAnOpenTypeNamed$fn(needle, _v0) {
		var expose = _v0.b;
		if (expose.$ === 3) {
			var name = expose.a.cH;
			var open = expose.a.iU;
			return _Utils_eq(name, needle) && (!_Utils_eq(open, $elm$core$Maybe$Nothing));
		} else {
			return false;
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$isTypeExposedOpen = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$isTypeExposedOpen$fn(exposes, name) {
		if (!exposes.$) {
			return true;
		} else {
			var list = exposes.a;
			return A2(
				$elm$core$List$any,
				$jfmengels$elm_review_common$NoMissingTypeExpose$isExposingAnOpenTypeNamed(name),
				list);
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForConstructorList = F5(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForConstructorList$fn(lookupTable, exposes, _v0, list, exposedSignatureTypes) {
		var name = _v0.b;
		return A2($jfmengels$elm_review_common$NoMissingTypeExpose$isTypeExposedOpen, exposes, name) ? A3(
			$elm$core$List$foldl,
			F2(
				function (_v1, acc) {
					var _arguments = _v1.b.gs;
					return A3($jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForTypeAnnotations, lookupTable, _arguments, acc);
				}),
			exposedSignatureTypes,
			list) : exposedSignatureTypes;
	});
var $stil4m$elm_syntax$Elm$Syntax$Exposing$exposesFunction = F2(function $stil4m$elm_syntax$Elm$Syntax$Exposing$exposesFunction$fn(s, exposure) {
		if (!exposure.$) {
			return true;
		} else {
			var l = exposure.a;
			return A2(
				$elm$core$List$any,
				function (_v1) {
					var value = _v1.b;
					if (value.$ === 1) {
						var fun = value.a;
						return _Utils_eq(fun, s);
					} else {
						return false;
					}
				},
				l);
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForSignature = F4(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForSignature$fn(lookupTable, exposes, maybeSignature, exposedSignatureTypes) {
		if (!maybeSignature.$) {
			var _v1 = maybeSignature.a;
			var name = _v1.b.cH;
			var typeAnnotation = _v1.b.hV;
			return A2(
				$stil4m$elm_syntax$Elm$Syntax$Exposing$exposesFunction,
				$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
				exposes) ? A3(
				$jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForTypeAnnotations,
				lookupTable,
				_List_fromArray(
					[typeAnnotation]),
				exposedSignatureTypes) : exposedSignatureTypes;
		} else {
			return exposedSignatureTypes;
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForDeclaration = F4(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForDeclaration$fn(lookupTable, exposes, _v0, exposedSignatureTypes) {
		var declaration = _v0.b;
		switch (declaration.$) {
			case 2:
				var name = declaration.a.cH;
				var constructors = declaration.a.ig;
				return A5($jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForConstructorList, lookupTable, exposes, name, constructors, exposedSignatureTypes);
			case 1:
				var name = declaration.a.cH;
				var typeAnnotation = declaration.a.hV;
				return A5($jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForAlias, lookupTable, exposes, name, typeAnnotation, exposedSignatureTypes);
			case 0:
				var signature = declaration.a.i7;
				return A4($jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForSignature, lookupTable, exposes, signature, exposedSignatureTypes);
			default:
				return exposedSignatureTypes;
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForDeclarationList = F4(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForDeclarationList$fn(lookupTable, exposes, list, exposedSignatureTypes) {
		return A3(
			$elm$core$List$foldl,
			A2($jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForDeclaration, lookupTable, exposes),
			exposedSignatureTypes,
			list);
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$rememberExposedType = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$rememberExposedType$fn(exposes, _v0, exposedTypes) {
		var name = _v0.b;
		return A2($jfmengels$elm_review_common$NoMissingTypeExpose$isTypeExposed, exposes, name) ? A2($elm$core$Set$insert, name, exposedTypes) : exposedTypes;
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedTypesForDeclaration = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedTypesForDeclaration$fn(exposes, _v0, exposedTypes) {
		var declaration = _v0.b;
		switch (declaration.$) {
			case 2:
				var name = declaration.a.cH;
				return A3($jfmengels$elm_review_common$NoMissingTypeExpose$rememberExposedType, exposes, name, exposedTypes);
			case 1:
				var name = declaration.a.cH;
				return A3($jfmengels$elm_review_common$NoMissingTypeExpose$rememberExposedType, exposes, name, exposedTypes);
			default:
				return exposedTypes;
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedTypesForDeclarationList = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedTypesForDeclarationList$fn(exposes, list, exposedTypes) {
		return A3(
			$elm$core$List$foldl,
			$jfmengels$elm_review_common$NoMissingTypeExpose$exposedTypesForDeclaration(exposes),
			exposedTypes,
			list);
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$declarationListVisitor = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$declarationListVisitor$fn(nodes, context) {
		return _Utils_Tuple2(
			_List_Nil,
			function () {
				var _v0 = context.aK;
				if (!_v0.$) {
					var data = _v0.a;
					return {
						s: context.s,
						aK: $jfmengels$elm_review_common$NoMissingTypeExpose$InternalModule(
							_Utils_update(
								data,
								{
									dP: A3($jfmengels$elm_review_common$NoMissingTypeExpose$exposedTypesForDeclarationList, data.bt, nodes, data.dP)
								})),
						aA: context.aA
					};
				} else {
					var data = _v0.a;
					return {
						s: context.s,
						aK: $jfmengels$elm_review_common$NoMissingTypeExpose$ExposedModule(
							_Utils_update(
								data,
								{
									dI: A2($jfmengels$elm_review_common$NoMissingTypeExpose$declaredTypesForDeclarationList, nodes, data.dI),
									dO: A4($jfmengels$elm_review_common$NoMissingTypeExpose$exposedSignatureTypesForDeclarationList, context.s, data.bt, nodes, data.dO)
								})),
						aA: context.aA
					};
				}
			}());
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$isTypePrivate = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$isTypePrivate$fn(modulesFromTheProject, data, _v0) {
		var typeCall = _v0.b;
		if (!typeCall.a.b) {
			var name = typeCall.b;
			return A2($elm$core$Set$member, name, data.dI) && (!A2($jfmengels$elm_review_common$NoMissingTypeExpose$isTypeExposed, data.bt, name));
		} else {
			var moduleName = typeCall.a;
			return A2($elm$core$Set$member, moduleName, modulesFromTheProject) && (!A2($jfmengels$elm_review_common$NoMissingTypeExpose$isModuleExposed, data.ao, moduleName));
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$InsertAt = F2(function $jfmengels$elm_review$Review$Fix$Internal$InsertAt$fn(a, b) {
		return {$: 2, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Fix$insertAt = $jfmengels$elm_review$Review$Fix$Internal$InsertAt;
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposeTypeFix = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposeTypeFix$fn(exposingListStart, _v0) {
		var moduleName = _v0.a;
		var name = _v0.b;
		var _v1 = _Utils_Tuple2(exposingListStart, moduleName);
		if ((!_v1.a.$) && (!_v1.b.b)) {
			var start = _v1.a.a;
			return _List_fromArray(
				[
					A2($jfmengels$elm_review$Review$Fix$insertAt, start, name + ', ')
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$formatTypeName = function (_v0) {
	var moduleName = _v0.a;
	var name = _v0.b;
	return A2(
		$elm$core$String$join,
		'.',
		_Utils_ap(
			moduleName,
			_List_fromArray(
				[name])));
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$makeError = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$makeError$fn(exposingListStart, _v0) {
		var range = _v0.a;
		var typeName = _v0.b;
		var formattedName = $jfmengels$elm_review_common$NoMissingTypeExpose$formatTypeName(typeName);
		return A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['Users of this module will not be able to annotate a value of this type if they wanted to. You should expose this type or an alias of this type.']),
				bx: 'Private type `' + (formattedName + '` should be exposed')
			},
			range,
			A2($jfmengels$elm_review_common$NoMissingTypeExpose$exposeTypeFix, exposingListStart, typeName));
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$finalEvaluation = function (context) {
	var _v0 = context.aK;
	if (!_v0.$) {
		return _List_Nil;
	} else {
		var data = _v0.a;
		return A2(
			$elm$core$List$map,
			$jfmengels$elm_review_common$NoMissingTypeExpose$makeError(data.eB),
			A2(
				$elm$core$List$filter,
				A2($jfmengels$elm_review_common$NoMissingTypeExpose$isTypePrivate, context.aA, data),
				data.dO));
	}
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$addExposedModuleAlias = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$addExposedModuleAlias$fn(moduleName, moduleAlias, exposedModules) {
		if (!exposedModules.$) {
			return exposedModules;
		} else {
			var list = exposedModules.a;
			return A2(
				$elm$core$Set$member,
				A2($elm$core$String$join, '.', moduleName),
				list) ? $jfmengels$elm_review_common$NoMissingTypeExpose$Package(
				A2($elm$core$Set$insert, moduleAlias, list)) : exposedModules;
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposedModulesForImportAlias = F3(function $jfmengels$elm_review_common$NoMissingTypeExpose$exposedModulesForImportAlias$fn(moduleName, maybeModuleAlias, exposedModules) {
		if (!maybeModuleAlias.$) {
			var _v1 = maybeModuleAlias.a;
			var moduleAlias = _v1.b;
			return A3(
				$jfmengels$elm_review_common$NoMissingTypeExpose$addExposedModuleAlias,
				moduleName,
				A2($elm$core$String$join, '.', moduleAlias),
				exposedModules);
		} else {
			return exposedModules;
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$importVisitor = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$importVisitor$fn(_v0, context) {
		var moduleName = _v0.b.eY;
		var moduleAlias = _v0.b.iI;
		var _v1 = context.aK;
		if (!_v1.$) {
			return _Utils_Tuple2(_List_Nil, context);
		} else {
			var data = _v1.a;
			return _Utils_Tuple2(
				_List_Nil,
				{
					s: context.s,
					aK: $jfmengels$elm_review_common$NoMissingTypeExpose$ExposedModule(
						_Utils_update(
							data,
							{
								ao: A3(
									$jfmengels$elm_review_common$NoMissingTypeExpose$exposedModulesForImportAlias,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(moduleName),
									moduleAlias,
									data.ao)
							})),
					aA: context.aA
				});
		}
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$exposingListStartLocation = function (exposes) {
	if ((exposes.$ === 1) && exposes.a.b) {
		var _v1 = exposes.a;
		var _v2 = _v1.a;
		var range = _v2.a;
		return $elm$core$Maybe$Just(range.dv);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_common$NoMissingTypeExpose$moduleDefinitionVisitor = F2(function $jfmengels$elm_review_common$NoMissingTypeExpose$moduleDefinitionVisitor$fn(_v0, context) {
		var mod = _v0.b;
		var _v1 = context.aK;
		if (!_v1.$) {
			var data = _v1.a;
			return _Utils_Tuple2(
				_List_Nil,
				{
					s: context.s,
					aK: $jfmengels$elm_review_common$NoMissingTypeExpose$InternalModule(
						_Utils_update(
							data,
							{
								bt: $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(mod)
							})),
					aA: context.aA
				});
		} else {
			var data = _v1.a;
			return _Utils_Tuple2(
				_List_Nil,
				{
					s: context.s,
					aK: $jfmengels$elm_review_common$NoMissingTypeExpose$ExposedModule(
						_Utils_update(
							data,
							{
								bt: $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(mod),
								eB: $jfmengels$elm_review_common$NoMissingTypeExpose$exposingListStartLocation(
									$stil4m$elm_syntax$Elm$Syntax$Module$exposingList(mod))
							})),
					aA: context.aA
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$withFinalModuleEvaluation = F2(function $jfmengels$elm_review$Review$Rule$withFinalModuleEvaluation$fn(visitor, _v0) {
		var schema = _v0;
		var combinedVisitor = function () {
			var _v1 = schema.aq;
			if (_v1.$ === 1) {
				return visitor;
			} else {
				var previousVisitor = _v1.a;
				return function (context) {
					return A2(
						$elm$core$List$append,
						visitor(context),
						previousVisitor(context));
				};
			}
		}();
		return _Utils_update(
			schema,
			{
				aq: $elm$core$Maybe$Just(combinedVisitor)
			});
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$moduleVisitor = function (schema) {
	return A2(
		$jfmengels$elm_review$Review$Rule$withFinalModuleEvaluation,
		$jfmengels$elm_review_common$NoMissingTypeExpose$finalEvaluation,
		A2(
			$jfmengels$elm_review$Review$Rule$withDeclarationListVisitor,
			$jfmengels$elm_review_common$NoMissingTypeExpose$declarationListVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withImportVisitor,
				$jfmengels$elm_review_common$NoMissingTypeExpose$importVisitor,
				A2($jfmengels$elm_review$Review$Rule$withModuleDefinitionVisitor, $jfmengels$elm_review_common$NoMissingTypeExpose$moduleDefinitionVisitor, schema))));
};
var $jfmengels$elm_review$Review$Rule$newProjectRuleSchema = F2(function $jfmengels$elm_review$Review$Rule$newProjectRuleSchema$fn(name, initialProjectContext) {
		return {c_: $elm$core$Maybe$Nothing, V: $elm$core$Maybe$Nothing, an: $elm$core$Maybe$Nothing, X: $elm$core$Maybe$Nothing, aq: $elm$core$Maybe$Nothing, ay: $elm$core$Maybe$Nothing, aR: initialProjectContext, az: $elm$core$Maybe$Nothing, cG: _List_Nil, cH: name, v: false, _: $elm$core$Maybe$Nothing, b6: 0};
	});
var $jfmengels$elm_review$Review$Rule$providesFixesForProjectRule = function (_v0) {
	var projectRuleSchema = _v0;
	return _Utils_update(
		projectRuleSchema,
		{v: true});
};
var $jfmengels$elm_review$Review$Rule$ImportedModulesFirst = 1;
var $jfmengels$elm_review$Review$Rule$withContextFromImportedModules = function (_v0) {
	var schema = _v0;
	return _Utils_update(
		schema,
		{b6: 1});
};
var $elm$core$Tuple$mapFirst = F2(function $elm$core$Tuple$mapFirst$fn(func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $jfmengels$elm_review$Review$Rule$removeErrorPhantomTypes = function (list) {
	return A2(
		$elm$core$List$map,
		function (_v0) {
			var err = _v0;
			return err;
		},
		list);
};
var $jfmengels$elm_review$Review$Rule$removeErrorPhantomTypeFromVisitor = function (_function) {
	return F2(
		function (element, projectContext) {
			return A2(
				$elm$core$Tuple$mapFirst,
				$jfmengels$elm_review$Review$Rule$removeErrorPhantomTypes,
				A2(_function, element, projectContext));
		});
};
var $jfmengels$elm_review$Review$Rule$withDirectDependenciesProjectVisitor = F2(function $jfmengels$elm_review$Review$Rule$withDirectDependenciesProjectVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				an: $elm$core$Maybe$Just(
					A2(
						$jfmengels$elm_review$Review$Rule$combineVisitors,
						$jfmengels$elm_review$Review$Rule$removeErrorPhantomTypeFromVisitor(visitor),
						schema.an))
			});
	});
var $jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor = F2(function $jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				X: $elm$core$Maybe$Just(
					A2(
						$jfmengels$elm_review$Review$Rule$combineVisitors,
						$jfmengels$elm_review$Review$Rule$removeErrorPhantomTypeFromVisitor(visitor),
						schema.X))
			});
	});
var $jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator = F2(function $jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator$fn(functions, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				ay: $elm$core$Maybe$Just(
					{cl: functions.cl, cn: functions.cn}),
				az: $elm$core$Maybe$Just(functions.gY)
			});
	});
var $jfmengels$elm_review$Review$Rule$withModuleVisitor = F2(function $jfmengels$elm_review$Review$Rule$withModuleVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				cG: A2(
					$elm$core$List$cons,
					$jfmengels$elm_review$Review$Rule$removeExtensibleRecordTypeVariable(visitor),
					schema.cG)
			});
	});
var $jfmengels$elm_review_common$NoMissingTypeExpose$rule = $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
	$jfmengels$elm_review$Review$Rule$providesFixesForProjectRule(
		A2(
			$jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator,
			{cl: $jfmengels$elm_review_common$NoMissingTypeExpose$foldProjectContexts, cn: $jfmengels$elm_review_common$NoMissingTypeExpose$fromModuleToProjectContext, gY: $jfmengels$elm_review_common$NoMissingTypeExpose$fromProjectToModuleContext},
			$jfmengels$elm_review$Review$Rule$withContextFromImportedModules(
				A2(
					$jfmengels$elm_review$Review$Rule$withModuleVisitor,
					$jfmengels$elm_review_common$NoMissingTypeExpose$moduleVisitor,
					A2(
						$jfmengels$elm_review$Review$Rule$withDirectDependenciesProjectVisitor,
						$jfmengels$elm_review_common$NoMissingTypeExpose$dependencyDictVisitor,
						A2(
							$jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor,
							$jfmengels$elm_review_common$NoMissingTypeExpose$elmJsonVisitor,
							A2($jfmengels$elm_review$Review$Rule$newProjectRuleSchema, 'NoMissingTypeExpose', $jfmengels$elm_review_common$NoMissingTypeExpose$initialProjectContext))))))));
var $jfmengels$elm_review_common$RangeDict$empty = $elm$core$Dict$empty;
var $jfmengels$elm_review_common$NoPrematureLetComputation$emptyBranching = {Q: _List_Nil, cC: $elm$core$Maybe$Nothing};
var $jfmengels$elm_review_common$NoPrematureLetComputation$InsertExistingLet = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$InsertNewLet = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$figureOutInsertionLocation = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	if (_v0.$ === 15) {
		var declarations = _v0.a.gD;
		if (declarations.b) {
			var first = declarations.a;
			return $jfmengels$elm_review_common$NoPrematureLetComputation$InsertExistingLet(
				$stil4m$elm_syntax$Elm$Syntax$Node$range(first).dv);
		} else {
			return $jfmengels$elm_review_common$NoPrematureLetComputation$InsertNewLet(
				$stil4m$elm_syntax$Elm$Syntax$Node$range(node).dv);
		}
	} else {
		return $jfmengels$elm_review_common$NoPrematureLetComputation$InsertNewLet(
			$stil4m$elm_syntax$Elm$Syntax$Node$range(node).dv);
	}
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$Branch = 0;
var $jfmengels$elm_review_common$NoPrematureLetComputation$Scope = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$Scope$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$newBranch = function (insertionLocation) {
	return A2(
		$jfmengels$elm_review_common$NoPrematureLetComputation$Scope,
		0,
		{cy: insertionLocation, bW: _List_Nil, z: $jfmengels$elm_review_common$RangeDict$empty, bm: $elm$core$Set$empty});
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$declarationVisitor = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$declarationVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (!_v0.$) {
			var declaration = _v0.a.ii;
			return _Utils_Tuple2(
				_List_Nil,
				{
					G: $jfmengels$elm_review_common$NoPrematureLetComputation$emptyBranching,
					eD: context.eD,
					df: $jfmengels$elm_review_common$RangeDict$empty,
					s: context.s,
					R: $jfmengels$elm_review_common$NoPrematureLetComputation$newBranch(
						$jfmengels$elm_review_common$NoPrematureLetComputation$figureOutInsertionLocation(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).eC))
				});
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$addBranching = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$addBranching$fn(range, branching) {
		return {
			Q: _Utils_ap(
				branching.Q,
				_List_fromArray(
					[range])),
			cC: $elm$core$Maybe$Just(range)
		};
	});
var $jfmengels$elm_review_common$RangeDict$rangeAsString = function (range) {
	return A2(
		$elm$core$String$join,
		'_',
		A2(
			$elm$core$List$map,
			$elm$core$String$fromInt,
			_List_fromArray(
				[range.dv.b1, range.dv.bH, range.c4.b1, range.c4.bH])));
};
var $jfmengels$elm_review_common$RangeDict$insert = function (range) {
	return $elm$core$Dict$insert(
		$jfmengels$elm_review_common$RangeDict$rangeAsString(range));
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$insertNewBranches = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$insertNewBranches$fn(nodes, rangeDict) {
		insertNewBranches:
		while (true) {
			if (!nodes.b) {
				return rangeDict;
			} else {
				var node = nodes.a;
				var tail = nodes.b;
				var $temp$nodes = tail,
					$temp$rangeDict = A3(
					$jfmengels$elm_review_common$RangeDict$insert,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					$jfmengels$elm_review_common$NoPrematureLetComputation$newBranch(
						$jfmengels$elm_review_common$NoPrematureLetComputation$figureOutInsertionLocation(node)),
					rangeDict);
				nodes = $temp$nodes;
				rangeDict = $temp$rangeDict;
				continue insertNewBranches;
			}
		}
	});
var $jfmengels$elm_review_common$RangeDict$modify = F3(function $jfmengels$elm_review_common$RangeDict$modify$fn(range, mapper, dict) {
		var key = $jfmengels$elm_review_common$RangeDict$rangeAsString(range);
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			var value = _v0.a;
			return A3(
				$elm$core$Dict$insert,
				$jfmengels$elm_review_common$RangeDict$rangeAsString(range),
				mapper(value),
				dict);
		} else {
			return dict;
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$updateCurrentBranch = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$updateCurrentBranch$fn(updateFn, currentBranching, _v0) {
		var type_ = _v0.a;
		var segment = _v0.b;
		if (!currentBranching.b) {
			return A2(
				$jfmengels$elm_review_common$NoPrematureLetComputation$Scope,
				type_,
				updateFn(segment));
		} else {
			var range = currentBranching.a;
			var restOfSegments = currentBranching.b;
			return A2(
				$jfmengels$elm_review_common$NoPrematureLetComputation$Scope,
				type_,
				_Utils_update(
					segment,
					{
						z: A3(
							$jfmengels$elm_review_common$RangeDict$modify,
							range,
							A2($jfmengels$elm_review_common$NoPrematureLetComputation$updateCurrentBranch, updateFn, restOfSegments),
							segment.z)
					}));
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$addBranches = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$addBranches$fn(nodes, context) {
		var branch = A3(
			$jfmengels$elm_review_common$NoPrematureLetComputation$updateCurrentBranch,
			function (b) {
				return _Utils_update(
					b,
					{
						z: A2($jfmengels$elm_review_common$NoPrematureLetComputation$insertNewBranches, nodes, b.z)
					});
			},
			context.G.Q,
			context.R);
		return _Utils_update(
			context,
			{R: branch});
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$knownFunctions = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'map',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						_List_fromArray(
							['Maybe']),
						2),
						_Utils_Tuple2(
						_List_fromArray(
							['Html']),
						2),
						_Utils_Tuple2(
						_List_fromArray(
							['Result']),
						2),
						_Utils_Tuple2(
						_List_fromArray(
							['Task']),
						2)
					]))),
			_Utils_Tuple2(
			'map2',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						_List_fromArray(
							['Maybe']),
						3),
						_Utils_Tuple2(
						_List_fromArray(
							['Result']),
						3),
						_Utils_Tuple2(
						_List_fromArray(
							['Task']),
						3)
					]))),
			_Utils_Tuple2(
			'map3',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						_List_fromArray(
							['Maybe']),
						4),
						_Utils_Tuple2(
						_List_fromArray(
							['Result']),
						4),
						_Utils_Tuple2(
						_List_fromArray(
							['Task']),
						4)
					]))),
			_Utils_Tuple2(
			'map4',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						_List_fromArray(
							['Maybe']),
						5),
						_Utils_Tuple2(
						_List_fromArray(
							['Result']),
						5),
						_Utils_Tuple2(
						_List_fromArray(
							['Task']),
						5)
					]))),
			_Utils_Tuple2(
			'map5',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						_List_fromArray(
							['Maybe']),
						6),
						_Utils_Tuple2(
						_List_fromArray(
							['Result']),
						6),
						_Utils_Tuple2(
						_List_fromArray(
							['Task']),
						6)
					]))),
			_Utils_Tuple2(
			'mapError',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						_List_fromArray(
							['Result']),
						2),
						_Utils_Tuple2(
						_List_fromArray(
							['Task']),
						2)
					]))),
			_Utils_Tuple2(
			'andThen',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						_List_fromArray(
							['Maybe']),
						2),
						_Utils_Tuple2(
						_List_fromArray(
							['Result']),
						2),
						_Utils_Tuple2(
						_List_fromArray(
							['Task']),
						2)
					]))),
			_Utils_Tuple2(
			'mapFirst',
			A2(
				$elm$core$Dict$singleton,
				_List_fromArray(
					['Tuple']),
				2)),
			_Utils_Tuple2(
			'mapSecond',
			A2(
				$elm$core$Dict$singleton,
				_List_fromArray(
					['Tuple']),
				2)),
			_Utils_Tuple2(
			'perform',
			A2(
				$elm$core$Dict$singleton,
				_List_fromArray(
					['Task']),
				2)),
			_Utils_Tuple2(
			'attempt',
			A2(
				$elm$core$Dict$singleton,
				_List_fromArray(
					['Task']),
				2)),
			_Utils_Tuple2(
			'onError',
			A2(
				$elm$core$Dict$singleton,
				_List_fromArray(
					['Task']),
				2)),
			_Utils_Tuple2(
			'update',
			A2(
				$elm$core$Dict$singleton,
				_List_fromArray(
					['Dict']),
				4))
		]));
var $jfmengels$elm_review_common$NoPrematureLetComputation$numberOfArgumentsForFunction = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$numberOfArgumentsForFunction$fn(lookupTable, fnName, fnRange) {
		var _v0 = A2($elm$core$Dict$get, fnName, $jfmengels$elm_review_common$NoPrematureLetComputation$knownFunctions);
		if (!_v0.$) {
			var knownModuleNames = _v0.a;
			return A2(
				$elm$core$Maybe$andThen,
				function (moduleName) {
					return A2($elm$core$Dict$get, moduleName, knownModuleNames);
				},
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, fnRange));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$removeParens = function (node) {
	removeParens:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 14) {
			var expr = _v0.a;
			var $temp$node = expr;
			node = $temp$node;
			continue removeParens;
		} else {
			return node;
		}
	}
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$registerApplicationCall = F5(function $jfmengels$elm_review_common$NoPrematureLetComputation$registerApplicationCall$fn(fnRange, fnName, argumentWithParens, nbOfOtherArguments, context) {
		var argument = $jfmengels$elm_review_common$NoPrematureLetComputation$removeParens(argumentWithParens);
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(argument);
		if (_v0.$ === 17) {
			var _v1 = A3($jfmengels$elm_review_common$NoPrematureLetComputation$numberOfArgumentsForFunction, context.s, fnName, fnRange);
			if (!_v1.$) {
				var expectedNumberOfArguments = _v1.a;
				return _Utils_eq(nbOfOtherArguments, expectedNumberOfArguments - 1) ? _Utils_update(
					context,
					{
						df: A3(
							$jfmengels$elm_review_common$RangeDict$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(argument),
							0,
							context.df)
					}) : context;
			} else {
				return context;
			}
		} else {
			return context;
		}
	});
var $stil4m$elm_syntax$Elm$Syntax$Range$compareLocations = F2(function $stil4m$elm_syntax$Elm$Syntax$Range$compareLocations$fn(left, right) {
		return (_Utils_cmp(left.b1, right.b1) < 0) ? 0 : ((_Utils_cmp(left.b1, right.b1) > 0) ? 2 : A2($elm$core$Basics$compare, left.bH, right.bH));
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$isRangeContained = function (_v0) {
	var outer = _v0.hr;
	var inner = _v0.g6;
	return (A2($stil4m$elm_syntax$Elm$Syntax$Range$compareLocations, outer.dv, inner.dv) !== 2) && (!(!A2($stil4m$elm_syntax$Elm$Syntax$Range$compareLocations, outer.c4, inner.c4)));
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$markDeclarationAsUsed = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$markDeclarationAsUsed$fn(range, declared) {
		return $jfmengels$elm_review_common$NoPrematureLetComputation$isRangeContained(
			{g6: range, hr: declared.dG}) ? _Utils_update(
			declared,
			{eM: true}) : declared;
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$markDeclarationsAsUsed = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$markDeclarationsAsUsed$fn(range, branchData) {
		return _Utils_update(
			branchData,
			{
				bW: A2(
					$elm$core$List$map,
					$jfmengels$elm_review_common$NoPrematureLetComputation$markDeclarationAsUsed(range),
					branchData.bW)
			});
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$updateAllSegmentsOfCurrentBranch = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$updateAllSegmentsOfCurrentBranch$fn(updateFn, currentBranching, _v0) {
		var type_ = _v0.a;
		var scope = _v0.b;
		if (!currentBranching.b) {
			return A2(
				$jfmengels$elm_review_common$NoPrematureLetComputation$Scope,
				type_,
				updateFn(scope));
		} else {
			var range = currentBranching.a;
			var restOfSegments = currentBranching.b;
			return A2(
				$jfmengels$elm_review_common$NoPrematureLetComputation$Scope,
				type_,
				updateFn(
					_Utils_update(
						scope,
						{
							z: A3(
								$jfmengels$elm_review_common$RangeDict$modify,
								range,
								A2($jfmengels$elm_review_common$NoPrematureLetComputation$updateAllSegmentsOfCurrentBranch, updateFn, restOfSegments),
								scope.z)
						})));
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$markLetDeclarationsAsIntroducingVariables = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$markLetDeclarationsAsIntroducingVariables$fn(range, context) {
		return A3(
			$jfmengels$elm_review_common$NoPrematureLetComputation$updateAllSegmentsOfCurrentBranch,
			$jfmengels$elm_review_common$NoPrematureLetComputation$markDeclarationsAsUsed(range),
			context.G.Q,
			context.R);
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$patternIntroducesVariable = function (node) {
	patternIntroducesVariable:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 10:
				var patterns = _v0.a;
				return A2($elm$core$List$any, $jfmengels$elm_review_common$NoPrematureLetComputation$patternIntroducesVariable, patterns);
			case 7:
				var patterns = _v0.a;
				return A2($elm$core$List$any, $jfmengels$elm_review_common$NoPrematureLetComputation$patternIntroducesVariable, patterns);
			case 8:
				return true;
			case 9:
				var left = _v0.a;
				var right = _v0.b;
				return $jfmengels$elm_review_common$NoPrematureLetComputation$patternIntroducesVariable(left) || $jfmengels$elm_review_common$NoPrematureLetComputation$patternIntroducesVariable(right);
			case 11:
				return true;
			case 12:
				var patterns = _v0.b;
				return A2($elm$core$List$any, $jfmengels$elm_review_common$NoPrematureLetComputation$patternIntroducesVariable, patterns);
			case 13:
				return true;
			case 14:
				var pattern = _v0.a;
				var $temp$node = pattern;
				node = $temp$node;
				continue patternIntroducesVariable;
			default:
				return false;
		}
	}
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$registerCaseExpression = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$registerCaseExpression$fn(node, cases, context) {
		var contextWithDeclarationsMarked = A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $jfmengels$elm_review_common$NoPrematureLetComputation$patternIntroducesVariable),
			cases) ? _Utils_update(
			context,
			{
				R: A2(
					$jfmengels$elm_review_common$NoPrematureLetComputation$markLetDeclarationsAsIntroducingVariables,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					context)
			}) : context;
		var branchNodes = A2(
			$elm$core$List$map,
			function (_v0) {
				var exprNode = _v0.b;
				return exprNode;
			},
			cases);
		return A2($jfmengels$elm_review_common$NoPrematureLetComputation$addBranches, branchNodes, contextWithDeclarationsMarked);
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$Function = 2;
var $jfmengels$elm_review_common$NoPrematureLetComputation$FunctionOkayToMoveInto = 3;
var $jfmengels$elm_review_common$RangeDict$member = function (range) {
	return $elm$core$Dict$member(
		$jfmengels$elm_review_common$RangeDict$rangeAsString(range));
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$registerLambdaExpression = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$registerLambdaExpression$fn(node, _v0, context) {
		var args = _v0.h0;
		var expression = _v0.eC;
		var newScope = A2(
			$jfmengels$elm_review_common$NoPrematureLetComputation$Scope,
			A2(
				$jfmengels$elm_review_common$RangeDict$member,
				$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
				context.df) ? 3 : 2,
			{
				cy: $jfmengels$elm_review_common$NoPrematureLetComputation$figureOutInsertionLocation(expression),
				bW: _List_Nil,
				z: $jfmengels$elm_review_common$RangeDict$empty,
				bm: $elm$core$Set$empty
			});
		var branch = A2($elm$core$List$any, $jfmengels$elm_review_common$NoPrematureLetComputation$patternIntroducesVariable, args) ? A2(
			$jfmengels$elm_review_common$NoPrematureLetComputation$markLetDeclarationsAsIntroducingVariables,
			$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
			context) : context.R;
		var branchWithAddedScope = A3(
			$jfmengels$elm_review_common$NoPrematureLetComputation$updateCurrentBranch,
			function (b) {
				return _Utils_update(
					b,
					{
						z: A3(
							$jfmengels$elm_review_common$RangeDict$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							newScope,
							b.z)
					});
			},
			context.G.Q,
			branch);
		return _Utils_update(
			context,
			{
				G: A2(
					$jfmengels$elm_review_common$NoPrematureLetComputation$addBranching,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					context.G),
				R: branchWithAddedScope
			});
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$LetScope = 1;
var $jfmengels$elm_review_common$NoPrematureLetComputation$variablesInPattern = function (node) {
	variablesInPattern:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 10:
				var patterns = _v0.a;
				return A2($elm$core$List$concatMap, $jfmengels$elm_review_common$NoPrematureLetComputation$variablesInPattern, patterns);
			case 7:
				var patterns = _v0.a;
				return A2($elm$core$List$concatMap, $jfmengels$elm_review_common$NoPrematureLetComputation$variablesInPattern, patterns);
			case 8:
				var fields = _v0.a;
				return fields;
			case 9:
				var left = _v0.a;
				var right = _v0.b;
				return A2(
					$elm$core$List$concatMap,
					$jfmengels$elm_review_common$NoPrematureLetComputation$variablesInPattern,
					_List_fromArray(
						[left, right]));
			case 11:
				var name = _v0.a;
				return _List_fromArray(
					[
						A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
						name)
					]);
			case 12:
				var patterns = _v0.b;
				return A2($elm$core$List$concatMap, $jfmengels$elm_review_common$NoPrematureLetComputation$variablesInPattern, patterns);
			case 13:
				var pattern = _v0.a;
				var name = _v0.b;
				return A2(
					$elm$core$List$cons,
					name,
					$jfmengels$elm_review_common$NoPrematureLetComputation$variablesInPattern(pattern));
			case 14:
				var pattern = _v0.a;
				var $temp$node = pattern;
				node = $temp$node;
				continue variablesInPattern;
			default:
				return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$collectDeclarations = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	if (!_v0.$) {
		var letFunction = _v0.a;
		var declaration = $stil4m$elm_syntax$Elm$Syntax$Node$value(letFunction.ii);
		return $elm$core$List$isEmpty(declaration.gs) ? _List_fromArray(
			[
				_Utils_Tuple3(
				declaration.cH,
				$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration.eC),
				node)
			]) : _List_Nil;
	} else {
		var pattern = _v0.a;
		var expression = _v0.b;
		var _v1 = $jfmengels$elm_review_common$NoPrematureLetComputation$variablesInPattern(pattern);
		if (_v1.b && (!_v1.b.b)) {
			var name = _v1.a;
			return _List_fromArray(
				[
					_Utils_Tuple3(
					name,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(expression),
					node)
				]);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_common$RangeDict$fromList = function (entries) {
	return $elm$core$Dict$fromList(
		A2(
			$elm$core$List$map,
			$elm$core$Tuple$mapFirst($jfmengels$elm_review_common$RangeDict$rangeAsString),
			entries));
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$fullLines = function (range) {
	return {
		c4: range.c4,
		dv: {bH: 1, b1: range.dv.b1}
	};
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$functionScope = A2(
	$jfmengels$elm_review_common$NoPrematureLetComputation$Scope,
	2,
	{
		cy: $jfmengels$elm_review_common$NoPrematureLetComputation$InsertNewLet(
			{bH: 0, b1: 0}),
		bW: _List_Nil,
		z: $jfmengels$elm_review_common$RangeDict$empty,
		bm: $elm$core$Set$empty
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$getLetFunctionRange = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	if (!_v0.$) {
		var declaration = _v0.a.ii;
		return $elm$core$List$isEmpty(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).gs) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			_Utils_Tuple2(
				$stil4m$elm_syntax$Elm$Syntax$Node$range(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).eC),
				$jfmengels$elm_review_common$NoPrematureLetComputation$functionScope));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$registerLetExpression = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$registerLetExpression$fn(node, _v0, context) {
		var declarations = _v0.gD;
		var expression = _v0.eC;
		var scopes = $jfmengels$elm_review_common$RangeDict$fromList(
			A2($elm$core$List$filterMap, $jfmengels$elm_review_common$NoPrematureLetComputation$getLetFunctionRange, declarations));
		var isDeclarationAlone = $elm$core$List$length(declarations) === 1;
		var letDeclarations = A2(
			$elm$core$List$map,
			function (_v1) {
				var nameNode = _v1.a;
				var expressionRange = _v1.b;
				var declaration = _v1.c;
				return {
					fy: $stil4m$elm_syntax$Elm$Syntax$Node$range(declaration).dv.bH,
					dG: $jfmengels$elm_review_common$NoPrematureLetComputation$fullLines(
						{
							c4: expressionRange.c4,
							dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(declaration).dv
						}),
					eM: false,
					cH: $stil4m$elm_syntax$Elm$Syntax$Node$value(nameNode),
					e8: isDeclarationAlone ? {
						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(expression).dv,
						dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(node).dv
					} : {
						c4: expressionRange.c4,
						dv: {
							bH: 1,
							b1: $stil4m$elm_syntax$Elm$Syntax$Node$range(declaration).dv.b1
						}
					},
					e9: $stil4m$elm_syntax$Elm$Syntax$Node$range(nameNode)
				};
			},
			A2($elm$core$List$concatMap, $jfmengels$elm_review_common$NoPrematureLetComputation$collectDeclarations, declarations));
		var newScope = A2(
			$jfmengels$elm_review_common$NoPrematureLetComputation$Scope,
			1,
			{
				cy: $jfmengels$elm_review_common$NoPrematureLetComputation$figureOutInsertionLocation(node),
				bW: letDeclarations,
				z: scopes,
				bm: $elm$core$Set$empty
			});
		var contextWithDeclarationsMarked = _Utils_update(
			context,
			{
				R: A2(
					$jfmengels$elm_review_common$NoPrematureLetComputation$markLetDeclarationsAsIntroducingVariables,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					context)
			});
		var branch = A3(
			$jfmengels$elm_review_common$NoPrematureLetComputation$updateCurrentBranch,
			function (b) {
				return _Utils_update(
					b,
					{
						z: A3(
							$jfmengels$elm_review_common$RangeDict$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							newScope,
							b.z)
					});
			},
			contextWithDeclarationsMarked.G.Q,
			contextWithDeclarationsMarked.R);
		return _Utils_update(
			contextWithDeclarationsMarked,
			{
				G: A2(
					$jfmengels$elm_review_common$NoPrematureLetComputation$addBranching,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					contextWithDeclarationsMarked.G),
				R: branch
			});
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$expressionEnterVisitorHelp = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$expressionEnterVisitorHelp$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$9:
		while (true) {
			switch (_v0.$) {
				case 3:
					if (!_v0.a.b) {
						var name = _v0.b;
						var branch = A3(
							$jfmengels$elm_review_common$NoPrematureLetComputation$updateCurrentBranch,
							function (b) {
								return _Utils_update(
									b,
									{
										bm: A2($elm$core$Set$insert, name, b.bm)
									});
							},
							context.G.Q,
							context.R);
						return _Utils_update(
							context,
							{R: branch});
					} else {
						break _v0$9;
					}
				case 22:
					var name = _v0.a;
					var branch = A3(
						$jfmengels$elm_review_common$NoPrematureLetComputation$updateCurrentBranch,
						function (b) {
							return _Utils_update(
								b,
								{
									bm: A2(
										$elm$core$Set$insert,
										$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
										b.bm)
								});
						},
						context.G.Q,
						context.R);
					return _Utils_update(
						context,
						{R: branch});
				case 15:
					var letBlock = _v0.a;
					return A3($jfmengels$elm_review_common$NoPrematureLetComputation$registerLetExpression, node, letBlock, context);
				case 4:
					var then_ = _v0.b;
					var else_ = _v0.c;
					return A2(
						$jfmengels$elm_review_common$NoPrematureLetComputation$addBranches,
						_List_fromArray(
							[then_, else_]),
						context);
				case 16:
					var cases = _v0.a.ia;
					return A3($jfmengels$elm_review_common$NoPrematureLetComputation$registerCaseExpression, node, cases, context);
				case 17:
					var lambda = _v0.a;
					return A3($jfmengels$elm_review_common$NoPrematureLetComputation$registerLambdaExpression, node, lambda, context);
				case 1:
					if ((_v0.a.b && (_v0.a.a.b.$ === 3)) && _v0.a.b.b) {
						var _v1 = _v0.a;
						var _v2 = _v1.a;
						var fnRange = _v2.a;
						var _v3 = _v2.b;
						var fnName = _v3.b;
						var _v4 = _v1.b;
						var argumentWithParens = _v4.a;
						var restOfArguments = _v4.b;
						return A5(
							$jfmengels$elm_review_common$NoPrematureLetComputation$registerApplicationCall,
							fnRange,
							fnName,
							argumentWithParens,
							$elm$core$List$length(restOfArguments),
							context);
					} else {
						break _v0$9;
					}
				case 2:
					switch (_v0.a) {
						case '|>':
							if ((((_v0.d.b.$ === 1) && _v0.d.b.a.b) && (_v0.d.b.a.a.b.$ === 3)) && _v0.d.b.a.b.b) {
								var _v5 = _v0.d;
								var _v6 = _v5.b.a;
								var _v7 = _v6.a;
								var fnRange = _v7.a;
								var _v8 = _v7.b;
								var fnName = _v8.b;
								var _v9 = _v6.b;
								var argumentWithParens = _v9.a;
								var restOfArguments = _v9.b;
								return A5(
									$jfmengels$elm_review_common$NoPrematureLetComputation$registerApplicationCall,
									fnRange,
									fnName,
									argumentWithParens,
									$elm$core$List$length(restOfArguments) + 1,
									context);
							} else {
								break _v0$9;
							}
						case '<|':
							if ((((_v0.c.b.$ === 1) && _v0.c.b.a.b) && (_v0.c.b.a.a.b.$ === 3)) && _v0.c.b.a.b.b) {
								var _v10 = _v0.c;
								var _v11 = _v10.b.a;
								var _v12 = _v11.a;
								var fnRange = _v12.a;
								var _v13 = _v12.b;
								var fnName = _v13.b;
								var _v14 = _v11.b;
								var argumentWithParens = _v14.a;
								var restOfArguments = _v14.b;
								return A5(
									$jfmengels$elm_review_common$NoPrematureLetComputation$registerApplicationCall,
									fnRange,
									fnName,
									argumentWithParens,
									$elm$core$List$length(restOfArguments) + 1,
									context);
							} else {
								break _v0$9;
							}
						default:
							break _v0$9;
					}
				default:
					break _v0$9;
			}
		}
		return context;
	});
var $jfmengels$elm_review_common$RangeDict$get = function (range) {
	return $elm$core$Dict$get(
		$jfmengels$elm_review_common$RangeDict$rangeAsString(range));
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$getScopeData = function (_v0) {
	var scope = _v0.b;
	return scope;
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$getScopes = A2(
	$elm$core$Basics$composeR,
	$jfmengels$elm_review_common$NoPrematureLetComputation$getScopeData,
	function ($) {
		return $.z;
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$getCurrentBranch = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$getCurrentBranch$fn(currentBranching, branch) {
		if (!currentBranching.b) {
			return $elm$core$Maybe$Just(branch);
		} else {
			var range = currentBranching.a;
			var restOfBranching = currentBranching.b;
			return A2(
				$elm$core$Maybe$andThen,
				$jfmengels$elm_review_common$NoPrematureLetComputation$getCurrentBranch(restOfBranching),
				A2(
					$jfmengels$elm_review_common$RangeDict$get,
					range,
					$jfmengels$elm_review_common$NoPrematureLetComputation$getScopes(branch)));
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$expressionEnterVisitor = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$expressionEnterVisitor$fn(node, context) {
		var newContext = function () {
			var _v0 = A2(
				$elm$core$Maybe$map,
				$jfmengels$elm_review_common$NoPrematureLetComputation$getScopes,
				A2($jfmengels$elm_review_common$NoPrematureLetComputation$getCurrentBranch, context.G.Q, context.R));
			if (!_v0.$) {
				var scopes = _v0.a;
				return A2(
					$jfmengels$elm_review_common$RangeDict$member,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					scopes) ? _Utils_update(
					context,
					{
						G: A2(
							$jfmengels$elm_review_common$NoPrematureLetComputation$addBranching,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							context.G)
					}) : context;
			} else {
				return context;
			}
		}();
		return _Utils_Tuple2(
			_List_Nil,
			A2($jfmengels$elm_review_common$NoPrematureLetComputation$expressionEnterVisitorHelp, node, newContext));
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$emptyIfTrue = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$emptyIfTrue$fn(bool, list) {
		return bool ? _List_Nil : list;
	});
var $jfmengels$elm_review_common$RangeDict$values = function (rangeDict) {
	return $elm$core$Dict$values(rangeDict);
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$canBeMovedToCloserLocation = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$canBeMovedToCloserLocation$fn(isRoot, name, _v1) {
		var type_ = _v1.a;
		var scope = _v1.b;
		var closestLocation = A3($jfmengels$elm_review_common$NoPrematureLetComputation$canBeMovedToCloserLocationForBranchData, isRoot, name, scope);
		switch (type_) {
			case 0:
				return closestLocation;
			case 1:
				return closestLocation;
			case 3:
				return closestLocation;
			default:
				return _Utils_ap(closestLocation, closestLocation);
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$canBeMovedToCloserLocationForBranchData = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$canBeMovedToCloserLocationForBranchData$fn(isRoot, name, branchData) {
		if (A2($elm$core$Set$member, name, branchData.bm)) {
			return A2(
				$jfmengels$elm_review_common$NoPrematureLetComputation$emptyIfTrue,
				isRoot,
				_List_fromArray(
					[branchData.cy]));
		} else {
			var relevantUsages = A3(
				$jfmengels$elm_review_common$NoPrematureLetComputation$findRelevantUsages,
				name,
				$jfmengels$elm_review_common$RangeDict$values(branchData.z),
				_List_Nil);
			return ($elm$core$List$length(relevantUsages) > 1) ? A2(
				$jfmengels$elm_review_common$NoPrematureLetComputation$emptyIfTrue,
				isRoot,
				_List_fromArray(
					[branchData.cy])) : relevantUsages;
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$findRelevantUsages = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$findRelevantUsages$fn(name, branches, result) {
		findRelevantUsages:
		while (true) {
			if ($elm$core$List$length(result) > 1) {
				return result;
			} else {
				if (!branches.b) {
					return result;
				} else {
					var first = branches.a;
					var rest = branches.b;
					var $temp$name = name,
						$temp$branches = rest,
						$temp$result = _Utils_ap(
						A3($jfmengels$elm_review_common$NoPrematureLetComputation$canBeMovedToCloserLocation, false, name, first),
						result);
					name = $temp$name;
					branches = $temp$branches;
					result = $temp$result;
					continue findRelevantUsages;
				}
			}
		}
	});
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(function $elm$core$String$repeatHelp$fn(n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(function $elm$core$String$repeat$fn(n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$trim = _String_trim;
var $jfmengels$elm_review_common$NoPrematureLetComputation$insertInLet = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$insertInLet$fn(initialPosition, column, source) {
		var _v0 = $elm$core$String$lines(
			$elm$core$String$trim(source));
		if (!_v0.b) {
			return '';
		} else {
			var firstLine = _v0.a;
			var restOfLines = _v0.b;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$cons,
					firstLine,
					A2(
						$elm$core$List$map,
						function (line) {
							return _Utils_ap(
								A2($elm$core$String$repeat, column - initialPosition, ' '),
								line);
						},
						restOfLines))) + ('\n' + A2($elm$core$String$repeat, column - 1, ' '));
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$wrapInLet = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$wrapInLet$fn(initialPosition, column, source) {
		var replacement = A2(
			$elm$core$String$join,
			'\n',
			A2(
				$elm$core$List$map,
				function (line) {
					return A2($elm$core$String$repeat, column - initialPosition, ' ') + ('    ' + line);
				},
				$elm$core$String$lines(source)));
		var padding = A2($elm$core$String$repeat, column - 1, ' ');
		return 'let\n' + (replacement + ('\n' + (padding + ('in\n' + padding))));
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$fix = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$fix$fn(context, declared, letInsertPosition) {
		if (declared.eM) {
			return _List_Nil;
		} else {
			if (!letInsertPosition.$) {
				var insertLocation = letInsertPosition.a;
				return _List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(declared.e8),
						A2(
						$jfmengels$elm_review$Review$Fix$insertAt,
						insertLocation,
						A3(
							$jfmengels$elm_review_common$NoPrematureLetComputation$wrapInLet,
							declared.e9.dv.bH,
							insertLocation.bH,
							context.eD(declared.dG)))
					]);
			} else {
				var insertLocation = letInsertPosition.a;
				return _List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(declared.e8),
						A2(
						$jfmengels$elm_review$Review$Fix$insertAt,
						insertLocation,
						A3(
							$jfmengels$elm_review_common$NoPrematureLetComputation$insertInLet,
							declared.fy,
							insertLocation.bH,
							context.eD(declared.dG)))
					]);
			}
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$createError = F3(function $jfmengels$elm_review_common$NoPrematureLetComputation$createError$fn(context, declared, letInsertPosition) {
		var letInsertLine = function () {
			if (!letInsertPosition.$) {
				var insertLocation = letInsertPosition.a;
				return insertLocation.b1;
			} else {
				var insertLocation = letInsertPosition.a;
				return insertLocation.b1;
			}
		}();
		return A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					[
						'This value is only used in some code paths, and it can therefore be computed unnecessarily.',
						'Try moving it closer to where it is needed, I recommend to move it to line ' + ($elm$core$String$fromInt(letInsertLine) + '.')
					]),
				bx: 'Let value was declared prematurely'
			},
			declared.e9,
			A3($jfmengels$elm_review_common$NoPrematureLetComputation$fix, context, declared, letInsertPosition));
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$expressionExitVisitorHelp = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$expressionExitVisitorHelp$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 15) {
			var _v1 = A2($jfmengels$elm_review_common$NoPrematureLetComputation$getCurrentBranch, context.G.Q, context.R);
			if ((!_v1.$) && (_v1.a.a === 1)) {
				var scope = _v1.a;
				var _v2 = scope.a;
				var scopeData = scope.b;
				return A2(
					$elm$core$List$filterMap,
					function (declaration) {
						return A2(
							$elm$core$Maybe$map,
							A2($jfmengels$elm_review_common$NoPrematureLetComputation$createError, context, declaration),
							$elm$core$List$head(
								A3($jfmengels$elm_review_common$NoPrematureLetComputation$canBeMovedToCloserLocation, true, declaration.cH, scope)));
					},
					scopeData.bW);
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$getLastListItem = A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$core$List$head);
var $elm$core$List$takeReverse = F3(function $elm$core$List$takeReverse$fn(n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(function $elm$core$List$takeTailRec$fn(n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(function $elm$core$List$takeFast$fn(ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(function $elm$core$List$take$fn(n, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (var i = 0; i < n && xs.b; xs = xs.b, i++) {
    var next = _List_Cons(xs.a, _List_Nil);
    end.b = next;
    end = next;
  }
  return tmp.b;
});
var $jfmengels$elm_review_common$NoPrematureLetComputation$removeLastBranchIfOnItRetry = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$removeLastBranchIfOnItRetry$fn(range, branching) {
		if (_Utils_eq(
			branching.cC,
			$elm$core$Maybe$Just(range))) {
			var full = A2(
				$elm$core$List$take,
				$elm$core$List$length(branching.Q) - 1,
				branching.Q);
			return {
				Q: full,
				cC: $jfmengels$elm_review_common$NoPrematureLetComputation$getLastListItem(full)
			};
		} else {
			return branching;
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$removeLastBranchIfOnIt = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$removeLastBranchIfOnIt$fn(range, branching) {
		if (_Utils_eq(
			branching.cC,
			$elm$core$Maybe$Just(range))) {
			var full = A2(
				$elm$core$List$take,
				$elm$core$List$length(branching.Q) - 1,
				branching.Q);
			return $elm$core$Maybe$Just(
				A2(
					$jfmengels$elm_review_common$NoPrematureLetComputation$removeLastBranchIfOnItRetry,
					range,
					{
						Q: full,
						cC: $jfmengels$elm_review_common$NoPrematureLetComputation$getLastListItem(full)
					}));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$popCurrentNodeFromBranching = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$popCurrentNodeFromBranching$fn(range, context) {
		var _v0 = A2($jfmengels$elm_review_common$NoPrematureLetComputation$removeLastBranchIfOnIt, range, context.G);
		if (!_v0.$) {
			var newBranching = _v0.a;
			return _Utils_update(
				context,
				{G: newBranching});
		} else {
			return context;
		}
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$expressionExitVisitor = F2(function $jfmengels$elm_review_common$NoPrematureLetComputation$expressionExitVisitor$fn(node, context) {
		return _Utils_Tuple2(
			A2($jfmengels$elm_review_common$NoPrematureLetComputation$expressionExitVisitorHelp, node, context),
			A2(
				$jfmengels$elm_review_common$NoPrematureLetComputation$popCurrentNodeFromBranching,
				$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
				context));
	});
var $jfmengels$elm_review$Review$Rule$withSourceCodeExtractor = function (_v0) {
	var fn = _v0.a;
	var requested = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(fn, data, isFileIgnored, data.eD);
			}),
		_Utils_update(
			requested,
			{fg: true}));
};
var $jfmengels$elm_review_common$NoPrematureLetComputation$initialContext = $jfmengels$elm_review$Review$Rule$withSourceCodeExtractor(
	$jfmengels$elm_review$Review$Rule$withModuleNameLookupTable(
		$jfmengels$elm_review$Review$Rule$initContextCreator(
			F3(
				function (lookupTable, extractSourceCode, _v0) {
					return {
						G: $jfmengels$elm_review_common$NoPrematureLetComputation$emptyBranching,
						eD: extractSourceCode,
						df: $jfmengels$elm_review_common$RangeDict$empty,
						s: lookupTable,
						R: $jfmengels$elm_review_common$NoPrematureLetComputation$newBranch(
							$jfmengels$elm_review_common$NoPrematureLetComputation$InsertNewLet(
								{bH: 0, b1: 0}))
					};
				}))));
var $jfmengels$elm_review$Review$Rule$combineExitVisitors = F2(function $jfmengels$elm_review$Review$Rule$combineExitVisitors$fn(newVisitor, maybePreviousVisitor) {
		if (maybePreviousVisitor.$ === 1) {
			return newVisitor;
		} else {
			var previousVisitor = maybePreviousVisitor.a;
			return F2(
				function (node, moduleContext) {
					var _v1 = A2(newVisitor, node, moduleContext);
					var errorsAfterFirstVisit = _v1.a;
					var contextAfterFirstVisit = _v1.b;
					var _v2 = A2(previousVisitor, node, contextAfterFirstVisit);
					var errorsAfterSecondVisit = _v2.a;
					var contextAfterSecondVisit = _v2.b;
					return _Utils_Tuple2(
						A2($elm$core$List$append, errorsAfterFirstVisit, errorsAfterSecondVisit),
						contextAfterSecondVisit);
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$withExpressionExitVisitor = F2(function $jfmengels$elm_review$Review$Rule$withExpressionExitVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				bv: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineExitVisitors, visitor, schema.bv))
			});
	});
var $jfmengels$elm_review_common$NoPrematureLetComputation$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	$jfmengels$elm_review$Review$Rule$providesFixesForModuleRule(
		A2(
			$jfmengels$elm_review$Review$Rule$withExpressionExitVisitor,
			$jfmengels$elm_review_common$NoPrematureLetComputation$expressionExitVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
				$jfmengels$elm_review_common$NoPrematureLetComputation$expressionEnterVisitor,
				A2(
					$jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor,
					$jfmengels$elm_review_common$NoPrematureLetComputation$declarationVisitor,
					A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchemaUsingContextCreator, 'NoPrematureLetComputation', $jfmengels$elm_review_common$NoPrematureLetComputation$initialContext))))));
var $jfmengels$elm_review_code_style$NoSimpleLetBody$safelyDestructurableConstructor = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	if (_v0.$ === 2) {
		var generics = _v0.a.gZ;
		var constructors = _v0.a.ig;
		if ($elm$core$List$isEmpty(generics)) {
			if (constructors.b && (!constructors.b.b)) {
				var constructor = constructors.a;
				return $elm$core$Maybe$Just(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(constructor).cH));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_code_style$NoSimpleLetBody$declarationListVisitor = F2(function $jfmengels$elm_review_code_style$NoSimpleLetBody$declarationListVisitor$fn(declarations, context) {
		var constructorsToReport = $elm$core$Set$fromList(
			A2($elm$core$List$filterMap, $jfmengels$elm_review_code_style$NoSimpleLetBody$safelyDestructurableConstructor, declarations));
		return _Utils_Tuple2(
			_List_Nil,
			_Utils_update(
				context,
				{eo: constructorsToReport}));
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$NamedPattern = F2(function $jfmengels$elm_review_code_style$NoSimpleLetBody$NamedPattern$fn(a, b) {
		return {$: 2, a: a, b: b};
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$Reference = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_code_style$NoSimpleLetBody$TuplePattern = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_code_style$NoSimpleLetBody$checkPatternToFind = F2(function $jfmengels$elm_review_code_style$NoSimpleLetBody$checkPatternToFind$fn(constructorsToReport, expression) {
		checkPatternToFind:
		while (true) {
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(expression);
			_v0$4:
			while (true) {
				switch (_v0.$) {
					case 14:
						var expr = _v0.a;
						var $temp$constructorsToReport = constructorsToReport,
							$temp$expression = expr;
						constructorsToReport = $temp$constructorsToReport;
						expression = $temp$expression;
						continue checkPatternToFind;
					case 3:
						if (!_v0.a.b) {
							var name = _v0.b;
							return $elm$core$Maybe$Just(
								$jfmengels$elm_review_code_style$NoSimpleLetBody$Reference(name));
						} else {
							break _v0$4;
						}
					case 13:
						var elements = _v0.a;
						var patternsToFind = A2(
							$elm$core$List$filterMap,
							$jfmengels$elm_review_code_style$NoSimpleLetBody$checkPatternToFind(constructorsToReport),
							elements);
						return _Utils_eq(
							$elm$core$List$length(patternsToFind),
							$elm$core$List$length(elements)) ? $elm$core$Maybe$Just(
							$jfmengels$elm_review_code_style$NoSimpleLetBody$TuplePattern(patternsToFind)) : $elm$core$Maybe$Nothing;
					case 1:
						if ((_v0.a.b && (_v0.a.a.b.$ === 3)) && (!_v0.a.a.b.a.b)) {
							var _v1 = _v0.a;
							var _v2 = _v1.a;
							var _v3 = _v2.b;
							var name = _v3.b;
							var args = _v1.b;
							if (A2($elm$core$Set$member, name, constructorsToReport)) {
								var patternsToFind = A2(
									$elm$core$List$filterMap,
									$jfmengels$elm_review_code_style$NoSimpleLetBody$checkPatternToFind(constructorsToReport),
									args);
								return _Utils_eq(
									$elm$core$List$length(patternsToFind),
									$elm$core$List$length(args)) ? $elm$core$Maybe$Just(
									A2(
										$jfmengels$elm_review_code_style$NoSimpleLetBody$NamedPattern,
										{eY: _List_Nil, cH: name},
										patternsToFind)) : $elm$core$Maybe$Nothing;
							} else {
								return $elm$core$Maybe$Nothing;
							}
						} else {
							break _v0$4;
						}
					default:
						break _v0$4;
				}
			}
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$Move = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_code_style$NoSimpleLetBody$MoveLast = function (a) {
	return {$: 3, a: a};
};
var $jfmengels$elm_review_code_style$NoSimpleLetBody$RemoveOnly = function (a) {
	return {$: 2, a: a};
};
var $jfmengels$elm_review_code_style$NoSimpleLetBody$ReportNoFix = {$: 0};
var $jfmengels$elm_review_code_style$NoSimpleLetBody$createResolution = F4(function $jfmengels$elm_review_code_style$NoSimpleLetBody$createResolution$fn(declaration, _v0, _v1, isLast) {
		var hasArguments = _v0.fN;
		var expressionRange = _v0.fG;
		var lastEnd = _v1.d2;
		var previousEnd = _v1.cK;
		if (hasArguments) {
			return $jfmengels$elm_review_code_style$NoSimpleLetBody$ReportNoFix;
		} else {
			var _v2 = _Utils_Tuple2(lastEnd, isLast);
			if (!_v2.a.$) {
				if (_v2.b) {
					var lastEnd_ = _v2.a.a;
					return $jfmengels$elm_review_code_style$NoSimpleLetBody$MoveLast(
						{cK: lastEnd_, cO: expressionRange});
				} else {
					return $jfmengels$elm_review_code_style$NoSimpleLetBody$Move(
						{
							cO: expressionRange,
							gn: {
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(declaration).c4,
								dv: A2(
									$elm$core$Maybe$withDefault,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration).dv,
									previousEnd)
							}
						});
				}
			} else {
				if (_v2.b) {
					var _v3 = _v2.a;
					return $jfmengels$elm_review_code_style$NoSimpleLetBody$RemoveOnly(
						{cO: expressionRange});
				} else {
					var _v4 = _v2.a;
					return $jfmengels$elm_review_code_style$NoSimpleLetBody$Move(
						{
							cO: expressionRange,
							gn: {
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(declaration).c4,
								dv: A2(
									$elm$core$Maybe$withDefault,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration).dv,
									previousEnd)
							}
						});
				}
			}
		}
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$matchPatternToFind = F2(function $jfmengels$elm_review_code_style$NoSimpleLetBody$matchPatternToFind$fn(patternToFind, destructuringPattern) {
		matchPatternToFind:
		while (true) {
			var _v0 = _Utils_Tuple2(
				patternToFind,
				$stil4m$elm_syntax$Elm$Syntax$Node$value(destructuringPattern));
			_v0$0:
			while (true) {
				switch (_v0.a.$) {
					case 0:
						switch (_v0.b.$) {
							case 14:
								break _v0$0;
							case 11:
								var refName = _v0.a.a;
								var name = _v0.b.a;
								return _Utils_eq(refName, name);
							default:
								return false;
						}
					case 1:
						switch (_v0.b.$) {
							case 14:
								break _v0$0;
							case 7:
								var left = _v0.a.a;
								var right = _v0.b.a;
								return _Utils_eq(
									$elm$core$List$length(left),
									$elm$core$List$length(right)) && A2(
									$elm$core$List$all,
									$elm$core$Basics$identity,
									A3($elm$core$List$map2, $jfmengels$elm_review_code_style$NoSimpleLetBody$matchPatternToFind, left, right));
							default:
								return false;
						}
					default:
						switch (_v0.b.$) {
							case 14:
								break _v0$0;
							case 12:
								var _v1 = _v0.a;
								var refLeft = _v1.a;
								var argsLeft = _v1.b;
								var _v2 = _v0.b;
								var refRight = _v2.a;
								var argsRight = _v2.b;
								return _Utils_eq(refLeft, refRight) && A2(
									$elm$core$List$all,
									$elm$core$Basics$identity,
									A3($elm$core$List$map2, $jfmengels$elm_review_code_style$NoSimpleLetBody$matchPatternToFind, argsLeft, argsRight));
							default:
								var _v3 = _v0.a;
								return false;
						}
				}
			}
			var pattern = _v0.b.a;
			var $temp$patternToFind = patternToFind,
				$temp$destructuringPattern = pattern;
			patternToFind = $temp$patternToFind;
			destructuringPattern = $temp$destructuringPattern;
			continue matchPatternToFind;
		}
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$match = F2(function $jfmengels$elm_review_code_style$NoSimpleLetBody$match$fn(declaration, patternToFind) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
		if (!_v0.$) {
			var _function = _v0.a;
			var functionDeclaration = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii);
			return _Utils_eq(
				$jfmengels$elm_review_code_style$NoSimpleLetBody$Reference(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(functionDeclaration.cH)),
				patternToFind) ? $elm$core$Maybe$Just(
				{
					fG: $stil4m$elm_syntax$Elm$Syntax$Node$range(functionDeclaration.eC),
					fN: !$elm$core$List$isEmpty(functionDeclaration.gs)
				}) : $elm$core$Maybe$Nothing;
		} else {
			var destructuringPattern = _v0.a;
			var expression = _v0.b;
			return A2($jfmengels$elm_review_code_style$NoSimpleLetBody$matchPatternToFind, patternToFind, destructuringPattern) ? $elm$core$Maybe$Just(
				{
					fG: $stil4m$elm_syntax$Elm$Syntax$Node$range(expression),
					fN: false
				}) : $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$findDeclarationToMoveHelp = F4(function $jfmengels$elm_review_code_style$NoSimpleLetBody$findDeclarationToMoveHelp$fn(patternToFind, nbOfDeclarations, declarations, _v0) {
		findDeclarationToMoveHelp:
		while (true) {
			var index = _v0.iB;
			var previousEnd = _v0.cK;
			var lastEnd = _v0.d2;
			if (!declarations.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var declaration = declarations.a;
				var rest = declarations.b;
				var _v2 = A2($jfmengels$elm_review_code_style$NoSimpleLetBody$match, declaration, patternToFind);
				if (!_v2.$) {
					var matchParams = _v2.a;
					return $elm$core$Maybe$Just(
						A4(
							$jfmengels$elm_review_code_style$NoSimpleLetBody$createResolution,
							declaration,
							matchParams,
							{d2: lastEnd, cK: previousEnd},
							_Utils_eq(index, nbOfDeclarations - 1)));
				} else {
					var $temp$patternToFind = patternToFind,
						$temp$nbOfDeclarations = nbOfDeclarations,
						$temp$declarations = rest,
						$temp$_v0 = {
						iB: index + 1,
						d2: $elm$core$Maybe$Just(
							$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration).c4),
						cK: lastEnd
					};
					patternToFind = $temp$patternToFind;
					nbOfDeclarations = $temp$nbOfDeclarations;
					declarations = $temp$declarations;
					_v0 = $temp$_v0;
					continue findDeclarationToMoveHelp;
				}
			}
		}
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$findDeclarationToMove = F2(function $jfmengels$elm_review_code_style$NoSimpleLetBody$findDeclarationToMove$fn(patternToFind, declarations) {
		return A4(
			$jfmengels$elm_review_code_style$NoSimpleLetBody$findDeclarationToMoveHelp,
			patternToFind,
			$elm$core$List$length(declarations),
			declarations,
			{iB: 0, d2: $elm$core$Maybe$Nothing, cK: $elm$core$Maybe$Nothing});
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$fix = F4(function $jfmengels$elm_review_code_style$NoSimpleLetBody$fix$fn(extractSourceCode, nodeRange, letBodyRange, resolution) {
		switch (resolution.$) {
			case 0:
				return _List_Nil;
			case 2:
				var toCopy = resolution.a.cO;
				return _List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(
						{c4: toCopy.dv, dv: nodeRange.dv}),
						$jfmengels$elm_review$Review$Fix$removeRange(
						{c4: nodeRange.c4, dv: toCopy.c4})
					]);
			case 1:
				var toRemove = resolution.a.gn;
				var toCopy = resolution.a.cO;
				return _List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(
						{
							c4: toRemove.c4,
							dv: _Utils_eq(nodeRange.dv.b1, toRemove.dv.b1) ? toRemove.dv : {bH: 1, b1: toRemove.dv.b1}
						}),
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						letBodyRange,
						extractSourceCode(toCopy))
					]);
			default:
				var previousEnd = resolution.a.cK;
				var toCopy = resolution.a.cO;
				var indentation = A2($elm$core$String$repeat, nodeRange.dv.bH - 1, ' ');
				return _List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						{c4: toCopy.dv, dv: previousEnd},
						'\n' + (indentation + ('in\n' + indentation))),
						$jfmengels$elm_review$Review$Fix$removeRange(
						{c4: nodeRange.c4, dv: toCopy.c4})
					]);
		}
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$visitLetExpression = F3(function $jfmengels$elm_review_code_style$NoSimpleLetBody$visitLetExpression$fn(_v0, nodeRange, _v1) {
		var extractSourceCode = _v0.eD;
		var constructorsToReport = _v0.eo;
		var declarations = _v1.gD;
		var expression = _v1.eC;
		var _v2 = A2($jfmengels$elm_review_code_style$NoSimpleLetBody$checkPatternToFind, constructorsToReport, expression);
		if (!_v2.$) {
			var patternToFind = _v2.a;
			var maybeResolution = A2($jfmengels$elm_review_code_style$NoSimpleLetBody$findDeclarationToMove, patternToFind, declarations);
			if (!maybeResolution.$) {
				var resolution = maybeResolution.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['The name of the value is redundant with the surrounding expression.', 'If you believe that the expression needs a name because it is too complex, consider splitting the expression up more or extracting it to a new function.']),
							bx: 'The referenced value should be inlined.'
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$range(expression),
						A4(
							$jfmengels$elm_review_code_style$NoSimpleLetBody$fix,
							extractSourceCode,
							nodeRange,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(expression),
							resolution))
					]);
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$expressionVisitor = F2(function $jfmengels$elm_review_code_style$NoSimpleLetBody$expressionVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 15) {
			var letBlock = _v0.a;
			return _Utils_Tuple2(
				A3(
					$jfmengels$elm_review_code_style$NoSimpleLetBody$visitLetExpression,
					context,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					letBlock),
				context);
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_code_style$NoSimpleLetBody$initContext = $jfmengels$elm_review$Review$Rule$withSourceCodeExtractor(
	$jfmengels$elm_review$Review$Rule$initContextCreator(
		F2(
			function (extractSourceCode, _v0) {
				return {eo: $elm$core$Set$empty, eD: extractSourceCode};
			})));
var $jfmengels$elm_review_code_style$NoSimpleLetBody$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	$jfmengels$elm_review$Review$Rule$providesFixesForModuleRule(
		A2(
			$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
			$jfmengels$elm_review_code_style$NoSimpleLetBody$expressionVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withDeclarationListVisitor,
				$jfmengels$elm_review_code_style$NoSimpleLetBody$declarationListVisitor,
				A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchemaUsingContextCreator, 'NoSimpleLetBody', $jfmengels$elm_review_code_style$NoSimpleLetBody$initContext)))));
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$elmJsonVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$elmJsonVisitor$fn(maybeEProject, projectContext) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.o;
			},
			maybeEProject);
		if ((!_v0.$) && (_v0.a.$ === 1)) {
			var _package = _v0.a.a;
			var exposedModules = function () {
				var _v1 = _package.gQ;
				if (!_v1.$) {
					var list = _v1.a;
					return list;
				} else {
					var list = _v1.a;
					return A2($elm$core$List$concatMap, $elm$core$Tuple$second, list);
				}
			}();
			var exposedNames = $elm$core$Set$fromList(
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$project_metadata_utils$Elm$Module$toString,
						$elm$core$String$split('.')),
					exposedModules));
			return _Utils_Tuple2(
				_List_Nil,
				_Utils_update(
					projectContext,
					{ao: exposedNames}));
		} else {
			return _Utils_Tuple2(_List_Nil, projectContext);
		}
	});
var $jfmengels$elm_review$Review$Rule$errorForModule = F3(function $jfmengels$elm_review$Review$Rule$errorForModule$fn(_v0, _v1, range) {
		var path = _v0;
		var message = _v1.bx;
		var details = _v1.eq;
		return {eq: details, iu: path, dV: $jfmengels$elm_review$Review$Error$NoFixes, bx: message, e4: false, f4: range, f8: '', hO: 0};
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$error = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$error$fn(moduleKey, range) {
		return A3(
			$jfmengels$elm_review$Review$Rule$errorForModule,
			moduleKey,
			{
				eq: _List_fromArray(
					['This argument is never used. You should either use it somewhere, or remove it at the location I pointed at.']),
				bx: 'Argument is never extracted and therefore never used.'
			},
			range);
	});
var $jfmengels$elm_review_unused$List$Extra$indexedFilterMap = F4(function $jfmengels$elm_review_unused$List$Extra$indexedFilterMap$fn(predicate, index, list, acc) {
		indexedFilterMap:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$predicate = predicate,
					$temp$index = index + 1,
					$temp$list = xs,
					$temp$acc = function () {
					var _v1 = A2(predicate, index, x);
					if (!_v1.$) {
						var b = _v1.a;
						return A2($elm$core$List$cons, b, acc);
					} else {
						return acc;
					}
				}();
				predicate = $temp$predicate;
				index = $temp$index;
				list = $temp$list;
				acc = $temp$acc;
				continue indexedFilterMap;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$errorsForUnusedArguments = F5(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$errorsForUnusedArguments$fn(usedArguments, moduleKey, constructor, ranges, acc) {
		var _v0 = A2($elm$core$Dict$get, constructor, usedArguments);
		if (!_v0.$) {
			var usedArgumentPositions = _v0.a;
			return A4(
				$jfmengels$elm_review_unused$List$Extra$indexedFilterMap,
				F2(
					function (index, range) {
						return A2($elm$core$Set$member, index, usedArgumentPositions) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
							A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$error, moduleKey, range));
					}),
				0,
				ranges,
				acc);
		} else {
			return _Utils_ap(
				A2(
					$elm$core$List$map,
					$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$error(moduleKey),
					ranges),
				acc);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$finalEvaluationForSingleModule = F4(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$finalEvaluationForSingleModule$fn(context, moduleName, _v0, previousErrors) {
		var moduleKey = _v0.eX;
		var args = _v0.h0;
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (name, ranges, acc) {
					var constructor = _Utils_Tuple2(moduleName, name);
					return A2($elm$core$Set$member, constructor, context.am) ? acc : A5($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$errorsForUnusedArguments, context.T, moduleKey, constructor, ranges, acc);
				}),
			previousErrors,
			args);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$finalEvaluation = function (context) {
	return A3(
		$elm$core$Dict$foldl,
		$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$finalEvaluationForSingleModule(context),
		_List_Nil,
		context.aw);
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$foldProjectContexts = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$foldProjectContexts$fn(newContext, previousContext) {
		return {
			aw: A2($elm$core$Dict$union, newContext.aw, previousContext.aw),
			am: A2($elm$core$Set$union, newContext.am, previousContext.am),
			ao: previousContext.ao,
			T: A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, newSet, acc) {
						var _v0 = A2($elm$core$Dict$get, key, acc);
						if (!_v0.$) {
							var existingSet = _v0.a;
							return A3(
								$elm$core$Dict$insert,
								key,
								A2($elm$core$Set$union, newSet, existingSet),
								acc);
						} else {
							return A3($elm$core$Dict$insert, key, newSet, acc);
						}
					}),
				previousContext.T,
				newContext.T)
		};
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$getNonExposedCustomTypes = function (moduleContext) {
	if (moduleContext.bT) {
		var _v0 = moduleContext.gQ;
		if (!_v0.$) {
			return $elm$core$Dict$empty;
		} else {
			var list = _v0.a;
			var exposedCustomTypes = A3(
				$elm$core$List$foldl,
				F2(
					function (exposed, acc) {
						var _v2 = $stil4m$elm_syntax$Elm$Syntax$Node$value(exposed);
						if (_v2.$ === 3) {
							var name = _v2.a.cH;
							var open = _v2.a.iU;
							if (!open.$) {
								return A2($elm$core$Set$insert, name, acc);
							} else {
								return acc;
							}
						} else {
							return acc;
						}
					}),
				$elm$core$Set$empty,
				list);
			return A3(
				$elm$core$List$foldl,
				F2(
					function (_v1, acc) {
						var typeName = _v1.a;
						var args = _v1.b;
						return A2($elm$core$Set$member, typeName, exposedCustomTypes) ? acc : A2($elm$core$Dict$union, args, acc);
					}),
				$elm$core$Dict$empty,
				moduleContext.aw);
		}
	} else {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, acc) {
					var args = _v4.b;
					return A2($elm$core$Dict$union, args, acc);
				}),
			$elm$core$Dict$empty,
			moduleContext.aw);
	}
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$replaceLocalModuleNameForDict = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$replaceLocalModuleNameForDict$fn(moduleName, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (key, value, acc) {
					var moduleNameForType = key.a;
					var name = key.b;
					var newKey = function () {
						if (!moduleNameForType.b) {
							return _Utils_Tuple2(moduleName, name);
						} else {
							return key;
						}
					}();
					return A3($elm$core$Dict$insert, newKey, value, acc);
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $elm$core$Set$foldl = F3(function $elm$core$Set$foldl$fn(func, initialState, _v0) {
		var dict = _v0;
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm$core$Set$map = F2(function $elm$core$Set$map$fn(func, set) {
    return A3(
      $elm$core$Set$foldl,
      F2(
        function (x, acc) {
          return A2(
            $elm$core$Set$insert,
            func(x),
            acc);
        }),
      $elm$core$Set$empty,
      set);
  });
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$replaceLocalModuleNameForSet = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$replaceLocalModuleNameForSet$fn(moduleName, set) {
		return A2(
			$elm$core$Set$map,
			function (untouched) {
				var moduleNameForType = untouched.a;
				var name = untouched.b;
				if (!moduleNameForType.b) {
					return _Utils_Tuple2(moduleName, name);
				} else {
					return untouched;
				}
			},
			set);
	});
var $jfmengels$elm_review$Review$Rule$withModuleKey = function (_v0) {
	var fn = _v0.a;
	var requestedData = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(fn, data, isFileIgnored, data.eX);
			}),
		requestedData);
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$fromModuleToProject = $jfmengels$elm_review$Review$Rule$withModuleName(
	$jfmengels$elm_review$Review$Rule$withModuleKey(
		$jfmengels$elm_review$Review$Rule$initContextCreator(
			F3(
				function (moduleKey, moduleName, moduleContext) {
					return {
						aw: A2(
							$elm$core$Dict$singleton,
							moduleName,
							{
								h0: $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$getNonExposedCustomTypes(moduleContext),
								eX: moduleKey
							}),
						am: A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$replaceLocalModuleNameForSet, moduleName, moduleContext.am),
						ao: $elm$core$Set$empty,
						T: A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$replaceLocalModuleNameForDict, moduleName, moduleContext.T)
					};
				}))));
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$fromProjectToModule = $jfmengels$elm_review$Review$Rule$withModuleName(
	$jfmengels$elm_review$Review$Rule$withModuleNameLookupTable(
		$jfmengels$elm_review$Review$Rule$initContextCreator(
			F3(
				function (lookupTable, moduleName, projectContext) {
					return {
						aw: _List_Nil,
						am: $elm$core$Set$empty,
						gQ: $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_Nil),
						bT: A2($elm$core$Set$member, moduleName, projectContext.ao),
						s: lookupTable,
						T: $elm$core$Dict$empty
					};
				}))));
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$initialProjectContext = {aw: $elm$core$Dict$empty, am: $elm$core$Set$empty, ao: $elm$core$Set$empty, T: $elm$core$Dict$empty};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$isWildcard = function (node) {
	isWildcard:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 0:
				return true;
			case 14:
				var pattern = _v0.a;
				var $temp$node = pattern;
				node = $temp$node;
				continue isWildcard;
			default:
				return false;
		}
	}
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$computeUsedPositions = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$computeUsedPositions$fn(index, _arguments, acc) {
		computeUsedPositions:
		while (true) {
			if (!_arguments.b) {
				return acc;
			} else {
				var arg = _arguments.a;
				var restOfArgs = _arguments.b;
				var newAcc = $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$isWildcard(arg) ? acc : A2($elm$core$Set$insert, index, acc);
				var $temp$index = index + 1,
					$temp$arguments = restOfArgs,
					$temp$acc = newAcc;
				index = $temp$index;
				_arguments = $temp$arguments;
				acc = $temp$acc;
				continue computeUsedPositions;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedCustomTypeArgsHelp = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedCustomTypeArgsHelp$fn(lookupTable, nodes, acc) {
		collectUsedCustomTypeArgsHelp:
		while (true) {
			if (!nodes.b) {
				return acc;
			} else {
				var _v1 = nodes.a;
				var range = _v1.a;
				var pattern = _v1.b;
				var restOfNodes = nodes.b;
				switch (pattern.$) {
					case 12:
						var name = pattern.a.cH;
						var args = pattern.b;
						var newAcc = function () {
							var _v3 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, range);
							if (!_v3.$) {
								var moduleName = _v3.a;
								return A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										_Utils_Tuple2(moduleName, name),
										A3($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$computeUsedPositions, 0, args, $elm$core$Set$empty)),
									acc);
							} else {
								return acc;
							}
						}();
						var $temp$lookupTable = lookupTable,
							$temp$nodes = _Utils_ap(args, restOfNodes),
							$temp$acc = newAcc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectUsedCustomTypeArgsHelp;
					case 7:
						var patterns = pattern.a;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectUsedCustomTypeArgsHelp;
					case 10:
						var patterns = pattern.a;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectUsedCustomTypeArgsHelp;
					case 9:
						var left = pattern.a;
						var right = pattern.b;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfNodes)),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectUsedCustomTypeArgsHelp;
					case 14:
						var subPattern = pattern.a;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = A2($elm$core$List$cons, subPattern, restOfNodes),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectUsedCustomTypeArgsHelp;
					case 13:
						var subPattern = pattern.a;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = A2($elm$core$List$cons, subPattern, restOfNodes),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectUsedCustomTypeArgsHelp;
					default:
						var $temp$lookupTable = lookupTable,
							$temp$nodes = restOfNodes,
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectUsedCustomTypeArgsHelp;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedCustomTypeArgs = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedCustomTypeArgs$fn(lookupTable, nodes) {
		return A3($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedCustomTypeArgsHelp, lookupTable, nodes, _List_Nil);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedPatternsFromFunctionDeclaration = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedPatternsFromFunctionDeclaration$fn(context, _v0) {
		var declaration = _v0.ii;
		return A2(
			$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedCustomTypeArgs,
			context.s,
			$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).gs);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$isNotNever = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$isNotNever$fn(lookupTable, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (((_v0.$ === 1) && (_v0.a.b.b === 'Never')) && (!_v0.b.b)) {
			var _v1 = _v0.a;
			var neverRange = _v1.a;
			var _v2 = _v1.b;
			return !_Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, neverRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Basics'])));
		} else {
			return true;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$createArguments = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$createArguments$fn(lookupTable, _arguments) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (argument, acc) {
					return A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$isNotNever, lookupTable, argument) ? A2(
						$elm$core$List$cons,
						$stil4m$elm_syntax$Elm$Syntax$Node$range(argument),
						acc) : acc;
				}),
			_List_Nil,
			_arguments);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$registerUsedPatterns = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$registerUsedPatterns$fn(newUsedArguments, previouslyUsedArguments) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var key = _v0.a;
					var usedPositions = _v0.b;
					var previouslyUsedPositions = A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Set$empty,
						A2($elm$core$Dict$get, key, acc));
					return A3(
						$elm$core$Dict$insert,
						key,
						A2($elm$core$Set$union, previouslyUsedPositions, usedPositions),
						acc);
				}),
			previouslyUsedArguments,
			newUsedArguments);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$declarationVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$declarationVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 0:
				var _function = _v0.a;
				return _Utils_update(
					context,
					{
						T: A2(
							$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$registerUsedPatterns,
							A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedPatternsFromFunctionDeclaration, context, _function),
							context.T)
					});
			case 2:
				var typeDeclaration = _v0.a;
				if ($elm$core$List$isEmpty(typeDeclaration.ig)) {
					return context;
				} else {
					var customTypeConstructors = A3(
						$elm$core$List$foldl,
						F2(
							function (_v1, acc) {
								var name = _v1.b.cH;
								var _arguments = _v1.b.gs;
								return A3(
									$elm$core$Dict$insert,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
									A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$createArguments, context.s, _arguments),
									acc);
							}),
						$elm$core$Dict$empty,
						typeDeclaration.ig);
					return _Utils_update(
						context,
						{
							aw: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(typeDeclaration.cH),
									customTypeConstructors),
								context.aw)
						});
				}
			default:
				return context;
		}
	});
var $elm$core$Char$toLower = _Char_toLower;
var $elm$core$Char$toUpper = _Char_toUpper;
var $jfmengels$elm_review_unused$String$Extra$isCapitalized = function (string) {
	var _v0 = $elm$core$String$uncons(string);
	if (!_v0.$) {
		var _v1 = _v0.a;
		var _char = _v1.a;
		return _Utils_eq(
			_char,
			$elm$core$Char$toUpper(_char)) && (!_Utils_eq(
			_char,
			$elm$core$Char$toLower(_char)));
	} else {
		return false;
	}
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$findCustomTypesHelp = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$findCustomTypesHelp$fn(lookupTable, nodes, acc) {
		findCustomTypesHelp:
		while (true) {
			if (!nodes.b) {
				return acc;
			} else {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				_v1$7:
				while (true) {
					switch (_v1.$) {
						case 3:
							var rawModuleName = _v1.a;
							var functionName = _v1.b;
							if ($jfmengels$elm_review_unused$String$Extra$isCapitalized(functionName)) {
								var _v2 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node);
								if (!_v2.$) {
									var moduleName = _v2.a;
									var $temp$lookupTable = lookupTable,
										$temp$nodes = restOfNodes,
										$temp$acc = A2(
										$elm$core$List$cons,
										_Utils_Tuple2(moduleName, functionName),
										acc);
									lookupTable = $temp$lookupTable;
									nodes = $temp$nodes;
									acc = $temp$acc;
									continue findCustomTypesHelp;
								} else {
									var $temp$lookupTable = lookupTable,
										$temp$nodes = restOfNodes,
										$temp$acc = A2(
										$elm$core$List$cons,
										_Utils_Tuple2(rawModuleName, functionName),
										acc);
									lookupTable = $temp$lookupTable;
									nodes = $temp$nodes;
									acc = $temp$acc;
									continue findCustomTypesHelp;
								}
							} else {
								var $temp$lookupTable = lookupTable,
									$temp$nodes = restOfNodes,
									$temp$acc = acc;
								lookupTable = $temp$lookupTable;
								nodes = $temp$nodes;
								acc = $temp$acc;
								continue findCustomTypesHelp;
							}
						case 13:
							var expressions = _v1.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = _Utils_ap(expressions, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findCustomTypesHelp;
						case 14:
							var expression = _v1.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = A2($elm$core$List$cons, expression, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findCustomTypesHelp;
						case 1:
							if (_v1.a.b && (_v1.a.a.b.$ === 3)) {
								var _v3 = _v1.a;
								var first = _v3.a;
								var _v4 = first.b;
								var functionName = _v4.b;
								var expressions = _v3.b;
								if ($jfmengels$elm_review_unused$String$Extra$isCapitalized(functionName)) {
									var $temp$lookupTable = lookupTable,
										$temp$nodes = A2(
										$elm$core$List$cons,
										first,
										_Utils_ap(expressions, restOfNodes)),
										$temp$acc = acc;
									lookupTable = $temp$lookupTable;
									nodes = $temp$nodes;
									acc = $temp$acc;
									continue findCustomTypesHelp;
								} else {
									var $temp$lookupTable = lookupTable,
										$temp$nodes = restOfNodes,
										$temp$acc = acc;
									lookupTable = $temp$lookupTable;
									nodes = $temp$nodes;
									acc = $temp$acc;
									continue findCustomTypesHelp;
								}
							} else {
								break _v1$7;
							}
						case 2:
							var left = _v1.c;
							var right = _v1.d;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = A2(
								$elm$core$List$cons,
								left,
								A2($elm$core$List$cons, right, restOfNodes)),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findCustomTypesHelp;
						case 10:
							var expression = _v1.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = A2($elm$core$List$cons, expression, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findCustomTypesHelp;
						case 19:
							var expressions = _v1.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = _Utils_ap(expressions, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findCustomTypesHelp;
						default:
							break _v1$7;
					}
				}
				var $temp$lookupTable = lookupTable,
					$temp$nodes = restOfNodes,
					$temp$acc = acc;
				lookupTable = $temp$lookupTable;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue findCustomTypesHelp;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$findCustomTypes = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$findCustomTypes$fn(lookupTable, nodes) {
		return $elm$core$Set$fromList(
			A3($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$findCustomTypesHelp, lookupTable, nodes, _List_Nil));
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$expressionVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$expressionVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$5:
		while (true) {
			switch (_v0.$) {
				case 16:
					var cases = _v0.a.ia;
					var usedArguments = A2(
						$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedCustomTypeArgs,
						context.s,
						A2($elm$core$List$map, $elm$core$Tuple$first, cases));
					return _Utils_update(
						context,
						{
							T: A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$registerUsedPatterns, usedArguments, context.T)
						});
				case 15:
					var declarations = _v0.a.gD;
					var usedArguments = A2(
						$elm$core$List$concatMap,
						function (declaration) {
							var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
							if (_v1.$ === 1) {
								var pattern = _v1.a;
								return A2(
									$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedCustomTypeArgs,
									context.s,
									_List_fromArray(
										[pattern]));
							} else {
								var _function = _v1.a;
								return A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedPatternsFromFunctionDeclaration, context, _function);
							}
						},
						declarations);
					return _Utils_update(
						context,
						{
							T: A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$registerUsedPatterns, usedArguments, context.T)
						});
				case 17:
					var args = _v0.a.h0;
					return _Utils_update(
						context,
						{
							T: A2(
								$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$registerUsedPatterns,
								A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$collectUsedCustomTypeArgs, context.s, args),
								context.T)
						});
				case 2:
					var operator = _v0.a;
					var left = _v0.c;
					var right = _v0.d;
					if ((operator === '==') || (operator === '/=')) {
						var customTypesNotToReport = A2(
							$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$findCustomTypes,
							context.s,
							_List_fromArray(
								[left, right]));
						return _Utils_update(
							context,
							{
								am: A2($elm$core$Set$union, customTypesNotToReport, context.am)
							});
					} else {
						return context;
					}
				case 1:
					if (_v0.a.b && (_v0.a.a.b.$ === 5)) {
						var _v2 = _v0.a;
						var _v3 = _v2.a;
						var operator = _v3.b.a;
						var restOfArgs = _v2.b;
						if ((operator === '==') || (operator === '/=')) {
							var customTypesNotToReport = A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$findCustomTypes, context.s, restOfArgs);
							return _Utils_update(
								context,
								{
									am: A2($elm$core$Set$union, customTypesNotToReport, context.am)
								});
						} else {
							return context;
						}
					} else {
						break _v0$5;
					}
				default:
					break _v0$5;
			}
		}
		return context;
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$moduleDefinitionVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$moduleDefinitionVisitor$fn(node, moduleContext) {
		return _Utils_update(
			moduleContext,
			{
				gQ: $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(node))
			});
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$moduleVisitor = function (schema) {
	return A2(
		$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
		F2(
			function (node, context) {
				return _Utils_Tuple2(
					_List_Nil,
					A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$expressionVisitor, node, context));
			}),
		A2(
			$jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor,
			F2(
				function (node, context) {
					return _Utils_Tuple2(
						_List_Nil,
						A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$declarationVisitor, node, context));
				}),
			A2(
				$jfmengels$elm_review$Review$Rule$withModuleDefinitionVisitor,
				F2(
					function (node, context) {
						return _Utils_Tuple2(
							_List_Nil,
							A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$moduleDefinitionVisitor, node, context));
					}),
				schema)));
};
var $jfmengels$elm_review$Review$Rule$withFinalProjectEvaluation = F2(function $jfmengels$elm_review$Review$Rule$withFinalProjectEvaluation$fn(visitor, _v0) {
		var schema = _v0;
		var combinedVisitor = function () {
			var _v1 = schema.aq;
			if (_v1.$ === 1) {
				return function (projectContext) {
					return $jfmengels$elm_review$Review$Rule$removeErrorPhantomTypes(
						visitor(projectContext));
				};
			} else {
				var previousVisitor = _v1.a;
				return function (projectContext) {
					return A2(
						$elm$core$List$append,
						$jfmengels$elm_review$Review$Rule$removeErrorPhantomTypes(
							visitor(projectContext)),
						previousVisitor(projectContext));
				};
			}
		}();
		return _Utils_update(
			schema,
			{
				aq: $elm$core$Maybe$Just(combinedVisitor)
			});
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$rule = $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
	A2(
		$jfmengels$elm_review$Review$Rule$withFinalProjectEvaluation,
		$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$finalEvaluation,
		A2(
			$jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator,
			{cl: $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$foldProjectContexts, cn: $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$fromModuleToProject, gY: $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$fromProjectToModule},
			A2(
				$jfmengels$elm_review$Review$Rule$withModuleVisitor,
				$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$moduleVisitor,
				A2(
					$jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor,
					$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$elmJsonVisitor,
					A2($jfmengels$elm_review$Review$Rule$newProjectRuleSchema, 'NoUnused.CustomTypeConstructorArgs', $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$initialProjectContext))))));
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$elmJsonVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$elmJsonVisitor$fn(maybeElmJson, projectContext) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.o;
			},
			maybeElmJson);
		if (!_v0.$) {
			if (_v0.a.$ === 1) {
				var _package = _v0.a.a;
				var exposedModules = function () {
					var _v1 = _package.gQ;
					if (!_v1.$) {
						var list = _v1.a;
						return list;
					} else {
						var list = _v1.a;
						return A2($elm$core$List$concatMap, $elm$core$Tuple$second, list);
					}
				}();
				var exposedNames = $elm$core$Set$fromList(
					A2($elm$core$List$map, $elm$project_metadata_utils$Elm$Module$toString, exposedModules));
				return _Utils_Tuple2(
					_List_Nil,
					_Utils_update(
						projectContext,
						{ao: exposedNames}));
			} else {
				return _Utils_Tuple2(_List_Nil, projectContext);
			}
		} else {
			return _Utils_Tuple2(_List_Nil, projectContext);
		}
	});
var $jfmengels$elm_review$Review$Rule$errorForModuleWithFix = F4(function $jfmengels$elm_review$Review$Rule$errorForModuleWithFix$fn(moduleKey, info, range, fixes) {
		return A2(
			$jfmengels$elm_review$Review$Rule$withFixes,
			fixes,
			A3($jfmengels$elm_review$Review$Rule$errorForModule, moduleKey, info, range));
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$defaultDetails = 'This type constructor is never used. It might be handled everywhere it might appear, but there is no location where this value actually gets created.';
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorInformation = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorInformation$fn(_v0, name) {
		var wasUsedInLocationThatNeedsItself = _v0.af;
		var wasUsedInComparisons = _v0.ae;
		return {
			eq: A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2(
					$elm$core$List$filter,
					$elm$core$Tuple$second,
					_List_fromArray(
						[
							_Utils_Tuple2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$defaultDetails, true),
							_Utils_Tuple2('I found it used in comparisons, but since it is never created anywhere, all of those can be evaluated to False (for (==), True for (/=)).', wasUsedInComparisons),
							_Utils_Tuple2('The only locations where I found it being created require already having one.', wasUsedInLocationThatNeedsItself)
						]))),
			bx: 'Type constructor `' + (name + '` is not used.')
		};
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorForModule = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorForModule$fn(moduleKey, params, constructorInformation) {
		return A4(
			$jfmengels$elm_review$Review$Rule$errorForModuleWithFix,
			moduleKey,
			A2(
				$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorInformation,
				{ae: params.ae, af: params.af},
				constructorInformation.cH),
			constructorInformation.f5,
			function () {
				var _v0 = constructorInformation.e5;
				if (!_v0.$) {
					var rangeToRemove = _v0.a;
					return params.hb ? _List_Nil : A2(
						$elm$core$List$cons,
						$jfmengels$elm_review$Review$Fix$removeRange(rangeToRemove),
						params.P);
				} else {
					return _List_Nil;
				}
			}());
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorsForConstructors = F6(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorsForConstructors$fn(projectContext, usedConstructors, moduleName, moduleKey, constructors, acc) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (constructorName, constructorInformation, subAcc) {
					return A2($elm$core$Set$member, constructorName, usedConstructors) ? subAcc : A2(
						$elm$core$List$cons,
						A3(
							$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorForModule,
							moduleKey,
							{
								P: A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2(
										$elm$core$Dict$get,
										_Utils_Tuple2(moduleName, constructorInformation.cH),
										projectContext.P)),
								hb: A2(
									$elm$core$Set$member,
									_Utils_Tuple2(moduleName, constructorInformation.cH),
									projectContext.ag),
								ae: A2(
									$elm$core$Set$member,
									_Utils_Tuple2(moduleName, constructorInformation.cH),
									projectContext.ae),
								af: A2(
									$elm$core$Set$member,
									_Utils_Tuple2(moduleName, constructorInformation.cH),
									projectContext.af)
							},
							constructorInformation),
						subAcc);
				}),
			acc,
			constructors);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorsForCustomTypes = F6(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorsForCustomTypes$fn(projectContext, usedConstructors, moduleName, moduleKey, customTypes, acc) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (_v0, constructors, subAcc) {
					return A6($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorsForConstructors, projectContext, usedConstructors, moduleName, moduleKey, constructors, subAcc);
				}),
			acc,
			customTypes);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$finalProjectEvaluation = function (projectContext) {
	return A3(
		$elm$core$Dict$foldl,
		F3(
			function (moduleName, _v0, acc) {
				var moduleKey = _v0.eX;
				var customTypes = _v0.fw;
				var usedConstructors = A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Set$empty,
					A2($elm$core$Dict$get, moduleName, projectContext.cR));
				return A6($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$errorsForCustomTypes, projectContext, usedConstructors, moduleName, moduleKey, customTypes, acc);
			}),
		_List_Nil,
		projectContext.bJ);
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$foldProjectContexts = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$foldProjectContexts$fn(newContext, previousContext) {
		return {
			bJ: A2($elm$core$Dict$union, newContext.bJ, previousContext.bJ),
			ao: previousContext.ao,
			P: A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, newFixes, acc) {
						var _v0 = A2($elm$core$Dict$get, key, acc);
						if (!_v0.$) {
							var existingFixes = _v0.a;
							return A3(
								$elm$core$Dict$insert,
								key,
								A3($elm$core$List$foldl, $elm$core$List$cons, existingFixes, newFixes),
								acc);
						} else {
							return A3($elm$core$Dict$insert, key, newFixes, acc);
						}
					}),
				previousContext.P,
				newContext.P),
			aB: A2($elm$core$Dict$union, newContext.aB, previousContext.aB),
			cR: A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, newSet, acc) {
						var _v1 = A2($elm$core$Dict$get, key, acc);
						if (!_v1.$) {
							var existingSet = _v1.a;
							return A3(
								$elm$core$Dict$insert,
								key,
								A2($elm$core$Set$union, newSet, existingSet),
								acc);
						} else {
							return A3($elm$core$Dict$insert, key, newSet, acc);
						}
					}),
				previousContext.cR,
				newContext.cR),
			ae: A2($elm$core$Set$union, newContext.ae, previousContext.ae),
			af: A2($elm$core$Set$union, newContext.af, previousContext.af),
			ag: A2($elm$core$Set$union, newContext.ag, previousContext.ag)
		};
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$ExposedConstructors = $elm$core$Basics$identity;
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$mapDictKeys = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$mapDictKeys$fn(keyMapper, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (key, value, acc) {
					return A3(
						$elm$core$Dict$insert,
						keyMapper(key),
						value,
						acc);
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$fromModuleToProject = $jfmengels$elm_review$Review$Rule$withModuleName(
	$jfmengels$elm_review$Review$Rule$withModuleKey(
		$jfmengels$elm_review$Review$Rule$initContextCreator(
			F3(
				function (moduleKey, moduleName, moduleContext) {
					var moduleNameAsString = A2($elm$core$String$join, '.', moduleName);
					var localUsed = A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Set$empty,
						A2($elm$core$Dict$get, '', moduleContext.bE));
					var localPhantomTypes = A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Dict$get, _List_Nil, moduleContext.aB));
					return {
						bJ: moduleContext.a7 ? (moduleContext.eA ? $elm$core$Dict$empty : A2(
							$elm$core$Dict$singleton,
							moduleNameAsString,
							{
								fw: A2(
									$elm$core$Dict$filter,
									F2(
										function (typeName, _v0) {
											return !A2($elm$core$Set$member, typeName, moduleContext.dN);
										}),
									moduleContext.c0),
								eX: moduleKey
							})) : A2(
							$elm$core$Dict$singleton,
							moduleNameAsString,
							{fw: moduleContext.c0, eX: moduleKey}),
						ao: $elm$core$Set$empty,
						P: A2(
							$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$mapDictKeys,
							function (constructorName) {
								return _Utils_Tuple2(moduleNameAsString, constructorName);
							},
							moduleContext.P),
						aB: A2($elm$core$Dict$singleton, moduleName, localPhantomTypes),
						cR: A3(
							$elm$core$Dict$insert,
							moduleNameAsString,
							localUsed,
							A2($elm$core$Dict$remove, '', moduleContext.bE)),
						ae: A2(
							$elm$core$Set$map,
							function (untouched) {
								var moduleName_ = untouched.a;
								var constructorName = untouched.b;
								return (moduleName_ === '') ? _Utils_Tuple2(moduleNameAsString, constructorName) : untouched;
							},
							moduleContext.ae),
						af: A2(
							$elm$core$Set$map,
							function (untouched) {
								var moduleName_ = untouched.a;
								var constructorName = untouched.b;
								return (moduleName_ === '') ? _Utils_Tuple2(moduleNameAsString, constructorName) : untouched;
							},
							moduleContext.af),
						ag: A3(
							$elm$core$Dict$foldl,
							F3(
								function (moduleName_, constructors, acc) {
									return A3(
										$elm$core$Set$foldl,
										F2(
											function (constructor, subAcc) {
												return A2(
													$elm$core$Set$insert,
													_Utils_Tuple2(moduleName_, constructor),
													subAcc);
											}),
										acc,
										constructors);
								}),
							moduleContext.ag,
							A2($elm$core$Dict$remove, '', moduleContext.bE))
					};
				}))));
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$fromProjectToModule = $jfmengels$elm_review$Review$Rule$withModuleName(
	$jfmengels$elm_review$Review$Rule$withModuleNameLookupTable(
		$jfmengels$elm_review$Review$Rule$initContextCreator(
			F3(
				function (lookupTable, moduleName, projectContext) {
					return {
						gA: _List_Nil,
						c0: $elm$core$Dict$empty,
						gR: projectContext.bJ,
						dN: $elm$core$Set$empty,
						eA: false,
						P: $elm$core$Dict$empty,
						bP: _List_Nil,
						a7: A2(
							$elm$core$Set$member,
							A2($elm$core$String$join, '.', moduleName),
							projectContext.ao),
						s: lookupTable,
						aB: projectContext.aB,
						bE: $elm$core$Dict$empty,
						ae: $elm$core$Set$empty,
						af: $elm$core$Set$empty,
						ag: $elm$core$Set$empty
					};
				}))));
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToAdd = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToAdd$fn(key, value, dict) {
		return A3(
			$elm$core$Dict$update,
			key,
			function (existingValues) {
				if (!existingValues.$) {
					var values = existingValues.a;
					return $elm$core$Maybe$Just(
						A2($elm$core$List$cons, value, values));
				} else {
					return $elm$core$Maybe$Just(
						_List_fromArray(
							[value]));
				}
			},
			dict);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$initialProjectContext = function (phantomTypes) {
	return {
		bJ: $elm$core$Dict$empty,
		ao: $elm$core$Set$empty,
		P: $elm$core$Dict$empty,
		aB: A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, dict) {
					var moduleName = _v0.eY;
					var typeName = _v0.jl;
					var index = _v0.iB;
					return A3(
						$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToAdd,
						A2($elm$core$String$split, '.', moduleName),
						_Utils_Tuple2(typeName, index),
						dict);
				}),
			$elm$core$Dict$empty,
			phantomTypes),
		cR: $elm$core$Dict$empty,
		ae: $elm$core$Set$empty,
		af: $elm$core$Set$empty,
		ag: $elm$core$Set$empty
	};
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$constructorsInPattern = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$constructorsInPattern$fn(lookupTable, nodes, acc) {
		constructorsInPattern:
		while (true) {
			if (!nodes.b) {
				return acc;
			} else {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				switch (_v1.$) {
					case 12:
						var qualifiedNameRef = _v1.a;
						var patterns = _v1.b;
						var newAcc = function () {
							var _v2 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node);
							if (!_v2.$) {
								if (!_v2.a.b) {
									return {
										ar: acc.ar,
										ai: A2($elm$core$Set$insert, qualifiedNameRef.cH, acc.ai)
									};
								} else {
									var realModuleName = _v2.a;
									return {
										ar: A2(
											$elm$core$Set$insert,
											_Utils_Tuple2(
												A2($elm$core$String$join, '.', realModuleName),
												qualifiedNameRef.cH),
											acc.ar),
										ai: acc.ai
									};
								}
							} else {
								return acc;
							}
						}();
						var $temp$lookupTable = lookupTable,
							$temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$acc = newAcc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue constructorsInPattern;
					case 7:
						var patterns = _v1.a;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue constructorsInPattern;
					case 9:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfNodes)),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue constructorsInPattern;
					case 10:
						var patterns = _v1.a;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue constructorsInPattern;
					case 13:
						var pattern = _v1.a;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = A2($elm$core$List$cons, pattern, restOfNodes),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue constructorsInPattern;
					case 14:
						var pattern = _v1.a;
						var $temp$lookupTable = lookupTable,
							$temp$nodes = A2($elm$core$List$cons, pattern, restOfNodes),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue constructorsInPattern;
					default:
						var $temp$lookupTable = lookupTable,
							$temp$nodes = restOfNodes,
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue constructorsInPattern;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findEndLocationOfPreviousElement = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findEndLocationOfPreviousElement$fn(nodes, nodeRange, previousRangeEnd) {
		findEndLocationOfPreviousElement:
		while (true) {
			if (nodes.b) {
				var _v1 = nodes.a;
				var _v2 = _v1.a;
				var patternRange = _v2.a;
				var _v3 = _v1.b;
				var bodyRange = _v3.a;
				var tail = nodes.b;
				if (_Utils_eq(patternRange, nodeRange)) {
					return previousRangeEnd;
				} else {
					var $temp$nodes = tail,
						$temp$nodeRange = nodeRange,
						$temp$previousRangeEnd = $elm$core$Maybe$Just(bodyRange.c4);
					nodes = $temp$nodes;
					nodeRange = $temp$nodeRange;
					previousRangeEnd = $temp$previousRangeEnd;
					continue findEndLocationOfPreviousElement;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$caseBranchEnterVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$caseBranchEnterVisitor$fn(caseExpression, _v0, moduleContext) {
		var casePattern = _v0.a;
		var body = _v0.b;
		var previousLocation = A3(
			$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findEndLocationOfPreviousElement,
			$stil4m$elm_syntax$Elm$Syntax$Node$value(caseExpression).ia,
			$stil4m$elm_syntax$Elm$Syntax$Node$range(casePattern),
			$elm$core$Maybe$Nothing);
		var constructors = A3(
			$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$constructorsInPattern,
			moduleContext.s,
			_List_fromArray(
				[casePattern]),
			{ar: $elm$core$Set$empty, ai: $elm$core$Set$empty});
		var constructorsToIgnore = A2(
			$elm$core$Set$union,
			A2(
				$elm$core$Set$map,
				function (_v1) {
					var moduleName = _v1.a;
					var constructorName = _v1.b;
					return _Utils_Tuple2(
						A2($elm$core$String$split, '.', moduleName),
						constructorName);
				},
				constructors.ar),
			A2(
				$elm$core$Set$map,
				function (constructorName) {
					return _Utils_Tuple2(_List_Nil, constructorName);
				},
				constructors.ai));
		var fixes = A3(
			$elm$core$Set$foldl,
			F2(
				function (constructorName, acc) {
					var fix = $jfmengels$elm_review$Review$Fix$removeRange(
						{
							c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(body).c4,
							dv: A2(
								$elm$core$Maybe$withDefault,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(casePattern).dv,
								previousLocation)
						});
					return A3($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToAdd, constructorName, fix, acc);
				}),
			moduleContext.P,
			constructors.ai);
		return _Utils_update(
			moduleContext,
			{
				gA: A2($elm$core$List$cons, constructorsToIgnore, moduleContext.gA),
				P: fixes,
				ag: A2($elm$core$Set$union, constructors.ar, moduleContext.ag)
			});
	});
var $elm$core$List$drop = F2(function $elm$core$List$drop$fn(n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$caseBranchExitVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$caseBranchExitVisitor$fn(_v0, _v1, moduleContext) {
		return _Utils_update(
			moduleContext,
			{
				gA: A2($elm$core$List$drop, 1, moduleContext.gA)
			});
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$collectGenericsFromTypeAnnotation = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$collectGenericsFromTypeAnnotation$fn(nodes, acc) {
		collectGenericsFromTypeAnnotation:
		while (true) {
			if (!nodes.b) {
				return acc;
			} else {
				var _v1 = nodes.a;
				var node = _v1.b;
				var restOfNodes = nodes.b;
				switch (node.$) {
					case 6:
						var a = node.a;
						var b = node.b;
						var $temp$nodes = A2(
							$elm$core$List$cons,
							a,
							A2($elm$core$List$cons, b, restOfNodes)),
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectGenericsFromTypeAnnotation;
					case 1:
						var params = node.b;
						var $temp$nodes = _Utils_ap(params, restOfNodes),
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectGenericsFromTypeAnnotation;
					case 4:
						var fields = node.a;
						var subNodes = A2(
							$elm$core$List$map,
							function (_v3) {
								var _v4 = _v3.b;
								var value = _v4.b;
								return value;
							},
							fields);
						var $temp$nodes = _Utils_ap(subNodes, restOfNodes),
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectGenericsFromTypeAnnotation;
					case 5:
						var _v5 = node.a;
						var _var = _v5.b;
						var _v6 = node.b;
						var fields = _v6.b;
						var subNodes = A2(
							$elm$core$List$map,
							function (_v7) {
								var _v8 = _v7.b;
								var value = _v8.b;
								return value;
							},
							fields);
						var $temp$nodes = _Utils_ap(subNodes, restOfNodes),
							$temp$acc = A2($elm$core$Set$insert, _var, acc);
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectGenericsFromTypeAnnotation;
					case 3:
						var list = node.a;
						var $temp$nodes = _Utils_ap(list, restOfNodes),
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectGenericsFromTypeAnnotation;
					case 0:
						var _var = node.a;
						var $temp$nodes = restOfNodes,
							$temp$acc = A2($elm$core$Set$insert, _var, acc);
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectGenericsFromTypeAnnotation;
					default:
						var $temp$nodes = restOfNodes,
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectGenericsFromTypeAnnotation;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$register = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$register$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 2) {
			var name = _v0.a.cH;
			var generics = _v0.a.gZ;
			var constructors = _v0.a.ig;
			var _arguments = A2(
				$elm$core$List$concatMap,
				function (_v3) {
					var value = _v3.b;
					return value.gs;
				},
				constructors);
			var nonPhantomVariables = A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$collectGenericsFromTypeAnnotation, _arguments, $elm$core$Set$empty);
			var newPhantomVariables = A3(
				$elm$core$Dict$update,
				_List_Nil,
				function (maybeSet) {
					var previousPhantomVariables = function () {
						if (!maybeSet.$) {
							var old = maybeSet.a;
							return old;
						} else {
							return _List_Nil;
						}
					}();
					return $elm$core$Maybe$Just(
						A4(
							$jfmengels$elm_review_unused$List$Extra$indexedFilterMap,
							F2(
								function (indexOfPhantomVariable, _v1) {
									var genericName = _v1.b;
									return A2($elm$core$Set$member, genericName, nonPhantomVariables) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
										_Utils_Tuple2(
											$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
											indexOfPhantomVariable));
								}),
							0,
							generics,
							previousPhantomVariables));
				},
				context.aB);
			return _Utils_update(
				context,
				{aB: newPhantomVariables});
		} else {
			return context;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$declarationListVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$declarationListVisitor$fn(nodes, context) {
		return A3($elm$core$List$foldl, $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$register, context, nodes);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findRangeToRemove = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findRangeToRemove$fn(previousConstructor, constructor, nextConstructor) {
		if (!previousConstructor.$) {
			var prev = previousConstructor.a;
			return $elm$core$Maybe$Just(
				{
					c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(constructor).c4,
					dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(prev).c4
				});
		} else {
			if (!nextConstructor.$) {
				var next = nextConstructor.a;
				return $elm$core$Maybe$Just(
					{
						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(next).dv,
						dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(constructor).cH).dv
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$constructorsForCustomType = function (constructors) {
	var constructorsAndNext = A3(
		$elm$core$List$map2,
		$elm$core$Tuple$pair,
		_Utils_ap(
			A2(
				$elm$core$List$map,
				$elm$core$Maybe$Just,
				A2($elm$core$List$drop, 1, constructors)),
			_List_fromArray(
				[$elm$core$Maybe$Nothing])),
		constructors);
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, _v1) {
				var next = _v0.a;
				var constructor = _v0.b;
				var prev = _v1.a;
				var dict = _v1.b;
				var nameNode = $stil4m$elm_syntax$Elm$Syntax$Node$value(constructor).cH;
				var constructorName = $stil4m$elm_syntax$Elm$Syntax$Node$value(nameNode);
				var constructorInformation = {
					cH: constructorName,
					e5: A3($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findRangeToRemove, prev, constructor, next),
					f5: $stil4m$elm_syntax$Elm$Syntax$Node$range(nameNode)
				};
				return _Utils_Tuple2(
					$elm$core$Maybe$Just(constructor),
					A3($elm$core$Dict$insert, constructorName, constructorInformation, dict));
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Dict$empty),
		constructorsAndNext).b;
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$isNeverOrItself = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$isNeverOrItself$fn(lookupTable, typeName, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$2:
		while (true) {
			if ((_v0.$ === 1) && (!_v0.b.b)) {
				if (_v0.a.b.b === 'Never') {
					var _v1 = _v0.a;
					var neverRange = _v1.a;
					var _v2 = _v1.b;
					return _Utils_eq(
						A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, neverRange),
						$elm$core$Maybe$Just(
							_List_fromArray(
								['Basics'])));
				} else {
					if (!_v0.a.b.a.b) {
						var _v3 = _v0.a;
						var _v4 = _v3.b;
						var argName = _v4.b;
						return _Utils_eq(typeName, argName);
					} else {
						break _v0$2;
					}
				}
			} else {
				break _v0$2;
			}
		}
		return false;
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$isPhantomCustomType = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$isPhantomCustomType$fn(lookupTable, typeName, constructors) {
		if (constructors.b && (!constructors.b.b)) {
			var _v1 = constructors.a;
			var constructor = _v1.b;
			var _v2 = constructor.gs;
			if (_v2.b && (!_v2.b.b)) {
				var arg = _v2.a;
				return A3($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$isNeverOrItself, lookupTable, typeName, arg);
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$listAtIndex = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$listAtIndex$fn(index, list) {
		listAtIndex:
		while (true) {
			var _v0 = _Utils_Tuple2(index, list);
			if (!_v0.b.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				if ((!_v0.a) && (!_v0.b.b.b)) {
					var _v1 = _v0.b;
					var a = _v1.a;
					return $elm$core$Maybe$Just(a);
				} else {
					var n = _v0.a;
					var _v2 = _v0.b;
					var rest = _v2.b;
					var $temp$index = n - 1,
						$temp$list = rest;
					index = $temp$index;
					list = $temp$list;
					continue listAtIndex;
				}
			}
		}
	});
var $elm$core$Set$singleton = function (key) {
	return A2($elm$core$Dict$singleton, key, 0);
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToInsert = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToInsert$fn(key, value, dict) {
		return A3(
			$elm$core$Dict$update,
			key,
			function (existingValues) {
				if (!existingValues.$) {
					var values = existingValues.a;
					return $elm$core$Maybe$Just(
						A2($elm$core$Set$insert, value, values));
				} else {
					return $elm$core$Maybe$Just(
						$elm$core$Set$singleton(value));
				}
			},
			dict);
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$collectTypesUsedAsPhantomVariables = F4(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$collectTypesUsedAsPhantomVariables$fn(moduleContext, phantomVariables, nodes, used) {
		collectTypesUsedAsPhantomVariables:
		while (true) {
			if (!nodes.b) {
				return used;
			} else {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				switch (_v1.$) {
					case 6:
						var a = _v1.a;
						var b = _v1.b;
						var $temp$moduleContext = moduleContext,
							$temp$phantomVariables = phantomVariables,
							$temp$nodes = A2(
							$elm$core$List$cons,
							a,
							A2($elm$core$List$cons, b, restOfNodes)),
							$temp$used = used;
						moduleContext = $temp$moduleContext;
						phantomVariables = $temp$phantomVariables;
						nodes = $temp$nodes;
						used = $temp$used;
						continue collectTypesUsedAsPhantomVariables;
					case 1:
						var _v2 = _v1.a;
						var typeRange = _v2.a;
						var _v3 = _v2.b;
						var name = _v3.b;
						var params = _v1.b;
						var _v4 = A2(
							$elm$core$Maybe$andThen,
							function (moduleNameOfPhantomContainer) {
								return A2($elm$core$Dict$get, moduleNameOfPhantomContainer, phantomVariables);
							},
							A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, moduleContext.s, typeRange));
						if (!_v4.$) {
							var things = _v4.a;
							var newUsed = A3(
								$elm$core$List$foldl,
								F2(
									function (_v5, acc) {
										var type_ = _v5.a;
										var index = _v5.b;
										if (!_Utils_eq(type_, name)) {
											return acc;
										} else {
											var _v6 = A2(
												$elm$core$Maybe$map,
												$stil4m$elm_syntax$Elm$Syntax$Node$value,
												A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$listAtIndex, index, params));
											if ((!_v6.$) && (_v6.a.$ === 1)) {
												var _v7 = _v6.a;
												var _v8 = _v7.a;
												var subTypeRange = _v8.a;
												var _v9 = _v8.b;
												var typeName = _v9.b;
												var _v10 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, moduleContext.s, subTypeRange);
												if (!_v10.$) {
													var moduleNameOfPhantomVariable = _v10.a;
													return A3(
														$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToInsert,
														A2($elm$core$String$join, '.', moduleNameOfPhantomVariable),
														typeName,
														acc);
												} else {
													return acc;
												}
											} else {
												return acc;
											}
										}
									}),
								used,
								things);
							var $temp$moduleContext = moduleContext,
								$temp$phantomVariables = phantomVariables,
								$temp$nodes = _Utils_ap(params, restOfNodes),
								$temp$used = newUsed;
							moduleContext = $temp$moduleContext;
							phantomVariables = $temp$phantomVariables;
							nodes = $temp$nodes;
							used = $temp$used;
							continue collectTypesUsedAsPhantomVariables;
						} else {
							var $temp$moduleContext = moduleContext,
								$temp$phantomVariables = phantomVariables,
								$temp$nodes = _Utils_ap(params, restOfNodes),
								$temp$used = used;
							moduleContext = $temp$moduleContext;
							phantomVariables = $temp$phantomVariables;
							nodes = $temp$nodes;
							used = $temp$used;
							continue collectTypesUsedAsPhantomVariables;
						}
					case 4:
						var fields = _v1.a;
						var subNodes = A2(
							$elm$core$List$map,
							function (_v11) {
								var _v12 = _v11.b;
								var value = _v12.b;
								return value;
							},
							fields);
						var $temp$moduleContext = moduleContext,
							$temp$phantomVariables = phantomVariables,
							$temp$nodes = _Utils_ap(subNodes, restOfNodes),
							$temp$used = used;
						moduleContext = $temp$moduleContext;
						phantomVariables = $temp$phantomVariables;
						nodes = $temp$nodes;
						used = $temp$used;
						continue collectTypesUsedAsPhantomVariables;
					case 5:
						var _v13 = _v1.b;
						var fields = _v13.b;
						var subNodes = A2(
							$elm$core$List$map,
							function (_v14) {
								var _v15 = _v14.b;
								var value = _v15.b;
								return value;
							},
							fields);
						var $temp$moduleContext = moduleContext,
							$temp$phantomVariables = phantomVariables,
							$temp$nodes = _Utils_ap(subNodes, restOfNodes),
							$temp$used = used;
						moduleContext = $temp$moduleContext;
						phantomVariables = $temp$phantomVariables;
						nodes = $temp$nodes;
						used = $temp$used;
						continue collectTypesUsedAsPhantomVariables;
					case 3:
						var list = _v1.a;
						var $temp$moduleContext = moduleContext,
							$temp$phantomVariables = phantomVariables,
							$temp$nodes = _Utils_ap(list, restOfNodes),
							$temp$used = used;
						moduleContext = $temp$moduleContext;
						phantomVariables = $temp$phantomVariables;
						nodes = $temp$nodes;
						used = $temp$used;
						continue collectTypesUsedAsPhantomVariables;
					case 0:
						var $temp$moduleContext = moduleContext,
							$temp$phantomVariables = phantomVariables,
							$temp$nodes = restOfNodes,
							$temp$used = used;
						moduleContext = $temp$moduleContext;
						phantomVariables = $temp$phantomVariables;
						nodes = $temp$nodes;
						used = $temp$used;
						continue collectTypesUsedAsPhantomVariables;
					default:
						var $temp$moduleContext = moduleContext,
							$temp$phantomVariables = phantomVariables,
							$temp$nodes = restOfNodes,
							$temp$used = used;
						moduleContext = $temp$moduleContext;
						phantomVariables = $temp$phantomVariables;
						nodes = $temp$nodes;
						used = $temp$used;
						continue collectTypesUsedAsPhantomVariables;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$markPhantomTypesFromTypeAnnotationAsUsed = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$markPhantomTypesFromTypeAnnotationAsUsed$fn(maybeTypeAnnotation, moduleContext) {
		if (!maybeTypeAnnotation.$) {
			var typeAnnotation = maybeTypeAnnotation.a;
			var usedFunctionsOrValues = A4(
				$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$collectTypesUsedAsPhantomVariables,
				moduleContext,
				moduleContext.aB,
				_List_fromArray(
					[typeAnnotation]),
				moduleContext.bE);
			return _Utils_update(
				moduleContext,
				{bE: usedFunctionsOrValues});
		} else {
			return moduleContext;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$declarationVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$declarationVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 2:
				var name = _v0.a.cH;
				var constructors = _v0.a.ig;
				return A3(
					$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$isPhantomCustomType,
					context.s,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
					constructors) ? context : _Utils_update(
					context,
					{
						c0: A3(
							$elm$core$Dict$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
							$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$constructorsForCustomType(constructors),
							context.c0)
					});
			case 0:
				var _function = _v0.a;
				return A2(
					$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$markPhantomTypesFromTypeAnnotationAsUsed,
					A2(
						$elm$core$Maybe$map,
						function (_v1) {
							var value = _v1.b;
							return value.hV;
						},
						_function.i7),
					_Utils_update(
						context,
						{bP: _List_Nil}));
			case 1:
				var typeAnnotation = _v0.a.hV;
				return A2(
					$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$markPhantomTypesFromTypeAnnotationAsUsed,
					$elm$core$Maybe$Just(typeAnnotation),
					context);
			default:
				return context;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$addElementToUniqueList = F4(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$addElementToUniqueList$fn(lookupTable, node, name, acc) {
		var _v0 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node);
		if (!_v0.$) {
			var realModuleName = _v0.a;
			var moduleName = A2($elm$core$String$join, '.', realModuleName);
			var key = _Utils_Tuple2(moduleName, name);
			return (moduleName === '') ? (A2($elm$core$List$member, key, acc.ai) ? acc : {
				ar: acc.ar,
				ai: A2($elm$core$List$cons, key, acc.ai)
			}) : {
				ar: A2($elm$core$Set$insert, key, acc.ar),
				ai: acc.ai
			};
		} else {
			return acc;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findConstructorsHelp = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findConstructorsHelp$fn(lookupTable, nodes, acc) {
		findConstructorsHelp:
		while (true) {
			if (!nodes.b) {
				return acc;
			} else {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				_v1$9:
				while (true) {
					switch (_v1.$) {
						case 3:
							var name = _v1.b;
							if ($jfmengels$elm_review_unused$String$Extra$isCapitalized(name)) {
								var $temp$lookupTable = lookupTable,
									$temp$nodes = restOfNodes,
									$temp$acc = A4($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$addElementToUniqueList, lookupTable, node, name, acc);
								lookupTable = $temp$lookupTable;
								nodes = $temp$nodes;
								acc = $temp$acc;
								continue findConstructorsHelp;
							} else {
								var $temp$lookupTable = lookupTable,
									$temp$nodes = restOfNodes,
									$temp$acc = acc;
								lookupTable = $temp$lookupTable;
								nodes = $temp$nodes;
								acc = $temp$acc;
								continue findConstructorsHelp;
							}
						case 1:
							if (_v1.a.b && (_v1.a.a.b.$ === 3)) {
								var _v2 = _v1.a;
								var _v3 = _v2.a;
								var _v4 = _v3.b;
								var name = _v4.b;
								var restOfArgs = _v2.b;
								if ($jfmengels$elm_review_unused$String$Extra$isCapitalized(name)) {
									var $temp$lookupTable = lookupTable,
										$temp$nodes = _Utils_ap(restOfArgs, restOfNodes),
										$temp$acc = A4($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$addElementToUniqueList, lookupTable, node, name, acc);
									lookupTable = $temp$lookupTable;
									nodes = $temp$nodes;
									acc = $temp$acc;
									continue findConstructorsHelp;
								} else {
									var $temp$lookupTable = lookupTable,
										$temp$nodes = restOfNodes,
										$temp$acc = acc;
									lookupTable = $temp$lookupTable;
									nodes = $temp$nodes;
									acc = $temp$acc;
									continue findConstructorsHelp;
								}
							} else {
								break _v1$9;
							}
						case 2:
							var operator = _v1.a;
							var left = _v1.c;
							var right = _v1.d;
							if (A2(
								$elm$core$List$member,
								operator,
								_List_fromArray(
									['+', '-']))) {
								var $temp$lookupTable = lookupTable,
									$temp$nodes = A2(
									$elm$core$List$cons,
									left,
									A2($elm$core$List$cons, right, restOfNodes)),
									$temp$acc = acc;
								lookupTable = $temp$lookupTable;
								nodes = $temp$nodes;
								acc = $temp$acc;
								continue findConstructorsHelp;
							} else {
								var $temp$lookupTable = lookupTable,
									$temp$nodes = restOfNodes,
									$temp$acc = acc;
								lookupTable = $temp$lookupTable;
								nodes = $temp$nodes;
								acc = $temp$acc;
								continue findConstructorsHelp;
							}
						case 19:
							var subNodes = _v1.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = _Utils_ap(subNodes, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findConstructorsHelp;
						case 13:
							var subNodes = _v1.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = _Utils_ap(subNodes, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findConstructorsHelp;
						case 14:
							var expr = _v1.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = A2($elm$core$List$cons, expr, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findConstructorsHelp;
						case 18:
							var fields = _v1.a;
							var expressions = A2(
								$elm$core$List$map,
								function (_v5) {
									var _v6 = _v5.b;
									var value = _v6.b;
									return value;
								},
								fields);
							var $temp$lookupTable = lookupTable,
								$temp$nodes = _Utils_ap(expressions, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findConstructorsHelp;
						case 22:
							var fields = _v1.b;
							var expressions = A2(
								$elm$core$List$map,
								function (_v7) {
									var _v8 = _v7.b;
									var value = _v8.b;
									return value;
								},
								fields);
							var $temp$lookupTable = lookupTable,
								$temp$nodes = _Utils_ap(expressions, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findConstructorsHelp;
						case 20:
							var expr = _v1.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = A2($elm$core$List$cons, expr, restOfNodes),
								$temp$acc = acc;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue findConstructorsHelp;
						default:
							break _v1$9;
					}
				}
				var $temp$lookupTable = lookupTable,
					$temp$nodes = restOfNodes,
					$temp$acc = acc;
				lookupTable = $temp$lookupTable;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue findConstructorsHelp;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findConstructors = F3(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findConstructors$fn(lookupTable, nodes, fromOtherModulesBase) {
		return A3(
			$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findConstructorsHelp,
			lookupTable,
			nodes,
			{ar: fromOtherModulesBase, ai: _List_Nil});
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$registerUsedFunctionOrValue = F4(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$registerUsedFunctionOrValue$fn(range, moduleName, name, moduleContext) {
		return (!$jfmengels$elm_review_unused$String$Extra$isCapitalized(name)) ? moduleContext : (A2($elm$core$List$member, range, moduleContext.bP) ? _Utils_update(
			moduleContext,
			{
				ae: A2(
					$elm$core$Set$insert,
					_Utils_Tuple2(
						A2($elm$core$String$join, '.', moduleName),
						name),
					moduleContext.ae)
			}) : (A2(
			$elm$core$List$any,
			$elm$core$Set$member(
				_Utils_Tuple2(moduleName, name)),
			moduleContext.gA) ? _Utils_update(
			moduleContext,
			{
				af: A2(
					$elm$core$Set$insert,
					_Utils_Tuple2(
						A2($elm$core$String$join, '.', moduleName),
						name),
					moduleContext.af)
			}) : _Utils_update(
			moduleContext,
			{
				bE: A3(
					$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToInsert,
					A2($elm$core$String$join, '.', moduleName),
					name,
					moduleContext.bE)
			})));
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$staticRanges = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$staticRanges$fn(nodes, acc) {
		staticRanges:
		while (true) {
			if (!nodes.b) {
				return acc;
			} else {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				_v1$10:
				while (true) {
					switch (_v1.$) {
						case 3:
							var $temp$nodes = restOfNodes,
								$temp$acc = A2(
								$elm$core$List$cons,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
								acc);
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue staticRanges;
						case 1:
							if (_v1.a.b) {
								switch (_v1.a.a.b.$) {
									case 3:
										var _v2 = _v1.a;
										var _v3 = _v2.a;
										var _v4 = _v3.b;
										var name = _v4.b;
										var restOfArgs = _v2.b;
										if ($jfmengels$elm_review_unused$String$Extra$isCapitalized(name)) {
											var $temp$nodes = _Utils_ap(restOfArgs, restOfNodes),
												$temp$acc = A2(
												$elm$core$List$cons,
												$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
												acc);
											nodes = $temp$nodes;
											acc = $temp$acc;
											continue staticRanges;
										} else {
											var $temp$nodes = restOfNodes,
												$temp$acc = acc;
											nodes = $temp$nodes;
											acc = $temp$acc;
											continue staticRanges;
										}
									case 5:
										var _v5 = _v1.a;
										var _v6 = _v5.a;
										var operator = _v6.b.a;
										var restOfArgs = _v5.b;
										if (A2(
											$elm$core$List$member,
											operator,
											_List_fromArray(
												['+', '-', '==', '/=']))) {
											var $temp$nodes = _Utils_ap(restOfArgs, restOfNodes),
												$temp$acc = acc;
											nodes = $temp$nodes;
											acc = $temp$acc;
											continue staticRanges;
										} else {
											var $temp$nodes = restOfNodes,
												$temp$acc = acc;
											nodes = $temp$nodes;
											acc = $temp$acc;
											continue staticRanges;
										}
									default:
										break _v1$10;
								}
							} else {
								break _v1$10;
							}
						case 2:
							var operator = _v1.a;
							var left = _v1.c;
							var right = _v1.d;
							if (A2(
								$elm$core$List$member,
								operator,
								_List_fromArray(
									['+', '-', '==', '/=']))) {
								var $temp$nodes = A2(
									$elm$core$List$cons,
									left,
									A2($elm$core$List$cons, right, restOfNodes)),
									$temp$acc = acc;
								nodes = $temp$nodes;
								acc = $temp$acc;
								continue staticRanges;
							} else {
								var $temp$nodes = restOfNodes,
									$temp$acc = acc;
								nodes = $temp$nodes;
								acc = $temp$acc;
								continue staticRanges;
							}
						case 19:
							var subNodes = _v1.a;
							var $temp$nodes = _Utils_ap(subNodes, restOfNodes),
								$temp$acc = acc;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue staticRanges;
						case 13:
							var subNodes = _v1.a;
							var $temp$nodes = _Utils_ap(subNodes, restOfNodes),
								$temp$acc = acc;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue staticRanges;
						case 14:
							var expr = _v1.a;
							var $temp$nodes = A2($elm$core$List$cons, expr, restOfNodes),
								$temp$acc = acc;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue staticRanges;
						case 18:
							var fields = _v1.a;
							var newNodes = A2(
								$elm$core$List$map,
								function (_v7) {
									var _v8 = _v7.b;
									var value = _v8.b;
									return value;
								},
								fields);
							var $temp$nodes = _Utils_ap(newNodes, restOfNodes),
								$temp$acc = acc;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue staticRanges;
						case 22:
							var fields = _v1.b;
							var newNodes = A2(
								$elm$core$List$map,
								function (_v9) {
									var _v10 = _v9.b;
									var value = _v10.b;
									return value;
								},
								fields);
							var $temp$nodes = _Utils_ap(newNodes, restOfNodes),
								$temp$acc = acc;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue staticRanges;
						case 20:
							var expr = _v1.a;
							var $temp$nodes = A2($elm$core$List$cons, expr, restOfNodes),
								$temp$acc = acc;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue staticRanges;
						default:
							break _v1$10;
					}
				}
				var $temp$nodes = restOfNodes,
					$temp$acc = acc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue staticRanges;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$expressionVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$expressionVisitor$fn(node, moduleContext) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$4:
		while (true) {
			switch (_v0.$) {
				case 3:
					var name = _v0.b;
					var _v1 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, moduleContext.s, node);
					if (!_v1.$) {
						var moduleName = _v1.a;
						return A4(
							$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$registerUsedFunctionOrValue,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							moduleName,
							name,
							moduleContext);
					} else {
						return moduleContext;
					}
				case 2:
					var operator = _v0.a;
					var left = _v0.c;
					var right = _v0.d;
					if ((operator === '==') || (operator === '/=')) {
						var replacement = (operator === '==') ? 'False' : 'True';
						var _v2 = A3(
							$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findConstructors,
							moduleContext.s,
							_List_fromArray(
								[left, right]),
							moduleContext.ag);
						var fromThisModule = _v2.ai;
						var fromOtherModules = _v2.ar;
						var fixes = A3(
							$elm$core$List$foldl,
							F2(
								function (_v3, dict) {
									var constructor = _v3.b;
									return A3(
										$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToAdd,
										constructor,
										A2(
											$jfmengels$elm_review$Review$Fix$replaceRangeBy,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
											replacement),
										dict);
								}),
							moduleContext.P,
							fromThisModule);
						return _Utils_update(
							moduleContext,
							{
								P: fixes,
								bP: A2(
									$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$staticRanges,
									_List_fromArray(
										[node]),
									moduleContext.bP),
								ag: fromOtherModules
							});
					} else {
						return moduleContext;
					}
				case 1:
					if (_v0.a.b && (_v0.a.a.b.$ === 5)) {
						var _v4 = _v0.a;
						var _v5 = _v4.a;
						var operator = _v5.b.a;
						var _arguments = _v4.b;
						if ((operator === '==') || (operator === '/=')) {
							var replacementBoolean = (operator === '==') ? 'False' : 'True';
							var replacement = ($elm$core$List$length(_arguments) === 2) ? replacementBoolean : ('always ' + replacementBoolean);
							var _v6 = A3($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$findConstructors, moduleContext.s, _arguments, moduleContext.ag);
							var fromThisModule = _v6.ai;
							var fromOtherModules = _v6.ar;
							var fixes = A3(
								$elm$core$List$foldl,
								F2(
									function (_v7, dict) {
										var constructor = _v7.b;
										return A3(
											$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$updateToAdd,
											constructor,
											A2(
												$jfmengels$elm_review$Review$Fix$replaceRangeBy,
												$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
												replacement),
											dict);
									}),
								moduleContext.P,
								fromThisModule);
							return _Utils_update(
								moduleContext,
								{
									P: fixes,
									bP: A2(
										$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$staticRanges,
										_List_fromArray(
											[node]),
										moduleContext.bP),
									ag: fromOtherModules
								});
						} else {
							return moduleContext;
						}
					} else {
						break _v0$4;
					}
				case 15:
					var declarations = _v0.a.gD;
					return A3(
						$elm$core$List$foldl,
						F2(
							function (declaration, ctx) {
								var _v8 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
								if (!_v8.$) {
									var _function = _v8.a;
									return A2(
										$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$markPhantomTypesFromTypeAnnotationAsUsed,
										A2(
											$elm$core$Maybe$map,
											function (_v9) {
												var value = _v9.b;
												return value.hV;
											},
											_function.i7),
										ctx);
								} else {
									return ctx;
								}
							}),
						moduleContext,
						declarations);
				default:
					break _v0$4;
			}
		}
		return moduleContext;
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$moduleDefinitionVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$moduleDefinitionVisitor$fn(moduleNode, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(moduleNode));
		if (!_v0.$) {
			return _Utils_update(
				context,
				{eA: true});
		} else {
			var list = _v0.a;
			var exposedCustomTypesWithConstructors = A3(
				$elm$core$List$foldl,
				F2(
					function (node, acc) {
						var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
						if (_v1.$ === 3) {
							var name = _v1.a.cH;
							return A2($elm$core$Set$insert, name, acc);
						} else {
							return acc;
						}
					}),
				context.dN,
				list);
			return _Utils_update(
				context,
				{dN: exposedCustomTypesWithConstructors});
		}
	});
var $jfmengels$elm_review$Review$Rule$combineVisitors2 = F2(function $jfmengels$elm_review$Review$Rule$combineVisitors2$fn(newVisitor, maybePreviousVisitor) {
		if (maybePreviousVisitor.$ === 1) {
			return newVisitor;
		} else {
			var previousVisitor = maybePreviousVisitor.a;
			return F3(
				function (a, b, moduleContext) {
					var _v1 = A3(previousVisitor, a, b, moduleContext);
					var errorsAfterFirstVisit = _v1.a;
					var contextAfterFirstVisit = _v1.b;
					var _v2 = A3(newVisitor, a, b, contextAfterFirstVisit);
					var errorsAfterSecondVisit = _v2.a;
					var contextAfterSecondVisit = _v2.b;
					return _Utils_Tuple2(
						A2($elm$core$List$append, errorsAfterFirstVisit, errorsAfterSecondVisit),
						contextAfterSecondVisit);
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$withCaseBranchEnterVisitor = F2(function $jfmengels$elm_review$Review$Rule$withCaseBranchEnterVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				a_: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors2, visitor, schema.a_))
			});
	});
var $jfmengels$elm_review$Review$Rule$combineExitVisitors2 = F2(function $jfmengels$elm_review$Review$Rule$combineExitVisitors2$fn(newVisitor, maybePreviousVisitor) {
		if (maybePreviousVisitor.$ === 1) {
			return newVisitor;
		} else {
			var previousVisitor = maybePreviousVisitor.a;
			return F3(
				function (a, b, moduleContext) {
					var _v1 = A3(newVisitor, a, b, moduleContext);
					var errorsAfterFirstVisit = _v1.a;
					var contextAfterFirstVisit = _v1.b;
					var _v2 = A3(previousVisitor, a, b, contextAfterFirstVisit);
					var errorsAfterSecondVisit = _v2.a;
					var contextAfterSecondVisit = _v2.b;
					return _Utils_Tuple2(
						A2($elm$core$List$append, errorsAfterFirstVisit, errorsAfterSecondVisit),
						contextAfterSecondVisit);
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$withCaseBranchExitVisitor = F2(function $jfmengels$elm_review$Review$Rule$withCaseBranchExitVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				a$: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineExitVisitors2, visitor, schema.a$))
			});
	});
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$moduleVisitor = function (schema) {
	return A2(
		$jfmengels$elm_review$Review$Rule$withCaseBranchExitVisitor,
		F3(
			function (caseBlock, casePattern, context) {
				return _Utils_Tuple2(
					_List_Nil,
					A3($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$caseBranchExitVisitor, caseBlock, casePattern, context));
			}),
		A2(
			$jfmengels$elm_review$Review$Rule$withCaseBranchEnterVisitor,
			F3(
				function (caseBlock, casePattern, context) {
					return _Utils_Tuple2(
						_List_Nil,
						A3($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$caseBranchEnterVisitor, caseBlock, casePattern, context));
				}),
			A2(
				$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
				F2(
					function (node, context) {
						return _Utils_Tuple2(
							_List_Nil,
							A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$expressionVisitor, node, context));
					}),
				A2(
					$jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor,
					F2(
						function (node, context) {
							return _Utils_Tuple2(
								_List_Nil,
								A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$declarationVisitor, node, context));
						}),
					A2(
						$jfmengels$elm_review$Review$Rule$withDeclarationListVisitor,
						F2(
							function (node, context) {
								return _Utils_Tuple2(
									_List_Nil,
									A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$declarationListVisitor, node, context));
							}),
						A2(
							$jfmengels$elm_review$Review$Rule$withModuleDefinitionVisitor,
							F2(
								function (node, context) {
									return _Utils_Tuple2(
										_List_Nil,
										A2($jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$moduleDefinitionVisitor, node, context));
								}),
							schema))))));
};
var $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$rule = function (phantomTypes) {
	return $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
		A2(
			$jfmengels$elm_review$Review$Rule$withFinalProjectEvaluation,
			$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$finalProjectEvaluation,
			$jfmengels$elm_review$Review$Rule$withContextFromImportedModules(
				$jfmengels$elm_review$Review$Rule$providesFixesForProjectRule(
					A2(
						$jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator,
						{cl: $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$foldProjectContexts, cn: $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$fromModuleToProject, gY: $jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$fromProjectToModule},
						A2(
							$jfmengels$elm_review$Review$Rule$withModuleVisitor,
							$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$moduleVisitor,
							A2(
								$jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor,
								$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$elmJsonVisitor,
								A2(
									$jfmengels$elm_review$Review$Rule$newProjectRuleSchema,
									'NoUnused.CustomTypeConstructors',
									$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$initialProjectContext(phantomTypes)))))))));
};
var $jfmengels$elm_review$Review$Project$Dependency$elmJson = function (_v0) {
	var dependency = _v0;
	return dependency.es;
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$getDependencyList = function (dependency) {
	var _v0 = $jfmengels$elm_review$Review$Project$Dependency$elmJson(dependency);
	if (!_v0.$) {
		return _List_Nil;
	} else {
		var _package = _v0.a;
		return A2(
			$elm$core$List$map,
			function (_v1) {
				var depName = _v1.a;
				return depName;
			},
			_package.gH);
	}
};
var $elm$core$Dict$map = F2(function $elm$core$Dict$map$fn(func, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$dependenciesVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Dependencies$dependenciesVisitor$fn(dependencies, projectContext) {
		var moduleNameToDependency = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$concatMap,
				function (_v2) {
					var packageName = _v2.a;
					var dependency = _v2.b;
					return A2(
						$elm$core$List$map,
						function (_v3) {
							var name = _v3.cH;
							return _Utils_Tuple2(name, packageName);
						},
						$jfmengels$elm_review$Review$Project$Dependency$modules(dependency));
				},
				$elm$core$Dict$toList(
					A2(
						$elm$core$Dict$filter,
						F2(
							function (packageName, _v1) {
								return A2($elm$core$Set$member, packageName, projectContext.bK) || A2($elm$core$Set$member, packageName, projectContext.bL);
							}),
						dependencies))));
		return _Utils_Tuple2(
			_List_Nil,
			_Utils_update(
				projectContext,
				{
					gF: A2(
						$elm$core$Dict$map,
						F2(
							function (_v0, dep) {
								return $jfmengels$elm_review_unused$NoUnused$Dependencies$getDependencyList(dep);
							}),
						dependencies),
					bc: moduleNameToDependency
				}));
	});
var $elm$project_metadata_utils$Elm$Package$toString = function (_v0) {
	var user = _v0.a;
	var project = _v0.b;
	return user + ('/' + project);
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$listDependencies = function (deps) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, acc) {
				var name = _v0.a;
				return A2(
					$elm$core$Set$insert,
					$elm$project_metadata_utils$Elm$Package$toString(name),
					acc);
			}),
		$elm$core$Set$empty,
		deps);
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$elmJsonVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Dependencies$elmJsonVisitor$fn(maybeProject, projectContext) {
		if (!maybeProject.$) {
			var elmJsonKey = maybeProject.a.im;
			var project = maybeProject.a.o;
			var _v1 = function () {
				if (project.$ === 1) {
					var deps = project.a.gH;
					var testDeps = project.a.hP;
					return _Utils_Tuple2(
						$jfmengels$elm_review_unused$NoUnused$Dependencies$listDependencies(deps),
						$jfmengels$elm_review_unused$NoUnused$Dependencies$listDependencies(testDeps));
				} else {
					var depsDirect = project.a.gI;
					var testDepsDirect = project.a.hQ;
					return _Utils_Tuple2(
						$jfmengels$elm_review_unused$NoUnused$Dependencies$listDependencies(depsDirect),
						$jfmengels$elm_review_unused$NoUnused$Dependencies$listDependencies(testDepsDirect));
				}
			}();
			var directProjectDependencies = _v1.a;
			var directTestDependencies = _v1.b;
			return _Utils_Tuple2(
				_List_Nil,
				_Utils_update(
					projectContext,
					{
						bK: directProjectDependencies,
						bL: directTestDependencies,
						im: $elm$core$Maybe$Just(elmJsonKey)
					}));
		} else {
			return _Utils_Tuple2(_List_Nil, projectContext);
		}
	});
var $elm$core$Dict$diff = F2(function $elm$core$Dict$diff$fn(t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $elm$core$Set$diff = F2(function $elm$core$Set$diff$fn(_v0, _v1) {
		var dict1 = _v0;
		var dict2 = _v1;
		return A2($elm$core$Dict$diff, dict1, dict2);
	});
var $elm$core$Dict$intersect = F2(function $elm$core$Dict$intersect$fn(t1, t2) {
		return A2(
			$elm$core$Dict$filter,
			F2(
				function (k, _v0) {
					return A2($elm$core$Dict$member, k, t2);
				}),
			t1);
	});
var $elm$core$Set$intersect = F2(function $elm$core$Set$intersect$fn(_v0, _v1) {
		var dict1 = _v0;
		var dict2 = _v1;
		return A2($elm$core$Dict$intersect, dict1, dict2);
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$InProjectDeps = 0;
var $jfmengels$elm_review_unused$NoUnused$Dependencies$ApplicationProject = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$PackageProject = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$listIndirectDependenciesHelp = F4(function $jfmengels$elm_review_unused$NoUnused$Dependencies$listIndirectDependenciesHelp$fn(getDependenciesAndVersion, dependenciesToLookAt, visited, indirectDependencies) {
		listIndirectDependenciesHelp:
		while (true) {
			var _v0 = A2(
				$elm$core$List$filter,
				function (_v1) {
					var name = _v1.a;
					return !A2($elm$core$List$member, name, visited);
				},
				dependenciesToLookAt);
			if (!_v0.b) {
				return indirectDependencies;
			} else {
				var _v2 = _v0.a;
				var name = _v2.a;
				var version = _v2.b;
				var restOfDependenciesToLookAt = _v0.b;
				var $temp$getDependenciesAndVersion = getDependenciesAndVersion,
					$temp$dependenciesToLookAt = _Utils_ap(
					getDependenciesAndVersion(name),
					restOfDependenciesToLookAt),
					$temp$visited = A2($elm$core$List$cons, name, visited),
					$temp$indirectDependencies = A2(
					$elm$core$List$cons,
					_Utils_Tuple2(name, version),
					indirectDependencies);
				getDependenciesAndVersion = $temp$getDependenciesAndVersion;
				dependenciesToLookAt = $temp$dependenciesToLookAt;
				visited = $temp$visited;
				indirectDependencies = $temp$indirectDependencies;
				continue listIndirectDependenciesHelp;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$listIndirectDependencies = F2(function $jfmengels$elm_review_unused$NoUnused$Dependencies$listIndirectDependencies$fn(getDependenciesAndVersion, baseDependencies) {
		return A2(
			$elm$core$List$filter,
			function (dep) {
				return !A2($elm$core$List$member, dep, baseDependencies);
			},
			A4($jfmengels$elm_review_unused$NoUnused$Dependencies$listIndirectDependenciesHelp, getDependenciesAndVersion, baseDependencies, _List_Nil, _List_Nil));
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$addTestDependency = function (projectAndDependencyIdentifier) {
	if (!projectAndDependencyIdentifier.$) {
		var project = projectAndDependencyIdentifier.a;
		var application = project.bG;
		var testDepsDirect = A2(
			$elm$core$List$cons,
			_Utils_Tuple2(project.cH, project.hY),
			application.hQ);
		return $jfmengels$elm_review_unused$NoUnused$Dependencies$ApplicationProject(
			_Utils_update(
				project,
				{
					bG: _Utils_update(
						application,
						{
							hQ: testDepsDirect,
							hR: A2(
								$elm$core$List$filter,
								function (dep) {
									return !(A2($elm$core$List$member, dep, application.gI) || A2($elm$core$List$member, dep, application.gJ));
								},
								A2($jfmengels$elm_review_unused$NoUnused$Dependencies$listIndirectDependencies, project.dX, testDepsDirect))
						})
				}));
	} else {
		var project = projectAndDependencyIdentifier.a;
		var _package = project.b_;
		return $jfmengels$elm_review_unused$NoUnused$Dependencies$PackageProject(
			_Utils_update(
				project,
				{
					b_: _Utils_update(
						_package,
						{
							hP: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(project.cH, project.gz),
								_package.hP)
						})
				}));
	}
};
var $jfmengels$elm_review$Review$Error$ElmJson = 1;
var $elm$project_metadata_utils$Elm$Constraint$opToString = function (op) {
	if (!op) {
		return ' < ';
	} else {
		return ' <= ';
	}
};
var $elm$project_metadata_utils$Elm$Version$toString = function (_v0) {
	var major = _v0.a;
	var minor = _v0.b;
	var patch = _v0.c;
	return $elm$core$String$fromInt(major) + ('.' + ($elm$core$String$fromInt(minor) + ('.' + $elm$core$String$fromInt(patch))));
};
var $elm$project_metadata_utils$Elm$Constraint$toString = function (_v0) {
	var lower = _v0.a;
	var lop = _v0.b;
	var uop = _v0.c;
	var upper = _v0.d;
	return $elm$project_metadata_utils$Elm$Version$toString(lower) + ($elm$project_metadata_utils$Elm$Constraint$opToString(lop) + ('v' + ($elm$project_metadata_utils$Elm$Constraint$opToString(uop) + $elm$project_metadata_utils$Elm$Version$toString(upper))));
};
var $elm$project_metadata_utils$Elm$Constraint$encode = function (constraint) {
	return $elm$json$Json$Encode$string(
		$elm$project_metadata_utils$Elm$Constraint$toString(constraint));
};
var $elm$project_metadata_utils$Elm$License$toString = function (_v0) {
	var spdx = _v0.a;
	return spdx;
};
var $elm$project_metadata_utils$Elm$License$encode = function (constraint) {
	return $elm$json$Json$Encode$string(
		$elm$project_metadata_utils$Elm$License$toString(constraint));
};
var $elm$project_metadata_utils$Elm$Package$encode = function (name) {
	return $elm$json$Json$Encode$string(
		$elm$project_metadata_utils$Elm$Package$toString(name));
};
var $elm$project_metadata_utils$Elm$Version$encode = function (version) {
	return $elm$json$Json$Encode$string(
		$elm$project_metadata_utils$Elm$Version$toString(version));
};
var $jfmengels$elm_review$Review$ElmProjectEncoder$encodeDep = F2(function $jfmengels$elm_review$Review$ElmProjectEncoder$encodeDep$fn(encodeConstraint, _v0) {
		var name = _v0.a;
		var constraint = _v0.b;
		return _Utils_Tuple2(
			$elm$project_metadata_utils$Elm$Package$toString(name),
			encodeConstraint(constraint));
	});
var $elm$core$List$sortBy = _List_sortBy;
var $jfmengels$elm_review$Review$ElmProjectEncoder$encodeDeps = F2(function $jfmengels$elm_review$Review$ElmProjectEncoder$encodeDeps$fn(encodeConstraint, deps) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$sortBy,
				function (_v0) {
					var pkgName = _v0.a;
					return A2($elm$core$String$split, '/', pkgName);
				},
				A2(
					$elm$core$List$map,
					function (dep) {
						return A2($jfmengels$elm_review$Review$ElmProjectEncoder$encodeDep, encodeConstraint, dep);
					},
					deps)));
	});
var $elm$project_metadata_utils$Elm$Module$encode = function (_v0) {
	var name = _v0;
	return $elm$json$Json$Encode$string(name);
};
var $elm$json$Json$Encode$list = F2(function $elm$json$Json$Encode$list$fn(func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $jfmengels$elm_review$Review$ElmProjectEncoder$encodeChunk = function (_v0) {
	var header = _v0.a;
	var list = _v0.b;
	return _Utils_Tuple2(
		header,
		A2($elm$json$Json$Encode$list, $elm$project_metadata_utils$Elm$Module$encode, list));
};
var $jfmengels$elm_review$Review$ElmProjectEncoder$encodeExposed = function (exposed) {
	if (!exposed.$) {
		var modules = exposed.a;
		return A2($elm$json$Json$Encode$list, $elm$project_metadata_utils$Elm$Module$encode, modules);
	} else {
		var chunks = exposed.a;
		return $elm$json$Json$Encode$object(
			A2($elm$core$List$map, $jfmengels$elm_review$Review$ElmProjectEncoder$encodeChunk, chunks));
	}
};
var $jfmengels$elm_review$Review$ElmProjectEncoder$encode = function (project) {
	if (!project.$) {
		var elm = project.a.er;
		var dirs = project.a.gM;
		var depsDirect = project.a.gI;
		var depsIndirect = project.a.gJ;
		var testDepsDirect = project.a.hQ;
		var testDepsIndirect = project.a.hR;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('application')),
					_Utils_Tuple2(
					'source-directories',
					A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, dirs)),
					_Utils_Tuple2(
					'elm-version',
					$elm$project_metadata_utils$Elm$Version$encode(elm)),
					_Utils_Tuple2(
					'dependencies',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'direct',
								A2($jfmengels$elm_review$Review$ElmProjectEncoder$encodeDeps, $elm$project_metadata_utils$Elm$Version$encode, depsDirect)),
								_Utils_Tuple2(
								'indirect',
								A2($jfmengels$elm_review$Review$ElmProjectEncoder$encodeDeps, $elm$project_metadata_utils$Elm$Version$encode, depsIndirect))
							]))),
					_Utils_Tuple2(
					'test-dependencies',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'direct',
								A2($jfmengels$elm_review$Review$ElmProjectEncoder$encodeDeps, $elm$project_metadata_utils$Elm$Version$encode, testDepsDirect)),
								_Utils_Tuple2(
								'indirect',
								A2($jfmengels$elm_review$Review$ElmProjectEncoder$encodeDeps, $elm$project_metadata_utils$Elm$Version$encode, testDepsIndirect))
							])))
				]));
	} else {
		var name = project.a.cH;
		var summary = project.a.hJ;
		var license = project.a.hf;
		var version = project.a.hY;
		var exposed = project.a.gQ;
		var deps = project.a.gH;
		var testDeps = project.a.hP;
		var elm = project.a.er;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('package')),
					_Utils_Tuple2(
					'name',
					$elm$project_metadata_utils$Elm$Package$encode(name)),
					_Utils_Tuple2(
					'summary',
					$elm$json$Json$Encode$string(summary)),
					_Utils_Tuple2(
					'license',
					$elm$project_metadata_utils$Elm$License$encode(license)),
					_Utils_Tuple2(
					'version',
					$elm$project_metadata_utils$Elm$Version$encode(version)),
					_Utils_Tuple2(
					'exposed-modules',
					$jfmengels$elm_review$Review$ElmProjectEncoder$encodeExposed(exposed)),
					_Utils_Tuple2(
					'elm-version',
					$elm$project_metadata_utils$Elm$Constraint$encode(elm)),
					_Utils_Tuple2(
					'dependencies',
					A2($jfmengels$elm_review$Review$ElmProjectEncoder$encodeDeps, $elm$project_metadata_utils$Elm$Constraint$encode, deps)),
					_Utils_Tuple2(
					'test-dependencies',
					A2($jfmengels$elm_review$Review$ElmProjectEncoder$encodeDeps, $elm$project_metadata_utils$Elm$Constraint$encode, testDeps))
				]));
	}
};
var $jfmengels$elm_review$Review$Error$fixesFromMaybe = function (maybeFixes) {
	if (!maybeFixes.$) {
		var fixes = maybeFixes.a;
		return $jfmengels$elm_review$Review$Error$Available(fixes);
	} else {
		return $jfmengels$elm_review$Review$Error$NoFixes;
	}
};
var $jfmengels$elm_review$Review$Rule$errorForElmJsonWithFix = F3(function $jfmengels$elm_review$Review$Rule$errorForElmJsonWithFix$fn(_v0, getErrorInfo, getFix) {
		var elmJson = _v0;
		var errorInfo = getErrorInfo(elmJson.ed);
		return {
			eq: errorInfo.eq,
			iu: elmJson.iX,
			dV: $jfmengels$elm_review$Review$Error$fixesFromMaybe(
				A2(
					$elm$core$Maybe$map,
					function (updatedProject) {
						var encoded = A2(
							$elm$json$Json$Encode$encode,
							4,
							$jfmengels$elm_review$Review$ElmProjectEncoder$encode(updatedProject));
						return _List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{
									c4: {bH: 1, b1: 100000000},
									dv: {bH: 1, b1: 1}
								},
								encoded + '\n')
							]);
					},
					getFix(elmJson.o))),
			bx: errorInfo.bx,
			e4: false,
			f4: errorInfo.f4,
			f8: '',
			hO: 1
		};
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$length = _String_length;
var $jfmengels$elm_review_unused$NoUnused$Dependencies$findPackageNameInElmJson = F2(function $jfmengels$elm_review_unused$NoUnused$Dependencies$findPackageNameInElmJson$fn(packageName, elmJson) {
		return A2(
			$elm$core$Maybe$withDefault,
			{
				c4: {bH: 1, b1: 10000},
				dv: {bH: 1, b1: 1}
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$filterMap,
					function (_v0) {
						var row = _v0.a;
						var line = _v0.b;
						var _v1 = A2($elm$core$String$indexes, '\"' + (packageName + '\"'), line);
						if (!_v1.b) {
							return $elm$core$Maybe$Nothing;
						} else {
							var column = _v1.a;
							return $elm$core$Maybe$Just(
								{
									c4: {
										bH: (column + $elm$core$String$length(packageName)) + 2,
										b1: row + 1
									},
									dv: {bH: column + 2, b1: row + 1}
								});
						}
					},
					A2(
						$elm$core$List$indexedMap,
						$elm$core$Tuple$pair,
						$elm$core$String$lines(elmJson)))));
	});
var $jfmengels$elm_review_unused$List$Extra$find = F2(function $jfmengels$elm_review_unused$List$Extra$find$fn(predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$isPackageWithName = F2(function $jfmengels$elm_review_unused$NoUnused$Dependencies$isPackageWithName$fn(packageName, _v0) {
		var packageName_ = _v0.a;
		return _Utils_eq(
			packageName,
			$elm$project_metadata_utils$Elm$Package$toString(packageName_));
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$packageDependencies = F2(function $jfmengels$elm_review_unused$NoUnused$Dependencies$packageDependencies$fn(dependencyVersionDict, dependencies) {
		return A2(
			$elm$core$List$filterMap,
			function (name) {
				return A2(
					$elm$core$Maybe$map,
					$elm$core$Tuple$pair(name),
					A2(
						$elm$core$Dict$get,
						$elm$project_metadata_utils$Elm$Package$toString(name),
						dependencyVersionDict));
			},
			dependencies);
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$fromApplication = F4(function $jfmengels$elm_review_unused$NoUnused$Dependencies$fromApplication$fn(dependenciesDict, dependencyLocation, packageNameStr, application) {
		var dependencyVersionDict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v4) {
					var name = _v4.a;
					var version = _v4.b;
					return _Utils_Tuple2(
						$elm$project_metadata_utils$Elm$Package$toString(name),
						version);
				},
				$elm$core$List$concat(
					_List_fromArray(
						[application.gI, application.gJ, application.hQ, application.hR]))));
		var getDependenciesAndVersion = function (name) {
			var _v3 = A2(
				$elm$core$Dict$get,
				$elm$project_metadata_utils$Elm$Package$toString(name),
				dependenciesDict);
			if (!_v3.$) {
				var deps = _v3.a;
				return A2($jfmengels$elm_review_unused$NoUnused$Dependencies$packageDependencies, dependencyVersionDict, deps);
			} else {
				return _List_Nil;
			}
		};
		var dependencies = function () {
			if (!dependencyLocation) {
				return application.gI;
			} else {
				return application.hQ;
			}
		}();
		var _v0 = A2(
			$jfmengels$elm_review_unused$List$Extra$find,
			$jfmengels$elm_review_unused$NoUnused$Dependencies$isPackageWithName(packageNameStr),
			dependencies);
		if (!_v0.$) {
			var _v1 = _v0.a;
			var packageName = _v1.a;
			var version = _v1.b;
			return $elm$core$Maybe$Just(
				$jfmengels$elm_review_unused$NoUnused$Dependencies$ApplicationProject(
					{bG: application, dX: getDependenciesAndVersion, cH: packageName, hY: version}));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$fromProject = F4(function $jfmengels$elm_review_unused$NoUnused$Dependencies$fromProject$fn(dependenciesDict, dependencyLocation, packageNameStr, project) {
		if (!project.$) {
			var application = project.a;
			return A4($jfmengels$elm_review_unused$NoUnused$Dependencies$fromApplication, dependenciesDict, dependencyLocation, packageNameStr, application);
		} else {
			var packageInfo = project.a;
			var dependencies = function () {
				if (!dependencyLocation) {
					return packageInfo.gH;
				} else {
					return packageInfo.hP;
				}
			}();
			var _v1 = A2(
				$jfmengels$elm_review_unused$List$Extra$find,
				$jfmengels$elm_review_unused$NoUnused$Dependencies$isPackageWithName(packageNameStr),
				dependencies);
			if (!_v1.$) {
				var _v2 = _v1.a;
				var packageName = _v2.a;
				var constraint = _v2.b;
				return $elm$core$Maybe$Just(
					$jfmengels$elm_review_unused$NoUnused$Dependencies$PackageProject(
						{gz: constraint, cH: packageName, b_: packageInfo}));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$removeProjectDependency = function (projectAndDependencyIdentifier) {
	if (!projectAndDependencyIdentifier.$) {
		var project = projectAndDependencyIdentifier.a;
		var application = project.bG;
		var depsDirect = A2(
			$elm$core$List$filter,
			function (pkg) {
				return !A2(
					$jfmengels$elm_review_unused$NoUnused$Dependencies$isPackageWithName,
					$elm$project_metadata_utils$Elm$Package$toString(project.cH),
					pkg);
			},
			application.gI);
		var depsIndirect = A2($jfmengels$elm_review_unused$NoUnused$Dependencies$listIndirectDependencies, project.dX, depsDirect);
		return $jfmengels$elm_review_unused$NoUnused$Dependencies$ApplicationProject(
			_Utils_update(
				project,
				{
					bG: _Utils_update(
						application,
						{
							gI: depsDirect,
							gJ: depsIndirect,
							hR: A2(
								$elm$core$List$filter,
								function (dep) {
									return !(A2($elm$core$List$member, dep, depsDirect) || A2($elm$core$List$member, dep, depsIndirect));
								},
								A2($jfmengels$elm_review_unused$NoUnused$Dependencies$listIndirectDependencies, project.dX, application.hQ))
						})
				}));
	} else {
		var project = projectAndDependencyIdentifier.a;
		var _package = project.b_;
		return $jfmengels$elm_review_unused$NoUnused$Dependencies$PackageProject(
			_Utils_update(
				project,
				{
					b_: _Utils_update(
						_package,
						{
							gH: A2(
								$elm$core$List$filter,
								function (pkg) {
									return !A2(
										$jfmengels$elm_review_unused$NoUnused$Dependencies$isPackageWithName,
										$elm$project_metadata_utils$Elm$Package$toString(project.cH),
										pkg);
								},
								_package.gH)
						})
				}));
	}
};
var $elm$project_metadata_utils$Elm$Project$Application = function (a) {
	return {$: 0, a: a};
};
var $elm$project_metadata_utils$Elm$Project$Package = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$toProject = function (projectAndDependencyIdentifier) {
	if (!projectAndDependencyIdentifier.$) {
		var application = projectAndDependencyIdentifier.a.bG;
		return $elm$project_metadata_utils$Elm$Project$Application(application);
	} else {
		var _package = projectAndDependencyIdentifier.a.b_;
		return $elm$project_metadata_utils$Elm$Project$Package(_package);
	}
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$moveDependencyToTestError = F3(function $jfmengels$elm_review_unused$NoUnused$Dependencies$moveDependencyToTestError$fn(elmJsonKey, dependencies, packageName) {
		return A3(
			$jfmengels$elm_review$Review$Rule$errorForElmJsonWithFix,
			elmJsonKey,
			function (elmJson) {
				return {
					eq: _List_fromArray(
						['This package is not used in the source code, but it is used in tests, and should therefore be moved to the test dependencies. To do so, I recommend running the following commands:', '    elm-json uninstall ' + (packageName + ('\n' + ('    elm-json install --test ' + packageName)))]),
					bx: '`' + (packageName + '` should be moved to test-dependencies'),
					f4: A2($jfmengels$elm_review_unused$NoUnused$Dependencies$findPackageNameInElmJson, packageName, elmJson)
				};
			},
			A2(
				$elm$core$Basics$composeR,
				A3($jfmengels$elm_review_unused$NoUnused$Dependencies$fromProject, dependencies, 0, packageName),
				$elm$core$Maybe$map(
					A2(
						$elm$core$Basics$composeR,
						$jfmengels$elm_review_unused$NoUnused$Dependencies$removeProjectDependency,
						A2($elm$core$Basics$composeR, $jfmengels$elm_review_unused$NoUnused$Dependencies$addTestDependency, $jfmengels$elm_review_unused$NoUnused$Dependencies$toProject)))));
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$packagesNotToReport = $elm$core$Set$fromList(
	_List_fromArray(
		['elm/core', 'lamdera/core', 'lamdera/codecs']));
var $jfmengels$elm_review_unused$NoUnused$Dependencies$unusedProjectDependencyError = F3(function $jfmengels$elm_review_unused$NoUnused$Dependencies$unusedProjectDependencyError$fn(elmJsonKey, dependencies, packageName) {
		return A3(
			$jfmengels$elm_review$Review$Rule$errorForElmJsonWithFix,
			elmJsonKey,
			function (elmJson) {
				return {
					eq: _List_fromArray(
						['To remove it, I recommend running the following command:', '    elm-json uninstall ' + packageName]),
					bx: 'Unused dependency `' + (packageName + '`'),
					f4: A2($jfmengels$elm_review_unused$NoUnused$Dependencies$findPackageNameInElmJson, packageName, elmJson)
				};
			},
			A2(
				$elm$core$Basics$composeR,
				A3($jfmengels$elm_review_unused$NoUnused$Dependencies$fromProject, dependencies, 0, packageName),
				$elm$core$Maybe$map(
					A2($elm$core$Basics$composeR, $jfmengels$elm_review_unused$NoUnused$Dependencies$removeProjectDependency, $jfmengels$elm_review_unused$NoUnused$Dependencies$toProject))));
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$InTestDeps = 1;
var $jfmengels$elm_review_unused$NoUnused$Dependencies$removeTestDependency = function (projectAndDependencyIdentifier) {
	if (!projectAndDependencyIdentifier.$) {
		var project = projectAndDependencyIdentifier.a;
		var application = project.bG;
		var testDepsDirect = A2(
			$elm$core$List$filter,
			function (pkg) {
				return !A2(
					$jfmengels$elm_review_unused$NoUnused$Dependencies$isPackageWithName,
					$elm$project_metadata_utils$Elm$Package$toString(project.cH),
					pkg);
			},
			application.hQ);
		return $jfmengels$elm_review_unused$NoUnused$Dependencies$ApplicationProject(
			_Utils_update(
				project,
				{
					bG: _Utils_update(
						application,
						{
							hQ: testDepsDirect,
							hR: A2(
								$elm$core$List$filter,
								function (dep) {
									return !(A2($elm$core$List$member, dep, application.gI) || A2($elm$core$List$member, dep, application.gJ));
								},
								A2($jfmengels$elm_review_unused$NoUnused$Dependencies$listIndirectDependencies, project.dX, testDepsDirect))
						})
				}));
	} else {
		var project = projectAndDependencyIdentifier.a;
		var _package = project.b_;
		return $jfmengels$elm_review_unused$NoUnused$Dependencies$PackageProject(
			_Utils_update(
				project,
				{
					b_: _Utils_update(
						_package,
						{
							hP: A2(
								$elm$core$List$filter,
								function (pkg) {
									return !A2(
										$jfmengels$elm_review_unused$NoUnused$Dependencies$isPackageWithName,
										$elm$project_metadata_utils$Elm$Package$toString(project.cH),
										pkg);
								},
								_package.hP)
						})
				}));
	}
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$unusedTestDependencyError = F3(function $jfmengels$elm_review_unused$NoUnused$Dependencies$unusedTestDependencyError$fn(elmJsonKey, dependencies, packageName) {
		return A3(
			$jfmengels$elm_review$Review$Rule$errorForElmJsonWithFix,
			elmJsonKey,
			function (elmJson) {
				return {
					eq: _List_fromArray(
						['To remove it, I recommend running the following command:', '    elm-json uninstall ' + packageName]),
					bx: 'Unused test dependency `' + (packageName + '`'),
					f4: A2($jfmengels$elm_review_unused$NoUnused$Dependencies$findPackageNameInElmJson, packageName, elmJson)
				};
			},
			function (project) {
				var _v0 = A4($jfmengels$elm_review_unused$NoUnused$Dependencies$fromProject, dependencies, 1, packageName, project);
				if (!_v0.$) {
					var projectAndDependencyIdentifier = _v0.a;
					return $elm$core$Maybe$Just(
						$jfmengels$elm_review_unused$NoUnused$Dependencies$toProject(
							$jfmengels$elm_review_unused$NoUnused$Dependencies$removeTestDependency(projectAndDependencyIdentifier)));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$finalEvaluationForProject = function (projectContext) {
	var _v0 = projectContext.im;
	if (!_v0.$) {
		var elmJsonKey = _v0.a;
		var testDepsNotUsed = $elm$core$Set$toList(
			A2(
				$elm$core$Set$diff,
				projectContext.bL,
				A2($elm$core$Set$union, projectContext.b8, projectContext.aE)));
		var depsNotUsedInSrc = A2($elm$core$Set$diff, projectContext.bK, projectContext.aE);
		var depsNotUsedInSrcButUsedInTests = A2($elm$core$Set$intersect, depsNotUsedInSrc, projectContext.b8);
		var depsNotUsedInSrcErrors = $elm$core$Set$toList(
			A2(
				$elm$core$Set$diff,
				depsNotUsedInSrc,
				A2($elm$core$Set$union, $jfmengels$elm_review_unused$NoUnused$Dependencies$packagesNotToReport, depsNotUsedInSrcButUsedInTests)));
		return _Utils_ap(
			A2(
				$elm$core$List$map,
				A2($jfmengels$elm_review_unused$NoUnused$Dependencies$unusedProjectDependencyError, elmJsonKey, projectContext.gF),
				depsNotUsedInSrcErrors),
			_Utils_ap(
				A2(
					$elm$core$List$map,
					A2($jfmengels$elm_review_unused$NoUnused$Dependencies$unusedTestDependencyError, elmJsonKey, projectContext.gF),
					testDepsNotUsed),
				A2(
					$elm$core$List$map,
					A2($jfmengels$elm_review_unused$NoUnused$Dependencies$moveDependencyToTestError, elmJsonKey, projectContext.gF),
					$elm$core$Set$toList(depsNotUsedInSrcButUsedInTests))));
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$foldProjectContexts = F2(function $jfmengels$elm_review_unused$NoUnused$Dependencies$foldProjectContexts$fn(newContext, previousContext) {
		return {
			gF: previousContext.gF,
			bK: previousContext.bK,
			bL: previousContext.bL,
			im: previousContext.im,
			bc: previousContext.bc,
			aE: A2($elm$core$Set$union, newContext.aE, previousContext.aE),
			b8: A2($elm$core$Set$union, newContext.b8, previousContext.b8)
		};
	});
var $jfmengels$elm_review$Review$Rule$withIsInSourceDirectories = function (_v0) {
	var fn = _v0.a;
	var requestedData = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(fn, data, isFileIgnored, data.g8);
			}),
		requestedData);
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$fromModuleToProject = $jfmengels$elm_review$Review$Rule$withIsInSourceDirectories(
	$jfmengels$elm_review$Review$Rule$initContextCreator(
		F2(
			function (isInSourceDirectories, _v0) {
				var usedDependencies = _v0.aE;
				return {
					gF: $elm$core$Dict$empty,
					bK: $elm$core$Set$empty,
					bL: $elm$core$Set$empty,
					im: $elm$core$Maybe$Nothing,
					bc: $elm$core$Dict$empty,
					aE: isInSourceDirectories ? usedDependencies : $elm$core$Set$empty,
					b8: isInSourceDirectories ? $elm$core$Set$empty : usedDependencies
				};
			})));
var $jfmengels$elm_review_unused$NoUnused$Dependencies$fromProjectToModule = $jfmengels$elm_review$Review$Rule$initContextCreator(
	function (projectContext) {
		return {bc: projectContext.bc, aE: $elm$core$Set$empty};
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$initialProjectContext = {gF: $elm$core$Dict$empty, bK: $elm$core$Set$empty, bL: $elm$core$Set$empty, im: $elm$core$Maybe$Nothing, bc: $elm$core$Dict$empty, aE: $elm$core$Set$empty, b8: $elm$core$Set$empty};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$moduleNameForImport = function (node) {
	return A2(
		$elm$core$String$join,
		'.',
		$stil4m$elm_syntax$Elm$Syntax$Node$value(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(node).eY));
};
var $jfmengels$elm_review_unused$NoUnused$Dependencies$importVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Dependencies$importVisitor$fn(node, context) {
		return _Utils_Tuple2(
			_List_Nil,
			function () {
				var _v0 = A2(
					$elm$core$Dict$get,
					$jfmengels$elm_review_unused$NoUnused$Dependencies$moduleNameForImport(node),
					context.bc);
				if (!_v0.$) {
					var dependency = _v0.a;
					return _Utils_update(
						context,
						{
							aE: A2($elm$core$Set$insert, dependency, context.aE)
						});
				} else {
					return context;
				}
			}());
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$moduleVisitor = function (schema) {
	return A2($jfmengels$elm_review$Review$Rule$withImportVisitor, $jfmengels$elm_review_unused$NoUnused$Dependencies$importVisitor, schema);
};
var $jfmengels$elm_review$Review$Rule$withDependenciesProjectVisitor = F2(function $jfmengels$elm_review$Review$Rule$withDependenciesProjectVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				V: $elm$core$Maybe$Just(
					A2(
						$jfmengels$elm_review$Review$Rule$combineVisitors,
						$jfmengels$elm_review$Review$Rule$removeErrorPhantomTypeFromVisitor(visitor),
						schema.V))
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Dependencies$rule = $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
	$jfmengels$elm_review$Review$Rule$providesFixesForProjectRule(
		A2(
			$jfmengels$elm_review$Review$Rule$withFinalProjectEvaluation,
			$jfmengels$elm_review_unused$NoUnused$Dependencies$finalEvaluationForProject,
			A2(
				$jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator,
				{cl: $jfmengels$elm_review_unused$NoUnused$Dependencies$foldProjectContexts, cn: $jfmengels$elm_review_unused$NoUnused$Dependencies$fromModuleToProject, gY: $jfmengels$elm_review_unused$NoUnused$Dependencies$fromProjectToModule},
				A2(
					$jfmengels$elm_review$Review$Rule$withModuleVisitor,
					$jfmengels$elm_review_unused$NoUnused$Dependencies$moduleVisitor,
					A2(
						$jfmengels$elm_review$Review$Rule$withDependenciesProjectVisitor,
						$jfmengels$elm_review_unused$NoUnused$Dependencies$dependenciesVisitor,
						A2(
							$jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor,
							$jfmengels$elm_review_unused$NoUnused$Dependencies$elmJsonVisitor,
							A2($jfmengels$elm_review$Review$Rule$newProjectRuleSchema, 'NoUnused.Dependencies', $jfmengels$elm_review_unused$NoUnused$Dependencies$initialProjectContext))))))));
var $jfmengels$elm_review_unused$NoUnused$Exports$Configuration = $elm$core$Basics$identity;
var $jfmengels$elm_review_unused$NoUnused$Exports$defaults = {
	dJ: $elm$core$Maybe$Nothing,
	et: $elm$core$Maybe$Nothing,
	eu: _List_Nil,
	c6: _List_Nil,
	cz: $elm$core$Basics$always(true)
};
var $jfmengels$elm_review_unused$NoUnused$Exports$ElmApplication = 0;
var $jfmengels$elm_review_unused$NoUnused$Exports$IsApplication = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Exports$IsPackage = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Exports$LamderaApplication = 1;
var $jfmengels$elm_review_unused$NoUnused$LamderaSupport$isLamderaApplication = function (depsDirect) {
	return A2(
		$elm$core$List$any,
		function (_v0) {
			var name = _v0.a;
			return $elm$project_metadata_utils$Elm$Package$toString(name) === 'lamdera/core';
		},
		depsDirect);
};
var $jfmengels$elm_review_unused$NoUnused$Exports$elmJsonVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$elmJsonVisitor$fn(maybeProject, projectContext) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.o;
			},
			maybeProject);
		if (!_v0.$) {
			if (_v0.a.$ === 1) {
				var exposed = _v0.a.a.gQ;
				var exposedModuleNames = function () {
					if (!exposed.$) {
						var names = exposed.a;
						return names;
					} else {
						var fakeDict = exposed.a;
						return A2($elm$core$List$concatMap, $elm$core$Tuple$second, fakeDict);
					}
				}();
				return _Utils_update(
					projectContext,
					{
						as: $jfmengels$elm_review_unused$NoUnused$Exports$IsPackage(
							A3(
								$elm$core$List$foldr,
								F2(
									function (moduleName, acc) {
										return A2(
											$elm$core$Set$insert,
											$elm$project_metadata_utils$Elm$Module$toString(moduleName),
											acc);
									}),
								$elm$core$Set$empty,
								exposedModuleNames))
					});
			} else {
				var depsDirect = _v0.a.a.gI;
				var elmApplicationType = $jfmengels$elm_review_unused$NoUnused$LamderaSupport$isLamderaApplication(depsDirect) ? 1 : 0;
				return _Utils_update(
					projectContext,
					{
						as: $jfmengels$elm_review_unused$NoUnused$Exports$IsApplication(elmApplicationType)
					});
			}
		} else {
			return _Utils_update(
				projectContext,
				{
					as: $jfmengels$elm_review_unused$NoUnused$Exports$IsApplication(0)
				});
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$isApplicationException = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$isApplicationException$fn(projectContext, name) {
		var _v0 = projectContext.as;
		if (_v0.$ === 1) {
			return false;
		} else {
			if (!_v0.a) {
				var _v1 = _v0.a;
				return name === 'main';
			} else {
				var _v2 = _v0.a;
				return (name === 'main') || (name === 'app');
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$isUsedOrException = F4(function $jfmengels$elm_review_unused$NoUnused$Exports$isUsedOrException$fn(projectContext, used, moduleName, name) {
		return A2(
			$elm$core$Set$member,
			_Utils_Tuple2(moduleName, name),
			used) || (A2($jfmengels$elm_review_unused$NoUnused$Exports$isApplicationException, projectContext, name) || (moduleName === 'ReviewConfig'));
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$what = function (elementType) {
	switch (elementType.$) {
		case 0:
			return 'Exposed function or value';
		case 1:
			return 'Exposed type or type alias';
		default:
			return 'Exposed type';
	}
};
var $jfmengels$elm_review_unused$NoUnused$Exports$errorsForModule = F6(function $jfmengels$elm_review_unused$NoUnused$Exports$errorsForModule$fn(exceptionExplanation, projectContext, _v0, moduleName, _v1, acc) {
		var used = _v0.bm;
		var usedInIgnoredModules = _v0.bn;
		var moduleKey = _v1.eX;
		var exposed = _v1.gQ;
		var isProductionFile = _v1.cz;
		var isProductionFileNotToReport = _v1.ha;
		var ignoredElementsNotToReport = _v1.a6;
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (name, element, subAcc) {
					return A4($jfmengels$elm_review_unused$NoUnused$Exports$isUsedOrException, projectContext, used, moduleName, name) ? subAcc : (A2(
						$elm$core$Set$member,
						_Utils_Tuple2(moduleName, name),
						usedInIgnoredModules) ? (((!isProductionFile) || (isProductionFileNotToReport || A2($elm$core$Set$member, name, ignoredElementsNotToReport))) ? subAcc : A2(
						$elm$core$List$cons,
						A3(
							$jfmengels$elm_review$Review$Rule$errorForModule,
							moduleKey,
							{
								eq: A2(
									$elm$core$List$cons,
									'This exposed element is only used in files you have marked as non-production code (e.g. the tests folder), and should therefore be removed along with the places it\'s used in. This will help reduce the amount of code you will need to maintain.',
									function () {
										if (exceptionExplanation.$ === 1) {
											return _List_fromArray(
												['It is possible that this element is meant to enable work in your ignored folder (test helpers for instance), in which case you should keep it. To avoid this problem being reported again, please read the documentation on how to configure the rule.']);
										} else {
											var explanation = exceptionExplanation.a;
											return _List_fromArray(
												['It is possible that this element is meant to enable work in your ignored folder (test helpers for instance), in which case you should keep it. To avoid this problem being reported again, you can:', explanation]);
										}
									}()),
								bx: $jfmengels$elm_review_unused$NoUnused$Exports$what(element.bN) + (' `' + (name + '` is never used in production code.'))
							},
							element.f4),
						subAcc)) : A2(
						$elm$core$List$cons,
						A4(
							$jfmengels$elm_review$Review$Rule$errorForModuleWithFix,
							moduleKey,
							{
								eq: _List_fromArray(
									['This exposed element is never used. You may want to remove it to keep your project clean, and maybe detect some unused code in your project.']),
								bx: $jfmengels$elm_review_unused$NoUnused$Exports$what(element.bN) + (' `' + (name + '` is never used outside this module.'))
							},
							element.f4,
							A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, element.ec)),
						subAcc));
				}),
			acc,
			exposed);
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$filterExposedPackage = function (projectContext) {
	var _v0 = projectContext.as;
	if (!_v0.$) {
		return $elm$core$Basics$always(true);
	} else {
		var exposedModuleNames = _v0.a;
		return function (moduleName) {
			return !A2($elm$core$Set$member, moduleName, exposedModuleNames);
		};
	}
};
var $jfmengels$elm_review_unused$NoUnused$Exports$unusedModuleError = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$unusedModuleError$fn(moduleName, _v0) {
		var moduleKey = _v0.eX;
		var moduleNameLocation = _v0.hj;
		return A3(
			$jfmengels$elm_review$Review$Rule$errorForModule,
			moduleKey,
			{
				eq: _List_fromArray(
					['This module is never used. You may want to remove it to keep your project clean, and maybe detect some unused code in your project.']),
				bx: 'Module `' + (moduleName + '` is never used.')
			},
			moduleNameLocation);
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$finalEvaluationForProject = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$finalEvaluationForProject$fn(exceptionExplanation, projectContext) {
		var usedInIgnoredModules = A3(
			$elm$core$Set$foldl,
			F2(
				function (key, acc) {
					var moduleName = key.a;
					var _v1 = A2($elm$core$Dict$get, key, projectContext.ig);
					if (!_v1.$) {
						var typeName = _v1.a;
						return A2(
							$elm$core$Set$insert,
							_Utils_Tuple2(moduleName, typeName),
							acc);
					} else {
						return acc;
					}
				}),
			projectContext.bn,
			projectContext.bn);
		var used = A3(
			$elm$core$Set$foldl,
			F2(
				function (key, acc) {
					var moduleName = key.a;
					var _v0 = A2($elm$core$Dict$get, key, projectContext.ig);
					if (!_v0.$) {
						var typeName = _v0.a;
						return A2(
							$elm$core$Set$insert,
							_Utils_Tuple2(moduleName, typeName),
							acc);
					} else {
						return acc;
					}
				}),
			projectContext.bm,
			projectContext.bm);
		var filterExposedPackage_ = $jfmengels$elm_review_unused$NoUnused$Exports$filterExposedPackage(projectContext);
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (moduleName, module_, acc) {
					return (!filterExposedPackage_(moduleName)) ? acc : (A2($elm$core$Set$member, moduleName, projectContext.cS) ? A6(
						$jfmengels$elm_review_unused$NoUnused$Exports$errorsForModule,
						exceptionExplanation,
						projectContext,
						{bm: used, bn: usedInIgnoredModules},
						moduleName,
						module_,
						acc) : A2(
						$elm$core$List$cons,
						A2($jfmengels$elm_review_unused$NoUnused$Exports$unusedModuleError, moduleName, module_),
						acc));
				}),
			_List_Nil,
			projectContext.aU);
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$foldProjectContexts = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$foldProjectContexts$fn(newContext, previousContext) {
		return {
			ig: A2($elm$core$Dict$union, newContext.ig, previousContext.ig),
			aU: A2($elm$core$Dict$union, newContext.aU, previousContext.aU),
			as: previousContext.as,
			bm: A2($elm$core$Set$union, newContext.bm, previousContext.bm),
			bn: A2($elm$core$Set$union, newContext.bn, previousContext.bn),
			cS: A2($elm$core$Set$union, newContext.cS, previousContext.cS)
		};
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$any = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$any$fn(list, a) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var head = list.a;
				var tail = list.b;
				if (head(a)) {
					return true;
				} else {
					var $temp$list = tail,
						$temp$a = a;
					list = $temp$list;
					a = $temp$a;
					continue any;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$withFilePath = function (_v0) {
	var fn = _v0.a;
	var requestedData = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(fn, data, isFileIgnored, data.iu);
			}),
		requestedData);
};
var $jfmengels$elm_review$Review$Rule$withModuleNameNode = function (_v0) {
	var fn = _v0.a;
	var requestedData = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(
					fn,
					data,
					isFileIgnored,
					$jfmengels$elm_review$Review$Rule$moduleNameNode(data.h2.iJ));
			}),
		requestedData);
};
var $jfmengels$elm_review_unused$NoUnused$Exports$fromModuleToProject = function (config) {
	return $jfmengels$elm_review$Review$Rule$withIsInSourceDirectories(
		$jfmengels$elm_review$Review$Rule$withFilePath(
			$jfmengels$elm_review$Review$Rule$withModuleNameNode(
				$jfmengels$elm_review$Review$Rule$withModuleKey(
					$jfmengels$elm_review$Review$Rule$initContextCreator(
						F5(
							function (moduleKey, _v0, filePath, isInSourceDirectories, moduleContext) {
								var moduleNameRange = _v0.a;
								var moduleName = _v0.b;
								var moduleNameStr = A2($elm$core$String$join, '.', moduleName);
								var used = A3(
									$elm$core$Set$foldl,
									F2(
										function (element, acc) {
											return A2(
												$elm$core$Set$insert,
												_Utils_Tuple2(moduleNameStr, element),
												acc);
										}),
									moduleContext.bm,
									moduleContext.c2);
								var isProductionFile = config.cz(
									{iu: filePath, g8: isInSourceDirectories, eY: moduleName});
								return {
									ig: A3(
										$elm$core$Dict$foldl,
										F3(
											function (name, element, acc) {
												var _v1 = element.bN;
												if (_v1.$ === 2) {
													var constructorNames = _v1.a;
													return A3(
														$elm$core$List$foldl,
														F2(
															function (constructorName, listAcc) {
																return A3(
																	$elm$core$Dict$insert,
																	_Utils_Tuple2(moduleNameStr, constructorName),
																	name,
																	listAcc);
															}),
														acc,
														constructorNames);
												} else {
													return acc;
												}
											}),
										$elm$core$Dict$empty,
										moduleContext.gQ),
									aU: A2(
										$elm$core$Dict$singleton,
										moduleNameStr,
										{
											gQ: moduleContext.gQ,
											a6: moduleContext.a6,
											cz: isProductionFile,
											ha: A2(
												$jfmengels$elm_review_unused$NoUnused$Exports$any,
												config.eu,
												{iu: filePath, eY: moduleName}),
											eX: moduleKey,
											hj: moduleNameRange
										}),
									as: $jfmengels$elm_review_unused$NoUnused$Exports$IsApplication(0),
									bm: isProductionFile ? used : $elm$core$Set$empty,
									bn: isProductionFile ? $elm$core$Set$empty : used,
									cS: (A2($elm$core$Set$member, 'Test', moduleContext.cu) || moduleContext.dC) ? A2($elm$core$Set$insert, moduleNameStr, moduleContext.cu) : moduleContext.cu
								};
							}))))));
};
var $jfmengels$elm_review_unused$NoUnused$Exports$collectDocsReferences = function (maybeModuleDocumentation) {
	if (!maybeModuleDocumentation.$) {
		var _v1 = maybeModuleDocumentation.a;
		var range = _v1.a;
		var moduleDocumentation = _v1.b;
		var lines = A2(
			$elm$core$List$drop,
			1,
			$elm$core$String$lines(moduleDocumentation));
		return A4(
			$jfmengels$elm_review_unused$List$Extra$indexedFilterMap,
			F2(
				function (lineNumber, line) {
					return A2($elm$core$String$startsWith, '@docs ', line) ? $elm$core$Maybe$Just(
						_Utils_Tuple2(lineNumber, line)) : $elm$core$Maybe$Nothing;
				}),
			range.dv.b1 + 1,
			lines,
			_List_Nil);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Exports$ExposedType = function (a) {
	return {$: 2, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Exports$Function = {$: 0};
var $jfmengels$elm_review_unused$NoUnused$Exports$TypeOrTypeAlias = {$: 1};
var $jfmengels$elm_review_unused$NoUnused$Exports$findMap = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$findMap$fn(mapper, list) {
		findMap:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				var _v1 = mapper(first);
				if (!_v1.$) {
					var value = _v1.a;
					return $elm$core$Maybe$Just(value);
				} else {
					var $temp$mapper = mapper,
						$temp$list = rest;
					mapper = $temp$mapper;
					list = $temp$list;
					continue findMap;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$findConstructorsForExposedCustomType = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$findConstructorsForExposedCustomType$fn(typeName, declarations) {
		return A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$jfmengels$elm_review_unused$NoUnused$Exports$findMap,
				function (node) {
					var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
					if (_v0.$ === 2) {
						var type_ = _v0.a;
						return (!_Utils_eq(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(type_.cH),
							typeName)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
							A2(
								$elm$core$List$map,
								function (c) {
									return $stil4m$elm_syntax$Elm$Syntax$Node$value(
										$stil4m$elm_syntax$Elm$Syntax$Node$value(c).cH);
								},
								type_.ig));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				},
				declarations));
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$findCommentAtEnd = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$findCommentAtEnd$fn(name, _v0) {
		var row = _v0.a;
		var comment = _v0.b;
		return _Utils_eq(comment, '@docs ' + name) ? $elm$core$Maybe$Just(
			{
				c4: {bH: 1, b1: row + 1},
				dv: {bH: 1, b1: row}
			}) : A2(
			$elm$core$Maybe$map,
			function (index) {
				return {
					c4: {
						bH: (index + $elm$core$String$length(name)) + 3,
						b1: row
					},
					dv: {bH: index + 1, b1: row}
				};
			},
			$elm$core$List$head(
				A2($elm$core$String$indexes, ', ' + name, comment)));
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$findCommentInMiddle = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$findCommentInMiddle$fn(name, _v0) {
		var row = _v0.a;
		var comment = _v0.b;
		return A2(
			$elm$core$Maybe$map,
			function (index) {
				return {
					c4: {
						bH: (index + $elm$core$String$length(name)) + 4,
						b1: row
					},
					dv: {bH: index + 2, b1: row}
				};
			},
			$elm$core$List$head(
				A2($elm$core$String$indexes, ' ' + (name + ', '), comment)));
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$findDocsRangeToRemove = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$findDocsRangeToRemove$fn(name, fullComment) {
		var _v0 = A2($jfmengels$elm_review_unused$NoUnused$Exports$findCommentInMiddle, name, fullComment);
		if (!_v0.$) {
			var range = _v0.a;
			return $elm$core$Maybe$Just(range);
		} else {
			return A2($jfmengels$elm_review_unused$NoUnused$Exports$findCommentAtEnd, name, fullComment);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$getRangesToRemove = F7(function $jfmengels$elm_review_unused$NoUnused$Exports$getRangesToRemove$fn(comments, canRemoveExposed, name, index, maybePreviousRange, range, nextRange) {
		if (canRemoveExposed) {
			var exposeRemoval = function () {
				if (!index) {
					return _Utils_update(
						range,
						{c4: nextRange.dv});
				} else {
					if (maybePreviousRange.$ === 1) {
						return range;
					} else {
						var previousRange = maybePreviousRange.a;
						return _Utils_update(
							range,
							{dv: previousRange.c4});
					}
				}
			}();
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$core$Maybe$Just(exposeRemoval),
						A2(
						$jfmengels$elm_review_unused$NoUnused$Exports$findMap,
						$jfmengels$elm_review_unused$NoUnused$Exports$findDocsRangeToRemove(name),
						comments)
					]));
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$untilEndOfVariable = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$untilEndOfVariable$fn(name, range) {
		return _Utils_eq(range.dv.b1, range.c4.b1) ? range : _Utils_update(
			range,
			{
				c4: {
					bH: range.dv.bH + $elm$core$String$length(name),
					b1: range.dv.b1
				}
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$collectExposedElementsHelp = F8(function $jfmengels$elm_review_unused$NoUnused$Exports$collectExposedElementsHelp$fn(docsReferences, declarations, declaredNames, canRemoveExposed, maybePreviousRange, exposingNodes, index, acc) {
		collectExposedElementsHelp:
		while (true) {
			if (!exposingNodes.b) {
				return acc;
			} else {
				var _v1 = exposingNodes.a;
				var range = _v1.a;
				var value = _v1.b;
				var rest = exposingNodes.b;
				var nextRange = function () {
					var _v3 = $elm$core$List$head(rest);
					if (!_v3.$) {
						var nextNode = _v3.a;
						return $stil4m$elm_syntax$Elm$Syntax$Node$range(nextNode);
					} else {
						return $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange;
					}
				}();
				var newAcc = function () {
					switch (value.$) {
						case 1:
							var name = value.a;
							return A2($elm$core$Set$member, name, declaredNames) ? A3(
								$elm$core$Dict$insert,
								name,
								{
									bN: $jfmengels$elm_review_unused$NoUnused$Exports$Function,
									f4: A2($jfmengels$elm_review_unused$NoUnused$Exports$untilEndOfVariable, name, range),
									ec: A7($jfmengels$elm_review_unused$NoUnused$Exports$getRangesToRemove, docsReferences, canRemoveExposed, name, index, maybePreviousRange, range, nextRange)
								},
								acc) : acc;
						case 2:
							var name = value.a;
							return A2($elm$core$Set$member, name, declaredNames) ? A3(
								$elm$core$Dict$insert,
								name,
								{
									bN: $jfmengels$elm_review_unused$NoUnused$Exports$TypeOrTypeAlias,
									f4: A2($jfmengels$elm_review_unused$NoUnused$Exports$untilEndOfVariable, name, range),
									ec: A7($jfmengels$elm_review_unused$NoUnused$Exports$getRangesToRemove, docsReferences, canRemoveExposed, name, index, maybePreviousRange, range, nextRange)
								},
								acc) : acc;
						case 3:
							var name = value.a.cH;
							return A2($elm$core$Set$member, name, declaredNames) ? A3(
								$elm$core$Dict$insert,
								name,
								{
									bN: $jfmengels$elm_review_unused$NoUnused$Exports$ExposedType(
										A2($jfmengels$elm_review_unused$NoUnused$Exports$findConstructorsForExposedCustomType, name, declarations)),
									f4: A2($jfmengels$elm_review_unused$NoUnused$Exports$untilEndOfVariable, name, range),
									ec: _List_Nil
								},
								acc) : acc;
						default:
							return acc;
					}
				}();
				var $temp$docsReferences = docsReferences,
					$temp$declarations = declarations,
					$temp$declaredNames = declaredNames,
					$temp$canRemoveExposed = canRemoveExposed,
					$temp$maybePreviousRange = $elm$core$Maybe$Just(range),
					$temp$exposingNodes = rest,
					$temp$index = index + 1,
					$temp$acc = newAcc;
				docsReferences = $temp$docsReferences;
				declarations = $temp$declarations;
				declaredNames = $temp$declaredNames;
				canRemoveExposed = $temp$canRemoveExposed;
				maybePreviousRange = $temp$maybePreviousRange;
				exposingNodes = $temp$exposingNodes;
				index = $temp$index;
				acc = $temp$acc;
				continue collectExposedElementsHelp;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$declarationName = function (declaration) {
	switch (declaration.$) {
		case 0:
			var _function = declaration.a;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).cH));
		case 2:
			var type_ = declaration.a;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(type_.cH));
		case 1:
			var alias_ = declaration.a;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(alias_.cH));
		case 3:
			var port_ = declaration.a;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(port_.cH));
		case 4:
			var operator = declaration.a.iV;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(operator));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Exports$collectExposedElements = F3(function $jfmengels$elm_review_unused$NoUnused$Exports$collectExposedElements$fn(moduleDocumentation, exposingNodes, declarations) {
		var docsReferences = $jfmengels$elm_review_unused$NoUnused$Exports$collectDocsReferences(moduleDocumentation);
		var declaredNames = A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var declaration = _v0.b;
					var _v1 = $jfmengels$elm_review_unused$NoUnused$Exports$declarationName(declaration);
					if (!_v1.$) {
						var name = _v1.a;
						return A2($elm$core$Set$insert, name, acc);
					} else {
						return acc;
					}
				}),
			$elm$core$Set$empty,
			declarations);
		return A8(
			$jfmengels$elm_review_unused$NoUnused$Exports$collectExposedElementsHelp,
			docsReferences,
			declarations,
			declaredNames,
			$elm$core$List$length(exposingNodes) !== 1,
			$elm$core$Maybe$Nothing,
			exposingNodes,
			0,
			$elm$core$Dict$empty);
	});
var $jfmengels$elm_review$Review$Rule$withFullAst = function (_v0) {
	var fn = _v0.a;
	var requested = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(fn, data, isFileIgnored, data.h2);
			}),
		requested);
};
var $jfmengels$elm_review$Review$Rule$withModuleDocumentation = function (_v0) {
	var fn = _v0.a;
	var requested = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(fn, data, isFileIgnored, data.d5);
			}),
		requested);
};
var $jfmengels$elm_review_unused$NoUnused$Exports$fromProjectToModule = $jfmengels$elm_review$Review$Rule$withModuleDocumentation(
	$jfmengels$elm_review$Review$Rule$withFullAst(
		$jfmengels$elm_review$Review$Rule$withModuleNameLookupTable(
			$jfmengels$elm_review$Review$Rule$initContextCreator(
				F4(
					function (lookupTable, ast, moduleDocumentation, projectContext) {
						var exposed = function () {
							var _v0 = $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(ast.iJ));
							if (!_v0.$) {
								return $elm$core$Dict$empty;
							} else {
								var explicitlyExposed = _v0.a;
								return A3($jfmengels$elm_review_unused$NoUnused$Exports$collectExposedElements, moduleDocumentation, explicitlyExposed, ast.gD);
							}
						}();
						return {dC: false, c2: $elm$core$Set$empty, gQ: exposed, a6: $elm$core$Set$empty, cu: $elm$core$Set$empty, s: lookupTable, as: projectContext.as, bm: $elm$core$Set$empty};
					})))));
var $jfmengels$elm_review_unused$NoUnused$Exports$initialProjectContext = {
	ig: $elm$core$Dict$empty,
	aU: $elm$core$Dict$empty,
	as: $jfmengels$elm_review_unused$NoUnused$Exports$IsApplication(0),
	bm: $elm$core$Set$empty,
	bn: $elm$core$Set$empty,
	cS: $elm$core$Set$singleton('ReviewConfig')
};
var $jfmengels$elm_review_unused$NoUnused$Exports$isMainFunction = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$isMainFunction$fn(elmApplicationType, name) {
		if (!elmApplicationType) {
			return name === 'main';
		} else {
			return (name === 'main') || (name === 'app');
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$doesModuleContainMainFunction = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$doesModuleContainMainFunction$fn(projectType, declaration) {
		if (projectType.$ === 1) {
			return false;
		} else {
			var elmApplicationType = projectType.a;
			var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
			if (!_v1.$) {
				var _function = _v1.a;
				return A2(
					$jfmengels$elm_review_unused$NoUnused$Exports$isMainFunction,
					elmApplicationType,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).cH));
			} else {
				return false;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$getDeclarationName = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 0:
			var declaration = _v0.a.ii;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).cH));
		case 1:
			var name = _v0.a.cH;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(name));
		case 2:
			var name = _v0.a.cH;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(name));
		case 3:
			var name = _v0.a.cH;
			return $elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(name));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$contains = _String_contains;
var $jfmengels$elm_review_unused$NoUnused$Exports$getDeclarationDocumentation = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 0:
			var documentation = _v0.a.fB;
			if (!documentation.$) {
				var doc = documentation.a;
				return $elm$core$Maybe$Just(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(doc));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		case 1:
			var documentation = _v0.a.fB;
			if (!documentation.$) {
				var doc = documentation.a;
				return $elm$core$Maybe$Just(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(doc));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		case 2:
			var documentation = _v0.a.fB;
			if (!documentation.$) {
				var doc = documentation.a;
				return $elm$core$Maybe$Just(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(doc));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		case 3:
			return $elm$core$Maybe$Nothing;
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Exports$isExceptionByAnnotation = F3(function $jfmengels$elm_review_unused$NoUnused$Exports$isExceptionByAnnotation$fn(config, name, node) {
		if ($elm$core$List$isEmpty(config.c6)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = $jfmengels$elm_review_unused$NoUnused$Exports$getDeclarationDocumentation(node);
			if (!_v0.$) {
				var documentation = _v0.a;
				return A2(
					$elm$core$List$any,
					function (exceptionTag) {
						return A2($elm$core$String$contains, exceptionTag, documentation);
					},
					config.c6) ? $elm$core$Maybe$Just(name) : $elm$core$Maybe$Nothing;
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$isException = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$isException$fn(config, node) {
		if (_Utils_eq(config.dJ, $elm$core$Maybe$Nothing) && $elm$core$List$isEmpty(config.c6)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = $jfmengels$elm_review_unused$NoUnused$Exports$getDeclarationName(node);
			if (!_v0.$) {
				var name = _v0.a;
				var _v1 = config.dJ;
				if (!_v1.$) {
					var exceptionByName = _v1.a;
					return exceptionByName(name) ? $elm$core$Maybe$Just(name) : A3($jfmengels$elm_review_unused$NoUnused$Exports$isExceptionByAnnotation, config, name, node);
				} else {
					return A3($jfmengels$elm_review_unused$NoUnused$Exports$isExceptionByAnnotation, config, name, node);
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$maybeSetInsert = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$maybeSetInsert$fn(maybeValue, set) {
		if (!maybeValue.$) {
			var value = maybeValue.a;
			return A2($elm$core$Set$insert, value, set);
		} else {
			return set;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$testFunctionName = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$testFunctionName$fn(moduleContext, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (!_v0.$) {
			var _function = _v0.a;
			var _v1 = A2(
				$elm$core$Maybe$map,
				function (_v2) {
					var value = _v2.b;
					return $stil4m$elm_syntax$Elm$Syntax$Node$value(value.hV);
				},
				_function.i7);
			if ((!_v1.$) && (_v1.a.$ === 1)) {
				var _v3 = _v1.a;
				var typeNode = _v3.a;
				return (($stil4m$elm_syntax$Elm$Syntax$Node$value(typeNode).b === 'Test') && _Utils_eq(
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, moduleContext.s, typeNode),
					$elm$core$Maybe$Just(
						_List_fromArray(
							['Test'])))) ? $elm$core$Maybe$Just(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).cH)) : $elm$core$Maybe$Nothing;
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$collectTypesFromTypeAnnotation = F3(function $jfmengels$elm_review_unused$NoUnused$Exports$collectTypesFromTypeAnnotation$fn(moduleContext, nodes, acc) {
		collectTypesFromTypeAnnotation:
		while (true) {
			if (!nodes.b) {
				return acc;
			} else {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				switch (_v1.$) {
					case 6:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$moduleContext = moduleContext,
							$temp$nodes = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfNodes)),
							$temp$acc = acc;
						moduleContext = $temp$moduleContext;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectTypesFromTypeAnnotation;
					case 1:
						var _v2 = _v1.a;
						var range = _v2.a;
						var _v3 = _v2.b;
						var name = _v3.b;
						var params = _v1.b;
						var _v4 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, moduleContext.s, range);
						if (!_v4.$) {
							var moduleName = _v4.a;
							var $temp$moduleContext = moduleContext,
								$temp$nodes = _Utils_ap(params, restOfNodes),
								$temp$acc = A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									A2($elm$core$String$join, '.', moduleName),
									name),
								acc);
							moduleContext = $temp$moduleContext;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue collectTypesFromTypeAnnotation;
						} else {
							var $temp$moduleContext = moduleContext,
								$temp$nodes = _Utils_ap(params, restOfNodes),
								$temp$acc = acc;
							moduleContext = $temp$moduleContext;
							nodes = $temp$nodes;
							acc = $temp$acc;
							continue collectTypesFromTypeAnnotation;
						}
					case 4:
						var fields = _v1.a;
						var subNodes = A2(
							$elm$core$List$map,
							function (_v5) {
								var _v6 = _v5.b;
								var value = _v6.b;
								return value;
							},
							fields);
						var $temp$moduleContext = moduleContext,
							$temp$nodes = _Utils_ap(subNodes, restOfNodes),
							$temp$acc = acc;
						moduleContext = $temp$moduleContext;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectTypesFromTypeAnnotation;
					case 5:
						var _v7 = _v1.b;
						var fields = _v7.b;
						var subNodes = A2(
							$elm$core$List$map,
							function (_v8) {
								var _v9 = _v8.b;
								var value = _v9.b;
								return value;
							},
							fields);
						var $temp$moduleContext = moduleContext,
							$temp$nodes = _Utils_ap(subNodes, restOfNodes),
							$temp$acc = acc;
						moduleContext = $temp$moduleContext;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectTypesFromTypeAnnotation;
					case 3:
						var list = _v1.a;
						var $temp$moduleContext = moduleContext,
							$temp$nodes = _Utils_ap(list, restOfNodes),
							$temp$acc = acc;
						moduleContext = $temp$moduleContext;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectTypesFromTypeAnnotation;
					default:
						var $temp$moduleContext = moduleContext,
							$temp$nodes = restOfNodes,
							$temp$acc = acc;
						moduleContext = $temp$moduleContext;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue collectTypesFromTypeAnnotation;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$findUsedConstructors = F3(function $jfmengels$elm_review_unused$NoUnused$Exports$findUsedConstructors$fn(lookupTable, patterns, acc) {
		findUsedConstructors:
		while (true) {
			if (!patterns.b) {
				return acc;
			} else {
				var pattern = patterns.a;
				var restOfPatterns = patterns.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(pattern);
				switch (_v1.$) {
					case 12:
						var qualifiedNameRef = _v1.a;
						var newPatterns = _v1.b;
						var newAcc = function () {
							var _v2 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, pattern);
							if (!_v2.$) {
								var moduleName = _v2.a;
								return A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										A2($elm$core$String$join, '.', moduleName),
										qualifiedNameRef.cH),
									acc);
							} else {
								return acc;
							}
						}();
						var $temp$lookupTable = lookupTable,
							$temp$patterns = _Utils_ap(newPatterns, restOfPatterns),
							$temp$acc = newAcc;
						lookupTable = $temp$lookupTable;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findUsedConstructors;
					case 7:
						var newPatterns = _v1.a;
						var $temp$lookupTable = lookupTable,
							$temp$patterns = _Utils_ap(newPatterns, restOfPatterns),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findUsedConstructors;
					case 9:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$lookupTable = lookupTable,
							$temp$patterns = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfPatterns)),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findUsedConstructors;
					case 10:
						var newPatterns = _v1.a;
						var $temp$lookupTable = lookupTable,
							$temp$patterns = _Utils_ap(newPatterns, restOfPatterns),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findUsedConstructors;
					case 13:
						var node = _v1.a;
						var $temp$lookupTable = lookupTable,
							$temp$patterns = A2($elm$core$List$cons, node, restOfPatterns),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findUsedConstructors;
					case 14:
						var node = _v1.a;
						var $temp$lookupTable = lookupTable,
							$temp$patterns = A2($elm$core$List$cons, node, restOfPatterns),
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findUsedConstructors;
					default:
						var $temp$lookupTable = lookupTable,
							$temp$patterns = restOfPatterns,
							$temp$acc = acc;
						lookupTable = $temp$lookupTable;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findUsedConstructors;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$typesUsedInDeclaration = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$typesUsedInDeclaration$fn(moduleContext, declaration) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
		switch (_v0.$) {
			case 0:
				var _function = _v0.a;
				return _Utils_Tuple2(
					function () {
						var _v1 = _function.i7;
						if (!_v1.$) {
							var signature = _v1.a;
							return A3(
								$jfmengels$elm_review_unused$NoUnused$Exports$findUsedConstructors,
								moduleContext.s,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).gs,
								A3(
									$jfmengels$elm_review_unused$NoUnused$Exports$collectTypesFromTypeAnnotation,
									moduleContext,
									_List_fromArray(
										[
											$stil4m$elm_syntax$Elm$Syntax$Node$value(signature).hV
										]),
									_List_Nil));
						} else {
							return A3(
								$jfmengels$elm_review_unused$NoUnused$Exports$findUsedConstructors,
								moduleContext.s,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).gs,
								_List_Nil);
						}
					}(),
					false);
			case 2:
				var type_ = _v0.a;
				var typesUsedInArguments = A3(
					$elm$core$List$foldl,
					F2(
						function (constructor, acc) {
							return A3(
								$jfmengels$elm_review_unused$NoUnused$Exports$collectTypesFromTypeAnnotation,
								moduleContext,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(constructor).gs,
								acc);
						}),
					_List_Nil,
					type_.ig);
				return _Utils_Tuple2(
					typesUsedInArguments,
					function () {
						var _v2 = A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.bN;
							},
							A2(
								$elm$core$Dict$get,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(type_.cH),
								moduleContext.gQ));
						if ((!_v2.$) && (_v2.a.$ === 2)) {
							return false;
						} else {
							return true;
						}
					}());
			case 1:
				var alias_ = _v0.a;
				return _Utils_Tuple2(
					A3(
						$jfmengels$elm_review_unused$NoUnused$Exports$collectTypesFromTypeAnnotation,
						moduleContext,
						_List_fromArray(
							[alias_.hV]),
						_List_Nil),
					false);
			case 3:
				var signature = _v0.a;
				return _Utils_Tuple2(
					A3(
						$jfmengels$elm_review_unused$NoUnused$Exports$collectTypesFromTypeAnnotation,
						moduleContext,
						_List_fromArray(
							[signature.hV]),
						_List_Nil),
					false);
			case 4:
				return _Utils_Tuple2(_List_Nil, false);
			default:
				return _Utils_Tuple2(_List_Nil, false);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$declarationVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Exports$declarationVisitor$fn(config, node, moduleContext) {
		var ignoredElementsNotToReport = function () {
			var _v2 = A2($jfmengels$elm_review_unused$NoUnused$Exports$isException, config, node);
			if (!_v2.$) {
				var name = _v2.a;
				return A2($elm$core$Set$insert, name, moduleContext.a6);
			} else {
				return moduleContext.a6;
			}
		}();
		var _v0 = A2($jfmengels$elm_review_unused$NoUnused$Exports$typesUsedInDeclaration, moduleContext, node);
		var allUsedTypes = _v0.a;
		var comesFromCustomTypeWithHiddenConstructors = _v0.b;
		var used = A3($elm$core$List$foldl, $elm$core$Set$insert, moduleContext.bm, allUsedTypes);
		var elementsNotToReport = A2(
			$jfmengels$elm_review_unused$NoUnused$Exports$maybeSetInsert,
			A2($jfmengels$elm_review_unused$NoUnused$Exports$testFunctionName, moduleContext, node),
			comesFromCustomTypeWithHiddenConstructors ? moduleContext.c2 : A3(
				$elm$core$List$foldl,
				F2(
					function (_v1, acc) {
						var name = _v1.b;
						return A2($elm$core$Set$insert, name, acc);
					}),
				moduleContext.c2,
				allUsedTypes));
		return _Utils_update(
			moduleContext,
			{
				dC: moduleContext.dC || A2($jfmengels$elm_review_unused$NoUnused$Exports$doesModuleContainMainFunction, moduleContext.as, node),
				c2: elementsNotToReport,
				a6: ignoredElementsNotToReport,
				bm: used
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$registerAsUsed = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$registerAsUsed$fn(key, moduleContext) {
		return _Utils_update(
			moduleContext,
			{
				bm: A2($elm$core$Set$insert, key, moduleContext.bm)
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$registerLocalValue = F3(function $jfmengels$elm_review_unused$NoUnused$Exports$registerLocalValue$fn(range, name, moduleContext) {
		var _v0 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, moduleContext.s, range);
		if (!_v0.$) {
			if (!_v0.a.b) {
				return A2($elm$core$Dict$member, name, moduleContext.gQ) ? _Utils_update(
					moduleContext,
					{
						a6: A2($elm$core$Set$insert, name, moduleContext.a6)
					}) : moduleContext;
			} else {
				var moduleName = _v0.a;
				return A2(
					$jfmengels$elm_review_unused$NoUnused$Exports$registerAsUsed,
					_Utils_Tuple2(
						A2($elm$core$String$join, '.', moduleName),
						name),
					moduleContext);
			}
		} else {
			return moduleContext;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$expressionVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$expressionVisitor$fn(node, moduleContext) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 3:
				var name = _v0.b;
				return A3(
					$jfmengels$elm_review_unused$NoUnused$Exports$registerLocalValue,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					name,
					moduleContext);
			case 22:
				var _v1 = _v0.a;
				var range = _v1.a;
				var name = _v1.b;
				return A3($jfmengels$elm_review_unused$NoUnused$Exports$registerLocalValue, range, name, moduleContext);
			case 15:
				var declarations = _v0.a.gD;
				var used = A3(
					$elm$core$List$foldl,
					F2(
						function (declaration, acc) {
							var _v2 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
							if (!_v2.$) {
								var _function = _v2.a;
								var _v3 = _function.i7;
								if (!_v3.$) {
									var signature = _v3.a;
									return A3(
										$jfmengels$elm_review_unused$NoUnused$Exports$findUsedConstructors,
										moduleContext.s,
										$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).gs,
										A3(
											$jfmengels$elm_review_unused$NoUnused$Exports$collectTypesFromTypeAnnotation,
											moduleContext,
											_List_fromArray(
												[
													$stil4m$elm_syntax$Elm$Syntax$Node$value(signature).hV
												]),
											acc));
								} else {
									return A3(
										$jfmengels$elm_review_unused$NoUnused$Exports$findUsedConstructors,
										moduleContext.s,
										$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).gs,
										acc);
								}
							} else {
								var pattern = _v2.a;
								return A3(
									$jfmengels$elm_review_unused$NoUnused$Exports$findUsedConstructors,
									moduleContext.s,
									_List_fromArray(
										[pattern]),
									acc);
							}
						}),
					_List_Nil,
					declarations);
				return _Utils_update(
					moduleContext,
					{
						bm: A3($elm$core$List$foldl, $elm$core$Set$insert, moduleContext.bm, used)
					});
			case 16:
				var cases = _v0.a.ia;
				var usedConstructors = A3(
					$jfmengels$elm_review_unused$NoUnused$Exports$findUsedConstructors,
					moduleContext.s,
					A2($elm$core$List$map, $elm$core$Tuple$first, cases),
					_List_Nil);
				return _Utils_update(
					moduleContext,
					{
						bm: A3($elm$core$List$foldl, $elm$core$Set$insert, moduleContext.bm, usedConstructors)
					});
			default:
				return moduleContext;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$collectUsedFromImport = F3(function $jfmengels$elm_review_unused$NoUnused$Exports$collectUsedFromImport$fn(moduleName, exposingList, used) {
		var _v0 = A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, exposingList);
		if (!_v0.$) {
			if (_v0.a.$ === 1) {
				var list = _v0.a.a;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (_v1, acc) {
							var element = _v1.b;
							switch (element.$) {
								case 1:
									var name = element.a;
									return A2(
										$elm$core$Set$insert,
										_Utils_Tuple2(moduleName, name),
										acc);
								case 2:
									var name = element.a;
									return A2(
										$elm$core$Set$insert,
										_Utils_Tuple2(moduleName, name),
										acc);
								case 3:
									var name = element.a.cH;
									return A2(
										$elm$core$Set$insert,
										_Utils_Tuple2(moduleName, name),
										acc);
								default:
									return acc;
							}
						}),
					used,
					list);
			} else {
				return used;
			}
		} else {
			return used;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$importVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$importVisitor$fn(_v0, moduleContext) {
		var import_ = _v0.b;
		var moduleName = A2(
			$elm$core$String$join,
			'.',
			$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY));
		return _Utils_update(
			moduleContext,
			{
				cu: A2($elm$core$Set$insert, moduleName, moduleContext.cu),
				bm: A3($jfmengels$elm_review_unused$NoUnused$Exports$collectUsedFromImport, moduleName, import_.fE, moduleContext.bm)
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$moduleVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Exports$moduleVisitor$fn(config, schema) {
		return A2(
			$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
			F2(
				function (node, context) {
					return _Utils_Tuple2(
						_List_Nil,
						A2($jfmengels$elm_review_unused$NoUnused$Exports$expressionVisitor, node, context));
				}),
			A2(
				$jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor,
				F2(
					function (node, context) {
						return _Utils_Tuple2(
							_List_Nil,
							A3($jfmengels$elm_review_unused$NoUnused$Exports$declarationVisitor, config, node, context));
					}),
				A2(
					$jfmengels$elm_review$Review$Rule$withImportVisitor,
					F2(
						function (node, context) {
							return _Utils_Tuple2(
								_List_Nil,
								A2($jfmengels$elm_review_unused$NoUnused$Exports$importVisitor, node, context));
						}),
					schema)));
	});
var $jfmengels$elm_review_unused$NoUnused$Exports$toRule = function (_v0) {
	var config = _v0;
	return $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
		$jfmengels$elm_review$Review$Rule$providesFixesForProjectRule(
			A2(
				$jfmengels$elm_review$Review$Rule$withFinalProjectEvaluation,
				$jfmengels$elm_review_unused$NoUnused$Exports$finalEvaluationForProject(config.et),
				A2(
					$jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor,
					F2(
						function (elmJson, context) {
							return _Utils_Tuple2(
								_List_Nil,
								A2($jfmengels$elm_review_unused$NoUnused$Exports$elmJsonVisitor, elmJson, context));
						}),
					A2(
						$jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator,
						{
							cl: $jfmengels$elm_review_unused$NoUnused$Exports$foldProjectContexts,
							cn: $jfmengels$elm_review_unused$NoUnused$Exports$fromModuleToProject(config),
							gY: $jfmengels$elm_review_unused$NoUnused$Exports$fromProjectToModule
						},
						A2(
							$jfmengels$elm_review$Review$Rule$withModuleVisitor,
							$jfmengels$elm_review_unused$NoUnused$Exports$moduleVisitor(config),
							A2($jfmengels$elm_review$Review$Rule$newProjectRuleSchema, 'NoUnused.Exports', $jfmengels$elm_review_unused$NoUnused$Exports$initialProjectContext)))))));
};
var $jfmengels$elm_review_unused$NoUnused$Exports$rule = $jfmengels$elm_review_unused$NoUnused$Exports$toRule($jfmengels$elm_review_unused$NoUnused$Exports$defaults);
var $jfmengels$elm_review_unused$NoUnused$Parameters$NamedFunction = 0;
var $jfmengels$elm_review_unused$NoUnused$Parameters$getArgNamesHelp = F3(function $jfmengels$elm_review_unused$NoUnused$Parameters$getArgNamesHelp$fn(declared, index, acc) {
		getArgNamesHelp:
		while (true) {
			if (!declared.b) {
				return acc;
			} else {
				var args = declared.a;
				var restOfDeclared = declared.b;
				var newAcc = function () {
					if (args.b && (!args.b.b)) {
						var arg = args.a;
						return A3($elm$core$Dict$insert, index, arg.cH, acc);
					} else {
						return acc;
					}
				}();
				var $temp$declared = restOfDeclared,
					$temp$index = index + 1,
					$temp$acc = newAcc;
				declared = $temp$declared;
				index = $temp$index;
				acc = $temp$acc;
				continue getArgNamesHelp;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$getArgNames = function (declared) {
	return A3($jfmengels$elm_review_unused$NoUnused$Parameters$getArgNamesHelp, declared, 0, $elm$core$Dict$empty);
};
var $jfmengels$elm_review_unused$NoUnused$Parameters$Alias = 1;
var $jfmengels$elm_review_unused$NoUnused$Parameters$Parameter = 0;
var $jfmengels$elm_review_unused$NoUnused$Parameters$TupleWithoutVariables = 2;
var $jfmengels$elm_review_unused$NoUnused$Parameters$formatRecord = function (fields) {
	return '{ ' + (A2($elm$core$String$join, ', ', fields) + ' }');
};
var $jfmengels$elm_review_unused$NoUnused$Parameters$isPatternWildCard = function (node) {
	isPatternWildCard:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 14:
				var pattern = _v0.a;
				var $temp$node = pattern;
				node = $temp$node;
				continue isPatternWildCard;
			case 0:
				return true;
			default:
				return false;
		}
	}
};
var $jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromAsPattern = F3(function $jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromAsPattern$fn(source, pattern, asName) {
		var parametersFromPatterns = A2($jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromPatterns, source, pattern);
		var asParameter = {
			ch: _List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(
					{
						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(asName).c4,
						dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(pattern).c4
					})
				]),
			cB: 1,
			cH: $stil4m$elm_syntax$Elm$Syntax$Node$value(asName),
			f4: $stil4m$elm_syntax$Elm$Syntax$Node$range(asName),
			i8: source
		};
		return A2($elm$core$List$cons, asParameter, parametersFromPatterns);
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromPatterns = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromPatterns$fn(source, node) {
		getParametersFromPatterns:
		while (true) {
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
			switch (_v0.$) {
				case 14:
					var pattern = _v0.a;
					var $temp$source = source,
						$temp$node = pattern;
					source = $temp$source;
					node = $temp$node;
					continue getParametersFromPatterns;
				case 11:
					var name = _v0.a;
					return _List_fromArray(
						[
							{
							ch: _List_fromArray(
								[
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
									'_')
								]),
							cB: 0,
							cH: name,
							f4: $stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							i8: source
						}
						]);
				case 13:
					var pattern = _v0.a;
					var asName = _v0.b;
					return A3($jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromAsPattern, source, pattern, asName);
				case 8:
					var fields = _v0.a;
					if (fields.b && (!fields.b.b)) {
						var field = fields.a;
						return _List_fromArray(
							[
								{
								ch: _List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
										'_')
									]),
								cB: 0,
								cH: $stil4m$elm_syntax$Elm$Syntax$Node$value(field),
								f4: $stil4m$elm_syntax$Elm$Syntax$Node$range(field),
								i8: source
							}
							]);
					} else {
						var fieldNames = A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, fields);
						return A2(
							$elm$core$List$map,
							function (field) {
								return {
									ch: _List_fromArray(
										[
											A2(
											$jfmengels$elm_review$Review$Fix$replaceRangeBy,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
											$jfmengels$elm_review_unused$NoUnused$Parameters$formatRecord(
												A2(
													$elm$core$List$filter,
													function (f) {
														return !_Utils_eq(
															f,
															$stil4m$elm_syntax$Elm$Syntax$Node$value(field));
													},
													fieldNames)))
										]),
									cB: 0,
									cH: $stil4m$elm_syntax$Elm$Syntax$Node$value(field),
									f4: $stil4m$elm_syntax$Elm$Syntax$Node$range(field),
									i8: source
								};
							},
							fields);
					}
				case 7:
					var patterns = _v0.a;
					var parametersFromPatterns = A2(
						$elm$core$List$concatMap,
						$jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromPatterns(source),
						patterns);
					return ($elm$core$List$isEmpty(parametersFromPatterns) && A2($elm$core$List$all, $jfmengels$elm_review_unused$NoUnused$Parameters$isPatternWildCard, patterns)) ? _List_fromArray(
						[
							{
							ch: _List_fromArray(
								[
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
									'_')
								]),
							cB: 2,
							cH: '',
							f4: $stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							i8: source
						}
						]) : parametersFromPatterns;
				case 12:
					var patterns = _v0.b;
					return A2(
						$elm$core$List$concatMap,
						$jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromPatterns(source),
						patterns);
				default:
					return _List_Nil;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$declarationEnterVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$declarationEnterVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (!_v0.$) {
			var declaration = _v0.a.ii;
			var functionName = $stil4m$elm_syntax$Elm$Syntax$Node$value(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).cH);
			var _arguments = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).gs;
			var declared = A2(
				$elm$core$List$map,
				$jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromPatterns(0),
				_arguments);
			return _Utils_Tuple2(
				_List_Nil,
				{
					bU: A2(
						$elm$core$Dict$singleton,
						functionName,
						$jfmengels$elm_review_unused$NoUnused$Parameters$getArgNames(declared)),
					dk: $elm$core$Dict$empty,
					z: _List_fromArray(
						[
							{
							dH: $elm$core$List$concat(declared),
							de: functionName,
							bm: $elm$core$Set$empty,
							cT: $elm$core$Set$empty
						}
						])
				});
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$applyFix = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$applyFix$fn(source, fix) {
		if (!source) {
			return _List_Nil;
		} else {
			return fix;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$errorMessage = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$errorMessage$fn(kind, name) {
		switch (kind) {
			case 0:
				return {
					eq: _List_fromArray(
						['You should either use this parameter somewhere, or remove it at the location I pointed at.']),
					bx: 'Parameter `' + (name + '` is not used')
				};
			case 1:
				return {
					eq: _List_fromArray(
						['You should either use this parameter somewhere, or remove it at the location I pointed at.']),
					bx: 'Pattern alias `' + (name + '` is not used')
				};
			default:
				return {
					eq: _List_fromArray(
						['You should remove this pattern.']),
					bx: 'Tuple pattern is not needed'
				};
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$errorsForValue = function (_v0) {
	var name = _v0.cH;
	var kind = _v0.cB;
	var range = _v0.f4;
	var source = _v0.i8;
	var fix = _v0.ch;
	return A3(
		$jfmengels$elm_review$Review$Rule$errorWithFix,
		A2($jfmengels$elm_review_unused$NoUnused$Parameters$errorMessage, kind, name),
		range,
		A2($jfmengels$elm_review_unused$NoUnused$Parameters$applyFix, source, fix));
};
var $jfmengels$elm_review_unused$NoUnused$Parameters$recursiveParameterError = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$recursiveParameterError$fn(functionName, _v0) {
		var name = _v0.cH;
		var range = _v0.f4;
		return A2(
			$jfmengels$elm_review$Review$Rule$error,
			{
				eq: _List_fromArray(
					['This parameter is only used to be passed as an argument to \'' + (functionName + '\', but its value is never read or used.'), 'You should either use this parameter somewhere, or remove it at the location I pointed at.']),
				bx: 'Parameter `' + (name + '` is only used in recursion')
			},
			range);
	});
var $elm$core$Set$remove = F2(function $elm$core$Set$remove$fn(key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$remove, key, dict);
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$findErrorsAndVariablesNotPartOfScope = F3(function $jfmengels$elm_review_unused$NoUnused$Parameters$findErrorsAndVariablesNotPartOfScope$fn(scope, declared, _v0) {
		var errors_ = _v0.a;
		var remainingUsed_ = _v0.b;
		return A2($elm$core$Set$member, declared.cH, scope.cT) ? (A2($elm$core$Set$member, declared.cH, remainingUsed_) ? _Utils_Tuple2(
			errors_,
			A2($elm$core$Set$remove, declared.cH, remainingUsed_)) : _Utils_Tuple2(
			A2(
				$elm$core$List$cons,
				A2($jfmengels$elm_review_unused$NoUnused$Parameters$recursiveParameterError, scope.de, declared),
				errors_),
			A2($elm$core$Set$remove, declared.cH, remainingUsed_))) : (A2($elm$core$Set$member, declared.cH, remainingUsed_) ? _Utils_Tuple2(
			errors_,
			A2($elm$core$Set$remove, declared.cH, remainingUsed_)) : _Utils_Tuple2(
			A2(
				$elm$core$List$cons,
				$jfmengels$elm_review_unused$NoUnused$Parameters$errorsForValue(declared),
				errors_),
			remainingUsed_));
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$markAllAsUsed = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$markAllAsUsed$fn(names, scopes) {
		if (!scopes.b) {
			return scopes;
		} else {
			var headScope = scopes.a;
			var restOfScopes = scopes.b;
			return A2(
				$elm$core$List$cons,
				_Utils_update(
					headScope,
					{
						bm: A2($elm$core$Set$union, names, headScope.bm)
					}),
				restOfScopes);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$report = function (context) {
	var _v0 = context.z;
	if (_v0.b) {
		var headScope = _v0.a;
		var restOfScopes = _v0.b;
		var _v1 = A3(
			$elm$core$List$foldl,
			$jfmengels$elm_review_unused$NoUnused$Parameters$findErrorsAndVariablesNotPartOfScope(headScope),
			_Utils_Tuple2(_List_Nil, headScope.bm),
			headScope.dH);
		var errors = _v1.a;
		var remainingUsed = _v1.b;
		return _Utils_Tuple2(
			errors,
			_Utils_update(
				context,
				{
					bU: A2($elm$core$Dict$remove, headScope.de, context.bU),
					z: A2($jfmengels$elm_review_unused$NoUnused$Parameters$markAllAsUsed, remainingUsed, restOfScopes)
				}));
	} else {
		return _Utils_Tuple2(_List_Nil, context);
	}
};
var $jfmengels$elm_review_unused$NoUnused$Parameters$declarationExitVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$declarationExitVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (!_v0.$) {
			return $jfmengels$elm_review_unused$NoUnused$Parameters$report(context);
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$Lambda = 1;
var $jfmengels$elm_review_unused$NoUnused$Parameters$isRangeIncluded = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$isRangeIncluded$fn(inner, outer) {
		return (!(!A2($stil4m$elm_syntax$Elm$Syntax$Range$compareLocations, inner.dv, outer.dv))) && (A2($stil4m$elm_syntax$Elm$Syntax$Range$compareLocations, inner.c4, outer.c4) !== 2);
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$shouldBeIgnored = F3(function $jfmengels$elm_review_unused$NoUnused$Parameters$shouldBeIgnored$fn(range, name, context) {
		var _v0 = A2($elm$core$Dict$get, name, context.dk);
		if (!_v0.$) {
			var ranges = _v0.a;
			return A2(
				$elm$core$List$any,
				$jfmengels$elm_review_unused$NoUnused$Parameters$isRangeIncluded(range),
				ranges);
		} else {
			return false;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$markValueAsUsed = F3(function $jfmengels$elm_review_unused$NoUnused$Parameters$markValueAsUsed$fn(range, name, context) {
		var _v0 = context.z;
		if (!_v0.b) {
			return context;
		} else {
			var headScope = _v0.a;
			var restOfScopes = _v0.b;
			var newHeadScope = A3($jfmengels$elm_review_unused$NoUnused$Parameters$shouldBeIgnored, range, name, context) ? _Utils_update(
				headScope,
				{
					cT: A2($elm$core$Set$insert, name, headScope.cT)
				}) : _Utils_update(
				headScope,
				{
					bm: A2($elm$core$Set$insert, name, headScope.bm)
				});
			return _Utils_update(
				context,
				{
					z: A2($elm$core$List$cons, newHeadScope, restOfScopes)
				});
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$ignoreLocations = F5(function $jfmengels$elm_review_unused$NoUnused$Parameters$ignoreLocations$fn(fnArgs, numberOfIgnoredArguments, nodes, index, acc) {
		ignoreLocations:
		while (true) {
			if (!nodes.b) {
				return acc;
			} else {
				var _v1 = nodes.a;
				var range = _v1.a;
				var rest = nodes.b;
				var newAcc = function () {
					var _v2 = A2($elm$core$Dict$get, numberOfIgnoredArguments + index, fnArgs);
					if (!_v2.$) {
						var argName = _v2.a;
						var _v3 = A2($elm$core$Dict$get, argName, acc);
						if (!_v3.$) {
							var existingLocations = _v3.a;
							return A3(
								$elm$core$Dict$insert,
								argName,
								A2($elm$core$List$cons, range, existingLocations),
								acc);
						} else {
							return A3(
								$elm$core$Dict$insert,
								argName,
								_List_fromArray(
									[range]),
								acc);
						}
					} else {
						return acc;
					}
				}();
				var $temp$fnArgs = fnArgs,
					$temp$numberOfIgnoredArguments = numberOfIgnoredArguments,
					$temp$nodes = rest,
					$temp$index = index + 1,
					$temp$acc = newAcc;
				fnArgs = $temp$fnArgs;
				numberOfIgnoredArguments = $temp$numberOfIgnoredArguments;
				nodes = $temp$nodes;
				index = $temp$index;
				acc = $temp$acc;
				continue ignoreLocations;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$registerFunctionCall = F4(function $jfmengels$elm_review_unused$NoUnused$Parameters$registerFunctionCall$fn(fnName, numberOfIgnoredArguments, _arguments, context) {
		var _v0 = A2($elm$core$Dict$get, fnName, context.bU);
		if (!_v0.$) {
			var fnArgs = _v0.a;
			var locationsToIgnore = A5($jfmengels$elm_review_unused$NoUnused$Parameters$ignoreLocations, fnArgs, numberOfIgnoredArguments, _arguments, 0, context.dk);
			return _Utils_update(
				context,
				{dk: locationsToIgnore});
		} else {
			return context;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$expressionEnterVisitorHelp = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$expressionEnterVisitorHelp$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$6:
		while (true) {
			switch (_v0.$) {
				case 3:
					if (!_v0.a.b) {
						var name = _v0.b;
						return A3(
							$jfmengels$elm_review_unused$NoUnused$Parameters$markValueAsUsed,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							name,
							context);
					} else {
						break _v0$6;
					}
				case 22:
					var name = _v0.a;
					return A3(
						$jfmengels$elm_review_unused$NoUnused$Parameters$markValueAsUsed,
						$stil4m$elm_syntax$Elm$Syntax$Node$range(name),
						$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
						context);
				case 17:
					var args = _v0.a.h0;
					return _Utils_update(
						context,
						{
							z: A2(
								$elm$core$List$cons,
								{
									dH: A2(
										$elm$core$List$concatMap,
										$jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromPatterns(1),
										args),
									de: 'dummy lambda',
									bm: $elm$core$Set$empty,
									cT: $elm$core$Set$empty
								},
								context.z)
						});
				case 1:
					if ((_v0.a.b && (_v0.a.a.b.$ === 3)) && (!_v0.a.a.b.a.b)) {
						var _v1 = _v0.a;
						var _v2 = _v1.a;
						var _v3 = _v2.b;
						var fnName = _v3.b;
						var _arguments = _v1.b;
						return A4($jfmengels$elm_review_unused$NoUnused$Parameters$registerFunctionCall, fnName, 0, _arguments, context);
					} else {
						break _v0$6;
					}
				case 2:
					switch (_v0.a) {
						case '|>':
							if ((((_v0.d.b.$ === 1) && _v0.d.b.a.b) && (_v0.d.b.a.a.b.$ === 3)) && (!_v0.d.b.a.a.b.a.b)) {
								var lastArgument = _v0.c;
								var _v4 = _v0.d;
								var _v5 = _v4.b.a;
								var _v6 = _v5.a;
								var _v7 = _v6.b;
								var fnName = _v7.b;
								var _arguments = _v5.b;
								return A4(
									$jfmengels$elm_review_unused$NoUnused$Parameters$registerFunctionCall,
									fnName,
									$elm$core$List$length(_arguments),
									_List_fromArray(
										[lastArgument]),
									context);
							} else {
								break _v0$6;
							}
						case '<|':
							if ((((_v0.c.b.$ === 1) && _v0.c.b.a.b) && (_v0.c.b.a.a.b.$ === 3)) && (!_v0.c.b.a.a.b.a.b)) {
								var _v8 = _v0.c;
								var _v9 = _v8.b.a;
								var _v10 = _v9.a;
								var _v11 = _v10.b;
								var fnName = _v11.b;
								var _arguments = _v9.b;
								var lastArgument = _v0.d;
								return A4(
									$jfmengels$elm_review_unused$NoUnused$Parameters$registerFunctionCall,
									fnName,
									$elm$core$List$length(_arguments),
									_List_fromArray(
										[lastArgument]),
									context);
							} else {
								break _v0$6;
							}
						default:
							break _v0$6;
					}
				default:
					break _v0$6;
			}
		}
		return context;
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$expressionEnterVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$expressionEnterVisitor$fn(node, context) {
		return _Utils_Tuple2(
			_List_Nil,
			A2($jfmengels$elm_review_unused$NoUnused$Parameters$expressionEnterVisitorHelp, node, context));
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$expressionExitVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Parameters$expressionExitVisitor$fn(_v0, context) {
		var node = _v0.b;
		if (node.$ === 17) {
			return $jfmengels$elm_review_unused$NoUnused$Parameters$report(context);
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$initialContext = {bU: $elm$core$Dict$empty, dk: $elm$core$Dict$empty, z: _List_Nil};
var $jfmengels$elm_review_unused$NoUnused$Parameters$letDeclarationEnterVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Parameters$letDeclarationEnterVisitor$fn(_v0, letDeclaration, context) {
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(letDeclaration);
		if (!_v1.$) {
			var _function = _v1.a;
			var declaration = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii);
			if ($elm$core$List$isEmpty(declaration.gs)) {
				return _Utils_Tuple2(_List_Nil, context);
			} else {
				var functionName = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration.cH);
				var declared = A2(
					$elm$core$List$map,
					$jfmengels$elm_review_unused$NoUnused$Parameters$getParametersFromPatterns(0),
					declaration.gs);
				var newScope = {
					dH: $elm$core$List$concat(declared),
					de: functionName,
					bm: $elm$core$Set$empty,
					cT: $elm$core$Set$empty
				};
				return _Utils_Tuple2(
					_List_Nil,
					_Utils_update(
						context,
						{
							bU: A3(
								$elm$core$Dict$insert,
								functionName,
								$jfmengels$elm_review_unused$NoUnused$Parameters$getArgNames(declared),
								context.bU),
							z: A2($elm$core$List$cons, newScope, context.z)
						}));
			}
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$letDeclarationExitVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Parameters$letDeclarationExitVisitor$fn(_v0, letDeclaration, context) {
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(letDeclaration);
		if (!_v1.$) {
			var _function = _v1.a;
			var declaration = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii);
			return $elm$core$List$isEmpty(declaration.gs) ? _Utils_Tuple2(_List_Nil, context) : $jfmengels$elm_review_unused$NoUnused$Parameters$report(context);
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review$Review$Rule$withDeclarationExitVisitor = F2(function $jfmengels$elm_review$Review$Rule$withDeclarationExitVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				aG: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineExitVisitors, visitor, schema.aG))
			});
	});
var $jfmengels$elm_review$Review$Rule$withLetDeclarationEnterVisitor = F2(function $jfmengels$elm_review$Review$Rule$withLetDeclarationEnterVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				a8: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors2, visitor, schema.a8))
			});
	});
var $jfmengels$elm_review$Review$Rule$withLetDeclarationExitVisitor = F2(function $jfmengels$elm_review$Review$Rule$withLetDeclarationExitVisitor$fn(visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				a9: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineExitVisitors2, visitor, schema.a9))
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Parameters$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	$jfmengels$elm_review$Review$Rule$providesFixesForModuleRule(
		A2(
			$jfmengels$elm_review$Review$Rule$withLetDeclarationExitVisitor,
			$jfmengels$elm_review_unused$NoUnused$Parameters$letDeclarationExitVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withLetDeclarationEnterVisitor,
				$jfmengels$elm_review_unused$NoUnused$Parameters$letDeclarationEnterVisitor,
				A2(
					$jfmengels$elm_review$Review$Rule$withExpressionExitVisitor,
					$jfmengels$elm_review_unused$NoUnused$Parameters$expressionExitVisitor,
					A2(
						$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
						$jfmengels$elm_review_unused$NoUnused$Parameters$expressionEnterVisitor,
						A2(
							$jfmengels$elm_review$Review$Rule$withDeclarationExitVisitor,
							$jfmengels$elm_review_unused$NoUnused$Parameters$declarationExitVisitor,
							A2(
								$jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor,
								$jfmengels$elm_review_unused$NoUnused$Parameters$declarationEnterVisitor,
								A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchema, 'NoUnused.Parameters', $jfmengels$elm_review_unused$NoUnused$Parameters$initialContext)))))))));
var $jfmengels$elm_review_unused$NoUnused$Patterns$Matching = 1;
var $jfmengels$elm_review_unused$NoUnused$Patterns$Destructuring = 0;
var $jfmengels$elm_review_unused$NoUnused$Patterns$RecordPattern = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$SimplifiablePattern = function (a) {
	return {$: 2, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$SingleValue = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$removeDetails = _List_fromArray(
	['This pattern is redundant and should be removed.']);
var $jfmengels$elm_review_unused$NoUnused$Patterns$singularRemoveDetails = _List_fromArray(
	['You should either use this value somewhere or remove it.']);
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $stil4m$structured_writer$StructuredWriter$asIndent = function (amount) {
	return A2($elm$core$String$repeat, amount, ' ');
};
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $stil4m$structured_writer$StructuredWriter$writeIndented = F2(function $stil4m$structured_writer$StructuredWriter$writeIndented$fn(indent_, w) {
		switch (w.$) {
			case 0:
				var _v1 = w.a;
				var pre = _v1.a;
				var sep = _v1.b;
				var post = _v1.c;
				var differentLines = w.b;
				var items = w.c;
				var seperator = differentLines ? ('\n' + ($stil4m$structured_writer$StructuredWriter$asIndent(indent_) + sep)) : sep;
				return $elm$core$String$concat(
					_List_fromArray(
						[
							pre,
							A2(
							$elm$core$String$join,
							seperator,
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Basics$identity,
									$stil4m$structured_writer$StructuredWriter$writeIndented(indent_)),
								items)),
							post
						]));
			case 1:
				var items = w.a;
				return A2(
					$elm$core$String$join,
					'\n' + $stil4m$structured_writer$StructuredWriter$asIndent(indent_),
					A2(
						$elm$core$List$concatMap,
						A2(
							$elm$core$Basics$composeR,
							$stil4m$structured_writer$StructuredWriter$writeIndented(0),
							$elm$core$String$split('\n')),
						items));
			case 2:
				var s = w.a;
				return s;
			case 4:
				var n = w.a;
				var next = w.b;
				return _Utils_ap(
					$stil4m$structured_writer$StructuredWriter$asIndent(n + indent_),
					A2($stil4m$structured_writer$StructuredWriter$writeIndented, n + indent_, next));
			case 5:
				var items = w.a;
				return A2(
					$elm$core$String$join,
					' ',
					A2(
						$elm$core$List$map,
						$stil4m$structured_writer$StructuredWriter$writeIndented(indent_),
						items));
			case 6:
				var items = w.a;
				return $elm$core$String$concat(
					A2(
						$elm$core$List$map,
						$stil4m$structured_writer$StructuredWriter$writeIndented(indent_),
						items));
			default:
				var x = w.a;
				var y = w.b;
				return _Utils_ap(
					A2($stil4m$structured_writer$StructuredWriter$writeIndented, indent_, x),
					A2($stil4m$structured_writer$StructuredWriter$writeIndented, indent_, y));
		}
	});
var $stil4m$structured_writer$StructuredWriter$write = $stil4m$structured_writer$StructuredWriter$writeIndented(0);
var $stil4m$elm_syntax$Elm$Writer$write = $stil4m$structured_writer$StructuredWriter$write;
var $stil4m$structured_writer$StructuredWriter$Sep = F3(function $stil4m$structured_writer$StructuredWriter$Sep$fn(a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $stil4m$structured_writer$StructuredWriter$bracesComma = $stil4m$structured_writer$StructuredWriter$Sep(
	_Utils_Tuple3('{', ', ', '}'));
var $stil4m$structured_writer$StructuredWriter$bracketsComma = $stil4m$structured_writer$StructuredWriter$Sep(
	_Utils_Tuple3('[', ', ', ']'));
var $stil4m$elm_syntax$Elm$Writer$escapeString = A2($elm$core$String$replace, '\"', '\\\"');
var $stil4m$structured_writer$StructuredWriter$Joined = function (a) {
	return {$: 6, a: a};
};
var $stil4m$structured_writer$StructuredWriter$join = $stil4m$structured_writer$StructuredWriter$Joined;
var $stil4m$structured_writer$StructuredWriter$parensComma = $stil4m$structured_writer$StructuredWriter$Sep(
	_Utils_Tuple3('(', ', ', ')'));
var $stil4m$structured_writer$StructuredWriter$Spaced = function (a) {
	return {$: 5, a: a};
};
var $stil4m$structured_writer$StructuredWriter$spaced = $stil4m$structured_writer$StructuredWriter$Spaced;
var $stil4m$structured_writer$StructuredWriter$Str = function (a) {
	return {$: 2, a: a};
};
var $stil4m$structured_writer$StructuredWriter$string = $stil4m$structured_writer$StructuredWriter$Str;
var $elm$core$String$fromList = _String_fromList;
var $elm$core$Basics$modBy = _Basics_modBy;
var $rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {
	unsafeToDigit:
	while (true) {
		switch (num) {
			case 0:
				return '0';
			case 1:
				return '1';
			case 2:
				return '2';
			case 3:
				return '3';
			case 4:
				return '4';
			case 5:
				return '5';
			case 6:
				return '6';
			case 7:
				return '7';
			case 8:
				return '8';
			case 9:
				return '9';
			case 10:
				return 'a';
			case 11:
				return 'b';
			case 12:
				return 'c';
			case 13:
				return 'd';
			case 14:
				return 'e';
			case 15:
				return 'f';
			default:
				var $temp$num = num;
				num = $temp$num;
				continue unsafeToDigit;
		}
	}
};
var $rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(function $rtfeldman$elm_hex$Hex$unsafePositiveToDigits$fn(digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (num < 16) {
				return A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(num),
					digits);
			} else {
				var $temp$digits = A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(
						A2($elm$core$Basics$modBy, 16, num)),
					digits),
					$temp$num = (num / 16) | 0;
				digits = $temp$digits;
				num = $temp$num;
				continue unsafePositiveToDigits;
			}
		}
	});
var $rtfeldman$elm_hex$Hex$toString = function (num) {
	return $elm$core$String$fromList(
		(num < 0) ? A2(
			$elm$core$List$cons,
			'-',
			A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));
};
var $stil4m$elm_syntax$Elm$Writer$writeChar = function (c) {
	var escape = ((c === '\t') || ((c === '\'') || (c === '\\'))) ? '\\' : '';
	return $stil4m$structured_writer$StructuredWriter$string(
		'\'' + (escape + ($elm$core$String$fromChar(c) + '\'')));
};
var $stil4m$elm_syntax$Elm$Writer$writeModuleName = function (moduleName) {
	return $stil4m$structured_writer$StructuredWriter$string(
		A2($elm$core$String$join, '.', moduleName));
};
var $stil4m$elm_syntax$Elm$Writer$writeQualifiedNameRef = function (_v0) {
	var moduleName = _v0.eY;
	var name = _v0.cH;
	if (!moduleName.b) {
		return $stil4m$structured_writer$StructuredWriter$string(name);
	} else {
		return $stil4m$structured_writer$StructuredWriter$join(
			_List_fromArray(
				[
					$stil4m$elm_syntax$Elm$Writer$writeModuleName(moduleName),
					$stil4m$structured_writer$StructuredWriter$string('.'),
					$stil4m$structured_writer$StructuredWriter$string(name)
				]));
	}
};
var $stil4m$elm_syntax$Elm$Writer$writePattern = function (_v0) {
	var p = _v0.b;
	switch (p.$) {
		case 0:
			return $stil4m$structured_writer$StructuredWriter$string('_');
		case 1:
			return $stil4m$structured_writer$StructuredWriter$string('()');
		case 2:
			var c = p.a;
			return $stil4m$elm_syntax$Elm$Writer$writeChar(c);
		case 3:
			var s = p.a;
			return $stil4m$structured_writer$StructuredWriter$string(
				'\"' + ($stil4m$elm_syntax$Elm$Writer$escapeString(s) + '\"'));
		case 5:
			var h = p.a;
			return $stil4m$structured_writer$StructuredWriter$join(
				_List_fromArray(
					[
						$stil4m$structured_writer$StructuredWriter$string('0x'),
						$stil4m$structured_writer$StructuredWriter$string(
						$rtfeldman$elm_hex$Hex$toString(h))
					]));
		case 4:
			var i = p.a;
			return $stil4m$structured_writer$StructuredWriter$string(
				$elm$core$String$fromInt(i));
		case 6:
			var f = p.a;
			return $stil4m$structured_writer$StructuredWriter$string(
				$elm$core$String$fromFloat(f));
		case 7:
			var inner = p.a;
			return A2(
				$stil4m$structured_writer$StructuredWriter$parensComma,
				false,
				A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writePattern, inner));
		case 8:
			var inner = p.a;
			return A2(
				$stil4m$structured_writer$StructuredWriter$bracesComma,
				false,
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, $stil4m$structured_writer$StructuredWriter$string),
					inner));
		case 9:
			var left = p.a;
			var right = p.b;
			return $stil4m$structured_writer$StructuredWriter$spaced(
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Writer$writePattern(left),
						$stil4m$structured_writer$StructuredWriter$string('::'),
						$stil4m$elm_syntax$Elm$Writer$writePattern(right)
					]));
		case 10:
			var inner = p.a;
			return A2(
				$stil4m$structured_writer$StructuredWriter$bracketsComma,
				false,
				A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writePattern, inner));
		case 11:
			var _var = p.a;
			return $stil4m$structured_writer$StructuredWriter$string(_var);
		case 12:
			var qnr = p.a;
			var others = p.b;
			return $stil4m$structured_writer$StructuredWriter$spaced(
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Writer$writeQualifiedNameRef(qnr),
						$stil4m$structured_writer$StructuredWriter$spaced(
						A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writePattern, others))
					]));
		case 13:
			var innerPattern = p.a;
			var asName = p.b;
			return $stil4m$structured_writer$StructuredWriter$spaced(
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Writer$writePattern(innerPattern),
						$stil4m$structured_writer$StructuredWriter$string('as'),
						$stil4m$structured_writer$StructuredWriter$string(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(asName))
					]));
		default:
			var innerPattern = p.a;
			return $stil4m$structured_writer$StructuredWriter$spaced(
				_List_fromArray(
					[
						$stil4m$structured_writer$StructuredWriter$string('('),
						$stil4m$elm_syntax$Elm$Writer$writePattern(innerPattern),
						$stil4m$structured_writer$StructuredWriter$string(')')
					]));
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$writePattern = function (pattern) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(pattern);
	switch (_v0.$) {
		case 0:
			return '_';
		case 1:
			return '()';
		case 2:
			var c = _v0.a;
			return '\'' + ($elm$core$String$fromChar(c) + '\'');
		case 3:
			var s = _v0.a;
			return '\"' + (A3($elm$core$String$replace, '\"', '\\\"', s) + '\"');
		case 5:
			return $stil4m$elm_syntax$Elm$Writer$write(
				$stil4m$elm_syntax$Elm$Writer$writePattern(pattern));
		case 4:
			var i = _v0.a;
			return $elm$core$String$fromInt(i);
		case 6:
			var f = _v0.a;
			return $elm$core$String$fromFloat(f);
		case 7:
			var inner = _v0.a;
			return '( ' + (A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $jfmengels$elm_review_unused$NoUnused$Patterns$writePattern, inner)) + ' )');
		case 8:
			var inner = _v0.a;
			return '{ ' + (A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, inner)) + ' }');
		case 9:
			var left = _v0.a;
			var right = _v0.b;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$writePattern(left) + (' :: ' + $jfmengels$elm_review_unused$NoUnused$Patterns$writePattern(right));
		case 10:
			var inner = _v0.a;
			return '[ ' + (A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $jfmengels$elm_review_unused$NoUnused$Patterns$writePattern, inner)) + ' ]');
		case 11:
			var _var = _v0.a;
			return _var;
		case 12:
			var qnr = _v0.a;
			var others = _v0.b;
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$cons,
					A2(
						$elm$core$String$join,
						'.',
						_Utils_ap(
							qnr.eY,
							_List_fromArray(
								[qnr.cH]))),
					A2($elm$core$List$map, $jfmengels$elm_review_unused$NoUnused$Patterns$writePattern, others)));
		case 13:
			var innerPattern = _v0.a;
			var asName = _v0.b;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$writePattern(innerPattern) + (' as ' + $stil4m$elm_syntax$Elm$Syntax$Node$value(asName));
		default:
			var innerPattern = _v0.a;
			return '(' + ($jfmengels$elm_review_unused$NoUnused$Patterns$writePattern(innerPattern) + ')');
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$findPatternForAsPattern = F3(function $jfmengels$elm_review_unused$NoUnused$Patterns$findPatternForAsPattern$fn(patternRange, pattern, nameNode) {
		findPatternForAsPattern:
		while (true) {
			var range = nameNode.a;
			var name = nameNode.b;
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(pattern);
			switch (_v0.$) {
				case 14:
					var subPattern = _v0.a;
					var $temp$patternRange = patternRange,
						$temp$pattern = subPattern,
						$temp$nameNode = nameNode;
					patternRange = $temp$patternRange;
					pattern = $temp$pattern;
					nameNode = $temp$nameNode;
					continue findPatternForAsPattern;
				case 0:
					return $jfmengels$elm_review_unused$NoUnused$Patterns$SimplifiablePattern(
						A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{eq: $jfmengels$elm_review_unused$NoUnused$Patterns$removeDetails, bx: 'Pattern `_` is not needed'},
							$stil4m$elm_syntax$Elm$Syntax$Node$range(pattern),
							_List_fromArray(
								[
									A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, patternRange, name)
								])));
				case 11:
					var innerName = _v0.a;
					return $jfmengels$elm_review_unused$NoUnused$Patterns$SimplifiablePattern(
						A2(
							$jfmengels$elm_review$Review$Rule$error,
							{
								eq: _List_fromArray(
									['This alias is redundant because the value is already named `' + (innerName + '`. I suggest you remove one of them.')]),
								bx: 'Unnecessary duplicate alias `' + (name + '`')
							},
							range));
				case 13:
					var _v1 = _v0.b;
					var innerRange = _v1.a;
					var innerName = _v1.b;
					return $jfmengels$elm_review_unused$NoUnused$Patterns$SimplifiablePattern(
						A2(
							$jfmengels$elm_review$Review$Rule$error,
							{
								eq: _List_fromArray(
									['This name is redundant because the value is already aliased as `' + (name + '`. I suggest you remove one of them.')]),
								bx: 'Unnecessary duplicate alias `' + (innerName + '`')
							},
							innerRange));
				default:
					var fix = _List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							patternRange,
							$jfmengels$elm_review_unused$NoUnused$Patterns$writePattern(pattern))
						]);
					return $jfmengels$elm_review_unused$NoUnused$Patterns$SingleValue(
						{eq: $jfmengels$elm_review_unused$NoUnused$Patterns$singularRemoveDetails, ch: fix, bx: 'Pattern alias `' + (name + '` is not used'), cH: name, f4: range});
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$isAllPattern = function (_v0) {
	var pattern = _v0.b;
	if (!pattern.$) {
		return true;
	} else {
		return false;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$redundantDetails = _List_fromArray(
	['This pattern is redundant and should be replaced with \'_\'.']);
var $jfmengels$elm_review_unused$NoUnused$Patterns$singularReplaceDetails = _List_fromArray(
	['You should either use this value somewhere or replace it with \'_\'.']);
var $jfmengels$elm_review_unused$NoUnused$Patterns$findPatternsHelp = F3(function $jfmengels$elm_review_unused$NoUnused$Patterns$findPatternsHelp$fn(use, patterns, acc) {
		findPatternsHelp:
		while (true) {
			if (!patterns.b) {
				return acc;
			} else {
				var _v1 = patterns.a;
				var range = _v1.a;
				var pattern = _v1.b;
				var rest = patterns.b;
				_v2$3:
				while (true) {
					switch (pattern.$) {
						case 11:
							var name = pattern.a;
							var foundPattern = $jfmengels$elm_review_unused$NoUnused$Patterns$SingleValue(
								{
									eq: $jfmengels$elm_review_unused$NoUnused$Patterns$singularReplaceDetails,
									ch: _List_fromArray(
										[
											A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, range, '_')
										]),
									bx: 'Value `' + (name + '` is not used'),
									cH: name,
									f4: range
								});
							var $temp$use = use,
								$temp$patterns = rest,
								$temp$acc = A2($elm$core$List$cons, foundPattern, acc);
							use = $temp$use;
							patterns = $temp$patterns;
							acc = $temp$acc;
							continue findPatternsHelp;
						case 7:
							if (((pattern.a.b && (!pattern.a.a.b.$)) && pattern.a.b.b) && (!pattern.a.b.a.b.$)) {
								if (!pattern.a.b.b.b) {
									var _v3 = pattern.a;
									var _v4 = _v3.a;
									var _v5 = _v4.b;
									var _v6 = _v3.b;
									var _v7 = _v6.a;
									var _v8 = _v7.b;
									var foundPattern = $jfmengels$elm_review_unused$NoUnused$Patterns$SimplifiablePattern(
										A3(
											$jfmengels$elm_review$Review$Rule$errorWithFix,
											{eq: $jfmengels$elm_review_unused$NoUnused$Patterns$redundantDetails, bx: 'Tuple pattern is not needed'},
											range,
											_List_fromArray(
												[
													A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, range, '_')
												])));
									var $temp$use = use,
										$temp$patterns = rest,
										$temp$acc = A2($elm$core$List$cons, foundPattern, acc);
									use = $temp$use;
									patterns = $temp$patterns;
									acc = $temp$acc;
									continue findPatternsHelp;
								} else {
									if ((!pattern.a.b.b.a.b.$) && (!pattern.a.b.b.b.b)) {
										var _v9 = pattern.a;
										var _v10 = _v9.a;
										var _v11 = _v10.b;
										var _v12 = _v9.b;
										var _v13 = _v12.a;
										var _v14 = _v13.b;
										var _v15 = _v12.b;
										var _v16 = _v15.a;
										var _v17 = _v16.b;
										var foundPattern = $jfmengels$elm_review_unused$NoUnused$Patterns$SimplifiablePattern(
											A3(
												$jfmengels$elm_review$Review$Rule$errorWithFix,
												{eq: $jfmengels$elm_review_unused$NoUnused$Patterns$redundantDetails, bx: 'Tuple pattern is not needed'},
												range,
												_List_fromArray(
													[
														A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, range, '_')
													])));
										var $temp$use = use,
											$temp$patterns = rest,
											$temp$acc = A2($elm$core$List$cons, foundPattern, acc);
										use = $temp$use;
										patterns = $temp$patterns;
										acc = $temp$acc;
										continue findPatternsHelp;
									} else {
										break _v2$3;
									}
								}
							} else {
								break _v2$3;
							}
						case 8:
							var fields = pattern.a;
							var foundPattern = $jfmengels$elm_review_unused$NoUnused$Patterns$RecordPattern(
								{fH: fields, hy: range});
							var $temp$use = use,
								$temp$patterns = rest,
								$temp$acc = A2($elm$core$List$cons, foundPattern, acc);
							use = $temp$use;
							patterns = $temp$patterns;
							acc = $temp$acc;
							continue findPatternsHelp;
						case 9:
							var first = pattern.a;
							var second = pattern.b;
							var $temp$use = use,
								$temp$patterns = A2(
								$elm$core$List$cons,
								first,
								A2($elm$core$List$cons, second, rest)),
								$temp$acc = acc;
							use = $temp$use;
							patterns = $temp$patterns;
							acc = $temp$acc;
							continue findPatternsHelp;
						case 10:
							var subPatterns = pattern.a;
							var $temp$use = use,
								$temp$patterns = _Utils_ap(subPatterns, rest),
								$temp$acc = acc;
							use = $temp$use;
							patterns = $temp$patterns;
							acc = $temp$acc;
							continue findPatternsHelp;
						case 12:
							var subPatterns = pattern.b;
							if ((!use) && A2($elm$core$List$all, $jfmengels$elm_review_unused$NoUnused$Patterns$isAllPattern, subPatterns)) {
								var foundPattern = $jfmengels$elm_review_unused$NoUnused$Patterns$SimplifiablePattern(
									A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										{eq: $jfmengels$elm_review_unused$NoUnused$Patterns$redundantDetails, bx: 'Named pattern is not needed'},
										range,
										_List_fromArray(
											[
												A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, range, '_')
											])));
								var $temp$use = use,
									$temp$patterns = rest,
									$temp$acc = A2($elm$core$List$cons, foundPattern, acc);
								use = $temp$use;
								patterns = $temp$patterns;
								acc = $temp$acc;
								continue findPatternsHelp;
							} else {
								var $temp$use = use,
									$temp$patterns = _Utils_ap(subPatterns, rest),
									$temp$acc = acc;
								use = $temp$use;
								patterns = $temp$patterns;
								acc = $temp$acc;
								continue findPatternsHelp;
							}
						case 13:
							var inner = pattern.a;
							var name = pattern.b;
							var $temp$use = use,
								$temp$patterns = A2($elm$core$List$cons, inner, rest),
								$temp$acc = A2(
								$elm$core$List$cons,
								A3($jfmengels$elm_review_unused$NoUnused$Patterns$findPatternForAsPattern, range, inner, name),
								acc);
							use = $temp$use;
							patterns = $temp$patterns;
							acc = $temp$acc;
							continue findPatternsHelp;
						case 14:
							var inner = pattern.a;
							var $temp$use = use,
								$temp$patterns = A2($elm$core$List$cons, inner, rest),
								$temp$acc = acc;
							use = $temp$use;
							patterns = $temp$patterns;
							acc = $temp$acc;
							continue findPatternsHelp;
						default:
							var $temp$use = use,
								$temp$patterns = rest,
								$temp$acc = acc;
							use = $temp$use;
							patterns = $temp$patterns;
							acc = $temp$acc;
							continue findPatternsHelp;
					}
				}
				var subPatterns = pattern.a;
				var $temp$use = use,
					$temp$patterns = _Utils_ap(subPatterns, rest),
					$temp$acc = acc;
				use = $temp$use;
				patterns = $temp$patterns;
				acc = $temp$acc;
				continue findPatternsHelp;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$findPatterns = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$findPatterns$fn(use, pattern) {
		return A3(
			$jfmengels$elm_review_unused$NoUnused$Patterns$findPatternsHelp,
			use,
			_List_fromArray(
				[pattern]),
			_List_Nil);
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$caseBranchEnterVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Patterns$caseBranchEnterVisitor$fn(_v0, _v1, context) {
		var pattern = _v1.a;
		return _Utils_Tuple2(
			_List_Nil,
			A2(
				$elm$core$List$cons,
				{
					dH: A2($jfmengels$elm_review_unused$NoUnused$Patterns$findPatterns, 1, pattern),
					bm: $elm$core$Set$empty
				},
				context));
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$findDeclaredPatterns = function (scope) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (foundPattern, acc) {
				switch (foundPattern.$) {
					case 0:
						var v = foundPattern.a;
						return {
							b$: acc.b$,
							b3: acc.b3,
							b4: A2($elm$core$List$cons, v, acc.b4)
						};
					case 1:
						var v = foundPattern.a;
						return {
							b$: A2($elm$core$List$cons, v, acc.b$),
							b3: acc.b3,
							b4: acc.b4
						};
					default:
						var simplifiablePatternError = foundPattern.a;
						return {
							b$: acc.b$,
							b3: A2($elm$core$List$cons, simplifiablePatternError, acc.b3),
							b4: acc.b4
						};
				}
			}),
		{b$: _List_Nil, b3: _List_Nil, b4: _List_Nil},
		scope.dH);
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern = function (a) {
	return {$: 8, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Range$Range = F2(function $stil4m$elm_syntax$Elm$Syntax$Range$Range$fn(start, end) {
		return {c4: end, dv: start};
	});
var $elm$core$Maybe$map2 = F3(function $elm$core$Maybe$map2$fn(func, ma, mb) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $elm$core$List$sortWith = _List_sortWith;
var $stil4m$elm_syntax$Elm$Syntax$Range$sortLocations = $elm$core$List$sortWith($stil4m$elm_syntax$Elm$Syntax$Range$compareLocations);
var $stil4m$elm_syntax$Elm$Syntax$Range$combine = function (ranges) {
	var starts = $stil4m$elm_syntax$Elm$Syntax$Range$sortLocations(
		A2(
			$elm$core$List$map,
			function ($) {
				return $.dv;
			},
			ranges));
	var ends = $elm$core$List$reverse(
		$stil4m$elm_syntax$Elm$Syntax$Range$sortLocations(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.c4;
				},
				ranges)));
	return A2(
		$elm$core$Maybe$withDefault,
		$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
		A3(
			$elm$core$Maybe$map2,
			$stil4m$elm_syntax$Elm$Syntax$Range$Range,
			$elm$core$List$head(starts),
			$elm$core$List$head(ends)));
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$isUnused = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$isUnused$fn(name, context) {
		if (!context.b) {
			return false;
		} else {
			var headScope = context.a;
			return !A2($elm$core$Set$member, name, headScope.bm);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$isNodeInContext = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$isNodeInContext$fn(context, _v0) {
		var value = _v0.b;
		return A2($jfmengels$elm_review_unused$NoUnused$Patterns$isUnused, value, context);
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$pluralDetails = _List_fromArray(
	['You should either use these values somewhere or remove them.']);
var $jfmengels$elm_review_unused$NoUnused$Patterns$listToDetails = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$listToDetails$fn(_v0, rest) {
		if (!rest.b) {
			return $jfmengels$elm_review_unused$NoUnused$Patterns$singularRemoveDetails;
		} else {
			return $jfmengels$elm_review_unused$NoUnused$Patterns$pluralDetails;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$listToMessage = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$listToMessage$fn(first, rest) {
		var _v0 = $elm$core$List$reverse(rest);
		if (!_v0.b) {
			return 'Value `' + (first + '` is not used');
		} else {
			var last = _v0.a;
			var middle = _v0.b;
			return 'Values `' + (A2(
				$elm$core$String$join,
				'`, `',
				A2($elm$core$List$cons, first, middle)) + ('` and `' + (last + '` are not used')));
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$recordErrors = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$recordErrors$fn(context, _v0) {
		var fields = _v0.fH;
		var recordRange = _v0.hy;
		if ($elm$core$List$isEmpty(fields)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['This pattern is redundant and should be replaced with \'_\'.']),
						bx: 'Record pattern is not needed'
					},
					recordRange,
					_List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, recordRange, '_')
						]))
				]);
		} else {
			var _v1 = A2(
				$elm$core$List$partition,
				$jfmengels$elm_review_unused$NoUnused$Patterns$isNodeInContext(context),
				fields);
			var unused = _v1.a;
			var used = _v1.b;
			if (!unused.b) {
				return _List_Nil;
			} else {
				var firstNode = unused.a;
				var restNodes = unused.b;
				var rest = A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, restNodes);
				var first = $stil4m$elm_syntax$Elm$Syntax$Node$value(firstNode);
				var _v3 = function () {
					if (!used.b) {
						return _Utils_Tuple2(
							recordRange,
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, recordRange, '_'));
					} else {
						return _Utils_Tuple2(
							$stil4m$elm_syntax$Elm$Syntax$Range$combine(
								A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, unused)),
							A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								recordRange,
								$jfmengels$elm_review_unused$NoUnused$Patterns$writePattern(
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
										$stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern(used)))));
					}
				}();
				var errorRange = _v3.a;
				var fix = _v3.b;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: A2($jfmengels$elm_review_unused$NoUnused$Patterns$listToDetails, first, rest),
							bx: A2($jfmengels$elm_review_unused$NoUnused$Patterns$listToMessage, first, rest)
						},
						errorRange,
						_List_fromArray(
							[fix]))
					]);
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$useValue = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$useValue$fn(name, context) {
		if (!context.b) {
			return context;
		} else {
			var headScope = context.a;
			var restOfScopes = context.b;
			return A2(
				$elm$core$List$cons,
				_Utils_update(
					headScope,
					{
						bm: A2($elm$core$Set$insert, name, headScope.bm)
					}),
				restOfScopes);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$report = function (context) {
	if (context.b) {
		var headScope = context.a;
		var restOfScopes = context.b;
		var _v1 = $jfmengels$elm_review_unused$NoUnused$Patterns$findDeclaredPatterns(headScope);
		var singles = _v1.b4;
		var records = _v1.b$;
		var simplifiablePatterns = _v1.b3;
		var allDeclared = $elm$core$List$concat(
			_List_fromArray(
				[
					A2(
					$elm$core$List$map,
					function ($) {
						return $.cH;
					},
					singles),
					A2(
					$elm$core$List$concatMap,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.fH;
						},
						$elm$core$List$map($stil4m$elm_syntax$Elm$Syntax$Node$value)),
					records)
				]));
		var nonUsedVars = A2(
			$elm$core$Set$diff,
			headScope.bm,
			$elm$core$Set$fromList(allDeclared));
		var singleErrors = A2(
			$elm$core$List$map,
			function (pattern) {
				return A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{eq: pattern.eq, bx: pattern.bx},
					pattern.f4,
					pattern.ch);
			},
			A2(
				$elm$core$List$filter,
				function (_v2) {
					var name = _v2.cH;
					return !A2($elm$core$Set$member, name, headScope.bm);
				},
				singles));
		var errors = $elm$core$List$concat(
			_List_fromArray(
				[
					singleErrors,
					A2(
					$elm$core$List$concatMap,
					$jfmengels$elm_review_unused$NoUnused$Patterns$recordErrors(context),
					records),
					simplifiablePatterns
				]));
		return _Utils_Tuple2(
			errors,
			A3($elm$core$Set$foldl, $jfmengels$elm_review_unused$NoUnused$Patterns$useValue, restOfScopes, nonUsedVars));
	} else {
		return _Utils_Tuple2(_List_Nil, context);
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$caseBranchExitVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Patterns$caseBranchExitVisitor$fn(_v0, _v1, context) {
		return $jfmengels$elm_review_unused$NoUnused$Patterns$report(context);
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$findAsPatternsErrors = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$findAsPatternsErrors$fn(patterns, acc) {
		findAsPatternsErrors:
		while (true) {
			if (!patterns.b) {
				return acc;
			} else {
				var pattern = patterns.a;
				var rest = patterns.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(pattern);
				switch (_v1.$) {
					case 13:
						var inner = _v1.a;
						var name = _v1.b;
						var newAcc = function () {
							var _v2 = A3(
								$jfmengels$elm_review_unused$NoUnused$Patterns$findPatternForAsPattern,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(pattern),
								inner,
								name);
							switch (_v2.$) {
								case 2:
									var error = _v2.a;
									return A2($elm$core$List$cons, error, acc);
								case 0:
									return acc;
								default:
									return acc;
							}
						}();
						var $temp$patterns = A2($elm$core$List$cons, inner, rest),
							$temp$acc = newAcc;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findAsPatternsErrors;
					case 7:
						var subPatterns = _v1.a;
						var $temp$patterns = _Utils_ap(subPatterns, rest),
							$temp$acc = acc;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findAsPatternsErrors;
					case 9:
						var first = _v1.a;
						var second = _v1.b;
						var $temp$patterns = A2(
							$elm$core$List$cons,
							first,
							A2($elm$core$List$cons, second, rest)),
							$temp$acc = acc;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findAsPatternsErrors;
					case 10:
						var subPatterns = _v1.a;
						var $temp$patterns = _Utils_ap(subPatterns, rest),
							$temp$acc = acc;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findAsPatternsErrors;
					case 12:
						var subPatterns = _v1.b;
						var $temp$patterns = _Utils_ap(subPatterns, rest),
							$temp$acc = acc;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findAsPatternsErrors;
					case 14:
						var inner = _v1.a;
						var $temp$patterns = A2($elm$core$List$cons, inner, rest),
							$temp$acc = acc;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findAsPatternsErrors;
					default:
						var $temp$patterns = rest,
							$temp$acc = acc;
						patterns = $temp$patterns;
						acc = $temp$acc;
						continue findAsPatternsErrors;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$declarationEnterVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$declarationEnterVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (!_v0.$) {
			var declaration = _v0.a.ii;
			return _Utils_Tuple2(
				A2(
					$jfmengels$elm_review_unused$NoUnused$Patterns$findAsPatternsErrors,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).gs,
					_List_Nil),
				context);
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$expressionEnterVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$expressionEnterVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 15:
				var declarations = _v0.a.gD;
				var findPatternsInLetDeclaration = function (letDeclaration) {
					var _v2 = $stil4m$elm_syntax$Elm$Syntax$Node$value(letDeclaration);
					if (!_v2.$) {
						return _List_Nil;
					} else {
						var pattern = _v2.a;
						return A2($jfmengels$elm_review_unused$NoUnused$Patterns$findPatterns, 0, pattern);
					}
				};
				var asPatternsErrors = function (letDeclaration) {
					var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(letDeclaration);
					if (!_v1.$) {
						var declaration = _v1.a.ii;
						return A2(
							$jfmengels$elm_review_unused$NoUnused$Patterns$findAsPatternsErrors,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration).gs,
							_List_Nil);
					} else {
						return _List_Nil;
					}
				};
				return _Utils_Tuple2(
					A2($elm$core$List$concatMap, asPatternsErrors, declarations),
					A2(
						$elm$core$List$cons,
						{
							dH: A2($elm$core$List$concatMap, findPatternsInLetDeclaration, declarations),
							bm: $elm$core$Set$empty
						},
						context));
			case 17:
				var args = _v0.a.h0;
				return _Utils_Tuple2(
					A2($jfmengels$elm_review_unused$NoUnused$Patterns$findAsPatternsErrors, args, _List_Nil),
					context);
			default:
				return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$expressionExitVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$expressionExitVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 15) {
			return $jfmengels$elm_review_unused$NoUnused$Patterns$report(context);
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$initialContext = _List_Nil;
var $jfmengels$elm_review_unused$NoUnused$Patterns$valueVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$valueVisitor$fn(_v0, context) {
		var _v1 = _v0.b;
		var moduleName = _v1.a;
		var value = _v1.b;
		if (!moduleName.b) {
			return _Utils_Tuple2(
				_List_Nil,
				A2($jfmengels$elm_review_unused$NoUnused$Patterns$useValue, value, context));
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$ValueVisitor = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$noopVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$noopVisitor$fn(_v0, context) {
		return _Utils_Tuple2(_List_Nil, context);
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$applyTypeVisitor = function (visitor) {
	switch (visitor.$) {
		case 0:
			var _function = visitor.a;
			return _function;
		case 1:
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$noopVisitor;
		case 2:
			var _function = visitor.a;
			return _function;
		default:
			var _function = visitor.b;
			return _function;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$applyValueVisitor = function (visitor) {
	switch (visitor.$) {
		case 0:
			var _function = visitor.a;
			return _function;
		case 1:
			var _function = visitor.a;
			return _function;
		case 2:
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$noopVisitor;
		default:
			var _function = visitor.a;
			return _function;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$applyVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$applyVisitor$fn(visitor, name, context) {
		if (!name.$) {
			var node = name.a;
			return A3($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$applyValueVisitor, visitor, node, context);
		} else {
			var node = name.a;
			return A3($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$applyTypeVisitor, visitor, node, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$folderHelper = F3(function $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$folderHelper$fn(visitor, name, _v0) {
		var errors = _v0.a;
		var context = _v0.b;
		var _v1 = A3($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$applyVisitor, visitor, name, context);
		var newErrors = _v1.a;
		var newContext = _v1.b;
		return _Utils_Tuple2(
			_Utils_ap(newErrors, errors),
			newContext);
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$folder = F3(function $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$folder$fn(visitor, context, list) {
		return A3(
			$elm$core$List$foldl,
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$folderHelper(visitor),
			_Utils_Tuple2(_List_Nil, context),
			list);
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$fastConcatMap = function (fn) {
	return A2(
		$elm$core$List$foldr,
		A2($elm$core$Basics$composeR, fn, $elm$core$Basics$append),
		_List_Nil);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$Value = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitValue = function (node) {
	return _List_fromArray(
		[
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$Value(node)
		]);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPattern = function (node) {
	visitPattern:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 7:
				var patterns = _v0.a;
				return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPatternList(patterns);
			case 9:
				var head = _v0.a;
				var rest = _v0.b;
				return _Utils_ap(
					$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPattern(head),
					$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPattern(rest));
			case 10:
				var list = _v0.a;
				return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPatternList(list);
			case 12:
				var moduleName = _v0.a.eY;
				var name = _v0.a.cH;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$range(node);
				var start = _v1.dv;
				var newEnd = _Utils_update(
					start,
					{
						bH: start.bH + $elm$core$String$length(
							A2(
								$elm$core$String$join,
								'.',
								A2($elm$core$List$cons, name, moduleName)))
					});
				var range = {c4: newEnd, dv: start};
				return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitValue(
					A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						_Utils_Tuple2(moduleName, name)));
			case 13:
				var pattern = _v0.a;
				var $temp$node = pattern;
				node = $temp$node;
				continue visitPattern;
			case 14:
				var pattern = _v0.a;
				var $temp$node = pattern;
				node = $temp$node;
				continue visitPattern;
			default:
				return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPatternList = function (list) {
	return A2($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$fastConcatMap, $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPattern, list);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitFunctionImplementation = function (node) {
	return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPatternList(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(node).gs);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$Type = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitType = function (node) {
	return _List_fromArray(
		[
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$Type(node)
		]);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitRecordField = function (node) {
	return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotation(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(node).b);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitRecordFieldList = function (list) {
	return A2($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$fastConcatMap, $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitRecordField, list);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotation = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 0:
			return _List_Nil;
		case 1:
			var call = _v0.a;
			var types = _v0.b;
			return _Utils_ap(
				$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitType(call),
				$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotationList(types));
		case 2:
			return _List_Nil;
		case 3:
			var list = _v0.a;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotationList(list);
		case 4:
			var list = _v0.a;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitRecordFieldList(list);
		case 5:
			var list = _v0.b;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitRecordFieldList(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(list));
		default:
			var argument = _v0.a;
			var _return = _v0.b;
			return _Utils_ap(
				$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotation(argument),
				$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotation(_return));
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotationList = function (list) {
	return A2($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$fastConcatMap, $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotation, list);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitSignature = function (node) {
	return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotation(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(node).hV);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitMaybeSignature = function (maybeNode) {
	if (!maybeNode.$) {
		var node = maybeNode.a;
		return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitSignature(node);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitValueConstructor = function (node) {
	return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotationList(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(node).gs);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitValueConstructorList = function (list) {
	return A2($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$fastConcatMap, $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitValueConstructor, list);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitDeclaration = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 0:
			var signature = _v0.a.i7;
			var declaration = _v0.a.ii;
			return _Utils_ap(
				$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitMaybeSignature(signature),
				$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitFunctionImplementation(declaration));
		case 1:
			var typeAnnotation = _v0.a.hV;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotation(typeAnnotation);
		case 2:
			var constructors = _v0.a.ig;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitValueConstructorList(constructors);
		case 3:
			var typeAnnotation = _v0.a.hV;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitTypeAnnotation(typeAnnotation);
		default:
			return _List_Nil;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitDeclarationList = function (nodes) {
	return A2($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$fastConcatMap, $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitDeclaration, nodes);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$declarationListVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$declarationListVisitor$fn(visitor, list, context) {
		return A3(
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$folder,
			visitor,
			context,
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitDeclarationList(list));
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitCase = function (_v0) {
	var pattern = _v0.a;
	return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPattern(pattern);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitCaseList = function (list) {
	return A2($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$fastConcatMap, $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitCase, list);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitLetDeclaration = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	if (!_v0.$) {
		var signature = _v0.a.i7;
		var declaration = _v0.a.ii;
		return _Utils_ap(
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitMaybeSignature(signature),
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitFunctionImplementation(declaration));
	} else {
		var pattern = _v0.a;
		return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPattern(pattern);
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitLetDeclarationList = function (list) {
	return A2($jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$fastConcatMap, $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitLetDeclaration, list);
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitExpression = function (_v0) {
	var range = _v0.a;
	var expression = _v0.b;
	switch (expression.$) {
		case 3:
			var moduleName = expression.a;
			var _function = expression.b;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitValue(
				A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					_Utils_Tuple2(moduleName, _function)));
		case 15:
			var declarations = expression.a.gD;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitLetDeclarationList(declarations);
		case 16:
			var cases = expression.a.ia;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitCaseList(cases);
		case 17:
			var args = expression.a.h0;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitPatternList(args);
		case 22:
			var name = expression.a;
			return $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitValue(
				A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$map,
					function (_function) {
						return _Utils_Tuple2(_List_Nil, _function);
					},
					name));
		default:
			return _List_Nil;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$expressionVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$expressionVisitor$fn(visitor, node, context) {
		return A3(
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$folder,
			visitor,
			context,
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$visitExpression(node));
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$withValueVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$withValueVisitor$fn(valueVisitor, rule) {
		var visitor = $jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$ValueVisitor(valueVisitor);
		return A2(
			$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$expressionVisitor(visitor),
			A2(
				$jfmengels$elm_review$Review$Rule$withDeclarationListVisitor,
				$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$declarationListVisitor(visitor),
				rule));
	});
var $jfmengels$elm_review_unused$NoUnused$Patterns$rule = $jfmengels$elm_review$Review$Rule$fromModuleRuleSchema(
	$jfmengels$elm_review$Review$Rule$providesFixesForModuleRule(
		A2(
			$jfmengels$elm_review_unused$NoUnused$Patterns$NameVisitor$withValueVisitor,
			$jfmengels$elm_review_unused$NoUnused$Patterns$valueVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withCaseBranchExitVisitor,
				$jfmengels$elm_review_unused$NoUnused$Patterns$caseBranchExitVisitor,
				A2(
					$jfmengels$elm_review$Review$Rule$withCaseBranchEnterVisitor,
					$jfmengels$elm_review_unused$NoUnused$Patterns$caseBranchEnterVisitor,
					A2(
						$jfmengels$elm_review$Review$Rule$withExpressionExitVisitor,
						$jfmengels$elm_review_unused$NoUnused$Patterns$expressionExitVisitor,
						A2(
							$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
							$jfmengels$elm_review_unused$NoUnused$Patterns$expressionEnterVisitor,
							A2(
								$jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor,
								$jfmengels$elm_review_unused$NoUnused$Patterns$declarationEnterVisitor,
								A2($jfmengels$elm_review$Review$Rule$newModuleRuleSchema, 'NoUnused.Patterns', $jfmengels$elm_review_unused$NoUnused$Patterns$initialContext)))))))));
var $jfmengels$elm_review_unused$NoUnused$Variables$dependenciesVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$dependenciesVisitor$fn(dependencies, projectContext) {
		var customTypes = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (module_) {
					return _Utils_Tuple2(
						A2($elm$core$String$split, '.', module_.cH),
						$elm$core$Dict$fromList(
							A2(
								$elm$core$List$map,
								function (_v0) {
									var name = _v0.cH;
									var tags = _v0.ji;
									return _Utils_Tuple2(
										name,
										A2($elm$core$List$map, $elm$core$Tuple$first, tags));
								},
								module_.hW)));
				},
				A2(
					$elm$core$List$concatMap,
					$jfmengels$elm_review$Review$Project$Dependency$modules,
					$elm$core$Dict$values(dependencies))));
		return _Utils_Tuple2(
			_List_Nil,
			_Utils_update(
				projectContext,
				{fw: customTypes}));
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$elmJsonVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$elmJsonVisitor$fn(maybeElmJson, projectContext) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.o;
			},
			maybeElmJson);
		if (!_v0.$) {
			if (!_v0.a.$) {
				return _Utils_update(
					projectContext,
					{aI: true});
			} else {
				return _Utils_update(
					projectContext,
					{aI: false});
			}
		} else {
			return _Utils_update(
				projectContext,
				{aI: true});
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$foldProjectContexts = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$foldProjectContexts$fn(newProjectContext, previousProjectContext) {
		return {
			fw: A2($elm$core$Dict$union, newProjectContext.fw, previousProjectContext.fw),
			aI: previousProjectContext.aI
		};
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$fromModuleToProject = $jfmengels$elm_review$Review$Rule$withModuleName(
	$jfmengels$elm_review$Review$Rule$initContextCreator(
		F2(
			function (moduleName, moduleContext) {
				return {
					fw: A2(
						$elm$core$Dict$singleton,
						moduleName,
						A2(
							$elm$core$Dict$map,
							F2(
								function (_v0, customType) {
									return customType.fl;
								}),
							moduleContext.cF)),
					aI: true
				};
			})));
var $jfmengels$elm_review_unused$NoUnused$Variables$emptyScope = {dH: $elm$core$Dict$empty, cJ: $elm$core$Set$empty, bm: $elm$core$Dict$empty};
var $jfmengels$elm_review_unused$NoUnused$NonemptyList$Nonempty = F2(function $jfmengels$elm_review_unused$NoUnused$NonemptyList$Nonempty$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review_unused$NoUnused$NonemptyList$fromElement = function (x) {
	return A2($jfmengels$elm_review_unused$NoUnused$NonemptyList$Nonempty, x, _List_Nil);
};
var $jfmengels$elm_review_unused$NoUnused$Variables$fromProjectToModule = $jfmengels$elm_review$Review$Rule$withModuleNameLookupTable(
	$jfmengels$elm_review$Review$Rule$initContextCreator(
		F2(
			function (lookupTable, _v0) {
				var isApplication = _v0.aI;
				var customTypes = _v0.fw;
				return {
					bI: $elm$core$Dict$empty,
					fw: customTypes,
					c$: _List_Nil,
					eA: false,
					cf: _List_Nil,
					bR: $elm$core$Dict$empty,
					bS: _List_Nil,
					aI: isApplication,
					cF: $elm$core$Dict$empty,
					s: lookupTable,
					z: $jfmengels$elm_review_unused$NoUnused$NonemptyList$fromElement($jfmengels$elm_review_unused$NoUnused$Variables$emptyScope),
					bD: $elm$core$Dict$empty,
					cS: $elm$core$Set$empty
				};
			})));
var $jfmengels$elm_review_unused$NoUnused$Variables$initialContext = {fw: $elm$core$Dict$empty, aI: true};
var $jfmengels$elm_review_unused$NoUnused$NonemptyList$cons = F2(function $jfmengels$elm_review_unused$NoUnused$NonemptyList$cons$fn(y, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$jfmengels$elm_review_unused$NoUnused$NonemptyList$Nonempty,
			y,
			A2($elm$core$List$cons, x, xs));
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$getDeclaredParametersFromPatternHelp = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$getDeclaredParametersFromPatternHelp$fn(nodes, acc) {
		getDeclaredParametersFromPatternHelp:
		while (true) {
			if (nodes.b) {
				var _v1 = nodes.a;
				var node = _v1.b;
				var restOfNodes = nodes.b;
				switch (node.$) {
					case 14:
						var pattern = node.a;
						var $temp$nodes = A2($elm$core$List$cons, pattern, restOfNodes),
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue getDeclaredParametersFromPatternHelp;
					case 11:
						var name = node.a;
						var $temp$nodes = restOfNodes,
							$temp$acc = A2($elm$core$List$cons, name, acc);
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue getDeclaredParametersFromPatternHelp;
					case 13:
						var pattern = node.a;
						var _v3 = node.b;
						var asName = _v3.b;
						var $temp$nodes = A2($elm$core$List$cons, pattern, restOfNodes),
							$temp$acc = A2($elm$core$List$cons, asName, acc);
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue getDeclaredParametersFromPatternHelp;
					case 8:
						var fields = node.a;
						var $temp$nodes = restOfNodes,
							$temp$acc = _Utils_ap(
							A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, fields),
							acc);
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue getDeclaredParametersFromPatternHelp;
					case 7:
						var patterns = node.a;
						var $temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue getDeclaredParametersFromPatternHelp;
					case 12:
						var patterns = node.b;
						var $temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue getDeclaredParametersFromPatternHelp;
					case 9:
						var left = node.a;
						var right = node.b;
						var $temp$nodes = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfNodes)),
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue getDeclaredParametersFromPatternHelp;
					case 10:
						var patterns = node.a;
						var $temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue getDeclaredParametersFromPatternHelp;
					default:
						var $temp$nodes = restOfNodes,
							$temp$acc = acc;
						nodes = $temp$nodes;
						acc = $temp$acc;
						continue getDeclaredParametersFromPatternHelp;
				}
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$getDeclaredParametersFromPattern = function (node) {
	return A2(
		$jfmengels$elm_review_unused$NoUnused$Variables$getDeclaredParametersFromPatternHelp,
		_List_fromArray(
			[node]),
		_List_Nil);
};
var $jfmengels$elm_review_unused$NoUnused$Variables$caseBranchEnterVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$caseBranchEnterVisitor$fn(_v0, context) {
		var pattern = _v0.a;
		return _Utils_update(
			context,
			{
				z: A2(
					$jfmengels$elm_review_unused$NoUnused$NonemptyList$cons,
					{
						dH: $elm$core$Dict$empty,
						cJ: $elm$core$Set$fromList(
							$jfmengels$elm_review_unused$NoUnused$Variables$getDeclaredParametersFromPattern(pattern)),
						bm: $elm$core$Dict$empty
					},
					context.z)
			});
	});
var $jfmengels$elm_review_unused$NoUnused$NonemptyList$head = function (_v0) {
	var x = _v0.a;
	return x;
};
var $jfmengels$elm_review_unused$NoUnused$Variables$details = _List_fromArray(
	['You should either use this value somewhere, or remove it at the location I pointed at.']);
var $jfmengels$elm_review_unused$NoUnused$Variables$error = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$error$fn(variableInfo, name) {
		return A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{eq: $jfmengels$elm_review_unused$NoUnused$Variables$details, bx: variableInfo.jl + (' `' + (name + ('` is not used' + variableInfo.bo)))},
			variableInfo.bl,
			function () {
				var _v0 = variableInfo.e5;
				if (!_v0.$) {
					var rangeToRemove = _v0.a;
					return _List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(rangeToRemove)
						]);
				} else {
					return _List_Nil;
				}
			}());
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$makeReportHelp = function (_v0) {
	var declared = _v0.dH;
	var used = _v0.bm;
	var namesToIgnore = _v0.cJ;
	var usedLocally = A2(
		$elm$core$Maybe$withDefault,
		$elm$core$Set$empty,
		A2($elm$core$Dict$get, _List_Nil, used));
	var nonUsedVars = $elm$core$Set$toList(
		function (set) {
			return A2($elm$core$Set$diff, set, namesToIgnore);
		}(
			A2(
				$elm$core$Set$diff,
				usedLocally,
				$elm$core$Set$fromList(
					$elm$core$Dict$keys(declared)))));
	var errors = A3(
		$elm$core$Dict$foldl,
		F3(
			function (key, variableInfo, acc) {
				return (!A2($elm$core$Set$member, key, usedLocally)) ? A2(
					$elm$core$List$cons,
					A2($jfmengels$elm_review_unused$NoUnused$Variables$error, variableInfo, key),
					acc) : acc;
			}),
		_List_Nil,
		declared);
	return _Utils_Tuple2(errors, nonUsedVars);
};
var $jfmengels$elm_review_unused$NoUnused$NonemptyList$mapHead = F2(function $jfmengels$elm_review_unused$NoUnused$NonemptyList$mapHead$fn(fn, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$jfmengels$elm_review_unused$NoUnused$NonemptyList$Nonempty,
			fn(x),
			xs);
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$markAsUsed = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$markAsUsed$fn(name, context) {
		if (A2($elm$core$List$member, name, context.bS)) {
			return context;
		} else {
			var scopes = A2(
				$jfmengels$elm_review_unused$NoUnused$NonemptyList$mapHead,
				function (scope) {
					return _Utils_update(
						scope,
						{
							bm: A3(
								$elm$core$Dict$update,
								_List_Nil,
								function (set) {
									return $elm$core$Maybe$Just(
										A2(
											$elm$core$Set$insert,
											name,
											A2($elm$core$Maybe$withDefault, $elm$core$Set$empty, set)));
								},
								scope.bm)
						});
				},
				context.z);
			return _Utils_update(
				context,
				{z: scopes});
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$markAllAsUsed = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$markAllAsUsed$fn(names, context) {
		return A3($elm$core$List$foldl, $jfmengels$elm_review_unused$NoUnused$Variables$markAsUsed, context, names);
	});
var $jfmengels$elm_review_unused$NoUnused$NonemptyList$pop = function (_v0) {
	var x = _v0.a;
	var xs = _v0.b;
	if (!xs.b) {
		return A2($jfmengels$elm_review_unused$NoUnused$NonemptyList$Nonempty, x, xs);
	} else {
		var y = xs.a;
		var ys = xs.b;
		return A2($jfmengels$elm_review_unused$NoUnused$NonemptyList$Nonempty, y, ys);
	}
};
var $jfmengels$elm_review_unused$NoUnused$Variables$makeReport = function (context) {
	var contextWithPoppedScope = _Utils_update(
		context,
		{
			z: $jfmengels$elm_review_unused$NoUnused$NonemptyList$pop(context.z)
		});
	var _v0 = $jfmengels$elm_review_unused$NoUnused$Variables$makeReportHelp(
		$jfmengels$elm_review_unused$NoUnused$NonemptyList$head(context.z));
	var errors = _v0.a;
	var remainingUsed = _v0.b;
	return _Utils_Tuple2(
		errors,
		A2($jfmengels$elm_review_unused$NoUnused$Variables$markAllAsUsed, remainingUsed, contextWithPoppedScope));
};
var $jfmengels$elm_review_unused$NoUnused$Variables$caseBranchExitVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Variables$caseBranchExitVisitor$fn(_v0, _v1, context) {
		return $jfmengels$elm_review_unused$NoUnused$Variables$makeReport(context);
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$markModuleAsUsed = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$markModuleAsUsed$fn(realAndAliasModuleNames, context) {
		var realModuleName = realAndAliasModuleNames.a;
		var aliasName = realAndAliasModuleNames.b;
		return _Utils_update(
			context,
			{
				cf: A2(
					$elm$core$List$map,
					function (module_) {
						return _Utils_eq(module_.cH, realModuleName) ? ((_Utils_eq(module_.cH, aliasName) || _Utils_eq(
							$elm$core$Maybe$Just(
								A2($elm$core$String$join, '.', aliasName)),
							module_.U)) ? _Utils_update(
							module_,
							{fn: true}) : (_Utils_eq(aliasName, _List_Nil) ? _Utils_update(
							module_,
							{fm: true}) : module_)) : module_;
					},
					context.cf),
				cS: A2($elm$core$Set$insert, realAndAliasModuleNames, context.cS)
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$collectNamesFromTypeAnnotation = F3(function $jfmengels$elm_review_unused$NoUnused$Variables$collectNamesFromTypeAnnotation$fn(exception, nodes, context) {
		collectNamesFromTypeAnnotation:
		while (true) {
			if (!nodes.b) {
				return context;
			} else {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				switch (_v1.$) {
					case 6:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$exception = exception,
							$temp$nodes = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfNodes)),
							$temp$context = context;
						exception = $temp$exception;
						nodes = $temp$nodes;
						context = $temp$context;
						continue collectNamesFromTypeAnnotation;
					case 1:
						var _v2 = _v1.a;
						var typeRange = _v2.a;
						var _v3 = _v2.b;
						var rawModuleName = _v3.a;
						var typeName = _v3.b;
						var params = _v1.b;
						var contextAfterTypeUsage = function () {
							if (!_Utils_eq(
								$elm$core$Maybe$Just(typeName),
								exception)) {
								if (!rawModuleName.b) {
									return A2($jfmengels$elm_review_unused$NoUnused$Variables$markAsUsed, typeName, context);
								} else {
									return context;
								}
							} else {
								return context;
							}
						}();
						var contextAfterModuleUsage = function () {
							var _v4 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, context.s, typeRange);
							if (!_v4.$) {
								var realModuleName = _v4.a;
								return A2(
									$jfmengels$elm_review_unused$NoUnused$Variables$markModuleAsUsed,
									_Utils_Tuple2(realModuleName, rawModuleName),
									contextAfterTypeUsage);
							} else {
								return contextAfterTypeUsage;
							}
						}();
						var $temp$exception = exception,
							$temp$nodes = _Utils_ap(params, restOfNodes),
							$temp$context = contextAfterModuleUsage;
						exception = $temp$exception;
						nodes = $temp$nodes;
						context = $temp$context;
						continue collectNamesFromTypeAnnotation;
					case 4:
						var fields = _v1.a;
						var subNodes = A2(
							$elm$core$List$map,
							function (_v6) {
								var _v7 = _v6.b;
								var value = _v7.b;
								return value;
							},
							fields);
						var $temp$exception = exception,
							$temp$nodes = _Utils_ap(subNodes, restOfNodes),
							$temp$context = context;
						exception = $temp$exception;
						nodes = $temp$nodes;
						context = $temp$context;
						continue collectNamesFromTypeAnnotation;
					case 5:
						var _v8 = _v1.b;
						var fields = _v8.b;
						var subNodes = A2(
							$elm$core$List$map,
							function (_v9) {
								var _v10 = _v9.b;
								var value = _v10.b;
								return value;
							},
							fields);
						var $temp$exception = exception,
							$temp$nodes = _Utils_ap(subNodes, restOfNodes),
							$temp$context = context;
						exception = $temp$exception;
						nodes = $temp$nodes;
						context = $temp$context;
						continue collectNamesFromTypeAnnotation;
					case 3:
						var list = _v1.a;
						var $temp$exception = exception,
							$temp$nodes = _Utils_ap(list, restOfNodes),
							$temp$context = context;
						exception = $temp$exception;
						nodes = $temp$nodes;
						context = $temp$context;
						continue collectNamesFromTypeAnnotation;
					default:
						var $temp$exception = exception,
							$temp$nodes = restOfNodes,
							$temp$context = context;
						exception = $temp$exception;
						nodes = $temp$nodes;
						context = $temp$context;
						continue collectNamesFromTypeAnnotation;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed$fn(name, context) {
		if (A2($elm$core$Dict$member, name, context.bI)) {
			return A2($jfmengels$elm_review_unused$NoUnused$Variables$markAsUsed, name, context);
		} else {
			var _v0 = A2($elm$core$Dict$get, name, context.bR);
			if (!_v0.$) {
				var customTypeName = _v0.a;
				return _Utils_update(
					context,
					{
						bD: A2($elm$core$Dict$remove, customTypeName, context.bD)
					});
			} else {
				return A2($jfmengels$elm_review_unused$NoUnused$Variables$markAsUsed, name, context);
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$markValuesFromPatternsAsUsed = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$markValuesFromPatternsAsUsed$fn(nodes, context) {
		markValuesFromPatternsAsUsed:
		while (true) {
			if (!nodes.b) {
				return context;
			} else {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				switch (_v1.$) {
					case 7:
						var patterns = _v1.a;
						var $temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$context = context;
						nodes = $temp$nodes;
						context = $temp$context;
						continue markValuesFromPatternsAsUsed;
					case 9:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$nodes = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfNodes)),
							$temp$context = context;
						nodes = $temp$nodes;
						context = $temp$context;
						continue markValuesFromPatternsAsUsed;
					case 10:
						var patterns = _v1.a;
						var $temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$context = context;
						nodes = $temp$nodes;
						context = $temp$context;
						continue markValuesFromPatternsAsUsed;
					case 12:
						var qualifiedNameRef = _v1.a;
						var patterns = _v1.b;
						var contextAfterTypeUsage = function () {
							var _v3 = qualifiedNameRef.eY;
							if (!_v3.b) {
								var name = A2(
									$elm$core$Maybe$withDefault,
									qualifiedNameRef.cH,
									A2($elm$core$Dict$get, qualifiedNameRef.cH, context.bI));
								return A2($jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed, name, context);
							} else {
								return context;
							}
						}();
						var contextAfterModuleUsage = function () {
							var _v2 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, context.s, node);
							if (!_v2.$) {
								var realModuleName = _v2.a;
								return A2(
									$jfmengels$elm_review_unused$NoUnused$Variables$markModuleAsUsed,
									_Utils_Tuple2(realModuleName, qualifiedNameRef.eY),
									contextAfterTypeUsage);
							} else {
								return contextAfterTypeUsage;
							}
						}();
						var $temp$nodes = _Utils_ap(patterns, restOfNodes),
							$temp$context = contextAfterModuleUsage;
						nodes = $temp$nodes;
						context = $temp$context;
						continue markValuesFromPatternsAsUsed;
					case 13:
						var pattern = _v1.a;
						var $temp$nodes = A2($elm$core$List$cons, pattern, restOfNodes),
							$temp$context = context;
						nodes = $temp$nodes;
						context = $temp$context;
						continue markValuesFromPatternsAsUsed;
					case 14:
						var pattern = _v1.a;
						var $temp$nodes = A2($elm$core$List$cons, pattern, restOfNodes),
							$temp$context = context;
						nodes = $temp$nodes;
						context = $temp$context;
						continue markValuesFromPatternsAsUsed;
					default:
						var $temp$nodes = restOfNodes,
							$temp$context = context;
						nodes = $temp$nodes;
						context = $temp$context;
						continue markValuesFromPatternsAsUsed;
				}
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$registerVariable = F3(function $jfmengels$elm_review_unused$NoUnused$Variables$registerVariable$fn(variableInfo, name, context) {
		var scopes = A2(
			$jfmengels$elm_review_unused$NoUnused$NonemptyList$mapHead,
			function (scope) {
				return _Utils_update(
					scope,
					{
						dH: A3($elm$core$Dict$insert, name, variableInfo, scope.dH)
					});
			},
			context.z);
		return _Utils_update(
			context,
			{z: scopes});
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$scopeWithPatternsToIgnore = function (patterns) {
	return {
		dH: $elm$core$Dict$empty,
		cJ: $elm$core$Set$fromList(
			A2($elm$core$List$concatMap, $jfmengels$elm_review_unused$NoUnused$Variables$getDeclaredParametersFromPattern, patterns)),
		bm: $elm$core$Dict$empty
	};
};
var $jfmengels$elm_review_unused$NoUnused$Variables$untilStartOfNextLine = function (range) {
	return (range.c4.bH === 1) ? range : _Utils_update(
		range,
		{
			c4: {bH: 1, b1: range.c4.b1 + 1}
		});
};
var $jfmengels$elm_review_unused$NoUnused$Variables$declarationEnterVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$declarationEnterVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 0:
				var _function = _v0.a;
				var typeAnnotation = function () {
					var _v2 = _function.i7;
					if (!_v2.$) {
						var signature = _v2.a;
						return _List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Syntax$Node$value(signature).hV
							]);
					} else {
						return _List_Nil;
					}
				}();
				var functionImplementation = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii);
				var functionName = $stil4m$elm_syntax$Elm$Syntax$Node$value(functionImplementation.cH);
				var shadowingImportError = function () {
					var _v1 = A2(
						$elm$core$Dict$get,
						functionName,
						$jfmengels$elm_review_unused$NoUnused$NonemptyList$head(context.z).dH);
					if (!_v1.$) {
						var existingVariable = _v1.a;
						return (existingVariable.jl === 'Imported variable') ? _List_fromArray(
							[
								A2($jfmengels$elm_review_unused$NoUnused$Variables$error, existingVariable, functionName)
							]) : _List_Nil;
					} else {
						return _List_Nil;
					}
				}();
				var newContextWhereFunctionIsRegistered = (context.eA || (context.aI && (functionName === 'main'))) ? context : A3(
					$jfmengels$elm_review_unused$NoUnused$Variables$registerVariable,
					{
						e5: $elm$core$Maybe$Just(
							$jfmengels$elm_review_unused$NoUnused$Variables$untilStartOfNextLine(
								$stil4m$elm_syntax$Elm$Syntax$Node$range(node))),
						jl: 'Top-level variable',
						bl: $stil4m$elm_syntax$Elm$Syntax$Node$range(functionImplementation.cH),
						bo: ''
					},
					functionName,
					context);
				var newContext = A3(
					$jfmengels$elm_review_unused$NoUnused$Variables$collectNamesFromTypeAnnotation,
					$elm$core$Maybe$Nothing,
					typeAnnotation,
					A2(
						$jfmengels$elm_review_unused$NoUnused$Variables$markValuesFromPatternsAsUsed,
						$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).gs,
						_Utils_update(
							newContextWhereFunctionIsRegistered,
							{
								bS: _List_fromArray(
									[functionName]),
								z: A2(
									$jfmengels$elm_review_unused$NoUnused$NonemptyList$cons,
									$jfmengels$elm_review_unused$NoUnused$Variables$scopeWithPatternsToIgnore(functionImplementation.gs),
									newContextWhereFunctionIsRegistered.z)
							})));
				return _Utils_Tuple2(shadowingImportError, newContext);
			case 2:
				var name = _v0.a.cH;
				var constructors = _v0.a.ig;
				var _arguments = A2(
					$elm$core$List$concatMap,
					A2(
						$elm$core$Basics$composeR,
						$stil4m$elm_syntax$Elm$Syntax$Node$value,
						function ($) {
							return $.gs;
						}),
					constructors);
				return _Utils_Tuple2(
					_List_Nil,
					A3(
						$jfmengels$elm_review_unused$NoUnused$Variables$collectNamesFromTypeAnnotation,
						$elm$core$Maybe$Just(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(name)),
						_arguments,
						context));
			case 1:
				var typeAnnotation = _v0.a.hV;
				return _Utils_Tuple2(
					_List_Nil,
					A3(
						$jfmengels$elm_review_unused$NoUnused$Variables$collectNamesFromTypeAnnotation,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[typeAnnotation]),
						context));
			case 3:
				var name = _v0.a.cH;
				var typeAnnotation = _v0.a.hV;
				var contextWithUsedElements = A3(
					$jfmengels$elm_review_unused$NoUnused$Variables$collectNamesFromTypeAnnotation,
					$elm$core$Maybe$Nothing,
					_List_fromArray(
						[typeAnnotation]),
					context);
				return _Utils_Tuple2(
					_List_Nil,
					context.eA ? contextWithUsedElements : A3(
						$jfmengels$elm_review_unused$NoUnused$Variables$registerVariable,
						{
							e5: $elm$core$Maybe$Nothing,
							jl: 'Port',
							bl: $stil4m$elm_syntax$Elm$Syntax$Node$range(name),
							bo: ' (Warning: Removing this port may break your application if it is used in the JS code)'
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
						contextWithUsedElements));
			case 4:
				var operator = _v0.a.iV;
				var _function = _v0.a.ix;
				return _Utils_Tuple2(
					_List_Nil,
					A3(
						$jfmengels$elm_review_unused$NoUnused$Variables$registerVariable,
						{
							e5: $elm$core$Maybe$Just(
								$stil4m$elm_syntax$Elm$Syntax$Node$range(node)),
							jl: 'Declared operator',
							bl: $stil4m$elm_syntax$Elm$Syntax$Node$range(operator),
							bo: ''
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$value(operator),
						A2(
							$jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(_function),
							context)));
			default:
				return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$declarationExitVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$declarationExitVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (!_v0.$) {
			return $jfmengels$elm_review_unused$NoUnused$Variables$makeReport(context);
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$CustomTypeKind = 0;
var $jfmengels$elm_review_unused$NoUnused$Variables$registerCustomType = F3(function $jfmengels$elm_review_unused$NoUnused$Variables$registerCustomType$fn(range, _v0, context) {
		var name = _v0.cH;
		var constructors = _v0.ig;
		var typeName = $stil4m$elm_syntax$Elm$Syntax$Node$value(name);
		var constructorNames = A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$stil4m$elm_syntax$Elm$Syntax$Node$value,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.cH;
					},
					$stil4m$elm_syntax$Elm$Syntax$Node$value)),
			constructors);
		var customType = {
			cB: 0,
			e5: $jfmengels$elm_review_unused$NoUnused$Variables$untilStartOfNextLine(range),
			bl: $stil4m$elm_syntax$Elm$Syntax$Node$range(name),
			fl: constructorNames
		};
		var constructorNameToTypeName = A3(
			$elm$core$List$foldl,
			F2(
				function (constructorName, acc) {
					return A3($elm$core$Dict$insert, constructorName, typeName, acc);
				}),
			context.bI,
			constructorNames);
		return _Utils_update(
			context,
			{
				bI: constructorNameToTypeName,
				cF: A3(
					$elm$core$Dict$insert,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
					customType,
					context.cF)
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$TypeAliasKind = 1;
var $jfmengels$elm_review_unused$NoUnused$Variables$registerTypeAlias = F3(function $jfmengels$elm_review_unused$NoUnused$Variables$registerTypeAlias$fn(range, _v0, context) {
		var name = _v0.cH;
		var typeAnnotation = _v0.hV;
		var newContext = function () {
			var _v3 = $stil4m$elm_syntax$Elm$Syntax$Node$value(typeAnnotation);
			if (_v3.$ === 4) {
				return _Utils_update(
					context,
					{
						bR: A2(
							$elm$core$Dict$remove,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
							context.bR)
					});
			} else {
				return context;
			}
		}();
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(typeAnnotation);
		if (_v1.$ === 4) {
			return context.eA ? newContext : A3(
				$jfmengels$elm_review_unused$NoUnused$Variables$registerVariable,
				{
					e5: $elm$core$Maybe$Just(
						$jfmengels$elm_review_unused$NoUnused$Variables$untilStartOfNextLine(range)),
					jl: 'Type',
					bl: $stil4m$elm_syntax$Elm$Syntax$Node$range(name),
					bo: ''
				},
				$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
				newContext);
		} else {
			var typeAlias = {
				cB: 1,
				e5: $jfmengels$elm_review_unused$NoUnused$Variables$untilStartOfNextLine(range),
				bl: $stil4m$elm_syntax$Elm$Syntax$Node$range(name),
				fl: function () {
					var _v2 = $stil4m$elm_syntax$Elm$Syntax$Node$value(typeAnnotation);
					if (_v2.$ === 4) {
						return _List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Syntax$Node$value(name)
							]);
					} else {
						return _List_Nil;
					}
				}()
			};
			var localCustomTypes = A3(
				$elm$core$Dict$insert,
				$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
				typeAlias,
				newContext.cF);
			return _Utils_update(
				newContext,
				{cF: localCustomTypes});
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$registerTypes = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$registerTypes$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 2:
				var customType = _v0.a;
				return A3(
					$jfmengels$elm_review_unused$NoUnused$Variables$registerCustomType,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					customType,
					context);
			case 1:
				var typeAliasDeclaration = _v0.a;
				return A3(
					$jfmengels$elm_review_unused$NoUnused$Variables$registerTypeAlias,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					typeAliasDeclaration,
					context);
			default:
				return context;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$declarationListVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$declarationListVisitor$fn(nodes, context) {
		return A3($elm$core$List$foldl, $jfmengels$elm_review_unused$NoUnused$Variables$registerTypes, context, nodes);
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$expressionEnterVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$expressionEnterVisitor$fn(_v0, context) {
		var range = _v0.a;
		var value = _v0.b;
		switch (value.$) {
			case 3:
				if (!value.a.b) {
					var name = value.b;
					var _v2 = A2($elm$core$Dict$get, name, context.bI);
					if (!_v2.$) {
						var typeName = _v2.a;
						return A2($jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed, typeName, context);
					} else {
						var _v3 = A2($elm$core$Dict$get, name, context.bR);
						if (!_v3.$) {
							var customTypeName = _v3.a;
							return _Utils_update(
								context,
								{
									bD: A2($elm$core$Dict$remove, customTypeName, context.bD)
								});
						} else {
							var _v4 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, context.s, range);
							if (!_v4.$) {
								var realModuleName = _v4.a;
								return A2(
									$jfmengels$elm_review_unused$NoUnused$Variables$markModuleAsUsed,
									_Utils_Tuple2(realModuleName, _List_Nil),
									A2($jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed, name, context));
							} else {
								return A2($jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed, name, context);
							}
						}
					}
				} else {
					var moduleName = value.a;
					var _v5 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, context.s, range);
					if (!_v5.$) {
						var realModuleName = _v5.a;
						return A2(
							$jfmengels$elm_review_unused$NoUnused$Variables$markModuleAsUsed,
							_Utils_Tuple2(realModuleName, moduleName),
							context);
					} else {
						return context;
					}
				}
			case 2:
				var name = value.a;
				return A2($jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed, name, context);
			case 5:
				var name = value.a;
				return A2($jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed, name, context);
			case 22:
				var expr = value.a;
				return A2(
					$jfmengels$elm_review_unused$NoUnused$Variables$markValueAsUsed,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(expr),
					context);
			case 17:
				var args = value.a.h0;
				return A2(
					$jfmengels$elm_review_unused$NoUnused$Variables$markValuesFromPatternsAsUsed,
					args,
					_Utils_update(
						context,
						{
							z: A2(
								$jfmengels$elm_review_unused$NoUnused$NonemptyList$cons,
								$jfmengels$elm_review_unused$NoUnused$Variables$scopeWithPatternsToIgnore(args),
								context.z)
						}));
			case 16:
				var cases = value.a.ia;
				return A2(
					$jfmengels$elm_review_unused$NoUnused$Variables$markValuesFromPatternsAsUsed,
					A2(
						$elm$core$List$map,
						function (_v6) {
							var patternNode = _v6.a;
							return patternNode;
						},
						cases),
					context);
			case 15:
				return _Utils_update(
					context,
					{
						z: A2(
							$jfmengels$elm_review_unused$NoUnused$NonemptyList$cons,
							{dH: $elm$core$Dict$empty, cJ: $elm$core$Set$empty, bm: $elm$core$Dict$empty},
							context.z)
					});
			default:
				return context;
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$expressionExitVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$expressionExitVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 15:
				return $jfmengels$elm_review_unused$NoUnused$Variables$makeReport(context);
			case 17:
				return $jfmengels$elm_review_unused$NoUnused$Variables$makeReport(context);
			default:
				return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$errorForLocalType = function (_v0) {
	var name = _v0.a;
	var type_ = _v0.b;
	var kind = function () {
		var _v1 = type_.cB;
		if (!_v1) {
			return 'Type';
		} else {
			return 'Type alias';
		}
	}();
	return A3(
		$jfmengels$elm_review$Review$Rule$errorWithFix,
		{eq: $jfmengels$elm_review_unused$NoUnused$Variables$details, bx: kind + (' `' + (name + '` is not used'))},
		type_.bl,
		_List_fromArray(
			[
				$jfmengels$elm_review$Review$Fix$removeRange(type_.e5)
			]));
};
var $jfmengels$elm_review_unused$NoUnused$Variables$getModuleName = function (name) {
	return A2($elm$core$String$join, '.', name);
};
var $jfmengels$elm_review_unused$NoUnused$Variables$finalEvaluation = function (context) {
	var rootScope = $jfmengels$elm_review_unused$NoUnused$NonemptyList$head(context.z);
	var usedLocally = A2(
		$elm$core$Maybe$withDefault,
		$elm$core$Set$empty,
		A2($elm$core$Dict$get, _List_Nil, rootScope.bm));
	var namesOfCustomTypesUsedByCallingAConstructor = $elm$core$Set$fromList(
		$elm$core$Dict$values(
			A2(
				$elm$core$Dict$filter,
				F2(
					function (usedName, _v6) {
						return A2(
							$elm$core$Set$member,
							usedName,
							A2(
								$elm$core$Maybe$withDefault,
								$elm$core$Set$empty,
								A2($elm$core$Dict$get, _List_Nil, rootScope.bm)));
					}),
				context.bI)));
	var newRootScope = _Utils_update(
		rootScope,
		{
			bm: A3(
				$elm$core$Dict$update,
				_List_Nil,
				function (set) {
					return $elm$core$Maybe$Just(
						A2(
							$elm$core$Set$union,
							namesOfCustomTypesUsedByCallingAConstructor,
							A2($elm$core$Maybe$withDefault, $elm$core$Set$empty, set)));
				},
				rootScope.bm)
		});
	var moduleThatExposeEverythingErrors = A2(
		$elm$core$List$map,
		function (module_) {
			var importRange = module_.fQ;
			var exposingRange = module_.fF;
			return (!module_.fm) ? (module_.fn ? _Utils_Tuple2(
				$elm$core$Maybe$Just(
					A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: $jfmengels$elm_review_unused$NoUnused$Variables$details,
							bx: 'No imported elements from `' + (A2($elm$core$String$join, '.', module_.cH) + '` are used')
						},
						exposingRange,
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(exposingRange)
							]))),
				$elm$core$Maybe$Nothing) : _Utils_Tuple2(
				$elm$core$Maybe$Just(
					A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: $jfmengels$elm_review_unused$NoUnused$Variables$details,
							bx: 'Imported module `' + (A2($elm$core$String$join, '.', module_.cH) + '` is not used')
						},
						module_.fZ,
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								_Utils_update(
									importRange,
									{
										c4: {bH: 1, b1: importRange.c4.b1 + 1}
									}))
							]))),
				A2(
					$elm$core$Maybe$map,
					function (alias) {
						return _Utils_Tuple2(
							module_.cH,
							_List_fromArray(
								[alias]));
					},
					module_.U))) : _Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
		},
		context.cf);
	var usedModules = A2(
		$elm$core$Set$union,
		$elm$core$Set$fromList(
			A2($elm$core$List$filterMap, $elm$core$Tuple$second, moduleThatExposeEverythingErrors)),
		context.cS);
	var moduleNamesInUse = $elm$core$Set$fromList(
		A2(
			$elm$core$List$map,
			function (_v5) {
				var alias = _v5.U;
				var moduleName = _v5.eY;
				return A2(
					$elm$core$Maybe$withDefault,
					$jfmengels$elm_review_unused$NoUnused$Variables$getModuleName(moduleName),
					alias);
			},
			context.c$));
	var moduleErrors = A2(
		$elm$core$List$map,
		function (variableInfo) {
			var name = function () {
				var _v4 = variableInfo.U;
				if (!_v4.$) {
					var alias = _v4.a;
					return alias;
				} else {
					return $jfmengels$elm_review_unused$NoUnused$Variables$getModuleName(variableInfo.eY);
				}
			}();
			var fix = function () {
				var _v3 = variableInfo.bF;
				if (!_v3.$) {
					return _List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(variableInfo.e5)
						]);
				} else {
					var originalNameOfTheImport = _v3.a.hq;
					var exposesSomething = _v3.a.gS;
					return ((!exposesSomething) || (!A2($elm$core$Set$member, originalNameOfTheImport, moduleNamesInUse))) ? _List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(variableInfo.e5)
						]) : _List_Nil;
				}
			}();
			return A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{eq: $jfmengels$elm_review_unused$NoUnused$Variables$details, bx: variableInfo.jl + (' `' + (name + '` is not used'))},
				variableInfo.bl,
				fix);
		},
		A2(
			$elm$core$List$filter,
			function (variableInfo) {
				return !function () {
					var _v2 = variableInfo.U;
					if (!_v2.$) {
						var alias = _v2.a;
						return A2(
							$elm$core$Set$member,
							_Utils_Tuple2(
								variableInfo.eY,
								_List_fromArray(
									[alias])),
							usedModules);
					} else {
						return A2(
							$elm$core$Set$member,
							_Utils_Tuple2(variableInfo.eY, variableInfo.eY),
							usedModules);
					}
				}();
			},
			context.c$));
	var importedTypeErrors = A2(
		$elm$core$List$map,
		function (_v1) {
			var name = _v1.a;
			var under = _v1.b.bl;
			var rangeToRemove = _v1.b.e5;
			var openRange = _v1.b.f0;
			return (A2($elm$core$Set$member, name, usedLocally) && (!A2($elm$core$Dict$member, name, context.cF))) ? A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{eq: $jfmengels$elm_review_unused$NoUnused$Variables$details, bx: 'Imported constructors for `' + (name + '` are not used')},
				under,
				_List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(openRange)
					])) : A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{eq: $jfmengels$elm_review_unused$NoUnused$Variables$details, bx: 'Imported type `' + (name + '` is not used')},
				under,
				_List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(rangeToRemove)
					]));
		},
		$elm$core$Dict$toList(context.bD));
	var customTypeErrors = context.eA ? _List_Nil : A2(
		$elm$core$List$map,
		$jfmengels$elm_review_unused$NoUnused$Variables$errorForLocalType,
		A2(
			$elm$core$List$filter,
			function (_v0) {
				var name = _v0.a;
				return !A2($elm$core$Set$member, name, usedLocally);
			},
			$elm$core$Dict$toList(context.cF)));
	return $elm$core$List$concat(
		_List_fromArray(
			[
				$jfmengels$elm_review_unused$NoUnused$Variables$makeReportHelp(newRootScope).a,
				importedTypeErrors,
				moduleErrors,
				A2($elm$core$List$filterMap, $elm$core$Tuple$first, moduleThatExposeEverythingErrors),
				customTypeErrors
			]));
};
var $jfmengels$elm_review_unused$NoUnused$Variables$CustomType = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$CustomType$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$TypeOrValue = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$TypeOrValue$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$List$map3 = _List_map3;
var $jfmengels$elm_review_unused$NoUnused$Variables$untilEndOfVariable = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$untilEndOfVariable$fn(name, range) {
		return _Utils_eq(range.dv.b1, range.c4.b1) ? range : _Utils_update(
			range,
			{
				c4: {
					bH: range.dv.bH + $elm$core$String$length(name),
					b1: range.dv.b1
				}
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$collectExplicitlyExposedElements = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$collectExplicitlyExposedElements$fn(exposingNodeRange, list) {
		var listWithPreviousRange = A2(
			$elm$core$List$cons,
			$elm$core$Maybe$Nothing,
			A2(
				$elm$core$List$take,
				$elm$core$List$length(list) - 1,
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$range, $elm$core$Maybe$Just),
					list)));
		var listWithNextRange = _Utils_ap(
			A2(
				$elm$core$List$drop,
				1,
				A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, list)),
			_List_fromArray(
				[
					{
					c4: {bH: 0, b1: 0},
					dv: {bH: 0, b1: 0}
				}
				]));
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (index, _v0) {
						var maybePreviousRange = _v0.a;
						var _v1 = _v0.b;
						var range = _v1.a;
						var value = _v1.b;
						var nextRange = _v0.c;
						var rangeToRemove = function () {
							if ($elm$core$List$length(list) === 1) {
								return exposingNodeRange;
							} else {
								if (!index) {
									return _Utils_update(
										range,
										{c4: nextRange.dv});
								} else {
									if (maybePreviousRange.$ === 1) {
										return range;
									} else {
										var previousRange = maybePreviousRange.a;
										return _Utils_update(
											range,
											{dv: previousRange.c4});
									}
								}
							}
						}();
						switch (value.$) {
							case 1:
								var name = value.a;
								return $elm$core$Maybe$Just(
									A2(
										$jfmengels$elm_review_unused$NoUnused$Variables$TypeOrValue,
										name,
										{
											e5: $elm$core$Maybe$Just(rangeToRemove),
											jl: 'Imported variable',
											bl: A2($jfmengels$elm_review_unused$NoUnused$Variables$untilEndOfVariable, name, range),
											bo: ''
										}));
							case 0:
								var name = value.a;
								return $elm$core$Maybe$Just(
									A2(
										$jfmengels$elm_review_unused$NoUnused$Variables$TypeOrValue,
										name,
										{
											e5: $elm$core$Maybe$Just(rangeToRemove),
											jl: 'Imported operator',
											bl: A2($jfmengels$elm_review_unused$NoUnused$Variables$untilEndOfVariable, name, range),
											bo: ''
										}));
							case 2:
								var name = value.a;
								return $elm$core$Maybe$Just(
									A2(
										$jfmengels$elm_review_unused$NoUnused$Variables$TypeOrValue,
										name,
										{
											e5: $elm$core$Maybe$Just(rangeToRemove),
											jl: 'Imported type',
											bl: A2($jfmengels$elm_review_unused$NoUnused$Variables$untilEndOfVariable, name, range),
											bo: ''
										}));
							default:
								var name = value.a.cH;
								var open = value.a.iU;
								if (!open.$) {
									var openRange = open.a;
									return $elm$core$Maybe$Just(
										A2(
											$jfmengels$elm_review_unused$NoUnused$Variables$CustomType,
											name,
											{f0: openRange, e5: rangeToRemove, jl: 'Imported type', bl: range}));
								} else {
									return $elm$core$Maybe$Nothing;
								}
						}
					}),
				A4(
					$elm$core$List$map3,
					F3(
						function (prev, next, current) {
							return _Utils_Tuple3(prev, current, next);
						}),
					listWithPreviousRange,
					listWithNextRange,
					list)));
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$registerExposedElements = F3(function $jfmengels$elm_review_unused$NoUnused$Variables$registerExposedElements$fn(customTypesFromModule, importedElement, context) {
		if (!importedElement.$) {
			var name = importedElement.a;
			var variableInfo = importedElement.b;
			var _v1 = A2($elm$core$Dict$get, name, customTypesFromModule);
			if (!_v1.$) {
				var constructorNames = _v1.a;
				return _Utils_update(
					context,
					{
						bR: A2(
							$elm$core$Dict$union,
							$elm$core$Dict$fromList(
								A2(
									$elm$core$List$map,
									function (constructorName) {
										return _Utils_Tuple2(constructorName, name);
									},
									constructorNames)),
							context.bR),
						bD: A3($elm$core$Dict$insert, name, variableInfo, context.bD)
					});
			} else {
				return context;
			}
		} else {
			var name = importedElement.a;
			var variableInfo = importedElement.b;
			return A3($jfmengels$elm_review_unused$NoUnused$Variables$registerVariable, variableInfo, name, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$handleExposedElements = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$handleExposedElements$fn(declared, customTypesFromModule) {
		return F2(
			function (importedElement, _v0) {
				var errors = _v0.a;
				var context = _v0.b;
				var name = function () {
					if (!importedElement.$) {
						var elementName = importedElement.a;
						return elementName;
					} else {
						var elementName = importedElement.a;
						return elementName;
					}
				}();
				var newErrors = function () {
					var _v1 = A2($elm$core$Dict$get, name, declared);
					if (!_v1.$) {
						var variableInfo = _v1.a;
						return A2(
							$elm$core$List$cons,
							A2($jfmengels$elm_review_unused$NoUnused$Variables$error, variableInfo, name),
							errors);
					} else {
						return errors;
					}
				}();
				return _Utils_Tuple2(
					newErrors,
					A3($jfmengels$elm_review_unused$NoUnused$Variables$registerExposedElements, customTypesFromModule, importedElement, context));
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$moduleAliasRange = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$moduleAliasRange$fn(_v0, range) {
		var moduleName = _v0.b.eY;
		return _Utils_update(
			range,
			{
				dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(moduleName).c4
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$ModuleAlias = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Variables$registerModule = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$registerModule$fn(declaredModule, context) {
		return _Utils_update(
			context,
			{
				c$: A2($elm$core$List$cons, declaredModule, context.c$)
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$registerModuleAlias = F3(function $jfmengels$elm_review_unused$NoUnused$Variables$registerModuleAlias$fn(node, moduleAlias, context) {
		var range = node.a;
		var exposingList = node.b.fE;
		var moduleName = node.b.eY;
		return A2(
			$jfmengels$elm_review_unused$NoUnused$Variables$registerModule,
			{
				U: $elm$core$Maybe$Just(
					$jfmengels$elm_review_unused$NoUnused$Variables$getModuleName(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(moduleAlias))),
				eY: $stil4m$elm_syntax$Elm$Syntax$Node$value(moduleName),
				e5: function () {
					if (exposingList.$ === 1) {
						return $jfmengels$elm_review_unused$NoUnused$Variables$untilStartOfNextLine(range);
					} else {
						return A2(
							$jfmengels$elm_review_unused$NoUnused$Variables$moduleAliasRange,
							node,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(moduleAlias));
					}
				}(),
				jl: 'Module alias',
				bl: $stil4m$elm_syntax$Elm$Syntax$Node$range(moduleAlias),
				bF: $jfmengels$elm_review_unused$NoUnused$Variables$ModuleAlias(
					{
						gS: !_Utils_eq(exposingList, $elm$core$Maybe$Nothing),
						hq: $jfmengels$elm_review_unused$NoUnused$Variables$getModuleName(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(moduleName))
					})
			},
			context);
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$ImportedModule = {$: 0};
var $jfmengels$elm_review_unused$NoUnused$Variables$registerModuleNameOrAlias = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$registerModuleNameOrAlias$fn(node, context) {
		var range = node.a;
		var moduleAlias = node.b.iI;
		var moduleName = node.b.eY;
		if (!moduleAlias.$) {
			var moduleAlias_ = moduleAlias.a;
			return A3($jfmengels$elm_review_unused$NoUnused$Variables$registerModuleAlias, node, moduleAlias_, context);
		} else {
			return A2(
				$jfmengels$elm_review_unused$NoUnused$Variables$registerModule,
				{
					U: $elm$core$Maybe$Nothing,
					eY: $stil4m$elm_syntax$Elm$Syntax$Node$value(moduleName),
					e5: $jfmengels$elm_review_unused$NoUnused$Variables$untilStartOfNextLine(range),
					jl: 'Imported module',
					bl: $stil4m$elm_syntax$Elm$Syntax$Node$range(moduleName),
					bF: $jfmengels$elm_review_unused$NoUnused$Variables$ImportedModule
				},
				context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$importVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$importVisitor$fn(node, context) {
		var importRange = node.a;
		var import_ = node.b;
		var errors = function () {
			var _v4 = import_.iI;
			if (!_v4.$) {
				var moduleAlias = _v4.a;
				return _Utils_eq(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(moduleAlias),
					$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY)) ? _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['The alias is the same as the module name, and brings no useful value']),
							bx: 'Module `' + (A2(
								$elm$core$String$join,
								'.',
								$stil4m$elm_syntax$Elm$Syntax$Node$value(moduleAlias)) + '` is aliased as itself')
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$range(moduleAlias),
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								A2(
									$jfmengels$elm_review_unused$NoUnused$Variables$moduleAliasRange,
									node,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(moduleAlias)))
							]))
					]) : _List_Nil;
			} else {
				return _List_Nil;
			}
		}();
		var _v0 = function () {
			var _v1 = import_.fE;
			if (_v1.$ === 1) {
				return _Utils_Tuple2(
					_List_Nil,
					A2($jfmengels$elm_review_unused$NoUnused$Variables$registerModuleNameOrAlias, node, context));
			} else {
				var declaredImports = _v1.a;
				var contextWithAlias = function () {
					var _v3 = import_.iI;
					if (!_v3.$) {
						var moduleAlias = _v3.a;
						return A3($jfmengels$elm_review_unused$NoUnused$Variables$registerModuleAlias, node, moduleAlias, context);
					} else {
						return context;
					}
				}();
				var _v2 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaredImports);
				if (!_v2.$) {
					return A2(
						$elm$core$Dict$member,
						$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY),
						context.fw) ? _Utils_Tuple2(
						_List_Nil,
						_Utils_update(
							contextWithAlias,
							{
								cf: A2(
									$elm$core$List$cons,
									{
										U: A2(
											$elm$core$Maybe$map,
											A2(
												$elm$core$Basics$composeR,
												$stil4m$elm_syntax$Elm$Syntax$Node$value,
												$elm$core$String$join('.')),
											import_.iI),
										fF: $stil4m$elm_syntax$Elm$Syntax$Node$range(declaredImports),
										fQ: importRange,
										fZ: $stil4m$elm_syntax$Elm$Syntax$Node$range(import_.eY),
										cH: $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY),
										fm: false,
										fn: false
									},
									context.cf)
							})) : _Utils_Tuple2(_List_Nil, contextWithAlias);
				} else {
					var list = _v2.a;
					var customTypesFromModule = A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Dict$empty,
						A2(
							$elm$core$Dict$get,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY),
							context.fw));
					return A3(
						$elm$core$List$foldl,
						A2(
							$jfmengels$elm_review_unused$NoUnused$Variables$handleExposedElements,
							$jfmengels$elm_review_unused$NoUnused$NonemptyList$head(contextWithAlias.z).dH,
							customTypesFromModule),
						_Utils_Tuple2(_List_Nil, contextWithAlias),
						A2(
							$jfmengels$elm_review_unused$NoUnused$Variables$collectExplicitlyExposedElements,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(declaredImports),
							list));
				}
			}
		}();
		var exposingErrors = _v0.a;
		var newContext = _v0.b;
		return _Utils_Tuple2(
			_Utils_ap(exposingErrors, errors),
			newContext);
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$HasMultipleDeclarations = {$: 0};
var $jfmengels$elm_review_unused$NoUnused$Variables$HasNoOtherDeclarations = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Variables$introducesVariable = function (nodes) {
	introducesVariable:
	while (true) {
		if (!nodes.b) {
			return false;
		} else {
			var patternNode = nodes.a;
			var restOfNodes = nodes.b;
			var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(patternNode);
			switch (_v1.$) {
				case 11:
					return true;
				case 13:
					return true;
				case 8:
					var fields = _v1.a;
					if ($elm$core$List$isEmpty(fields)) {
						var $temp$nodes = restOfNodes;
						nodes = $temp$nodes;
						continue introducesVariable;
					} else {
						return true;
					}
				case 7:
					var patterns = _v1.a;
					var $temp$nodes = _Utils_ap(patterns, restOfNodes);
					nodes = $temp$nodes;
					continue introducesVariable;
				case 9:
					var left = _v1.a;
					var right = _v1.b;
					var $temp$nodes = A2(
						$elm$core$List$cons,
						left,
						A2($elm$core$List$cons, right, restOfNodes));
					nodes = $temp$nodes;
					continue introducesVariable;
				case 10:
					var patterns = _v1.a;
					var $temp$nodes = _Utils_ap(patterns, restOfNodes);
					nodes = $temp$nodes;
					continue introducesVariable;
				case 12:
					var patterns = _v1.b;
					var $temp$nodes = _Utils_ap(patterns, restOfNodes);
					nodes = $temp$nodes;
					continue introducesVariable;
				case 14:
					var pattern = _v1.a;
					var $temp$nodes = A2($elm$core$List$cons, pattern, restOfNodes);
					nodes = $temp$nodes;
					continue introducesVariable;
				default:
					var $temp$nodes = restOfNodes;
					nodes = $temp$nodes;
					continue introducesVariable;
			}
		}
	}
};
var $jfmengels$elm_review_unused$NoUnused$Variables$removeParensFromExpression = function (node) {
	removeParensFromExpression:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 14) {
			var expr = _v0.a;
			var $temp$node = expr;
			node = $temp$node;
			continue removeParensFromExpression;
		} else {
			return node;
		}
	}
};
var $jfmengels$elm_review_unused$NoUnused$Variables$isDebugLog = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$isDebugLog$fn(lookupTable, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$3:
		while (true) {
			switch (_v0.$) {
				case 1:
					if (((_v0.a.b && _v0.a.b.b) && _v0.a.b.b.b) && (!_v0.a.b.b.b.b)) {
						var _v1 = _v0.a;
						var functionWithParens = _v1.a;
						var _v2 = _v1.b;
						var _v3 = _v2.b;
						var _function = $jfmengels$elm_review_unused$NoUnused$Variables$removeParensFromExpression(functionWithParens);
						var _v4 = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function);
						if ((_v4.$ === 3) && (_v4.b === 'log')) {
							return _Utils_eq(
								A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, _function),
								$elm$core$Maybe$Just(
									_List_fromArray(
										['Debug'])));
						} else {
							return false;
						}
					} else {
						break _v0$3;
					}
				case 2:
					switch (_v0.a) {
						case '|>':
							var pipeFunction = _v0.d;
							var _v5 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
								$jfmengels$elm_review_unused$NoUnused$Variables$removeParensFromExpression(pipeFunction));
							if ((((_v5.$ === 1) && _v5.a.b) && _v5.a.b.b) && (!_v5.a.b.b.b)) {
								var _v6 = _v5.a;
								var functionWithParens = _v6.a;
								var _v7 = _v6.b;
								var _function = $jfmengels$elm_review_unused$NoUnused$Variables$removeParensFromExpression(functionWithParens);
								var _v8 = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function);
								if ((_v8.$ === 3) && (_v8.b === 'log')) {
									return _Utils_eq(
										A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, _function),
										$elm$core$Maybe$Just(
											_List_fromArray(
												['Debug'])));
								} else {
									return false;
								}
							} else {
								return false;
							}
						case '<|':
							var pipeFunction = _v0.c;
							var _v9 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
								$jfmengels$elm_review_unused$NoUnused$Variables$removeParensFromExpression(pipeFunction));
							if ((((_v9.$ === 1) && _v9.a.b) && _v9.a.b.b) && (!_v9.a.b.b.b)) {
								var _v10 = _v9.a;
								var functionWithParens = _v10.a;
								var _v11 = _v10.b;
								var _function = $jfmengels$elm_review_unused$NoUnused$Variables$removeParensFromExpression(functionWithParens);
								var _v12 = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function);
								if ((_v12.$ === 3) && (_v12.b === 'log')) {
									return _Utils_eq(
										A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, _function),
										$elm$core$Maybe$Just(
											_List_fromArray(
												['Debug'])));
								} else {
									return false;
								}
							} else {
								return false;
							}
						default:
							break _v0$3;
					}
				default:
					break _v0$3;
			}
		}
		return false;
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationToRemoveRange = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationToRemoveRange$fn(letBlockContext, range) {
		if (!letBlockContext.$) {
			return range;
		} else {
			var letDeclarationsRange = letBlockContext.a;
			return letDeclarationsRange;
		}
	});
var $elm$core$Basics$ge = _Utils_ge;
var $jfmengels$elm_review_unused$NoUnused$Variables$positionAsInt = function (_v0) {
	var row = _v0.b1;
	var column = _v0.bH;
	return (row * 1000000) + column;
};
var $jfmengels$elm_review_unused$NoUnused$Variables$rangeUpUntil = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$rangeUpUntil$fn(range, position) {
		var positionAsInt_ = $jfmengels$elm_review_unused$NoUnused$Variables$positionAsInt(position);
		return ((_Utils_cmp(
			$jfmengels$elm_review_unused$NoUnused$Variables$positionAsInt(range.dv),
			positionAsInt_) < 1) && (_Utils_cmp(
			$jfmengels$elm_review_unused$NoUnused$Variables$positionAsInt(range.c4),
			positionAsInt_) > -1)) ? _Utils_update(
			range,
			{c4: position}) : range;
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$registerFunction = F4(function $jfmengels$elm_review_unused$NoUnused$Variables$registerFunction$fn(letBlockContext, _function, functionDeclarationRange, context) {
		var typeAnnotations = function () {
			var _v0 = A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, _function.i7);
			if (!_v0.$) {
				var signature = _v0.a;
				return _List_fromArray(
					[signature.hV]);
			} else {
				return _List_Nil;
			}
		}();
		var declaration = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii);
		return A3(
			$jfmengels$elm_review_unused$NoUnused$Variables$registerVariable,
			{
				e5: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationToRemoveRange, letBlockContext, functionDeclarationRange)),
				jl: '`let in` variable',
				bl: $stil4m$elm_syntax$Elm$Syntax$Node$range(declaration.cH),
				bo: ''
			},
			$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration.cH),
			A3($jfmengels$elm_review_unused$NoUnused$Variables$collectNamesFromTypeAnnotation, $elm$core$Maybe$Nothing, typeAnnotations, context));
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$removeParensFromPattern = function (node) {
	removeParensFromPattern:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 14) {
			var pattern = _v0.a;
			var $temp$node = pattern;
			node = $temp$node;
			continue removeParensFromPattern;
		} else {
			return node;
		}
	}
};
var $jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationEnterVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationEnterVisitor$fn(_v0, declaration, context) {
		var range = _v0.a;
		var declarations = _v0.b.gD;
		var expression = _v0.b.eC;
		var letBlockContext = ($elm$core$List$length(declarations) === 1) ? $jfmengels$elm_review_unused$NoUnused$Variables$HasNoOtherDeclarations(
			A2(
				$jfmengels$elm_review_unused$NoUnused$Variables$rangeUpUntil,
				range,
				$stil4m$elm_syntax$Elm$Syntax$Node$range(expression).dv)) : $jfmengels$elm_review_unused$NoUnused$Variables$HasMultipleDeclarations;
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
		if (!_v1.$) {
			var _function = _v1.a;
			var functionDeclaration = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii);
			var namesToIgnore = $elm$core$Set$fromList(
				A2($elm$core$List$concatMap, $jfmengels$elm_review_unused$NoUnused$Variables$getDeclaredParametersFromPattern, functionDeclaration.gs));
			var newContext = A4(
				$jfmengels$elm_review_unused$NoUnused$Variables$registerFunction,
				letBlockContext,
				_function,
				$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration),
				A2(
					$jfmengels$elm_review_unused$NoUnused$Variables$markValuesFromPatternsAsUsed,
					functionDeclaration.gs,
					_Utils_update(
						context,
						{
							bS: A2(
								$elm$core$List$cons,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(functionDeclaration.cH),
								context.bS)
						})));
			return _Utils_Tuple2(
				_List_Nil,
				_Utils_update(
					newContext,
					{
						z: A2(
							$jfmengels$elm_review_unused$NoUnused$NonemptyList$cons,
							{dH: $elm$core$Dict$empty, cJ: namesToIgnore, bm: $elm$core$Dict$empty},
							newContext.z)
					}));
		} else {
			var pattern = _v1.a;
			var value = _v1.b;
			var _v2 = $jfmengels$elm_review_unused$NoUnused$Variables$removeParensFromPattern(pattern);
			switch (_v2.b.$) {
				case 0:
					var wildCardRange = _v2.a;
					var _v3 = _v2.b;
					return A2($jfmengels$elm_review_unused$NoUnused$Variables$isDebugLog, context.s, value) ? _Utils_Tuple2(_List_Nil, context) : _Utils_Tuple2(
						_List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['This value has been assigned to a wildcard, which makes the value unusable. You should remove it at the location I pointed at.']),
									bx: 'Value assigned to `_` is unused'
								},
								wildCardRange,
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										A2(
											$jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationToRemoveRange,
											letBlockContext,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration)))
									]))
							]),
						context);
				case 1:
					var unitPattern = _v2.a;
					var _v4 = _v2.b;
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['This value has no data, which makes the value unusable. You should remove it at the location I pointed at.']),
									bx: 'Unit value is unused'
								},
								unitPattern,
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										A2(
											$jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationToRemoveRange,
											letBlockContext,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration)))
									]))
							]),
						context);
				default:
					return _Utils_Tuple2(
						$jfmengels$elm_review_unused$NoUnused$Variables$introducesVariable(
							_List_fromArray(
								[pattern])) ? _List_Nil : _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['This value has been computed but isn\'t assigned to any variable, which makes the value unusable. You should remove it at the location I pointed at.']),
									bx: 'Pattern doesn\'t introduce any variables'
								},
								$stil4m$elm_syntax$Elm$Syntax$Node$range(pattern),
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										A2(
											$jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationToRemoveRange,
											letBlockContext,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration)))
									]))
							]),
						A2(
							$jfmengels$elm_review_unused$NoUnused$Variables$markValuesFromPatternsAsUsed,
							_List_fromArray(
								[pattern]),
							context));
			}
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationExitVisitor = F3(function $jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationExitVisitor$fn(_v0, declaration, context) {
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
		if (!_v1.$) {
			return $jfmengels$elm_review_unused$NoUnused$Variables$makeReport(
				_Utils_update(
					context,
					{
						bS: A2($elm$core$List$drop, 1, context.bS)
					}));
		} else {
			return _Utils_Tuple2(_List_Nil, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$getExposingName = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 1:
			var name = _v0.a;
			return name;
		case 2:
			var name = _v0.a;
			return name;
		case 3:
			var name = _v0.a.cH;
			return name;
		default:
			var name = _v0.a;
			return name;
	}
};
var $jfmengels$elm_review_unused$NoUnused$Variables$moduleDefinitionVisitor = F2(function $jfmengels$elm_review_unused$NoUnused$Variables$moduleDefinitionVisitor$fn(_v0, context) {
		var moduleNode = _v0.b;
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(moduleNode);
		if (!_v1.$) {
			return _Utils_update(
				context,
				{eA: true});
		} else {
			var list = _v1.a;
			var names = A2($elm$core$List$map, $jfmengels$elm_review_unused$NoUnused$Variables$getExposingName, list);
			return A2($jfmengels$elm_review_unused$NoUnused$Variables$markAllAsUsed, names, context);
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Variables$moduleVisitor = function (schema) {
	return A2(
		$jfmengels$elm_review$Review$Rule$withFinalModuleEvaluation,
		$jfmengels$elm_review_unused$NoUnused$Variables$finalEvaluation,
		A2(
			$jfmengels$elm_review$Review$Rule$withCaseBranchExitVisitor,
			$jfmengels$elm_review_unused$NoUnused$Variables$caseBranchExitVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withCaseBranchEnterVisitor,
				F3(
					function (_v0, casePattern, context) {
						return _Utils_Tuple2(
							_List_Nil,
							A2($jfmengels$elm_review_unused$NoUnused$Variables$caseBranchEnterVisitor, casePattern, context));
					}),
				A2(
					$jfmengels$elm_review$Review$Rule$withLetDeclarationExitVisitor,
					$jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationExitVisitor,
					A2(
						$jfmengels$elm_review$Review$Rule$withLetDeclarationEnterVisitor,
						$jfmengels$elm_review_unused$NoUnused$Variables$letDeclarationEnterVisitor,
						A2(
							$jfmengels$elm_review$Review$Rule$withExpressionExitVisitor,
							$jfmengels$elm_review_unused$NoUnused$Variables$expressionExitVisitor,
							A2(
								$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
								F2(
									function (node, context) {
										return _Utils_Tuple2(
											_List_Nil,
											A2($jfmengels$elm_review_unused$NoUnused$Variables$expressionEnterVisitor, node, context));
									}),
								A2(
									$jfmengels$elm_review$Review$Rule$withDeclarationExitVisitor,
									$jfmengels$elm_review_unused$NoUnused$Variables$declarationExitVisitor,
									A2(
										$jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor,
										$jfmengels$elm_review_unused$NoUnused$Variables$declarationEnterVisitor,
										A2(
											$jfmengels$elm_review$Review$Rule$withDeclarationListVisitor,
											F2(
												function (nodes, context) {
													return _Utils_Tuple2(
														_List_Nil,
														A2($jfmengels$elm_review_unused$NoUnused$Variables$declarationListVisitor, nodes, context));
												}),
											A2(
												$jfmengels$elm_review$Review$Rule$withImportVisitor,
												$jfmengels$elm_review_unused$NoUnused$Variables$importVisitor,
												A2(
													$jfmengels$elm_review$Review$Rule$withModuleDefinitionVisitor,
													F2(
														function (module_, context) {
															return _Utils_Tuple2(
																_List_Nil,
																A2($jfmengels$elm_review_unused$NoUnused$Variables$moduleDefinitionVisitor, module_, context));
														}),
													schema))))))))))));
};
var $jfmengels$elm_review_unused$NoUnused$Variables$rule = $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
	$jfmengels$elm_review$Review$Rule$providesFixesForProjectRule(
		$jfmengels$elm_review$Review$Rule$withContextFromImportedModules(
			A2(
				$jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator,
				{cl: $jfmengels$elm_review_unused$NoUnused$Variables$foldProjectContexts, cn: $jfmengels$elm_review_unused$NoUnused$Variables$fromModuleToProject, gY: $jfmengels$elm_review_unused$NoUnused$Variables$fromProjectToModule},
				A2(
					$jfmengels$elm_review$Review$Rule$withModuleVisitor,
					$jfmengels$elm_review_unused$NoUnused$Variables$moduleVisitor,
					A2(
						$jfmengels$elm_review$Review$Rule$withDirectDependenciesProjectVisitor,
						$jfmengels$elm_review_unused$NoUnused$Variables$dependenciesVisitor,
						A2(
							$jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor,
							F2(
								function (project, context) {
									return _Utils_Tuple2(
										_List_Nil,
										A2($jfmengels$elm_review_unused$NoUnused$Variables$elmJsonVisitor, project, context));
								}),
							A2($jfmengels$elm_review$Review$Rule$newProjectRuleSchema, 'NoUnused.Variables', $jfmengels$elm_review_unused$NoUnused$Variables$initialContext))))))));
var $jfmengels$elm_review$Review$Error$UserGlobal = 4;
var $jfmengels$elm_review$Review$Rule$globalError = function (_v0) {
	var message = _v0.bx;
	var details = _v0.eq;
	return {eq: details, iu: 'GLOBAL ERROR', dV: $jfmengels$elm_review$Review$Error$NoFixes, bx: message, e4: false, f4: $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, f8: '', hO: 4};
};
var $jfmengels$elm_review_simplify$Simplify$wrapInBackticks = function (s) {
	return '`' + (s + '`');
};
var $jfmengels$elm_review_simplify$Simplify$errorForUnknownIgnoredConstructor = function (list) {
	return $jfmengels$elm_review$Review$Rule$globalError(
		{
			eq: _List_fromArray(
				['I expected to find these custom types in the dependencies, but I could not find them.', 'Please check whether these types and have not been removed, and if so, remove them from the configuration of this rule.', 'If you find that these types have been moved or renamed, please update your configuration.', 'Note that I may have provided fixes for things you didn\'t wish to be fixed, so you might want to undo the changes I have applied.', 'Also note that the configuration for this rule changed in v2.0.19: types that are custom to your project are ignored by default, so this configuration setting can only be used to avoid simplifying case expressions that use custom types defined in dependencies.']),
			bx: 'Could not find type names: ' + A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $jfmengels$elm_review_simplify$Simplify$wrapInBackticks, list))
		});
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$moduleNameFromString = function (string) {
	return A2($elm$core$String$split, '.', string);
};
var $jfmengels$elm_review_simplify$Simplify$dependenciesVisitor = F3(function $jfmengels$elm_review_simplify$Simplify$dependenciesVisitor$fn(typeNamesAsStrings, dict, context) {
		var modules = A2(
			$elm$core$List$concatMap,
			$jfmengels$elm_review$Review$Project$Dependency$modules,
			$elm$core$Dict$values(dict));
		var unions = $elm$core$Set$fromList(
			A2(
				$elm$core$List$concatMap,
				function (module_) {
					return A2(
						$elm$core$List$map,
						function (union) {
							return module_.cH + ('.' + union.cH);
						},
						module_.hW);
				},
				modules));
		var unknownTypesToIgnore = $elm$core$Set$toList(
			A2($elm$core$Set$diff, typeNamesAsStrings, unions));
		var dependencyExposedVariants = A3(
			$elm$core$List$foldl,
			F2(
				function (moduleDoc, acc) {
					return A3(
						$elm$core$Dict$insert,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$moduleNameFromString(moduleDoc.cH),
						$elm$core$Set$fromList(
							A2(
								$elm$core$List$concatMap,
								function (union) {
									return A2(
										$elm$core$List$map,
										function (_v1) {
											var variantName = _v1.a;
											return variantName;
										},
										union.ji);
								},
								moduleDoc.hW)),
						acc);
				}),
			context.ap,
			modules);
		var customTypesToReportInCases = $elm$core$Set$fromList(
			A2(
				$elm$core$List$concatMap,
				function (mod) {
					var moduleName = $jfmengels$elm_review_simplify$Simplify$AstHelpers$moduleNameFromString(mod.cH);
					return A2(
						$elm$core$List$map,
						function (_v0) {
							var tagName = _v0.a;
							return _Utils_Tuple2(moduleName, tagName);
						},
						A2(
							$elm$core$List$concatMap,
							function (union) {
								return union.ji;
							},
							A2(
								$elm$core$List$filter,
								function (union) {
									return !A2($elm$core$Set$member, mod.cH + ('.' + union.cH), typeNamesAsStrings);
								},
								mod.hW)));
				},
				modules));
		return _Utils_Tuple2(
			$elm$core$List$isEmpty(unknownTypesToIgnore) ? _List_Nil : _List_fromArray(
				[
					$jfmengels$elm_review_simplify$Simplify$errorForUnknownIgnoredConstructor(unknownTypesToIgnore)
				]),
			{bq: customTypesToReportInCases, ap: dependencyExposedVariants});
	});
var $jfmengels$elm_review_simplify$Simplify$foldProjectContexts = F2(function $jfmengels$elm_review_simplify$Simplify$foldProjectContexts$fn(newContext, previousContext) {
		return {
			bq: $elm$core$Set$empty,
			ap: A2($elm$core$Dict$union, newContext.ap, previousContext.ap)
		};
	});
var $jfmengels$elm_review_simplify$Simplify$fromModuleToProject = $jfmengels$elm_review$Review$Rule$initContextCreator(
	function (moduleContext) {
		return {
			bq: $elm$core$Set$empty,
			ap: A2($elm$core$Dict$singleton, moduleContext.eY, moduleContext.ap)
		};
	});
var $jfmengels$elm_review_simplify$Simplify$ExposedSome = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_simplify$Simplify$createImportLookup = function (context) {
	return A2(
		$elm$core$Dict$map,
		F2(
			function (moduleName, import_) {
				var _v0 = import_.gQ;
				if (!_v0.$) {
					return import_;
				} else {
					var some = _v0.a;
					var _v1 = A2($elm$core$Dict$get, moduleName, context.g4);
					if (_v1.$ === 1) {
						return import_;
					} else {
						var importExposedVariants = _v1.a;
						return _Utils_update(
							import_,
							{
								gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome(
									A2($elm$core$Set$union, some, importExposedVariants))
							});
					}
				}
			}),
		context.iz);
};
var $jfmengels$elm_review_simplify$Simplify$Infer$Inferred = $elm$core$Basics$identity;
var $pzp1997$assoc_list$AssocList$D = $elm$core$Basics$identity;
var $pzp1997$assoc_list$AssocList$empty = _List_Nil;
var $jfmengels$elm_review_simplify$Simplify$Infer$empty = {cb: $pzp1997$assoc_list$AssocList$empty, ir: _List_Nil};
var $jfmengels$elm_review_simplify$Simplify$RangeDict$RangeDict = $elm$core$Basics$identity;
var $jfmengels$elm_review_simplify$Simplify$RangeDict$empty = $elm$core$Dict$empty;
var $jfmengels$elm_review_simplify$Simplify$ExposedAll = {$: 0};
var $jfmengels$elm_review_simplify$Simplify$implicitImports = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			_List_fromArray(
				['Basics']),
			{U: $elm$core$Maybe$Nothing, gQ: $jfmengels$elm_review_simplify$Simplify$ExposedAll}),
			_Utils_Tuple2(
			_List_fromArray(
				['List']),
			{
				U: $elm$core$Maybe$Nothing,
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome(
					$elm$core$Set$fromList(
						_List_fromArray(
							['List', '(::)'])))
			}),
			_Utils_Tuple2(
			_List_fromArray(
				['Maybe']),
			{
				U: $elm$core$Maybe$Nothing,
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome(
					$elm$core$Set$fromList(
						_List_fromArray(
							['Maybe', 'Just', 'Nothing'])))
			}),
			_Utils_Tuple2(
			_List_fromArray(
				['Result']),
			{
				U: $elm$core$Maybe$Nothing,
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome(
					$elm$core$Set$fromList(
						_List_fromArray(
							['Result', 'Ok', 'Err'])))
			}),
			_Utils_Tuple2(
			_List_fromArray(
				['String']),
			{
				U: $elm$core$Maybe$Nothing,
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome(
					$elm$core$Set$singleton('String'))
			}),
			_Utils_Tuple2(
			_List_fromArray(
				['Char']),
			{
				U: $elm$core$Maybe$Nothing,
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome(
					$elm$core$Set$singleton('Char'))
			}),
			_Utils_Tuple2(
			_List_fromArray(
				['Tuple']),
			{
				U: $elm$core$Maybe$Nothing,
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome($elm$core$Set$empty)
			}),
			_Utils_Tuple2(
			_List_fromArray(
				['Debug']),
			{
				U: $elm$core$Maybe$Nothing,
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome($elm$core$Set$empty)
			}),
			_Utils_Tuple2(
			_List_fromArray(
				['Platform']),
			{
				U: $elm$core$Maybe$Nothing,
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome(
					$elm$core$Set$singleton('Program'))
			}),
			_Utils_Tuple2(
			_List_fromArray(
				['Platform', 'Cmd']),
			{
				U: $elm$core$Maybe$Just(
					_List_fromArray(
						['Cmd'])),
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome(
					$elm$core$Set$singleton('Cmd'))
			}),
			_Utils_Tuple2(
			_List_fromArray(
				['Platform', 'Sub']),
			{
				U: $elm$core$Maybe$Just(
					_List_fromArray(
						['Sub'])),
				gQ: $jfmengels$elm_review_simplify$Simplify$ExposedSome(
					$elm$core$Set$singleton('Sub'))
			})
		]));
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$nameOfExpose = function (topLevelExpose) {
	switch (topLevelExpose.$) {
		case 1:
			var name = topLevelExpose.a;
			return name;
		case 2:
			var name = topLevelExpose.a;
			return name;
		case 0:
			var name = topLevelExpose.a;
			return name;
		default:
			var name = topLevelExpose.a.cH;
			return name;
	}
};
var $jfmengels$elm_review_simplify$Simplify$importContext = function (importNode) {
	var import_ = $stil4m$elm_syntax$Elm$Syntax$Node$value(importNode);
	return {
		U: A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, import_.iI),
		gQ: function () {
			var _v0 = import_.fE;
			if (_v0.$ === 1) {
				return $jfmengels$elm_review_simplify$Simplify$ExposedSome($elm$core$Set$empty);
			} else {
				var _v1 = _v0.a;
				var existingExposing = _v1.b;
				if (!existingExposing.$) {
					return $jfmengels$elm_review_simplify$Simplify$ExposedAll;
				} else {
					var exposes = existingExposing.a;
					return $jfmengels$elm_review_simplify$Simplify$ExposedSome(
						$elm$core$Set$fromList(
							A2(
								$elm$core$List$map,
								function (_v3) {
									var expose = _v3.b;
									return $jfmengels$elm_review_simplify$Simplify$AstHelpers$nameOfExpose(expose);
								},
								exposes)));
				}
			}
		}(),
		eY: $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY)
	};
};
var $jfmengels$elm_review_simplify$Simplify$exposedMerge = function (exposedTuple) {
	if (!exposedTuple.a.$) {
		var _v1 = exposedTuple.a;
		return $jfmengels$elm_review_simplify$Simplify$ExposedAll;
	} else {
		if (!exposedTuple.b.$) {
			var _v2 = exposedTuple.b;
			return $jfmengels$elm_review_simplify$Simplify$ExposedAll;
		} else {
			var aSet = exposedTuple.a.a;
			var bSet = exposedTuple.b.a;
			return $jfmengels$elm_review_simplify$Simplify$ExposedSome(
				A2($elm$core$Set$union, aSet, bSet));
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$findMap = F2(function $jfmengels$elm_review_simplify$Simplify$findMap$fn(mapper, nodes) {
		findMap:
		while (true) {
			if (!nodes.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var node = nodes.a;
				var rest = nodes.b;
				var _v1 = mapper(node);
				if (!_v1.$) {
					var value = _v1.a;
					return $elm$core$Maybe$Just(value);
				} else {
					var $temp$mapper = mapper,
						$temp$nodes = rest;
					mapper = $temp$mapper;
					nodes = $temp$nodes;
					continue findMap;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$insertImport = F3(function $jfmengels$elm_review_simplify$Simplify$insertImport$fn(moduleName, importInfoToAdd, importLookup) {
		return A3(
			$elm$core$Dict$update,
			moduleName,
			function (existingImport) {
				var newImportInfo = function () {
					if (existingImport.$ === 1) {
						return importInfoToAdd;
					} else {
						var import_ = existingImport.a;
						return {
							U: A2(
								$jfmengels$elm_review_simplify$Simplify$findMap,
								function ($) {
									return $.U;
								},
								_List_fromArray(
									[import_, importInfoToAdd])),
							gQ: $jfmengels$elm_review_simplify$Simplify$exposedMerge(
								_Utils_Tuple2(import_.gQ, importInfoToAdd.gQ))
						};
					}
				}();
				return $elm$core$Maybe$Just(newImportInfo);
			},
			importLookup);
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getTypeExposeIncludingVariants = function (expose) {
	switch (expose.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			return $elm$core$Maybe$Nothing;
		case 2:
			return $elm$core$Maybe$Nothing;
		default:
			var variantType = expose.a;
			var _v1 = variantType.iU;
			if (_v1.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				return $elm$core$Maybe$Just(variantType.cH);
			}
	}
};
var $jfmengels$elm_review_simplify$Simplify$moduleExposingContext = function (moduleHeader) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(moduleHeader));
	if (!_v0.$) {
		return $jfmengels$elm_review_simplify$Simplify$ExposedAll;
	} else {
		var some = _v0.a;
		return $jfmengels$elm_review_simplify$Simplify$ExposedSome(
			A3(
				$elm$core$List$foldl,
				F2(
					function (_v1, acc) {
						var expose = _v1.b;
						var _v2 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getTypeExposeIncludingVariants(expose);
						if (!_v2.$) {
							var name = _v2.a;
							return A2($elm$core$Set$insert, name, acc);
						} else {
							return acc;
						}
					}),
				$elm$core$Set$empty,
				some));
	}
};
var $jfmengels$elm_review$Review$Rule$moduleNameFromMetadata = function (_v0) {
	var metadata = _v0;
	return $stil4m$elm_syntax$Elm$Syntax$Node$value(metadata.fY);
};
var $jfmengels$elm_review$Review$Rule$Metadata = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$createMetadata = function (data) {
	return data;
};
var $jfmengels$elm_review$Review$Rule$withMetadata = function (_v0) {
	var fn = _v0.a;
	var requestedData = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(
					fn,
					data,
					isFileIgnored,
					$jfmengels$elm_review$Review$Rule$createMetadata(
						{
							g8: data.g8,
							fY: $jfmengels$elm_review$Review$Rule$moduleNameNode(data.h2.iJ)
						}));
			}),
		requestedData);
};
var $jfmengels$elm_review_simplify$Simplify$fromProjectToModule = $jfmengels$elm_review$Review$Rule$withFullAst(
	$jfmengels$elm_review$Review$Rule$withSourceCodeExtractor(
		$jfmengels$elm_review$Review$Rule$withMetadata(
			$jfmengels$elm_review$Review$Rule$withModuleNameLookupTable(
				$jfmengels$elm_review$Review$Rule$initContextCreator(
					F5(
						function (lookupTable, metadata, extractSourceCode, fullAst, projectContext) {
							var moduleExposedVariantTypes = $jfmengels$elm_review_simplify$Simplify$moduleExposingContext(fullAst.iJ);
							var imports = A3(
								$elm$core$List$foldl,
								F2(
									function (import_, importLookup) {
										var importInfo = $jfmengels$elm_review_simplify$Simplify$importContext(import_);
										return A3(
											$jfmengels$elm_review_simplify$Simplify$insertImport,
											importInfo.eY,
											{U: importInfo.U, gQ: importInfo.gQ},
											importLookup);
									}),
								$jfmengels$elm_review_simplify$Simplify$implicitImports,
								fullAst.iz);
							return {
								cV: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty,
								gA: $elm$core$Set$empty,
								bq: projectContext.bq,
								fD: moduleExposedVariantTypes,
								ap: $elm$core$Set$empty,
								eD: extractSourceCode,
								E: $jfmengels$elm_review_simplify$Simplify$createImportLookup(
									{g4: projectContext.ap, iz: imports}),
								I: _Utils_Tuple2($jfmengels$elm_review_simplify$Simplify$Infer$empty, _List_Nil),
								cx: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty,
								u: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty,
								hg: _List_Nil,
								s: lookupTable,
								A: $elm$core$Set$empty,
								eY: $jfmengels$elm_review$Review$Rule$moduleNameFromMetadata(metadata),
								cL: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty,
								aW: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty
							};
						}))))));
var $jfmengels$elm_review_simplify$Simplify$initialContext = {bq: $elm$core$Set$empty, ap: $elm$core$Dict$empty};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$declarationBindings = function (declaration) {
	switch (declaration.$) {
		case 2:
			var variantType = declaration.a;
			return $elm$core$Set$fromList(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var variant = _v1.b;
						return $stil4m$elm_syntax$Elm$Syntax$Node$value(variant.cH);
					},
					variantType.ig));
		case 0:
			var functionDeclaration = declaration.a;
			return $elm$core$Set$singleton(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(functionDeclaration.ii).cH));
		default:
			return $elm$core$Set$empty;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$declarationListBindings = function (declarationList) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (bindings, soFar) {
				return A2($elm$core$Set$union, soFar, bindings);
			}),
		$elm$core$Set$empty,
		A2(
			$elm$core$List$map,
			function (_v0) {
				var declaration = _v0.b;
				return $jfmengels$elm_review_simplify$Simplify$AstHelpers$declarationBindings(declaration);
			},
			declarationList));
};
var $jfmengels$elm_review_simplify$Simplify$declarationListVisitor = F2(function $jfmengels$elm_review_simplify$Simplify$declarationListVisitor$fn(declarationList, context) {
		return _Utils_update(
			context,
			{
				A: $jfmengels$elm_review_simplify$Simplify$AstHelpers$declarationListBindings(declarationList)
			});
	});
var $jfmengels$elm_review_simplify$Simplify$isExposedFrom = F2(function $jfmengels$elm_review_simplify$Simplify$isExposedFrom$fn(exposed, name) {
		if (!exposed.$) {
			return true;
		} else {
			var some = exposed.a;
			return A2($elm$core$Set$member, name, some);
		}
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$patternBindings = function (pattern) {
	patternBindings:
	while (true) {
		switch (pattern.$) {
			case 10:
				var patterns = pattern.a;
				return $jfmengels$elm_review_simplify$Simplify$AstHelpers$patternListBindings(patterns);
			case 7:
				var patterns = pattern.a;
				return $jfmengels$elm_review_simplify$Simplify$AstHelpers$patternListBindings(patterns);
			case 8:
				var patterns = pattern.a;
				return $elm$core$Set$fromList(
					A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, patterns));
			case 12:
				var patterns = pattern.b;
				return $jfmengels$elm_review_simplify$Simplify$AstHelpers$patternListBindings(patterns);
			case 9:
				var _v2 = pattern.a;
				var headPattern = _v2.b;
				var _v3 = pattern.b;
				var tailPattern = _v3.b;
				return A2(
					$elm$core$Set$union,
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$patternBindings(tailPattern),
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$patternBindings(headPattern));
			case 11:
				var name = pattern.a;
				return $elm$core$Set$singleton(name);
			case 13:
				var _v4 = pattern.a;
				var pattern_ = _v4.b;
				var _v5 = pattern.b;
				var name = _v5.b;
				return A2(
					$elm$core$Set$insert,
					name,
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$patternBindings(pattern_));
			case 14:
				var _v6 = pattern.a;
				var inParens = _v6.b;
				var $temp$pattern = inParens;
				pattern = $temp$pattern;
				continue patternBindings;
			case 0:
				return $elm$core$Set$empty;
			case 1:
				return $elm$core$Set$empty;
			case 2:
				return $elm$core$Set$empty;
			case 3:
				return $elm$core$Set$empty;
			case 4:
				return $elm$core$Set$empty;
			case 5:
				return $elm$core$Set$empty;
			default:
				return $elm$core$Set$empty;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$patternListBindings = function (patterns) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, soFar) {
				var pattern = _v0.b;
				return A2(
					$elm$core$Set$union,
					soFar,
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$patternBindings(pattern));
			}),
		$elm$core$Set$empty,
		patterns);
};
var $jfmengels$elm_review_simplify$Simplify$RangeDict$rangeAsString = function (range) {
	return A2(
		$elm$core$String$join,
		'_',
		A2(
			$elm$core$List$map,
			$elm$core$String$fromInt,
			_List_fromArray(
				[range.dv.b1, range.dv.bH, range.c4.b1, range.c4.bH])));
};
var $jfmengels$elm_review_simplify$Simplify$RangeDict$singleton = F2(function $jfmengels$elm_review_simplify$Simplify$RangeDict$singleton$fn(range, value) {
		return A2(
			$elm$core$Dict$singleton,
			$jfmengels$elm_review_simplify$Simplify$RangeDict$rangeAsString(range),
			value);
	});
var $jfmengels$elm_review_simplify$Simplify$declarationVisitor = F2(function $jfmengels$elm_review_simplify$Simplify$declarationVisitor$fn(declarationNode, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declarationNode);
		switch (_v0.$) {
			case 2:
				var variantType = _v0.a;
				var variantTypeName = $stil4m$elm_syntax$Elm$Syntax$Node$value(variantType.cH);
				if (A2($jfmengels$elm_review_simplify$Simplify$isExposedFrom, context.fD, variantTypeName)) {
					var exposedVariants = A3(
						$elm$core$List$foldl,
						F2(
							function (_v1, acc) {
								var variant = _v1.b;
								return A2(
									$elm$core$Set$insert,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(variant.cH),
									acc);
							}),
						context.ap,
						variantType.ig);
					return _Utils_update(
						context,
						{ap: exposedVariants});
				} else {
					return context;
				}
			case 0:
				var functionDeclaration = _v0.a;
				return _Utils_update(
					context,
					{
						cx: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty,
						u: A2(
							$jfmengels$elm_review_simplify$Simplify$RangeDict$singleton,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(functionDeclaration.ii),
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$patternListBindings(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(functionDeclaration.ii).gs)),
						cL: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty,
						aW: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty
					});
			default:
				return context;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$RangeDict$member = F2(function $jfmengels$elm_review_simplify$Simplify$RangeDict$member$fn(range, _v0) {
		var rangeDict = _v0;
		return A2(
			$elm$core$Dict$member,
			$jfmengels$elm_review_simplify$Simplify$RangeDict$rangeAsString(range),
			rangeDict);
	});
var $jfmengels$elm_review_simplify$Simplify$RangeDict$remove = F2(function $jfmengels$elm_review_simplify$Simplify$RangeDict$remove$fn(range, _v0) {
		var rangeDict = _v0;
		return A2(
			$elm$core$Dict$remove,
			$jfmengels$elm_review_simplify$Simplify$RangeDict$rangeAsString(range),
			rangeDict);
	});
var $jfmengels$elm_review_simplify$Simplify$expressionExitVisitor = F2(function $jfmengels$elm_review_simplify$Simplify$expressionExitVisitor$fn(node, context) {
		var contextWithUpdatedLocalBindings = A2(
			$jfmengels$elm_review_simplify$Simplify$RangeDict$member,
			$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
			context.cL) ? context : _Utils_update(
			context,
			{
				u: A2(
					$jfmengels$elm_review_simplify$Simplify$RangeDict$remove,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
					context.u)
			});
		if (A2(
			$jfmengels$elm_review_simplify$Simplify$RangeDict$member,
			$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
			context.cx)) {
			var _v0 = context.I.b;
			if (_v0.b) {
				var topOfStack = _v0.a;
				var restOfStack = _v0.b;
				return _Utils_update(
					contextWithUpdatedLocalBindings,
					{
						I: _Utils_Tuple2(topOfStack, restOfStack)
					});
			} else {
				return contextWithUpdatedLocalBindings;
			}
		} else {
			return contextWithUpdatedLocalBindings;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$RangeDict$insert = F3(function $jfmengels$elm_review_simplify$Simplify$RangeDict$insert$fn(range, value, _v0) {
		var rangeDict = _v0;
		return A3(
			$elm$core$Dict$insert,
			$jfmengels$elm_review_simplify$Simplify$RangeDict$rangeAsString(range),
			value,
			rangeDict);
	});
var $jfmengels$elm_review_simplify$Simplify$RangeDict$mapFromList = F2(function $jfmengels$elm_review_simplify$Simplify$RangeDict$mapFromList$fn(toAssociation, list) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (element, acc) {
					var _v0 = toAssociation(element);
					var range = _v0.a;
					var v = _v0.b;
					return A3(
						$elm$core$Dict$insert,
						$jfmengels$elm_review_simplify$Simplify$RangeDict$rangeAsString(range),
						v,
						acc);
				}),
			$elm$core$Dict$empty,
			list);
	});
var $jfmengels$elm_review_simplify$Simplify$expressionBranchLocalBindings = function (expression) {
	switch (expression.$) {
		case 16:
			var caseBlock = expression.a;
			return A2(
				$jfmengels$elm_review_simplify$Simplify$RangeDict$mapFromList,
				function (_v1) {
					var _v2 = _v1.a;
					var pattern = _v2.b;
					var _v3 = _v1.b;
					var resultRange = _v3.a;
					return _Utils_Tuple2(
						resultRange,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$patternBindings(pattern));
				},
				caseBlock.ia);
		case 15:
			var letBlock = expression.a;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (_v4, acc) {
						var letDeclaration = _v4.b;
						if (!letDeclaration.$) {
							var letFunctionOrValueDeclaration = letDeclaration.a;
							return A3(
								$jfmengels$elm_review_simplify$Simplify$RangeDict$insert,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(letFunctionOrValueDeclaration.ii).eC),
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$patternListBindings(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(letFunctionOrValueDeclaration.ii).gs),
								acc);
						} else {
							return acc;
						}
					}),
				$jfmengels$elm_review_simplify$Simplify$RangeDict$empty,
				letBlock.gD);
		default:
			return $jfmengels$elm_review_simplify$Simplify$RangeDict$empty;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$letDeclarationBindings = function (letDeclaration) {
	if (!letDeclaration.$) {
		var fun = letDeclaration.a;
		return $elm$core$Set$singleton(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(fun.ii).cH));
	} else {
		var _v1 = letDeclaration.a;
		var pattern = _v1.b;
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$patternBindings(pattern);
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$letDeclarationListBindings = function (letDeclarationList) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (bindings, soFar) {
				return A2($elm$core$Set$union, soFar, bindings);
			}),
		$elm$core$Set$empty,
		A2(
			$elm$core$List$map,
			function (_v0) {
				var declaration = _v0.b;
				return $jfmengels$elm_review_simplify$Simplify$AstHelpers$letDeclarationBindings(declaration);
			},
			letDeclarationList));
};
var $jfmengels$elm_review_simplify$Simplify$expressionSurfaceBindings = function (expression) {
	switch (expression.$) {
		case 17:
			var lambda = expression.a;
			return $jfmengels$elm_review_simplify$Simplify$AstHelpers$patternListBindings(lambda.h0);
		case 15:
			var letBlock = expression.a;
			return $jfmengels$elm_review_simplify$Simplify$AstHelpers$letDeclarationListBindings(letBlock.gD);
		default:
			return $elm$core$Set$empty;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getBooleanPattern = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getBooleanPattern$fn(lookupTable, node) {
		getBooleanPattern:
		while (true) {
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
			switch (_v0.$) {
				case 12:
					var name = _v0.a.cH;
					switch (name) {
						case 'True':
							return _Utils_eq(
								A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node),
								$elm$core$Maybe$Just(
									_List_fromArray(
										['Basics']))) ? $elm$core$Maybe$Just(true) : $elm$core$Maybe$Nothing;
						case 'False':
							return _Utils_eq(
								A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node),
								$elm$core$Maybe$Just(
									_List_fromArray(
										['Basics']))) ? $elm$core$Maybe$Just(false) : $elm$core$Maybe$Nothing;
						default:
							return $elm$core$Maybe$Nothing;
					}
				case 14:
					var pattern = _v0.a;
					var $temp$lookupTable = lookupTable,
						$temp$node = pattern;
					lookupTable = $temp$lookupTable;
					node = $temp$node;
					continue getBooleanPattern;
				default:
					return $elm$core$Maybe$Nothing;
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$booleanCaseOfChecks = F3(function $jfmengels$elm_review_simplify$Simplify$booleanCaseOfChecks$fn(lookupTable, parentRange, _v0) {
		var expression = _v0.eC;
		var cases = _v0.ia;
		if ((cases.b && cases.b.b) && (!cases.b.b.b)) {
			var _v2 = cases.a;
			var firstPattern = _v2.a;
			var _v3 = _v2.b;
			var firstRange = _v3.a;
			var _v4 = cases.b;
			var _v5 = _v4.a;
			var _v6 = _v5.a;
			var secondPatternRange = _v6.a;
			var _v7 = _v5.b;
			var secondExprRange = _v7.a;
			var _v8 = A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getBooleanPattern, lookupTable, firstPattern);
			if (!_v8.$) {
				var isTrueFirst = _v8.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['The idiomatic way to check for a condition is to use an `if` expression.', 'Read more about it at: https://guide.elm-lang.org/core_language.html#if-expressions']),
							bx: 'Replace `case..of` by an `if` condition'
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$range(firstPattern),
						isTrueFirst ? _List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(expression).dv,
									dv: parentRange.dv
								},
								'if '),
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{
									c4: firstRange.dv,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(expression).c4
								},
								' then '),
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{c4: secondExprRange.dv, dv: secondPatternRange.dv},
								'else ')
							]) : _List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(expression).dv,
									dv: parentRange.dv
								},
								'if not ('),
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{
									c4: firstRange.dv,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(expression).c4
								},
								') then '),
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{c4: secondExprRange.dv, dv: secondPatternRange.dv},
								'else ')
							]))
					]);
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$isSimpleDestructurePattern = function (pattern) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(pattern);
	switch (_v0.$) {
		case 7:
			return true;
		case 8:
			return true;
		case 11:
			return true;
		default:
			return false;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParensFromPattern = function (node) {
	removeParensFromPattern:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 14) {
			var pattern = _v0.a;
			var $temp$node = pattern;
			node = $temp$node;
			continue removeParensFromPattern;
		} else {
			return node;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$destructuringCaseOfChecks = F3(function $jfmengels$elm_review_simplify$Simplify$destructuringCaseOfChecks$fn(extractSourceCode, parentRange, _v0) {
		var expression = _v0.eC;
		var cases = _v0.ia;
		if (cases.b && (!cases.b.b)) {
			var _v2 = cases.a;
			var rawSinglePattern = _v2.a;
			var _v3 = _v2.b;
			var bodyRange = _v3.a;
			var singlePattern = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParensFromPattern(rawSinglePattern);
			if ($jfmengels$elm_review_simplify$Simplify$isSimpleDestructurePattern(singlePattern)) {
				var exprRange = $stil4m$elm_syntax$Elm$Syntax$Node$range(expression);
				var caseIndentation = A2($elm$core$String$repeat, parentRange.dv.bH - 1, ' ');
				var bodyIndentation = A2($elm$core$String$repeat, bodyRange.dv.bH - 1, ' ');
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['It is more idiomatic in Elm to use a let expression to define a new variable rather than to use pattern matching. This will also make the code less indented, therefore easier to read.']),
							bx: 'Use a let expression to destructure data'
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$range(singlePattern),
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{c4: exprRange.dv, dv: parentRange.dv},
								'let ' + (extractSourceCode(
									$stil4m$elm_syntax$Elm$Syntax$Node$range(singlePattern)) + ' = ')),
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{c4: bodyRange.dv, dv: exprRange.c4},
								'\n' + (caseIndentation + ('in\n' + bodyIndentation)))
							]))
					]);
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$firstThatReportsError = F2(function $jfmengels$elm_review_simplify$Simplify$firstThatReportsError$fn(remainingChecks, data) {
		firstThatReportsError:
		while (true) {
			if (!remainingChecks.b) {
				return _List_Nil;
			} else {
				var checkFn = remainingChecks.a;
				var restOfFns = remainingChecks.b;
				var _v1 = checkFn(data);
				if (!_v1.b) {
					var $temp$remainingChecks = restOfFns,
						$temp$data = data;
					remainingChecks = $temp$remainingChecks;
					data = $temp$data;
					continue firstThatReportsError;
				} else {
					var errors = _v1;
					return errors;
				}
			}
		}
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$Application = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression = function (a) {
	return {$: 16, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Floatable = function (a) {
	return {$: 9, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue = F2(function $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue$fn(a, b) {
		return {$: 3, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock = F3(function $stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock$fn(a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$Integer = function (a) {
	return {$: 7, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression = function (a) {
	return {$: 17, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring = F2(function $stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression = function (a) {
	return {$: 15, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr = function (a) {
	return {$: 19, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Negation = function (a) {
	return {$: 10, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication = F4(function $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication$fn(a, b, c, d) {
		return {$: 2, a: a, b: b, c: c, d: d};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess = F2(function $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess$fn(a, b) {
		return {$: 20, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr = function (a) {
	return {$: 18, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression = F2(function $stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression$fn(a, b) {
		return {$: 22, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Infix$Right = 1;
var $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression = function (a) {
	return {$: 13, a: a};
};
var $elm$core$String$dropLeft = F2(function $elm$core$String$dropLeft$fn(n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$toNode = $stil4m$elm_syntax$Elm$Syntax$Node$Node($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange);
var $jfmengels$elm_review_simplify$Simplify$Normalize$addToFunctionCall = F2(function $jfmengels$elm_review_simplify$Simplify$Normalize$addToFunctionCall$fn(functionCall, extraArgument) {
		addToFunctionCall:
		while (true) {
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(functionCall);
			_v0$6:
			while (true) {
				switch (_v0.$) {
					case 14:
						var expr = _v0.a;
						var $temp$functionCall = expr,
							$temp$extraArgument = extraArgument;
						functionCall = $temp$functionCall;
						extraArgument = $temp$extraArgument;
						continue addToFunctionCall;
					case 1:
						if (_v0.a.b) {
							var _v1 = _v0.a;
							var fnCall = _v1.a;
							var args = _v1.b;
							return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								$stil4m$elm_syntax$Elm$Syntax$Expression$Application(
									A2(
										$elm$core$List$cons,
										fnCall,
										_Utils_ap(
											args,
											_List_fromArray(
												[extraArgument])))));
						} else {
							break _v0$6;
						}
					case 15:
						var declarations = _v0.a.gD;
						var expression = _v0.a.eC;
						return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
							$stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression(
								{
									gD: declarations,
									eC: A2($jfmengels$elm_review_simplify$Simplify$Normalize$addToFunctionCall, expression, extraArgument)
								}));
					case 4:
						var condition = _v0.a;
						var ifBranch = _v0.b;
						var elseBranch = _v0.c;
						return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
							A3(
								$stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock,
								condition,
								A2($jfmengels$elm_review_simplify$Simplify$Normalize$addToFunctionCall, ifBranch, extraArgument),
								A2($jfmengels$elm_review_simplify$Simplify$Normalize$addToFunctionCall, elseBranch, extraArgument)));
					case 16:
						var expression = _v0.a.eC;
						var cases = _v0.a.ia;
						return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
							$stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression(
								{
									ia: A2(
										$elm$core$List$map,
										function (_v2) {
											var cond = _v2.a;
											var expr = _v2.b;
											return _Utils_Tuple2(
												cond,
												A2($jfmengels$elm_review_simplify$Simplify$Normalize$addToFunctionCall, expr, extraArgument));
										},
										cases),
									eC: expression
								}));
					case 21:
						var fieldAccess = _v0.a;
						return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
							A2(
								$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess,
								extraArgument,
								$jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
									A2($elm$core$String$dropLeft, 1, fieldAccess))));
					default:
						break _v0$6;
				}
			}
			return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
				$stil4m$elm_syntax$Elm$Syntax$Expression$Application(
					_List_fromArray(
						[functionCall, extraArgument])));
		}
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern = F2(function $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern$fn(a, b) {
		return {$: 13, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern = function (a) {
	return {$: 4, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern = function (a) {
	return {$: 10, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern = F2(function $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern$fn(a, b) {
		return {$: 12, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern = function (a) {
	return {$: 7, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern = F2(function $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern$fn(a, b) {
		return {$: 9, a: a, b: b};
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern = F2(function $jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern$fn(lookupTable, node) {
		normalizePattern:
		while (true) {
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
			switch (_v0.$) {
				case 7:
					var patterns = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(
							A2(
								$elm$core$List$map,
								$jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern(lookupTable),
								patterns)));
				case 8:
					var fields = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern(
							A2(
								$elm$core$List$map,
								function (_v2) {
									var field = _v2.b;
									return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(field);
								},
								A2(
									$elm$core$List$sortBy,
									function (_v1) {
										var fieldName = _v1.b;
										return fieldName;
									},
									fields))));
				case 9:
					var element = _v0.a;
					var list = _v0.b;
					var _v3 = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern, lookupTable, list);
					if (_v3.b.$ === 10) {
						var elements = _v3.b.a;
						return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
							$stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(
								A2(
									$elm$core$List$cons,
									A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern, lookupTable, element),
									elements)));
					} else {
						var normalizedList = _v3;
						return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
							A2(
								$stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern,
								A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern, lookupTable, element),
								normalizedList));
					}
				case 10:
					var patterns = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(
							A2(
								$elm$core$List$map,
								$jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern(lookupTable),
								patterns)));
				case 12:
					var qualifiedNameRef = _v0.a;
					var patterns = _v0.b;
					var nameRef = {
						eY: A2(
							$elm$core$Maybe$withDefault,
							qualifiedNameRef.eY,
							A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node)),
						cH: qualifiedNameRef.cH
					};
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						A2(
							$stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern,
							nameRef,
							A2(
								$elm$core$List$map,
								$jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern(lookupTable),
								patterns)));
				case 13:
					var pattern = _v0.a;
					var _v4 = _v0.b;
					var asName = _v4.b;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						A2(
							$stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern,
							A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern, lookupTable, pattern),
							$jfmengels$elm_review_simplify$Simplify$Normalize$toNode(asName)));
				case 14:
					var pattern = _v0.a;
					var $temp$lookupTable = lookupTable,
						$temp$node = pattern;
					lookupTable = $temp$lookupTable;
					node = $temp$node;
					continue normalizePattern;
				case 5:
					var _int = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern(_int));
				default:
					var pattern = _v0;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(pattern);
			}
		}
	});
var $stil4m$structured_writer$StructuredWriter$Append = F2(function $stil4m$structured_writer$StructuredWriter$Append$fn(a, b) {
		return {$: 3, a: a, b: b};
	});
var $stil4m$structured_writer$StructuredWriter$append = $stil4m$structured_writer$StructuredWriter$Append;
var $stil4m$structured_writer$StructuredWriter$Breaked = function (a) {
	return {$: 1, a: a};
};
var $stil4m$structured_writer$StructuredWriter$breaked = $stil4m$structured_writer$StructuredWriter$Breaked;
var $stil4m$structured_writer$StructuredWriter$epsilon = $stil4m$structured_writer$StructuredWriter$Str('');
var $stil4m$structured_writer$StructuredWriter$Indent = F2(function $stil4m$structured_writer$StructuredWriter$Indent$fn(a, b) {
		return {$: 4, a: a, b: b};
	});
var $stil4m$structured_writer$StructuredWriter$indent = $stil4m$structured_writer$StructuredWriter$Indent;
var $stil4m$structured_writer$StructuredWriter$maybe = $elm$core$Maybe$withDefault($stil4m$structured_writer$StructuredWriter$epsilon);
var $stil4m$structured_writer$StructuredWriter$sepByComma = $stil4m$structured_writer$StructuredWriter$Sep(
	_Utils_Tuple3('', ', ', ''));
var $stil4m$structured_writer$StructuredWriter$sepBySpace = $stil4m$structured_writer$StructuredWriter$Sep(
	_Utils_Tuple3('', ' ', ''));
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(function $elm_community$list_extra$List$Extra$uniqueHelp$fn(f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
};
var $stil4m$elm_syntax$Elm$Writer$startOnDifferentLines = function (xs) {
	return $elm$core$List$length(
		$elm_community$list_extra$List$Extra$unique(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.dv;
					},
					function ($) {
						return $.b1;
					}),
				xs))) > 1;
};
var $stil4m$elm_syntax$Elm$Writer$writeDocumentation = A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, $stil4m$structured_writer$StructuredWriter$string);
var $stil4m$elm_syntax$Elm$Writer$parensIfContainsSpaces = function (w) {
	return A2(
		$elm$core$String$contains,
		' ',
		$stil4m$structured_writer$StructuredWriter$write(w)) ? $stil4m$structured_writer$StructuredWriter$join(
		_List_fromArray(
			[
				$stil4m$structured_writer$StructuredWriter$string('('),
				w,
				$stil4m$structured_writer$StructuredWriter$string(')')
			])) : w;
};
var $stil4m$elm_syntax$Elm$Writer$writeRecordField = function (_v4) {
	var _v5 = _v4.b;
	var name = _v5.a;
	var ref = _v5.b;
	return $stil4m$structured_writer$StructuredWriter$spaced(
		_List_fromArray(
			[
				$stil4m$structured_writer$StructuredWriter$string(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(name)),
				$stil4m$structured_writer$StructuredWriter$string(':'),
				$stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(ref)
			]));
};
var $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation = function (_v0) {
	var typeAnnotation = _v0.b;
	switch (typeAnnotation.$) {
		case 0:
			var s = typeAnnotation.a;
			return $stil4m$structured_writer$StructuredWriter$string(s);
		case 1:
			var moduleNameAndName = typeAnnotation.a;
			var args = typeAnnotation.b;
			var moduleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(moduleNameAndName).a;
			var k = $stil4m$elm_syntax$Elm$Syntax$Node$value(moduleNameAndName).b;
			return $stil4m$structured_writer$StructuredWriter$spaced(
				A2(
					$elm$core$List$cons,
					$stil4m$structured_writer$StructuredWriter$string(
						A2(
							$elm$core$String$join,
							'.',
							_Utils_ap(
								moduleName,
								_List_fromArray(
									[k])))),
					A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation, $stil4m$elm_syntax$Elm$Writer$parensIfContainsSpaces),
						args)));
		case 2:
			return $stil4m$structured_writer$StructuredWriter$string('()');
		case 3:
			var xs = typeAnnotation.a;
			return A2(
				$stil4m$structured_writer$StructuredWriter$parensComma,
				false,
				A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation, xs));
		case 4:
			var xs = typeAnnotation.a;
			return A2(
				$stil4m$structured_writer$StructuredWriter$bracesComma,
				false,
				A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writeRecordField, xs));
		case 5:
			var name = typeAnnotation.a;
			var fields = typeAnnotation.b;
			return $stil4m$structured_writer$StructuredWriter$spaced(
				_List_fromArray(
					[
						$stil4m$structured_writer$StructuredWriter$string('{'),
						$stil4m$structured_writer$StructuredWriter$string(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(name)),
						$stil4m$structured_writer$StructuredWriter$string('|'),
						A2(
						$stil4m$structured_writer$StructuredWriter$sepByComma,
						false,
						A2(
							$elm$core$List$map,
							$stil4m$elm_syntax$Elm$Writer$writeRecordField,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(fields))),
						$stil4m$structured_writer$StructuredWriter$string('}')
					]));
		default:
			var left = typeAnnotation.a;
			var right = typeAnnotation.b;
			var addParensForSubTypeAnnotation = function (type_) {
				if (type_.b.$ === 6) {
					var _v3 = type_.b;
					return $stil4m$structured_writer$StructuredWriter$join(
						_List_fromArray(
							[
								$stil4m$structured_writer$StructuredWriter$string('('),
								$stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(type_),
								$stil4m$structured_writer$StructuredWriter$string(')')
							]));
				} else {
					return $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(type_);
				}
			};
			return $stil4m$structured_writer$StructuredWriter$spaced(
				_List_fromArray(
					[
						addParensForSubTypeAnnotation(left),
						$stil4m$structured_writer$StructuredWriter$string('->'),
						addParensForSubTypeAnnotation(right)
					]));
	}
};
var $stil4m$elm_syntax$Elm$Writer$writeSignature = function (signature) {
	return $stil4m$structured_writer$StructuredWriter$spaced(
		_List_fromArray(
			[
				$stil4m$structured_writer$StructuredWriter$string(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(signature.cH)),
				$stil4m$structured_writer$StructuredWriter$string(':'),
				$stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(signature.hV)
			]));
};
var $stil4m$elm_syntax$Elm$Writer$writeDestructuring = F2(function $stil4m$elm_syntax$Elm$Writer$writeDestructuring$fn(pattern, expression) {
		return $stil4m$structured_writer$StructuredWriter$breaked(
			_List_fromArray(
				[
					$stil4m$structured_writer$StructuredWriter$spaced(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Writer$writePattern(pattern),
							$stil4m$structured_writer$StructuredWriter$string('=')
						])),
					A2(
					$stil4m$structured_writer$StructuredWriter$indent,
					4,
					$stil4m$elm_syntax$Elm$Writer$writeExpression(expression))
				]));
	});
var $stil4m$elm_syntax$Elm$Writer$writeExpression = function (_v3) {
	writeExpression:
	while (true) {
		var range = _v3.a;
		var inner = _v3.b;
		var writeRecordSetter = function (_v10) {
			var name = _v10.a;
			var expr = _v10.b;
			return _Utils_Tuple2(
				$stil4m$elm_syntax$Elm$Syntax$Node$range(expr),
				$stil4m$structured_writer$StructuredWriter$spaced(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$string(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(name)),
							$stil4m$structured_writer$StructuredWriter$string('='),
							$stil4m$elm_syntax$Elm$Writer$writeExpression(expr)
						])));
		};
		var sepHelper = F2(function sepHelper$fn(f, l) {
				var diffLines = $stil4m$elm_syntax$Elm$Writer$startOnDifferentLines(
					A2($elm$core$List$map, $elm$core$Tuple$first, l));
				return A2(
					f,
					diffLines,
					A2($elm$core$List$map, $elm$core$Tuple$second, l));
			});
		var recurRangeHelper = function (_v9) {
			var x = _v9.a;
			var y = _v9.b;
			return _Utils_Tuple2(
				x,
				$stil4m$elm_syntax$Elm$Writer$writeExpression(
					A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, x, y)));
		};
		switch (inner.$) {
			case 0:
				return $stil4m$structured_writer$StructuredWriter$string('()');
			case 1:
				var xs = inner.a;
				if (!xs.b) {
					return $stil4m$structured_writer$StructuredWriter$epsilon;
				} else {
					if (!xs.b.b) {
						var x = xs.a;
						var $temp$_v3 = x;
						_v3 = $temp$_v3;
						continue writeExpression;
					} else {
						var x = xs.a;
						var rest = xs.b;
						return $stil4m$structured_writer$StructuredWriter$spaced(
							_List_fromArray(
								[
									$stil4m$elm_syntax$Elm$Writer$writeExpression(x),
									A2(
									sepHelper,
									$stil4m$structured_writer$StructuredWriter$sepBySpace,
									A2($elm$core$List$map, recurRangeHelper, rest))
								]));
					}
				}
			case 2:
				var x = inner.a;
				var dir = inner.b;
				var left = inner.c;
				var right = inner.d;
				switch (dir) {
					case 0:
						return A2(
							sepHelper,
							$stil4m$structured_writer$StructuredWriter$sepBySpace,
							_List_fromArray(
								[
									_Utils_Tuple2(
									$stil4m$elm_syntax$Elm$Syntax$Node$range(left),
									$stil4m$elm_syntax$Elm$Writer$writeExpression(left)),
									_Utils_Tuple2(
									range,
									$stil4m$structured_writer$StructuredWriter$spaced(
										_List_fromArray(
											[
												$stil4m$structured_writer$StructuredWriter$string(x),
												$stil4m$elm_syntax$Elm$Writer$writeExpression(right)
											])))
								]));
					case 1:
						return A2(
							sepHelper,
							$stil4m$structured_writer$StructuredWriter$sepBySpace,
							_List_fromArray(
								[
									_Utils_Tuple2(
									$stil4m$elm_syntax$Elm$Syntax$Node$range(left),
									$stil4m$structured_writer$StructuredWriter$spaced(
										_List_fromArray(
											[
												$stil4m$elm_syntax$Elm$Writer$writeExpression(left),
												$stil4m$structured_writer$StructuredWriter$string(x)
											]))),
									_Utils_Tuple2(
									$stil4m$elm_syntax$Elm$Syntax$Node$range(right),
									$stil4m$elm_syntax$Elm$Writer$writeExpression(right))
								]));
					default:
						return A2(
							sepHelper,
							$stil4m$structured_writer$StructuredWriter$sepBySpace,
							_List_fromArray(
								[
									_Utils_Tuple2(
									$stil4m$elm_syntax$Elm$Syntax$Node$range(left),
									$stil4m$structured_writer$StructuredWriter$spaced(
										_List_fromArray(
											[
												$stil4m$elm_syntax$Elm$Writer$writeExpression(left),
												$stil4m$structured_writer$StructuredWriter$string(x)
											]))),
									_Utils_Tuple2(
									$stil4m$elm_syntax$Elm$Syntax$Node$range(right),
									$stil4m$elm_syntax$Elm$Writer$writeExpression(right))
								]));
				}
			case 3:
				var moduleName = inner.a;
				var name = inner.b;
				if (!moduleName.b) {
					return $stil4m$structured_writer$StructuredWriter$string(name);
				} else {
					return $stil4m$structured_writer$StructuredWriter$join(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Writer$writeModuleName(moduleName),
								$stil4m$structured_writer$StructuredWriter$string('.'),
								$stil4m$structured_writer$StructuredWriter$string(name)
							]));
				}
			case 4:
				var condition = inner.a;
				var thenCase = inner.b;
				var elseCase = inner.c;
				return $stil4m$structured_writer$StructuredWriter$breaked(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$spaced(
							_List_fromArray(
								[
									$stil4m$structured_writer$StructuredWriter$string('if'),
									$stil4m$elm_syntax$Elm$Writer$writeExpression(condition),
									$stil4m$structured_writer$StructuredWriter$string('then')
								])),
							A2(
							$stil4m$structured_writer$StructuredWriter$indent,
							2,
							$stil4m$elm_syntax$Elm$Writer$writeExpression(thenCase)),
							$stil4m$structured_writer$StructuredWriter$string('else'),
							A2(
							$stil4m$structured_writer$StructuredWriter$indent,
							2,
							$stil4m$elm_syntax$Elm$Writer$writeExpression(elseCase))
						]));
			case 5:
				var x = inner.a;
				return $stil4m$structured_writer$StructuredWriter$string('(' + (x + ')'));
			case 6:
				var x = inner.a;
				return $stil4m$structured_writer$StructuredWriter$string(x);
			case 8:
				var h = inner.a;
				return $stil4m$structured_writer$StructuredWriter$join(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$string('0x'),
							$stil4m$structured_writer$StructuredWriter$string(
							$rtfeldman$elm_hex$Hex$toString(h))
						]));
			case 7:
				var i = inner.a;
				return $stil4m$structured_writer$StructuredWriter$string(
					$elm$core$String$fromInt(i));
			case 9:
				var f = inner.a;
				return $stil4m$structured_writer$StructuredWriter$string(
					$elm$core$String$fromFloat(f));
			case 10:
				var x = inner.a;
				return A2(
					$stil4m$structured_writer$StructuredWriter$append,
					$stil4m$structured_writer$StructuredWriter$string('-'),
					$stil4m$elm_syntax$Elm$Writer$writeExpression(x));
			case 11:
				var s = inner.a;
				return $stil4m$structured_writer$StructuredWriter$string('\"' + (s + '\"'));
			case 12:
				var c = inner.a;
				return $stil4m$elm_syntax$Elm$Writer$writeChar(c);
			case 13:
				var t = inner.a;
				return $stil4m$structured_writer$StructuredWriter$join(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$string('('),
							A2(
							sepHelper,
							$stil4m$structured_writer$StructuredWriter$sepByComma,
							A2($elm$core$List$map, recurRangeHelper, t)),
							$stil4m$structured_writer$StructuredWriter$string(')')
						]));
			case 14:
				var x = inner.a;
				return $stil4m$structured_writer$StructuredWriter$join(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$string('('),
							$stil4m$elm_syntax$Elm$Writer$writeExpression(x),
							$stil4m$structured_writer$StructuredWriter$string(')')
						]));
			case 15:
				var letBlock = inner.a;
				return $stil4m$structured_writer$StructuredWriter$breaked(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$string('let'),
							A2(
							$stil4m$structured_writer$StructuredWriter$indent,
							2,
							$stil4m$structured_writer$StructuredWriter$breaked(
								A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writeLetDeclaration, letBlock.gD))),
							$stil4m$structured_writer$StructuredWriter$string('in'),
							A2(
							$stil4m$structured_writer$StructuredWriter$indent,
							2,
							$stil4m$elm_syntax$Elm$Writer$writeExpression(letBlock.eC))
						]));
			case 16:
				var caseBlock = inner.a;
				var writeCaseBranch = function (_v8) {
					var pattern = _v8.a;
					var expression = _v8.b;
					return A2(
						$stil4m$structured_writer$StructuredWriter$indent,
						2,
						$stil4m$structured_writer$StructuredWriter$breaked(
							_List_fromArray(
								[
									$stil4m$structured_writer$StructuredWriter$spaced(
									_List_fromArray(
										[
											$stil4m$elm_syntax$Elm$Writer$writePattern(pattern),
											$stil4m$structured_writer$StructuredWriter$string('->')
										])),
									A2(
									$stil4m$structured_writer$StructuredWriter$indent,
									2,
									$stil4m$elm_syntax$Elm$Writer$writeExpression(expression))
								])));
				};
				return $stil4m$structured_writer$StructuredWriter$breaked(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$string(''),
							$stil4m$structured_writer$StructuredWriter$spaced(
							_List_fromArray(
								[
									$stil4m$structured_writer$StructuredWriter$string('case'),
									$stil4m$elm_syntax$Elm$Writer$writeExpression(caseBlock.eC),
									$stil4m$structured_writer$StructuredWriter$string('of')
								])),
							$stil4m$structured_writer$StructuredWriter$breaked(
							A2($elm$core$List$map, writeCaseBranch, caseBlock.ia)),
							$stil4m$structured_writer$StructuredWriter$string('')
						]));
			case 17:
				var lambda = inner.a;
				return $stil4m$structured_writer$StructuredWriter$spaced(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$join(
							_List_fromArray(
								[
									$stil4m$structured_writer$StructuredWriter$string('\\'),
									$stil4m$structured_writer$StructuredWriter$spaced(
									A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writePattern, lambda.h0))
								])),
							$stil4m$structured_writer$StructuredWriter$string('->'),
							$stil4m$elm_syntax$Elm$Writer$writeExpression(lambda.eC)
						]));
			case 18:
				var setters = inner.a;
				return A2(
					sepHelper,
					$stil4m$structured_writer$StructuredWriter$bracesComma,
					A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, writeRecordSetter),
						setters));
			case 19:
				var xs = inner.a;
				return A2(
					sepHelper,
					$stil4m$structured_writer$StructuredWriter$bracketsComma,
					A2($elm$core$List$map, recurRangeHelper, xs));
			case 20:
				var expression = inner.a;
				var accessor = inner.b;
				return $stil4m$structured_writer$StructuredWriter$join(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Writer$writeExpression(expression),
							$stil4m$structured_writer$StructuredWriter$string('.'),
							$stil4m$structured_writer$StructuredWriter$string(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(accessor))
						]));
			case 21:
				var s = inner.a;
				return A2($elm$core$String$startsWith, '.', s) ? $stil4m$structured_writer$StructuredWriter$string(s) : $stil4m$structured_writer$StructuredWriter$join(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$string('.'),
							$stil4m$structured_writer$StructuredWriter$string(s)
						]));
			case 22:
				var name = inner.a;
				var updates = inner.b;
				return $stil4m$structured_writer$StructuredWriter$spaced(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$string('{'),
							$stil4m$structured_writer$StructuredWriter$string(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(name)),
							$stil4m$structured_writer$StructuredWriter$string('|'),
							A2(
							sepHelper,
							$stil4m$structured_writer$StructuredWriter$sepByComma,
							A2(
								$elm$core$List$map,
								A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, writeRecordSetter),
								updates)),
							$stil4m$structured_writer$StructuredWriter$string('}')
						]));
			default:
				var s = inner.a;
				return $stil4m$structured_writer$StructuredWriter$join(
					_List_fromArray(
						[
							$stil4m$structured_writer$StructuredWriter$string('[glsl|'),
							$stil4m$structured_writer$StructuredWriter$string(s),
							$stil4m$structured_writer$StructuredWriter$string('|]')
						]));
		}
	}
};
var $stil4m$elm_syntax$Elm$Writer$writeFunction = function (_v2) {
	var documentation = _v2.fB;
	var signature = _v2.i7;
	var declaration = _v2.ii;
	return $stil4m$structured_writer$StructuredWriter$breaked(
		_List_fromArray(
			[
				$stil4m$structured_writer$StructuredWriter$maybe(
				A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Writer$writeDocumentation, documentation)),
				$stil4m$structured_writer$StructuredWriter$maybe(
				A2(
					$elm$core$Maybe$map,
					A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, $stil4m$elm_syntax$Elm$Writer$writeSignature),
					signature)),
				$stil4m$elm_syntax$Elm$Writer$writeFunctionImplementation(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration))
			]));
};
var $stil4m$elm_syntax$Elm$Writer$writeFunctionImplementation = function (declaration) {
	return $stil4m$structured_writer$StructuredWriter$breaked(
		_List_fromArray(
			[
				$stil4m$structured_writer$StructuredWriter$spaced(
				_List_fromArray(
					[
						$stil4m$structured_writer$StructuredWriter$string(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration.cH)),
						$stil4m$structured_writer$StructuredWriter$spaced(
						A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writePattern, declaration.gs)),
						$stil4m$structured_writer$StructuredWriter$string('=')
					])),
				A2(
				$stil4m$structured_writer$StructuredWriter$indent,
				4,
				$stil4m$elm_syntax$Elm$Writer$writeExpression(declaration.eC))
			]));
};
var $stil4m$elm_syntax$Elm$Writer$writeLetDeclaration = function (_v0) {
	var letDeclaration = _v0.b;
	if (!letDeclaration.$) {
		var _function = letDeclaration.a;
		return $stil4m$elm_syntax$Elm$Writer$writeFunction(_function);
	} else {
		var pattern = letDeclaration.a;
		var expression = letDeclaration.b;
		return A2($stil4m$elm_syntax$Elm$Writer$writeDestructuring, pattern, expression);
	}
};
var $jfmengels$elm_review_simplify$Simplify$Normalize$toComparable = function (a) {
	return $stil4m$elm_syntax$Elm$Writer$write(
		$stil4m$elm_syntax$Elm$Writer$writeExpression(a));
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Literal = function (a) {
	return {$: 11, a: a};
};
var $jfmengels$elm_review_simplify$Simplify$Infer$falseExpr = A2(
	$stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue,
	_List_fromArray(
		['Basics']),
	'False');
var $pzp1997$assoc_list$AssocList$get = F2(function $pzp1997$assoc_list$AssocList$get$fn(targetKey, _v0) {
		get:
		while (true) {
			var alist = _v0;
			if (!alist.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v2 = alist.a;
				var key = _v2.a;
				var value = _v2.b;
				var rest = alist.b;
				if (_Utils_eq(key, targetKey)) {
					return $elm$core$Maybe$Just(value);
				} else {
					var $temp$targetKey = targetKey,
						$temp$_v0 = rest;
					targetKey = $temp$targetKey;
					_v0 = $temp$_v0;
					continue get;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$trueExpr = A2(
	$stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue,
	_List_fromArray(
		['Basics']),
	'True');
var $jfmengels$elm_review_simplify$Simplify$Infer$get = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$get$fn(expr, _v0) {
		var inferred = _v0;
		return A2(
			$elm$core$Maybe$map,
			function (value) {
				switch (value.$) {
					case 0:
						return $jfmengels$elm_review_simplify$Simplify$Infer$trueExpr;
					case 1:
						return $jfmengels$elm_review_simplify$Simplify$Infer$falseExpr;
					case 2:
						var _float = value.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(_float);
					default:
						var str = value.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$Literal(str);
				}
			},
			A2($pzp1997$assoc_list$AssocList$get, expr, inferred.cb));
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$toNodeAndInfer = F2(function $jfmengels$elm_review_simplify$Simplify$Normalize$toNodeAndInfer$fn(resources, element) {
		var _v0 = A2($jfmengels$elm_review_simplify$Simplify$Infer$get, element, resources.I.a);
		if (!_v0.$) {
			var value = _v0.a;
			return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(value);
		} else {
			return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(element);
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$normalize = F2(function $jfmengels$elm_review_simplify$Simplify$Normalize$normalize$fn(resources, node) {
		normalize:
		while (true) {
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
			switch (_v0.$) {
				case 14:
					var expr = _v0.a;
					var $temp$resources = resources,
						$temp$node = expr;
					resources = $temp$resources;
					node = $temp$node;
					continue normalize;
				case 1:
					var nodes = _v0.a;
					if (nodes.b && nodes.b.b) {
						var fn = nodes.a;
						var _v2 = nodes.b;
						var arg1 = _v2.a;
						var restOrArgs = _v2.b;
						var normalizedArg1 = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, arg1);
						var _v3 = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, fn);
						if (_v3.b.$ === 21) {
							var fieldAccess = _v3.b.a;
							var recordAccess = $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess,
									normalizedArg1,
									$jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
										A2($elm$core$String$dropLeft, 1, fieldAccess))));
							return $elm$core$List$isEmpty(restOrArgs) ? recordAccess : $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								$stil4m$elm_syntax$Elm$Syntax$Expression$Application(
									A2(
										$elm$core$List$cons,
										recordAccess,
										A2(
											$elm$core$List$map,
											$jfmengels$elm_review_simplify$Simplify$Normalize$normalize(resources),
											restOrArgs))));
						} else {
							var normalizedFn = _v3;
							return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								$stil4m$elm_syntax$Elm$Syntax$Expression$Application(
									A2(
										$elm$core$List$cons,
										normalizedFn,
										A2(
											$elm$core$List$cons,
											normalizedArg1,
											A2(
												$elm$core$List$map,
												$jfmengels$elm_review_simplify$Simplify$Normalize$normalize(resources),
												restOrArgs)))));
						}
					} else {
						return node;
					}
				case 2:
					switch (_v0.a) {
						case '<|':
							var _function = _v0.c;
							var extraArgument = _v0.d;
							return A2(
								$jfmengels$elm_review_simplify$Simplify$Normalize$addToFunctionCall,
								A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, _function),
								A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, extraArgument));
						case '|>':
							var extraArgument = _v0.c;
							var _function = _v0.d;
							return A2(
								$jfmengels$elm_review_simplify$Simplify$Normalize$addToFunctionCall,
								A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, _function),
								A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, extraArgument));
						case '<<':
							var left = _v0.c;
							var right = _v0.d;
							return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								A4(
									$stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication,
									'>>',
									1,
									A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, right),
									A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, left)));
						case '::':
							var infixDirection = _v0.b;
							var element = _v0.c;
							var list = _v0.d;
							var normalizedList = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, list);
							var normalizedElement = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, element);
							var _v4 = $stil4m$elm_syntax$Elm$Syntax$Node$value(normalizedList);
							if (_v4.$ === 19) {
								var elements = _v4.a;
								return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
									$stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(
										A2($elm$core$List$cons, normalizedElement, elements)));
							} else {
								return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
									A4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication, '::', infixDirection, normalizedElement, normalizedList));
							}
						case '>':
							var infixDirection = _v0.b;
							var left = _v0.c;
							var right = _v0.d;
							return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								A4(
									$stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication,
									'<',
									infixDirection,
									A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, right),
									A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, left)));
						case '>=':
							var infixDirection = _v0.b;
							var left = _v0.c;
							var right = _v0.d;
							return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								A4(
									$stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication,
									'<=',
									infixDirection,
									A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, right),
									A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, left)));
						default:
							var operator = _v0.a;
							var infixDirection = _v0.b;
							var l = _v0.c;
							var r = _v0.d;
							var right = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, r);
							var left = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, l);
							return (A2(
								$elm$core$List$member,
								operator,
								_List_fromArray(
									['+', '*', '||', '&&', '==', '/='])) && (_Utils_cmp(
								$jfmengels$elm_review_simplify$Simplify$Normalize$toComparable(left),
								$jfmengels$elm_review_simplify$Simplify$Normalize$toComparable(right)) > 0)) ? $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								A4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication, operator, infixDirection, right, left)) : $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								A4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication, operator, infixDirection, left, right));
					}
				case 3:
					var rawModuleName = _v0.a;
					var string = _v0.b;
					return A2(
						$jfmengels$elm_review_simplify$Simplify$Normalize$toNodeAndInfer,
						resources,
						A2(
							$stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue,
							A2(
								$elm$core$Maybe$withDefault,
								rawModuleName,
								A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, resources.s, node)),
							string));
				case 4:
					var cond = _v0.a;
					var then_ = _v0.b;
					var else_ = _v0.c;
					var reverseIfConditionIsNegated = F3(function reverseIfConditionIsNegated$fn(condArg, thenArg, elseArg) {
							reverseIfConditionIsNegated:
							while (true) {
								var _v5 = $stil4m$elm_syntax$Elm$Syntax$Node$value(condArg);
								if (((((((((_v5.$ === 1) && _v5.a.b) && (_v5.a.a.b.$ === 3)) && _v5.a.a.b.a.b) && (_v5.a.a.b.a.a === 'Basics')) && (!_v5.a.a.b.a.b.b)) && (_v5.a.a.b.b === 'not')) && _v5.a.b.b) && (!_v5.a.b.b.b)) {
									var _v6 = _v5.a;
									var _v7 = _v6.a;
									var _v8 = _v7.b;
									var _v9 = _v8.a;
									var _v10 = _v6.b;
									var negatedCondition = _v10.a;
									var $temp$condArg = negatedCondition,
										$temp$thenArg = elseArg,
										$temp$elseArg = thenArg;
									condArg = $temp$condArg;
									thenArg = $temp$thenArg;
									elseArg = $temp$elseArg;
									continue reverseIfConditionIsNegated;
								} else {
									return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
										A3($stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock, condArg, thenArg, elseArg));
								}
							}
						});
					return A3(
						reverseIfConditionIsNegated,
						A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, cond),
						A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, then_),
						A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, else_));
				case 10:
					var expr = _v0.a;
					var normalized = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, expr);
					var _v11 = $stil4m$elm_syntax$Elm$Syntax$Node$value(normalized);
					switch (_v11.$) {
						case 7:
							var _int = _v11.a;
							return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								$stil4m$elm_syntax$Elm$Syntax$Expression$Integer(-_int));
						case 9:
							var _float = _v11.a;
							return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(-_float));
						default:
							return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
								$stil4m$elm_syntax$Elm$Syntax$Expression$Negation(normalized));
					}
				case 13:
					var nodes = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(
							A2(
								$elm$core$List$map,
								$jfmengels$elm_review_simplify$Simplify$Normalize$normalize(resources),
								nodes)));
				case 15:
					var letBlock = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression(
							{
								gD: A2(
									$elm$core$List$map,
									function (decl) {
										var _v12 = $stil4m$elm_syntax$Elm$Syntax$Node$value(decl);
										if (!_v12.$) {
											var _function = _v12.a;
											var declaration = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii);
											return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
												$stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction(
													{
														ii: $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
															{
																gs: A2(
																	$elm$core$List$map,
																	$jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern(resources.s),
																	declaration.gs),
																eC: A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, declaration.eC),
																cH: $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
																	$stil4m$elm_syntax$Elm$Syntax$Node$value(declaration.cH))
															}),
														fB: $elm$core$Maybe$Nothing,
														i7: $elm$core$Maybe$Nothing
													}));
										} else {
											var pattern = _v12.a;
											var expr = _v12.b;
											return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
												A2(
													$stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring,
													A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern, resources.s, pattern),
													A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, expr)));
										}
									},
									letBlock.gD),
								eC: A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, letBlock.eC)
							}));
				case 16:
					var caseBlock = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression(
							{
								ia: A2(
									$elm$core$List$map,
									function (_v13) {
										var pattern = _v13.a;
										var expr = _v13.b;
										return _Utils_Tuple2(
											A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern, resources.s, pattern),
											A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, expr));
									},
									caseBlock.ia),
								eC: A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, caseBlock.eC)
							}));
				case 17:
					var lambda = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression(
							{
								h0: A2(
									$elm$core$List$map,
									$jfmengels$elm_review_simplify$Simplify$Normalize$normalizePattern(resources.s),
									lambda.h0),
								eC: A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, lambda.eC)
							}));
				case 19:
					var nodes = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(
							A2(
								$elm$core$List$map,
								$jfmengels$elm_review_simplify$Simplify$Normalize$normalize(resources),
								nodes)));
				case 20:
					var expr = _v0.a;
					var _v14 = _v0.b;
					var field = _v14.b;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						A2(
							$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess,
							A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, expr),
							$jfmengels$elm_review_simplify$Simplify$Normalize$toNode(field)));
				case 18:
					var nodes = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(
							A2(
								$elm$core$List$map,
								function (_v18) {
									var _v19 = _v18.b;
									var _v20 = _v19.a;
									var fieldName = _v20.b;
									var expr = _v19.b;
									return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
										_Utils_Tuple2(
											$jfmengels$elm_review_simplify$Simplify$Normalize$toNode(fieldName),
											A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, expr)));
								},
								A2(
									$elm$core$List$sortBy,
									function (_v15) {
										var _v16 = _v15.b;
										var _v17 = _v16.a;
										var fieldName = _v17.b;
										return fieldName;
									},
									nodes))));
				case 22:
					var _v21 = _v0.a;
					var value = _v21.b;
					var nodes = _v0.b;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						A2(
							$stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression,
							$jfmengels$elm_review_simplify$Simplify$Normalize$toNode(value),
							A2(
								$elm$core$List$map,
								function (_v25) {
									var _v26 = _v25.b;
									var _v27 = _v26.a;
									var fieldName = _v27.b;
									var expr = _v26.b;
									return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
										_Utils_Tuple2(
											$jfmengels$elm_review_simplify$Simplify$Normalize$toNode(fieldName),
											A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, expr)));
								},
								A2(
									$elm$core$List$sortBy,
									function (_v22) {
										var _v23 = _v22.b;
										var _v24 = _v23.a;
										var fieldName = _v24.b;
										return fieldName;
									},
									nodes))));
				case 8:
					var _int = _v0.a;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(
						$stil4m$elm_syntax$Elm$Syntax$Expression$Integer(_int));
				default:
					var expr = _v0;
					return $jfmengels$elm_review_simplify$Simplify$Normalize$toNode(expr);
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$areAllTheSame = F3(function $jfmengels$elm_review_simplify$Simplify$Normalize$areAllTheSame$fn(resources, first, rest) {
		var normalizedFirst = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, first);
		return A2(
			$elm$core$List$all,
			function (node) {
				return _Utils_eq(
					A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, node),
					normalizedFirst);
			},
			rest);
	});
var $jfmengels$elm_review_simplify$Simplify$caseKeyWordRange = function (range) {
	return {
		c4: {bH: range.dv.bH + 4, b1: range.dv.b1},
		dv: range.dv
	};
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$fullModuleNameFor = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$fullModuleNameFor$fn(_v0, _v1) {
		var currentModuleName = _v0.a;
		var dict = _v0.b;
		var range = _v1.a;
		var _v2 = A2(
			$elm$core$Dict$get,
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$toRangeLike(range),
			dict);
		if ((!_v2.$) && (!_v2.a.b)) {
			return $elm$core$Maybe$Just(currentModuleName);
		} else {
			var res = _v2;
			return res;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$introducesVariableOrUsesTypeConstructor = F2(function $jfmengels$elm_review_simplify$Simplify$introducesVariableOrUsesTypeConstructor$fn(context, nodesToLookAt) {
		introducesVariableOrUsesTypeConstructor:
		while (true) {
			if (!nodesToLookAt.b) {
				return false;
			} else {
				var node = nodesToLookAt.a;
				var remaining = nodesToLookAt.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				switch (_v1.$) {
					case 11:
						return true;
					case 8:
						return true;
					case 13:
						return true;
					case 14:
						var pattern = _v1.a;
						var $temp$context = context,
							$temp$nodesToLookAt = A2($elm$core$List$cons, pattern, remaining);
						context = $temp$context;
						nodesToLookAt = $temp$nodesToLookAt;
						continue introducesVariableOrUsesTypeConstructor;
					case 7:
						var nodes = _v1.a;
						var $temp$context = context,
							$temp$nodesToLookAt = _Utils_ap(nodes, remaining);
						context = $temp$context;
						nodesToLookAt = $temp$nodesToLookAt;
						continue introducesVariableOrUsesTypeConstructor;
					case 9:
						var first = _v1.a;
						var rest = _v1.b;
						var $temp$context = context,
							$temp$nodesToLookAt = A2(
							$elm$core$List$cons,
							first,
							A2($elm$core$List$cons, rest, remaining));
						context = $temp$context;
						nodesToLookAt = $temp$nodesToLookAt;
						continue introducesVariableOrUsesTypeConstructor;
					case 10:
						var nodes = _v1.a;
						var $temp$context = context,
							$temp$nodesToLookAt = _Utils_ap(nodes, remaining);
						context = $temp$context;
						nodesToLookAt = $temp$nodesToLookAt;
						continue introducesVariableOrUsesTypeConstructor;
					case 12:
						var name = _v1.a.cH;
						var nodes = _v1.b;
						var _v2 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$fullModuleNameFor, context.s, node);
						if (!_v2.$) {
							var moduleName = _v2.a;
							if (A2(
								$elm$core$Set$member,
								_Utils_Tuple2(moduleName, name),
								context.bq)) {
								var $temp$context = context,
									$temp$nodesToLookAt = _Utils_ap(nodes, remaining);
								context = $temp$context;
								nodesToLookAt = $temp$nodesToLookAt;
								continue introducesVariableOrUsesTypeConstructor;
							} else {
								return true;
							}
						} else {
							return true;
						}
					default:
						var $temp$context = context,
							$temp$nodesToLookAt = remaining;
						context = $temp$context;
						nodesToLookAt = $temp$nodesToLookAt;
						continue introducesVariableOrUsesTypeConstructor;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$sameBodyForCaseOfChecks = F3(function $jfmengels$elm_review_simplify$Simplify$sameBodyForCaseOfChecks$fn(context, parentRange, cases) {
		if (!cases.b) {
			return _List_Nil;
		} else {
			var _v1 = cases.a;
			var firstPattern = _v1.a;
			var firstBody = _v1.b;
			var rest = cases.b;
			var restPatterns = A2($elm$core$List$map, $elm$core$Tuple$first, rest);
			if (A2(
				$jfmengels$elm_review_simplify$Simplify$introducesVariableOrUsesTypeConstructor,
				context,
				A2($elm$core$List$cons, firstPattern, restPatterns)) || (!A3(
				$jfmengels$elm_review_simplify$Simplify$Normalize$areAllTheSame,
				context,
				firstBody,
				A2($elm$core$List$map, $elm$core$Tuple$second, rest)))) {
				return _List_Nil;
			} else {
				var firstBodyRange = $stil4m$elm_syntax$Elm$Syntax$Node$range(firstBody);
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['All the branches of this case expression resolve to the same value. You can remove the case expression and replace it with the body of one of the branches.']),
							bx: 'Unnecessary case expression'
						},
						$jfmengels$elm_review_simplify$Simplify$caseKeyWordRange(parentRange),
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								{c4: firstBodyRange.dv, dv: parentRange.dv}),
								$jfmengels$elm_review$Review$Fix$removeRange(
								{c4: parentRange.c4, dv: firstBodyRange.c4})
							]))
					]);
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$caseOfChecks = F3(function $jfmengels$elm_review_simplify$Simplify$caseOfChecks$fn(context, parentRange, caseBlock) {
		return A2(
			$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
			_List_fromArray(
				[
					function (_v0) {
					return A3($jfmengels$elm_review_simplify$Simplify$sameBodyForCaseOfChecks, context, parentRange, caseBlock.ia);
				},
					function (_v1) {
					return A3($jfmengels$elm_review_simplify$Simplify$booleanCaseOfChecks, context.s, parentRange, caseBlock);
				},
					function (_v2) {
					return A3($jfmengels$elm_review_simplify$Simplify$destructuringCaseOfChecks, context.eD, parentRange, caseBlock);
				}
				]),
			0);
	});
var $jfmengels$elm_review_simplify$Simplify$alwaysCompositionErrorMessage = {
	eq: _List_fromArray(
		['`always` will swallow the function composed into it.']),
	bx: 'Function composed with always will be ignored'
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens = function (node) {
	removeParens:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 14) {
			var expr = _v0.a;
			var $temp$node = expr;
			node = $temp$node;
			continue removeParens;
		} else {
			return node;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$isAlwaysCall = F2(function $jfmengels$elm_review_simplify$Simplify$isAlwaysCall$fn(lookupTable, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		if ((((((_v0.$ === 1) && _v0.a.b) && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'always')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
			var _v1 = _v0.a;
			var _v2 = _v1.a;
			var alwaysRange = _v2.a;
			var _v3 = _v2.b;
			var _v4 = _v1.b;
			return _Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, alwaysRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Basics'])));
		} else {
			return false;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$alwaysCompositionCheck = function (checkInfo) {
	return checkInfo.D ? (A2($jfmengels$elm_review_simplify$Simplify$isAlwaysCall, checkInfo.s, checkInfo.l) ? _List_fromArray(
		[
			A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			$jfmengels$elm_review_simplify$Simplify$alwaysCompositionErrorMessage,
			checkInfo.i,
			_List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(
					{c4: checkInfo.i.dv, dv: checkInfo.g.dv})
				]))
		]) : _List_Nil) : (A2($jfmengels$elm_review_simplify$Simplify$isAlwaysCall, checkInfo.s, checkInfo.k) ? _List_fromArray(
		[
			A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			$jfmengels$elm_review_simplify$Simplify$alwaysCompositionErrorMessage,
			checkInfo.g,
			_List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(
					{c4: checkInfo.i.c4, dv: checkInfo.g.c4})
				]))
		]) : _List_Nil);
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction = F4(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction$fn(moduleName, fnName, lookupTable, node) {
		var _v0 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node);
		if (_v0.b.$ === 3) {
			var noneRange = _v0.a;
			var _v1 = _v0.b;
			var foundFnName = _v1.b;
			return _Utils_eq(foundFnName, fnName) && _Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, noneRange),
				$elm$core$Maybe$Just(moduleName));
		} else {
			return false;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$moduleNameToString = function (moduleName) {
	return A2($elm$core$String$join, '.', moduleName);
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString = function (_v0) {
	var moduleName = _v0.a;
	var name = _v0.b;
	return $elm$core$List$isEmpty(moduleName) ? name : ($jfmengels$elm_review_simplify$Simplify$AstHelpers$moduleNameToString(moduleName) + ('.' + name));
};
var $jfmengels$elm_review_simplify$Simplify$RangeDict$foldl = F3(function $jfmengels$elm_review_simplify$Simplify$RangeDict$foldl$fn(reduce, initialFolded, _v0) {
		var rangeDict = _v0;
		return A3(
			$elm$core$Dict$foldl,
			function (_v1) {
				return reduce;
			},
			initialFolded,
			rangeDict);
	});
var $jfmengels$elm_review_simplify$Simplify$RangeDict$any = F2(function $jfmengels$elm_review_simplify$Simplify$RangeDict$any$fn(isFound, rangeDict) {
		return A3(
			$jfmengels$elm_review_simplify$Simplify$RangeDict$foldl,
			F2(
				function (value, soFar) {
					return soFar || isFound(value);
				}),
			false,
			rangeDict);
	});
var $jfmengels$elm_review_simplify$Simplify$isBindingInScope = F2(function $jfmengels$elm_review_simplify$Simplify$isBindingInScope$fn(resources, name) {
		return A2($elm$core$Set$member, name, resources.A) || A2(
			$jfmengels$elm_review_simplify$Simplify$RangeDict$any,
			function (bindings) {
				return A2($elm$core$Set$member, name, bindings);
			},
			resources.u);
	});
var $jfmengels$elm_review_simplify$Simplify$qualify = F2(function $jfmengels$elm_review_simplify$Simplify$qualify$fn(_v0, qualifyResources) {
		var moduleName = _v0.a;
		var name = _v0.b;
		var qualification = function () {
			var _v1 = A2($elm$core$Dict$get, moduleName, qualifyResources.E);
			if (_v1.$ === 1) {
				return moduleName;
			} else {
				var import_ = _v1.a;
				var moduleImportedName = A2($elm$core$Maybe$withDefault, moduleName, import_.U);
				if (!A2($jfmengels$elm_review_simplify$Simplify$isExposedFrom, import_.gQ, name)) {
					return moduleImportedName;
				} else {
					var isShadowed = A2($jfmengels$elm_review_simplify$Simplify$isBindingInScope, qualifyResources, name);
					return isShadowed ? moduleImportedName : _List_Nil;
				}
			}
		}();
		return _Utils_Tuple2(qualification, name);
	});
var $jfmengels$elm_review_simplify$Simplify$concatAndMapCompositionCheck = function (checkInfo) {
	if (checkInfo.D) {
		if (A4(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
			_List_fromArray(
				['List']),
			'concat',
			checkInfo.s,
			checkInfo.l)) {
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.k));
			if ((((_v0.$ === 1) && _v0.a.b) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
				var _v1 = _v0.a;
				var leftFunction = _v1.a;
				var _v2 = _v1.b;
				return A4(
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
					_List_fromArray(
						['List']),
					'map',
					checkInfo.s,
					leftFunction) ? _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['List.concatMap is meant for this exact purpose and will also be faster.']),
							bx: 'List.map and List.concat can be combined using List.concatMap'
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.l),
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								{
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.l).c4,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.k).c4
								}),
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(leftFunction),
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['List']),
											'concatMap'),
										checkInfo)))
							]))
					]) : _List_Nil;
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	} else {
		if (A4(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
			_List_fromArray(
				['List']),
			'concat',
			checkInfo.s,
			checkInfo.k)) {
			var _v3 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.l));
			if ((((_v3.$ === 1) && _v3.a.b) && _v3.a.b.b) && (!_v3.a.b.b.b)) {
				var _v4 = _v3.a;
				var rightFunction = _v4.a;
				var _v5 = _v4.b;
				return A4(
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
					_List_fromArray(
						['List']),
					'map',
					checkInfo.s,
					rightFunction) ? _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['List.concatMap is meant for this exact purpose and will also be faster.']),
							bx: 'List.map and List.concat can be combined using List.concatMap'
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.k),
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								{
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.l).dv,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.k).dv
								}),
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(rightFunction),
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['List']),
											'concatMap'),
										checkInfo)))
							]))
					]) : _List_Nil;
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$dictToListMapErrorInfo = function (info) {
	var toEntryAspectListAsQualifiedString = $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
		_Utils_Tuple2(
			_List_fromArray(
				['Dict']),
			info.cP));
	return {
		eq: _List_fromArray(
			['Using ' + (toEntryAspectListAsQualifiedString + ' directly is meant for this exact purpose and will also be faster.')]),
		bx: 'Using Dict.toList, then List.map Tuple.' + (info.ek + (' is the same as using ' + toEntryAspectListAsQualifiedString))
	};
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$drop2BeginningsWhile = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$drop2BeginningsWhile$fn(shouldDrop, listPair) {
		drop2BeginningsWhile:
		while (true) {
			if (!listPair.a.b) {
				var bList = listPair.b;
				return _Utils_Tuple2(_List_Nil, bList);
			} else {
				if (!listPair.b.b) {
					var aList = listPair.a;
					return _Utils_Tuple2(aList, _List_Nil);
				} else {
					var _v1 = listPair.a;
					var aHead = _v1.a;
					var aTail = _v1.b;
					var _v2 = listPair.b;
					var bHead = _v2.a;
					var bTail = _v2.b;
					if (shouldDrop(
						_Utils_Tuple2(aHead, bHead))) {
						var $temp$shouldDrop = shouldDrop,
							$temp$listPair = _Utils_Tuple2(aTail, bTail);
						shouldDrop = $temp$shouldDrop;
						listPair = $temp$listPair;
						continue drop2BeginningsWhile;
					} else {
						return _Utils_Tuple2(
							A2($elm$core$List$cons, aHead, aTail),
							A2($elm$core$List$cons, bHead, bTail));
					}
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$drop2EndingsWhile = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$drop2EndingsWhile$fn(shouldDrop, _v0) {
		var aList = _v0.a;
		var bList = _v0.b;
		var _v1 = A2(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$drop2BeginningsWhile,
			shouldDrop,
			_Utils_Tuple2(
				$elm$core$List$reverse(aList),
				$elm$core$List$reverse(bList)));
		var reducedArgumentsReverse = _v1.a;
		var reducedPatternsReverse = _v1.b;
		return _Utils_Tuple2(
			$elm$core$List$reverse(reducedArgumentsReverse),
			$elm$core$List$reverse(reducedPatternsReverse));
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getCollapsedLambda = function (expressionNode) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(expressionNode));
	if (_v0.$ === 17) {
		var lambda = _v0.a;
		var _v1 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getCollapsedLambda(lambda.eC);
		if (_v1.$ === 1) {
			return $elm$core$Maybe$Just(
				{eC: lambda.eC, e3: lambda.h0});
		} else {
			var innerCollapsedLambda = _v1.a;
			return $elm$core$Maybe$Just(
				{
					eC: innerCollapsedLambda.eC,
					e3: _Utils_ap(lambda.h0, innerCollapsedLambda.e3)
				});
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getCollapsedValueOrFunction = function (baseNode) {
	var step = function (layer) {
		return A2(
			$elm$core$Maybe$map,
			function (fed) {
				return {
					h0: _Utils_ap(
						fed.h0,
						A2($elm$core$List$cons, layer.c, layer.au)),
					ad: fed.ad,
					a: fed.a,
					e0: $stil4m$elm_syntax$Elm$Syntax$Node$range(baseNode)
				};
			},
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getCollapsedValueOrFunction(layer.eE));
	};
	var _v0 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
	_v0$4:
	while (true) {
		switch (_v0.b.$) {
			case 3:
				var fnRange = _v0.a;
				var _v1 = _v0.b;
				var fnName = _v1.b;
				return $elm$core$Maybe$Just(
					{
						h0: _List_Nil,
						ad: fnName,
						a: fnRange,
						e0: $stil4m$elm_syntax$Elm$Syntax$Node$range(baseNode)
					});
			case 1:
				if (_v0.b.a.b && _v0.b.a.b.b) {
					var _v2 = _v0.b.a;
					var fed = _v2.a;
					var _v3 = _v2.b;
					var firstArg = _v3.a;
					var argsAfterFirst = _v3.b;
					return step(
						{au: argsAfterFirst, eE: fed, c: firstArg});
				} else {
					break _v0$4;
				}
			case 2:
				switch (_v0.b.a) {
					case '|>':
						var _v4 = _v0.b;
						var firstArg = _v4.c;
						var fed = _v4.d;
						return step(
							{au: _List_Nil, eE: fed, c: firstArg});
					case '<|':
						var _v5 = _v0.b;
						var fed = _v5.c;
						var firstArg = _v5.d;
						return step(
							{au: _List_Nil, eE: fed, c: firstArg});
					default:
						break _v0$4;
				}
			default:
				break _v0$4;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getVarPattern = function (node) {
	getVarPattern:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 11:
				var name = _v0.a;
				return $elm$core$Maybe$Just(name);
			case 14:
				var pattern = _v0.a;
				var $temp$node = pattern;
				node = $temp$node;
				continue getVarPattern;
			default:
				return $elm$core$Maybe$Nothing;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getReducedLambdaToCall = function (expressionNode) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getCollapsedLambda(expressionNode);
	if (!_v0.$) {
		var lambda = _v0.a;
		var _v1 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getCollapsedValueOrFunction(lambda.eC);
		if (!_v1.$) {
			var call = _v1.a;
			var _v2 = A2(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$drop2EndingsWhile,
				function (_v3) {
					var argument = _v3.a;
					var pattern = _v3.b;
					var _v4 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(argument));
					if ((_v4.$ === 3) && (!_v4.a.b)) {
						var argument0Name = _v4.b;
						var _v5 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getVarPattern(pattern);
						if (!_v5.$) {
							var pattern0Name = _v5.a;
							return _Utils_eq(pattern0Name, argument0Name);
						} else {
							return false;
						}
					} else {
						return false;
					}
				},
				_Utils_Tuple2(call.h0, lambda.e3));
			var reducedCallArguments = _v2.a;
			var reducedLambdaPatterns = _v2.b;
			return $elm$core$Maybe$Just(
				{
					dB: reducedCallArguments,
					ad: call.ad,
					a: call.a,
					d0: reducedLambdaPatterns,
					e0: $stil4m$elm_syntax$Elm$Syntax$Node$range(expressionNode)
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getReducedFunction = function (expressionNode) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(expressionNode);
	if (_v0.b.$ === 3) {
		var fnRange = _v0.a;
		var _v1 = _v0.b;
		var fnName = _v1.b;
		return $elm$core$Maybe$Just(
			{ad: fnName, a: fnRange});
	} else {
		return A2(
			$elm$core$Maybe$andThen,
			function (reducedLambdaToCall) {
				var _v2 = _Utils_Tuple2(reducedLambdaToCall.d0, reducedLambdaToCall.dB);
				if (!_v2.a.b) {
					if (!_v2.b.b) {
						return $elm$core$Maybe$Just(
							{ad: reducedLambdaToCall.ad, a: reducedLambdaToCall.a});
					} else {
						var _v4 = _v2.b;
						return $elm$core$Maybe$Nothing;
					}
				} else {
					if (!_v2.b.b) {
						var _v3 = _v2.a;
						return $elm$core$Maybe$Nothing;
					} else {
						var _v5 = _v2.a;
						var _v6 = _v2.b;
						return $elm$core$Maybe$Nothing;
					}
				}
			},
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getReducedLambdaToCall(expressionNode));
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunction = F3(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunction$fn(_v0, lookupTable, expressionNode) {
		var moduleName = _v0.a;
		var name = _v0.b;
		return A2(
			$elm$core$Maybe$andThen,
			function (reducedFunction) {
				return ((!_Utils_eq(reducedFunction.ad, name)) || (!_Utils_eq(
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, reducedFunction.a),
					$elm$core$Maybe$Just(moduleName)))) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
					{a: reducedFunction.a});
			},
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getReducedFunction(expressionNode));
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getFunctionCall = function (baseNode) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode));
	_v0$3:
	while (true) {
		switch (_v0.$) {
			case 1:
				if ((_v0.a.b && (_v0.a.a.b.$ === 3)) && _v0.a.b.b) {
					var _v1 = _v0.a;
					var _v2 = _v1.a;
					var fnRange = _v2.a;
					var _v3 = _v2.b;
					var fnName = _v3.b;
					var _v4 = _v1.b;
					var firstArg = _v4.a;
					var argsAfterFirst = _v4.b;
					return $elm$core$Maybe$Just(
						{
							au: argsAfterFirst,
							c: firstArg,
							ad: fnName,
							a: fnRange,
							e0: $stil4m$elm_syntax$Elm$Syntax$Node$range(baseNode)
						});
				} else {
					break _v0$3;
				}
			case 2:
				switch (_v0.a) {
					case '|>':
						var firstArg = _v0.c;
						var fedFunction = _v0.d;
						_v5$2:
						while (true) {
							switch (fedFunction.b.$) {
								case 3:
									var fnRange = fedFunction.a;
									var _v6 = fedFunction.b;
									var fnName = _v6.b;
									return $elm$core$Maybe$Just(
										{
											au: _List_Nil,
											c: firstArg,
											ad: fnName,
											a: fnRange,
											e0: $stil4m$elm_syntax$Elm$Syntax$Node$range(baseNode)
										});
								case 1:
									if (fedFunction.b.a.b && (fedFunction.b.a.a.b.$ === 3)) {
										var _v7 = fedFunction.b.a;
										var _v8 = _v7.a;
										var fnRange = _v8.a;
										var _v9 = _v8.b;
										var fnName = _v9.b;
										var argsAfterFirst = _v7.b;
										return $elm$core$Maybe$Just(
											{
												au: argsAfterFirst,
												c: firstArg,
												ad: fnName,
												a: fnRange,
												e0: $stil4m$elm_syntax$Elm$Syntax$Node$range(baseNode)
											});
									} else {
										break _v5$2;
									}
								default:
									break _v5$2;
							}
						}
						return $elm$core$Maybe$Nothing;
					case '<|':
						var fedFunction = _v0.c;
						var firstArg = _v0.d;
						_v10$2:
						while (true) {
							switch (fedFunction.b.$) {
								case 3:
									var fnRange = fedFunction.a;
									var _v11 = fedFunction.b;
									var fnName = _v11.b;
									return $elm$core$Maybe$Just(
										{
											au: _List_Nil,
											c: firstArg,
											ad: fnName,
											a: fnRange,
											e0: $stil4m$elm_syntax$Elm$Syntax$Node$range(baseNode)
										});
								case 1:
									if (fedFunction.b.a.b && (fedFunction.b.a.a.b.$ === 3)) {
										var _v12 = fedFunction.b.a;
										var _v13 = _v12.a;
										var fnRange = _v13.a;
										var _v14 = _v13.b;
										var fnName = _v14.b;
										var argsAfterFirst = _v12.b;
										return $elm$core$Maybe$Just(
											{
												au: argsAfterFirst,
												c: firstArg,
												ad: fnName,
												a: fnRange,
												e0: $stil4m$elm_syntax$Elm$Syntax$Node$range(baseNode)
											});
									} else {
										break _v10$2;
									}
								default:
									break _v10$2;
							}
						}
						return $elm$core$Maybe$Nothing;
					default:
						break _v0$3;
				}
			default:
				break _v0$3;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunctionCall = F3(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunctionCall$fn(_v0, lookupTable, baseNode) {
		var moduleName = _v0.a;
		var name = _v0.b;
		return A2(
			$elm$core$Maybe$andThen,
			function (call) {
				return ((!_Utils_eq(call.ad, name)) || (!_Utils_eq(
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, call.a),
					$elm$core$Maybe$Just(moduleName)))) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
					{au: call.au, c: call.c, a: call.a, e0: call.e0});
			},
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getFunctionCall(baseNode));
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedLambdaToCall = F3(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedLambdaToCall$fn(_v0, lookupTable, expressionNode) {
		var moduleName = _v0.a;
		var name = _v0.b;
		return A2(
			$elm$core$Maybe$andThen,
			function (reducedLambdaToCall) {
				return ((!_Utils_eq(reducedLambdaToCall.ad, name)) || (!_Utils_eq(
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, reducedLambdaToCall.a),
					$elm$core$Maybe$Just(moduleName)))) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
					{dB: reducedLambdaToCall.dB, a: reducedLambdaToCall.a, d0: reducedLambdaToCall.d0, e0: reducedLambdaToCall.e0});
			},
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getReducedLambdaToCall(expressionNode));
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunctionCall = F3(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunctionCall$fn(_v0, lookupTable, expressionNode) {
		var moduleName = _v0.a;
		var name = _v0.b;
		var _v1 = A3(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunctionCall,
			_Utils_Tuple2(moduleName, name),
			lookupTable,
			expressionNode);
		if (!_v1.$) {
			var call = _v1.a;
			return $elm$core$Maybe$Just(call);
		} else {
			return A2(
				$elm$core$Maybe$andThen,
				function (reducedLambdaToCall) {
					var _v2 = _Utils_Tuple2(reducedLambdaToCall.d0, reducedLambdaToCall.dB);
					if (_v2.a.b) {
						if (!_v2.b.b) {
							var _v3 = _v2.a;
							return $elm$core$Maybe$Nothing;
						} else {
							var _v4 = _v2.a;
							var _v5 = _v2.b;
							return $elm$core$Maybe$Nothing;
						}
					} else {
						if (!_v2.b.b) {
							return $elm$core$Maybe$Nothing;
						} else {
							var _v6 = _v2.b;
							var firstArg = _v6.a;
							var argsAfterFirst = _v6.b;
							return $elm$core$Maybe$Just(
								{au: argsAfterFirst, c: firstArg, a: reducedLambdaToCall.a, e0: reducedLambdaToCall.e0});
						}
					}
				},
				A3(
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedLambdaToCall,
					_Utils_Tuple2(moduleName, name),
					lookupTable,
					expressionNode));
		}
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleFirstPatternLambda = function (expressionNode) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(expressionNode));
	if (_v0.$ === 17) {
		var lambda = _v0.a;
		var _v1 = lambda.h0;
		if ((((((_v1.b && (_v1.a.b.$ === 7)) && _v1.a.b.a.b) && (_v1.a.b.a.a.b.$ === 11)) && _v1.a.b.a.b.b) && (!_v1.a.b.a.b.b.b)) && (!_v1.b.b)) {
			var _v2 = _v1.a;
			var _v3 = _v2.b.a;
			var _v4 = _v3.a;
			var firstVariableName = _v4.b.a;
			var _v5 = _v3.b;
			var _v6 = $stil4m$elm_syntax$Elm$Syntax$Node$value(lambda.eC);
			if ((_v6.$ === 3) && (!_v6.a.b)) {
				var resultName = _v6.b;
				return _Utils_eq(resultName, firstVariableName);
			} else {
				return false;
			}
		} else {
			return false;
		}
	} else {
		return false;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleFirstAccess = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleFirstAccess$fn(lookupTable, expressionNode) {
		var _v0 = A3(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunction,
			_Utils_Tuple2(
				_List_fromArray(
					['Tuple']),
				'first'),
			lookupTable,
			expressionNode);
		if (!_v0.$) {
			return true;
		} else {
			return $jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleFirstPatternLambda(expressionNode);
		}
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleSecondPatternLambda = function (expressionNode) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(expressionNode));
	if (_v0.$ === 17) {
		var lambda = _v0.a;
		var _v1 = lambda.h0;
		if ((((((_v1.b && (_v1.a.b.$ === 7)) && _v1.a.b.a.b) && _v1.a.b.a.b.b) && (_v1.a.b.a.b.a.b.$ === 11)) && (!_v1.a.b.a.b.b.b)) && (!_v1.b.b)) {
			var _v2 = _v1.a;
			var _v3 = _v2.b.a;
			var _v4 = _v3.b;
			var _v5 = _v4.a;
			var firstVariableName = _v5.b.a;
			var _v6 = $stil4m$elm_syntax$Elm$Syntax$Node$value(lambda.eC);
			if ((_v6.$ === 3) && (!_v6.a.b)) {
				var resultName = _v6.b;
				return _Utils_eq(resultName, firstVariableName);
			} else {
				return false;
			}
		} else {
			return false;
		}
	} else {
		return false;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleSecondAccess = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleSecondAccess$fn(lookupTable, expressionNode) {
		var _v0 = A3(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunction,
			_Utils_Tuple2(
				_List_fromArray(
					['Tuple']),
				'second'),
			lookupTable,
			expressionNode);
		if (!_v0.$) {
			return true;
		} else {
			return $jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleSecondPatternLambda(expressionNode);
		}
	});
var $jfmengels$elm_review_simplify$Simplify$dictToListMapCompositionChecks = function (checkInfo) {
	var _v0 = checkInfo.D ? _Utils_Tuple2(checkInfo.k, checkInfo.l) : _Utils_Tuple2(checkInfo.l, checkInfo.k);
	var earlier = _v0.a;
	var later = _v0.b;
	var _v1 = A2(
		$elm$core$Maybe$andThen,
		function (_v2) {
			return A3(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunctionCall,
				_Utils_Tuple2(
					_List_fromArray(
						['List']),
					'map'),
				checkInfo.s,
				later);
		},
		A3(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunction,
			_Utils_Tuple2(
				_List_fromArray(
					['Dict']),
				'toList'),
			checkInfo.s,
			earlier));
	if (_v1.$ === 1) {
		return _List_Nil;
	} else {
		var listMapCall = _v1.a;
		var error = function (info) {
			return A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				$jfmengels$elm_review_simplify$Simplify$dictToListMapErrorInfo(info),
				listMapCall.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Dict']),
									info.cP),
								checkInfo)))
					]));
		};
		return A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleFirstAccess, checkInfo.s, listMapCall.c) ? _List_fromArray(
			[
				error(
				{cP: 'keys', ek: 'first'})
			]) : (A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleSecondAccess, checkInfo.s, listMapCall.c) ? _List_fromArray(
			[
				error(
				{cP: 'values', ek: 'second'})
			]) : _List_Nil);
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getExpressionName = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
	if ((_v0.$ === 3) && (!_v0.a.b)) {
		var name = _v0.b;
		return $elm$core$Maybe$Just(name);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity$fn(lookupTable, baseNode) {
		var node = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$2:
		while (true) {
			switch (_v0.$) {
				case 3:
					if (_v0.b === 'identity') {
						return _Utils_eq(
							A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node),
							$elm$core$Maybe$Just(
								_List_fromArray(
									['Basics'])));
					} else {
						break _v0$2;
					}
				case 17:
					var args = _v0.a.h0;
					var expression = _v0.a.eC;
					if (args.b && (!args.b.b)) {
						var arg = args.a;
						var _v2 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getVarPattern(arg);
						if (!_v2.$) {
							var patternName = _v2.a;
							return _Utils_eq(
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$getExpressionName(expression),
								$elm$core$Maybe$Just(patternName));
						} else {
							return false;
						}
					} else {
						return false;
					}
				default:
					break _v0$2;
			}
		}
		return false;
	});
var $jfmengels$elm_review_simplify$Simplify$filterAndMapCompositionCheck = function (checkInfo) {
	if (checkInfo.D) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.l));
		if ((((_v0.$ === 1) && _v0.a.b) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
			var _v1 = _v0.a;
			var rightFunction = _v1.a;
			var _v2 = _v1.b;
			var arg = _v2.a;
			if (A4(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
				_List_fromArray(
					['List']),
				'filterMap',
				checkInfo.s,
				rightFunction) && A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity, checkInfo.s, arg)) {
				var _v3 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.k));
				if ((((_v3.$ === 1) && _v3.a.b) && _v3.a.b.b) && (!_v3.a.b.b.b)) {
					var _v4 = _v3.a;
					var leftFunction = _v4.a;
					var _v5 = _v4.b;
					return A4(
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
						_List_fromArray(
							['List']),
						'map',
						checkInfo.s,
						leftFunction) ? _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['List.filterMap is meant for this exact purpose and will also be faster.']),
								bx: 'List.map and List.filterMap identity can be combined using List.filterMap'
							},
							$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.l),
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(
									{
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.l).c4,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.k).c4
									}),
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(leftFunction),
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
										A2(
											$jfmengels$elm_review_simplify$Simplify$qualify,
											_Utils_Tuple2(
												_List_fromArray(
													['List']),
												'filterMap'),
											checkInfo)))
								]))
						]) : _List_Nil;
				} else {
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	} else {
		var _v6 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.k));
		if ((((_v6.$ === 1) && _v6.a.b) && _v6.a.b.b) && (!_v6.a.b.b.b)) {
			var _v7 = _v6.a;
			var leftFunction = _v7.a;
			var _v8 = _v7.b;
			var arg = _v8.a;
			if (A4(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
				_List_fromArray(
					['List']),
				'filterMap',
				checkInfo.s,
				leftFunction) && A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity, checkInfo.s, arg)) {
				var _v9 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.l));
				if ((((_v9.$ === 1) && _v9.a.b) && _v9.a.b.b) && (!_v9.a.b.b.b)) {
					var _v10 = _v9.a;
					var rightFunction = _v10.a;
					var _v11 = _v10.b;
					return A4(
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
						_List_fromArray(
							['List']),
						'map',
						checkInfo.s,
						rightFunction) ? _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['List.filterMap is meant for this exact purpose and will also be faster.']),
								bx: 'List.map and List.filterMap identity can be combined using List.filterMap'
							},
							$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.k),
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(
									{
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.l).dv,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.k).dv
									}),
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(rightFunction),
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
										A2(
											$jfmengels$elm_review_simplify$Simplify$qualify,
											_Utils_Tuple2(
												_List_fromArray(
													['List']),
												'filterMap'),
											checkInfo)))
								]))
						]) : _List_Nil;
				} else {
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$keepOnlyFix = function (config) {
	return _List_fromArray(
		[
			$jfmengels$elm_review$Review$Fix$removeRange(
			{c4: config.n.dv, dv: config.b.dv}),
			$jfmengels$elm_review$Review$Fix$removeRange(
			{c4: config.b.c4, dv: config.n.c4})
		]);
};
var $jfmengels$elm_review_simplify$Simplify$foldAndSetToListCompositionChecks = F2(function $jfmengels$elm_review_simplify$Simplify$foldAndSetToListCompositionChecks$fn(foldOperationName, checkInfo) {
		var _v0 = checkInfo.D ? _Utils_Tuple2(checkInfo.k, checkInfo.l) : _Utils_Tuple2(checkInfo.l, checkInfo.k);
		var earlier = _v0.a;
		var later = _v0.b;
		var _v1 = A3(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunctionCall,
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				foldOperationName),
			checkInfo.s,
			later);
		if (!_v1.$) {
			var listFoldCall = _v1.a;
			var _v2 = listFoldCall.au;
			if (_v2.b) {
				if (!_v2.b.b) {
					return A4(
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
						_List_fromArray(
							['Set']),
						'toList',
						checkInfo.s,
						earlier) ? _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['Using Set.' + (foldOperationName + ' directly is meant for this exact purpose and will also be faster.')]),
								bx: 'To fold a set, you don\'t need to convert to a List'
							},
							listFoldCall.a,
							_Utils_ap(
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{
										n: $stil4m$elm_syntax$Elm$Syntax$Node$range(later),
										b: checkInfo.b
									}),
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										listFoldCall.a,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Set']),
													foldOperationName),
												checkInfo)))
									])))
						]) : _List_Nil;
				} else {
					var _v3 = _v2.b;
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$identityCompositionErrorMessage = {
	eq: _List_fromArray(
		['Composing a function with `identity` is the same as simplify referencing the function.']),
	bx: '`identity` should be removed'
};
var $jfmengels$elm_review_simplify$Simplify$identityCompositionCheck = function (checkInfo) {
	return A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity, checkInfo.s, checkInfo.l) ? _List_fromArray(
		[
			A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			$jfmengels$elm_review_simplify$Simplify$identityCompositionErrorMessage,
			$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.l),
			_List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(
					{
						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.l).c4,
						dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.k).c4
					})
				]))
		]) : (A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity, checkInfo.s, checkInfo.k) ? _List_fromArray(
		[
			A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			$jfmengels$elm_review_simplify$Simplify$identityCompositionErrorMessage,
			$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.k),
			_List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(
					{
						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.l).dv,
						dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.k).dv
					})
				]))
		]) : _List_Nil);
};
var $jfmengels$elm_review_simplify$Simplify$maybeMapCompositionChecks = function (checkInfo) {
	if (checkInfo.D) {
		var _v0 = _Utils_Tuple2(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.k),
			$stil4m$elm_syntax$Elm$Syntax$Node$value(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.l)));
		if ((((((((_v0.a.b.$ === 3) && (_v0.a.b.b === 'Just')) && (_v0.b.$ === 1)) && _v0.b.a.b) && (_v0.b.a.a.b.$ === 3)) && (_v0.b.a.a.b.b === 'map')) && _v0.b.a.b.b) && (!_v0.b.a.b.b.b)) {
			var _v1 = _v0.a;
			var justRange = _v1.a;
			var _v2 = _v1.b;
			var _v3 = _v0.b.a;
			var _v4 = _v3.a;
			var maybeMapRange = _v4.a;
			var _v5 = _v4.b;
			var _v6 = _v3.b;
			var mapperFunction = _v6.a;
			return (_Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, checkInfo.s, justRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Maybe']))) && _Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, checkInfo.s, maybeMapRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Maybe'])))) ? _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['The function can be called without Maybe.map.']),
						bx: 'Calling Maybe.map on a value that is Just'
					},
					maybeMapRange,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(mapperFunction).dv,
								dv: checkInfo.b.dv
							}),
							A2(
							$jfmengels$elm_review$Review$Fix$insertAt,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(mapperFunction).c4,
							' >> Just')
						]))
				]) : _List_Nil;
		} else {
			return _List_Nil;
		}
	} else {
		var _v7 = _Utils_Tuple2(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.k)),
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.l));
		if ((((((((_v7.a.$ === 1) && _v7.a.a.b) && (_v7.a.a.a.b.$ === 3)) && (_v7.a.a.a.b.b === 'map')) && _v7.a.a.b.b) && (!_v7.a.a.b.b.b)) && (_v7.b.b.$ === 3)) && (_v7.b.b.b === 'Just')) {
			var _v8 = _v7.a.a;
			var _v9 = _v8.a;
			var maybeMapRange = _v9.a;
			var _v10 = _v9.b;
			var _v11 = _v8.b;
			var mapperFunction = _v11.a;
			var _v12 = _v7.b;
			var justRange = _v12.a;
			var _v13 = _v12.b;
			return (_Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, checkInfo.s, justRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Maybe']))) && _Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, checkInfo.s, maybeMapRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Maybe'])))) ? _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['The function can be called without Maybe.map.']),
						bx: 'Calling Maybe.map on a value that is Just'
					},
					maybeMapRange,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							{
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(mapperFunction).dv,
								dv: checkInfo.b.dv
							},
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['Maybe']),
										'Just'),
									checkInfo)) + ' << '),
							$jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: checkInfo.b.c4,
								dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(mapperFunction).c4
							})
						]))
				]) : _List_Nil;
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$getNegateFunction = F2(function $jfmengels$elm_review_simplify$Simplify$getNegateFunction$fn(lookupTable, baseNode) {
		var _v0 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
		if ((_v0.b.$ === 3) && (_v0.b.b === 'negate')) {
			var range = _v0.a;
			var _v1 = _v0.b;
			var _v2 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, range);
			if ((((!_v2.$) && _v2.a.b) && (_v2.a.a === 'Basics')) && (!_v2.a.b.b)) {
				var _v3 = _v2.a;
				return $elm$core$Maybe$Just(range);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$getNegateComposition = F3(function $jfmengels$elm_review_simplify$Simplify$getNegateComposition$fn(lookupTable, takeFirstFunction, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		_v0$2:
		while (true) {
			if (_v0.$ === 2) {
				switch (_v0.a) {
					case '<<':
						var left = _v0.c;
						var right = _v0.d;
						return takeFirstFunction ? A2(
							$elm$core$Maybe$map,
							function (_v1) {
								return {
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).c4,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).c4
								};
							},
							A2($jfmengels$elm_review_simplify$Simplify$getNegateFunction, lookupTable, right)) : A2(
							$elm$core$Maybe$map,
							function (_v2) {
								return {
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).dv,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv
								};
							},
							A2($jfmengels$elm_review_simplify$Simplify$getNegateFunction, lookupTable, left));
					case '>>':
						var left = _v0.c;
						var right = _v0.d;
						return takeFirstFunction ? A2(
							$elm$core$Maybe$map,
							function (_v3) {
								return {
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).dv,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv
								};
							},
							A2($jfmengels$elm_review_simplify$Simplify$getNegateFunction, lookupTable, left)) : A2(
							$elm$core$Maybe$map,
							function (_v4) {
								return {
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).c4,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).c4
								};
							},
							A2($jfmengels$elm_review_simplify$Simplify$getNegateFunction, lookupTable, right));
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $jfmengels$elm_review_simplify$Simplify$negateNegateCompositionErrorMessage = {
	eq: _List_fromArray(
		['Composing `negate` with `negate` cancel each other out.']),
	bx: 'Unnecessary double negation'
};
var $jfmengels$elm_review_simplify$Simplify$negateCompositionCheck = function (checkInfo) {
	var _v0 = A3(
		$elm$core$Maybe$map2,
		$elm$core$Tuple$pair,
		A2($jfmengels$elm_review_simplify$Simplify$getNegateFunction, checkInfo.s, checkInfo.k),
		A2($jfmengels$elm_review_simplify$Simplify$getNegateFunction, checkInfo.s, checkInfo.l));
	if (!_v0.$) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				$jfmengels$elm_review_simplify$Simplify$negateNegateCompositionErrorMessage,
				checkInfo.b,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									'identity'),
								checkInfo)))
					]))
			]);
	} else {
		var _v1 = A2($jfmengels$elm_review_simplify$Simplify$getNegateFunction, checkInfo.s, checkInfo.k);
		if (!_v1.$) {
			var leftNotRange = _v1.a;
			var _v2 = A3($jfmengels$elm_review_simplify$Simplify$getNegateComposition, checkInfo.s, checkInfo.D, checkInfo.l);
			if (!_v2.$) {
				var rightNotRange = _v2.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						$jfmengels$elm_review_simplify$Simplify$negateNegateCompositionErrorMessage,
						{c4: rightNotRange.c4, dv: leftNotRange.dv},
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								{c4: checkInfo.i.dv, dv: leftNotRange.dv}),
								$jfmengels$elm_review$Review$Fix$removeRange(rightNotRange)
							]))
					]);
			} else {
				return _List_Nil;
			}
		} else {
			var _v3 = A2($jfmengels$elm_review_simplify$Simplify$getNegateFunction, checkInfo.s, checkInfo.l);
			if (!_v3.$) {
				var rightNotRange = _v3.a;
				var _v4 = A3($jfmengels$elm_review_simplify$Simplify$getNegateComposition, checkInfo.s, !checkInfo.D, checkInfo.k);
				if (!_v4.$) {
					var leftNotRange = _v4.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							$jfmengels$elm_review_simplify$Simplify$negateNegateCompositionErrorMessage,
							{c4: rightNotRange.c4, dv: leftNotRange.dv},
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(leftNotRange),
									$jfmengels$elm_review$Review$Fix$removeRange(
									{c4: rightNotRange.c4, dv: checkInfo.g.c4})
								]))
						]);
				} else {
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunction = F3(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunction$fn(_v0, lookupTable, baseNode) {
		var moduleName = _v0.a;
		var name = _v0.b;
		var _v1 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
		if (_v1.b.$ === 3) {
			var fnRange = _v1.a;
			var _v2 = _v1.b;
			var foundName = _v2.b;
			return (_Utils_eq(foundName, name) && _Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, fnRange),
				$elm$core$Maybe$Just(moduleName))) ? $elm$core$Maybe$Just(fnRange) : $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getNotFunction = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getNotFunction$fn(lookupTable, baseNode) {
		return A3(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunction,
			_Utils_Tuple2(
				_List_fromArray(
					['Basics']),
				'not'),
			lookupTable,
			baseNode);
	});
var $jfmengels$elm_review_simplify$Simplify$getNotComposition = F3(function $jfmengels$elm_review_simplify$Simplify$getNotComposition$fn(lookupTable, takeFirstFunction, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		_v0$2:
		while (true) {
			if (_v0.$ === 2) {
				switch (_v0.a) {
					case '<<':
						var left = _v0.c;
						var right = _v0.d;
						return takeFirstFunction ? A2(
							$elm$core$Maybe$map,
							function (_v1) {
								return {
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).c4,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).c4
								};
							},
							A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getNotFunction, lookupTable, right)) : A2(
							$elm$core$Maybe$map,
							function (_v2) {
								return {
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).dv,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv
								};
							},
							A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getNotFunction, lookupTable, left));
					case '>>':
						var left = _v0.c;
						var right = _v0.d;
						return takeFirstFunction ? A2(
							$elm$core$Maybe$map,
							function (_v3) {
								return {
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).dv,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv
								};
							},
							A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getNotFunction, lookupTable, left)) : A2(
							$elm$core$Maybe$map,
							function (_v4) {
								return {
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).c4,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).c4
								};
							},
							A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getNotFunction, lookupTable, right));
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $jfmengels$elm_review_simplify$Simplify$notNotCompositionErrorMessage = {
	eq: _List_fromArray(
		['Composing `not` with `not` cancel each other out.']),
	bx: 'Unnecessary double negation'
};
var $jfmengels$elm_review_simplify$Simplify$notNotCompositionCheck = function (checkInfo) {
	var notOnRight = A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getNotFunction, checkInfo.s, checkInfo.l);
	var notOnLeft = A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getNotFunction, checkInfo.s, checkInfo.k);
	var _v0 = _Utils_Tuple2(notOnLeft, notOnRight);
	if (!_v0.a.$) {
		if (!_v0.b.$) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					$jfmengels$elm_review_simplify$Simplify$notNotCompositionErrorMessage,
					checkInfo.b,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							checkInfo.b,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['Basics']),
										'identity'),
									checkInfo)))
						]))
				]);
		} else {
			var leftNotRange = _v0.a.a;
			var _v1 = A3($jfmengels$elm_review_simplify$Simplify$getNotComposition, checkInfo.s, checkInfo.D, checkInfo.l);
			if (!_v1.$) {
				var rightNotRange = _v1.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						$jfmengels$elm_review_simplify$Simplify$notNotCompositionErrorMessage,
						{c4: rightNotRange.c4, dv: leftNotRange.dv},
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								{c4: checkInfo.i.dv, dv: leftNotRange.dv}),
								$jfmengels$elm_review$Review$Fix$removeRange(rightNotRange)
							]))
					]);
			} else {
				return _List_Nil;
			}
		}
	} else {
		if (!_v0.b.$) {
			var rightNotRange = _v0.b.a;
			var _v2 = A3($jfmengels$elm_review_simplify$Simplify$getNotComposition, checkInfo.s, !checkInfo.D, checkInfo.k);
			if (!_v2.$) {
				var leftNotRange = _v2.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						$jfmengels$elm_review_simplify$Simplify$notNotCompositionErrorMessage,
						{c4: rightNotRange.c4, dv: leftNotRange.dv},
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(leftNotRange),
								$jfmengels$elm_review$Review$Fix$removeRange(
								{c4: rightNotRange.c4, dv: checkInfo.g.c4})
							]))
					]);
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$resultMapCompositionChecks = function (checkInfo) {
	if (checkInfo.D) {
		var _v0 = _Utils_Tuple2(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.k),
			$stil4m$elm_syntax$Elm$Syntax$Node$value(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.l)));
		if ((((((((_v0.a.b.$ === 3) && (_v0.a.b.b === 'Ok')) && (_v0.b.$ === 1)) && _v0.b.a.b) && (_v0.b.a.a.b.$ === 3)) && (_v0.b.a.a.b.b === 'map')) && _v0.b.a.b.b) && (!_v0.b.a.b.b.b)) {
			var _v1 = _v0.a;
			var justRange = _v1.a;
			var _v2 = _v1.b;
			var _v3 = _v0.b.a;
			var _v4 = _v3.a;
			var resultMapRange = _v4.a;
			var _v5 = _v4.b;
			var _v6 = _v3.b;
			var mapperFunction = _v6.a;
			return (_Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, checkInfo.s, justRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Result']))) && _Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, checkInfo.s, resultMapRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Result'])))) ? _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['The function can be called without Result.map.']),
						bx: 'Calling Result.map on a value that is Ok'
					},
					resultMapRange,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(mapperFunction).dv,
								dv: checkInfo.b.dv
							}),
							A2(
							$jfmengels$elm_review$Review$Fix$insertAt,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(mapperFunction).c4,
							' >> ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['Result']),
										'Ok'),
									checkInfo)))
						]))
				]) : _List_Nil;
		} else {
			return _List_Nil;
		}
	} else {
		var _v7 = _Utils_Tuple2(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.k)),
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.l));
		if ((((((((_v7.a.$ === 1) && _v7.a.a.b) && (_v7.a.a.a.b.$ === 3)) && (_v7.a.a.a.b.b === 'map')) && _v7.a.a.b.b) && (!_v7.a.a.b.b.b)) && (_v7.b.b.$ === 3)) && (_v7.b.b.b === 'Ok')) {
			var _v8 = _v7.a.a;
			var _v9 = _v8.a;
			var resultMapRange = _v9.a;
			var _v10 = _v9.b;
			var _v11 = _v8.b;
			var mapperFunction = _v11.a;
			var _v12 = _v7.b;
			var justRange = _v12.a;
			var _v13 = _v12.b;
			return (_Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, checkInfo.s, justRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Result']))) && _Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, checkInfo.s, resultMapRange),
				$elm$core$Maybe$Just(
					_List_fromArray(
						['Result'])))) ? _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['The function can be called without Result.map.']),
						bx: 'Calling Result.map on a value that is Ok'
					},
					resultMapRange,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							{
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(mapperFunction).dv,
								dv: checkInfo.b.dv
							},
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['Result']),
										'Ok'),
									checkInfo)) + ' << '),
							$jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: checkInfo.b.c4,
								dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(mapperFunction).c4
							})
						]))
				]) : _List_Nil;
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$resultMapErrorOnErrErrorInfo = {
	eq: _List_fromArray(
		['You can replace this call by Err with the function directly applied to the error itself.']),
	bx: 'Using Result.mapError on Err will result in Err with the function applied to the error'
};
var $jfmengels$elm_review_simplify$Simplify$resultMapErrorOnOkErrorInfo = {
	eq: _List_fromArray(
		['You can remove the Result.mapError call.']),
	bx: 'Calling Result.mapError on a value that is Ok will always return the Ok result value'
};
var $jfmengels$elm_review_simplify$Simplify$resultMapErrorCompositionChecks = function (checkInfo) {
	var _v0 = checkInfo.D ? _Utils_Tuple2(checkInfo.k, checkInfo.l) : _Utils_Tuple2(checkInfo.l, checkInfo.k);
	var earlier = _v0.a;
	var later = _v0.b;
	var _v1 = A3(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunctionCall,
		_Utils_Tuple2(
			_List_fromArray(
				['Result']),
			'mapError'),
		checkInfo.s,
		later);
	if (_v1.$ === 1) {
		return _List_Nil;
	} else {
		var resultMapErrorCall = _v1.a;
		return A2(
			$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
			_List_fromArray(
				[
					function (_v2) {
					var _v3 = A3(
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunction,
						_Utils_Tuple2(
							_List_fromArray(
								['Result']),
							'Err'),
						checkInfo.s,
						earlier);
					if (_v3.$ === 1) {
						return _List_Nil;
					} else {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								$jfmengels$elm_review_simplify$Simplify$resultMapErrorOnErrErrorInfo,
								resultMapErrorCall.a,
								_Utils_ap(
									$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
										{
											n: $stil4m$elm_syntax$Elm$Syntax$Node$range(resultMapErrorCall.c),
											b: checkInfo.b
										}),
									_List_fromArray(
										[
											checkInfo.D ? A2(
											$jfmengels$elm_review$Review$Fix$insertAt,
											checkInfo.b.c4,
											' >> ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
												A2(
													$jfmengels$elm_review_simplify$Simplify$qualify,
													_Utils_Tuple2(
														_List_fromArray(
															['Result']),
														'Err'),
													checkInfo))) : A2(
											$jfmengels$elm_review$Review$Fix$insertAt,
											checkInfo.b.dv,
											$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
												A2(
													$jfmengels$elm_review_simplify$Simplify$qualify,
													_Utils_Tuple2(
														_List_fromArray(
															['Result']),
														'Err'),
													checkInfo)) + ' << ')
										])))
							]);
					}
				},
					function (_v4) {
					var _v5 = A3(
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunction,
						_Utils_Tuple2(
							_List_fromArray(
								['Result']),
							'Ok'),
						checkInfo.s,
						earlier);
					if (_v5.$ === 1) {
						return _List_Nil;
					} else {
						var okFunction = _v5.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								$jfmengels$elm_review_simplify$Simplify$resultMapErrorOnOkErrorInfo,
								resultMapErrorCall.a,
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{n: okFunction.a, b: checkInfo.b}))
							]);
					}
				}
				]),
			0);
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificValueOrFunction = F3(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificValueOrFunction$fn(_v0, lookupTable, node) {
		var moduleName = _v0.a;
		var fnName = _v0.b;
		var _v1 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node);
		if (_v1.b.$ === 3) {
			var noneRange = _v1.a;
			var _v2 = _v1.b;
			var foundFnName = _v2.b;
			return (_Utils_eq(foundFnName, fnName) && _Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, noneRange),
				$elm$core$Maybe$Just(moduleName))) ? $elm$core$Maybe$Just(
				{a: noneRange}) : $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$resultToMaybeCompositionChecks = function (checkInfo) {
	var _v0 = checkInfo.D ? _Utils_Tuple2(checkInfo.k, checkInfo.l) : _Utils_Tuple2(checkInfo.l, checkInfo.k);
	var earlier = _v0.a;
	var later = _v0.b;
	var _v1 = A3(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificValueOrFunction,
		_Utils_Tuple2(
			_List_fromArray(
				['Result']),
			'toMaybe'),
		checkInfo.s,
		later);
	if (_v1.$ === 1) {
		return _List_Nil;
	} else {
		var resultToMaybeFunction = _v1.a;
		return A4(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
			_List_fromArray(
				['Result']),
			'Err',
			checkInfo.s,
			earlier) ? _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by always Nothing.']),
					bx: 'Using Result.toMaybe on an error will result in Nothing'
				},
				resultToMaybeFunction.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									'always'),
								checkInfo)) + (' ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Maybe']),
									'Nothing'),
								checkInfo))))
					]))
			]) : (A4(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
			_List_fromArray(
				['Result']),
			'Ok',
			checkInfo.s,
			earlier) ? _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by Just.']),
					bx: 'Using Result.toMaybe on a value that is Ok will result in Just that value itself'
				},
				resultToMaybeFunction.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Maybe']),
									'Just'),
								checkInfo)))
					]))
			]) : _List_Nil);
	}
};
var $jfmengels$elm_review_simplify$Simplify$setFromListSingletonError = {
	eq: _List_fromArray(
		['You can replace this call by Set.singleton with the list element itself.']),
	bx: 'Set.fromList with a single element can be replaced using Set.singleton'
};
var $jfmengels$elm_review_simplify$Simplify$setFromListSingletonCompositionChecks = function (checkInfo) {
	var _v0 = checkInfo.D ? _Utils_Tuple2(checkInfo.k, checkInfo.l) : _Utils_Tuple2(checkInfo.l, checkInfo.k);
	var earlier = _v0.a;
	var later = _v0.b;
	var _v1 = A3(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificValueOrFunction,
		_Utils_Tuple2(
			_List_fromArray(
				['Set']),
			'fromList'),
		checkInfo.s,
		later);
	if (!_v1.$) {
		var listFoldCall = _v1.a;
		return A4(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
			_List_fromArray(
				['List']),
			'singleton',
			checkInfo.s,
			earlier) ? _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				$jfmengels$elm_review_simplify$Simplify$setFromListSingletonError,
				listFoldCall.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Set']),
									'singleton'),
								checkInfo)))
					]))
			]) : _List_Nil;
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$compositionChecks = _List_fromArray(
	[
		$jfmengels$elm_review_simplify$Simplify$identityCompositionCheck,
		$jfmengels$elm_review_simplify$Simplify$notNotCompositionCheck,
		$jfmengels$elm_review_simplify$Simplify$negateCompositionCheck,
		$jfmengels$elm_review_simplify$Simplify$alwaysCompositionCheck,
		$jfmengels$elm_review_simplify$Simplify$maybeMapCompositionChecks,
		$jfmengels$elm_review_simplify$Simplify$resultMapCompositionChecks,
		$jfmengels$elm_review_simplify$Simplify$resultMapErrorCompositionChecks,
		$jfmengels$elm_review_simplify$Simplify$filterAndMapCompositionCheck,
		$jfmengels$elm_review_simplify$Simplify$concatAndMapCompositionCheck,
		$jfmengels$elm_review_simplify$Simplify$foldAndSetToListCompositionChecks('foldl'),
		$jfmengels$elm_review_simplify$Simplify$foldAndSetToListCompositionChecks('foldr'),
		$jfmengels$elm_review_simplify$Simplify$setFromListSingletonCompositionChecks,
		$jfmengels$elm_review_simplify$Simplify$dictToListMapCompositionChecks,
		$jfmengels$elm_review_simplify$Simplify$resultToMaybeCompositionChecks
	]);
var $jfmengels$elm_review_simplify$Simplify$recordLeavesRangesHelp = F2(function $jfmengels$elm_review_simplify$Simplify$recordLeavesRangesHelp$fn(nodes, foundRanges) {
		recordLeavesRangesHelp:
		while (true) {
			if (!nodes.b) {
				return $elm$core$Maybe$Just(foundRanges);
			} else {
				var _v1 = nodes.a;
				var range = _v1.a;
				var expr = _v1.b;
				var rest = nodes.b;
				switch (expr.$) {
					case 4:
						var thenBranch = expr.b;
						var elseBranch = expr.c;
						var $temp$nodes = A2(
							$elm$core$List$cons,
							thenBranch,
							A2($elm$core$List$cons, elseBranch, rest)),
							$temp$foundRanges = foundRanges;
						nodes = $temp$nodes;
						foundRanges = $temp$foundRanges;
						continue recordLeavesRangesHelp;
					case 15:
						var expression = expr.a.eC;
						var $temp$nodes = A2($elm$core$List$cons, expression, rest),
							$temp$foundRanges = foundRanges;
						nodes = $temp$nodes;
						foundRanges = $temp$foundRanges;
						continue recordLeavesRangesHelp;
					case 14:
						var child = expr.a;
						var $temp$nodes = A2($elm$core$List$cons, child, rest),
							$temp$foundRanges = foundRanges;
						nodes = $temp$nodes;
						foundRanges = $temp$foundRanges;
						continue recordLeavesRangesHelp;
					case 16:
						var cases = expr.a.ia;
						var $temp$nodes = _Utils_ap(
							A2($elm$core$List$map, $elm$core$Tuple$second, cases),
							rest),
							$temp$foundRanges = foundRanges;
						nodes = $temp$nodes;
						foundRanges = $temp$foundRanges;
						continue recordLeavesRangesHelp;
					case 18:
						var $temp$nodes = rest,
							$temp$foundRanges = A2($elm$core$List$cons, range, foundRanges);
						nodes = $temp$nodes;
						foundRanges = $temp$foundRanges;
						continue recordLeavesRangesHelp;
					case 22:
						var $temp$nodes = rest,
							$temp$foundRanges = A2($elm$core$List$cons, range, foundRanges);
						nodes = $temp$nodes;
						foundRanges = $temp$foundRanges;
						continue recordLeavesRangesHelp;
					default:
						return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$recordLeavesRanges = function (nodes) {
	return A2($jfmengels$elm_review_simplify$Simplify$recordLeavesRangesHelp, nodes, _List_Nil);
};
var $jfmengels$elm_review_simplify$Simplify$distributeFieldAccess = F4(function $jfmengels$elm_review_simplify$Simplify$distributeFieldAccess$fn(kind, recordRange, branches, _v0) {
		var fieldRange = _v0.a;
		var fieldName = _v0.b;
		var _v1 = $jfmengels$elm_review_simplify$Simplify$recordLeavesRanges(branches);
		if (!_v1.$) {
			var records = _v1.a;
			return _List_fromArray(
				[
					function () {
					var fieldAccessRange = {c4: fieldRange.c4, dv: recordRange.c4};
					return A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['Accessing the field outside ' + (kind + ' expression can be simplified to access the field inside it')]),
							bx: 'Field access can be simplified'
						},
						fieldAccessRange,
						A2(
							$elm$core$List$cons,
							$jfmengels$elm_review$Review$Fix$removeRange(fieldAccessRange),
							A2(
								$elm$core$List$map,
								function (leafRange) {
									return A2($jfmengels$elm_review$Review$Fix$insertAt, leafRange.c4, '.' + fieldName);
								},
								records)));
				}()
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$errorsAndRangesToIgnore = F2(function $jfmengels$elm_review_simplify$Simplify$errorsAndRangesToIgnore$fn(errors, rangesToIgnore) {
		return {bO: errors, I: _List_Nil, cL: rangesToIgnore, aW: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty};
	});
var $jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall = function (checkInfo) {
	return checkInfo.x ? $jfmengels$elm_review$Review$Fix$removeRange(
		{
			c4: checkInfo.a.c4,
			dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4
		}) : $jfmengels$elm_review$Review$Fix$removeRange(
		{
			c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
			dv: checkInfo.a.dv
		});
};
var $jfmengels$elm_review_simplify$Simplify$secondArg = function (checkInfo) {
	return checkInfo.ga;
};
var $jfmengels$elm_review_simplify$Simplify$basicsAlwaysChecks = function (checkInfo) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
	if (!_v0.$) {
		var _v1 = _v0.a;
		var secondArgRange = _v1.a;
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['The second argument will be ignored because of the `always` call.']),
					bx: 'Expression can be replaced by the first argument given to `always`'
				},
				checkInfo.a,
				checkInfo.x ? _List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(
						{
							c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
							dv: secondArgRange.dv
						})
					]) : _List_fromArray(
					[
						$jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall(checkInfo),
						$jfmengels$elm_review$Review$Fix$removeRange(
						{
							c4: secondArgRange.c4,
							dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4
						})
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$basicsIdentityChecks = function (checkInfo) {
	return _List_fromArray(
		[
			A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['`identity` can be a useful function to be passed as arguments to other functions, but calling it manually with an argument is the same thing as writing the argument on its own.']),
				bx: '`identity` should be removed'
			},
			checkInfo.a,
			_List_fromArray(
				[
					$jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall(checkInfo)
				]))
		]);
};
var $jfmengels$elm_review_simplify$Simplify$removeAlongWithOtherFunctionCheck = F3(function $jfmengels$elm_review_simplify$Simplify$removeAlongWithOtherFunctionCheck$fn(errorMessage, secondFunctionCheck, checkInfo) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.c));
		_v0$3:
		while (true) {
			switch (_v0.$) {
				case 1:
					if (_v0.a.b && _v0.a.b.b) {
						var _v1 = _v0.a;
						var secondFn = _v1.a;
						var _v2 = _v1.b;
						var firstArgOfSecondCall = _v2.a;
						var _v3 = A2(secondFunctionCheck, checkInfo.s, secondFn);
						if (!_v3.$) {
							var secondRange = _v3.a;
							return _List_fromArray(
								[
									A3(
									$jfmengels$elm_review$Review$Rule$errorWithFix,
									errorMessage,
									$stil4m$elm_syntax$Elm$Syntax$Range$combine(
										_List_fromArray(
											[checkInfo.a, secondRange])),
									_List_fromArray(
										[
											$jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall(checkInfo),
											$jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall(
											{
												c: firstArgOfSecondCall,
												a: $stil4m$elm_syntax$Elm$Syntax$Node$range(secondFn),
												x: false
											})
										]))
								]);
						} else {
							return _List_Nil;
						}
					} else {
						break _v0$3;
					}
				case 2:
					switch (_v0.a) {
						case '|>':
							var firstArgOfSecondCall = _v0.c;
							var secondFn = _v0.d;
							var _v4 = A2(secondFunctionCheck, checkInfo.s, secondFn);
							if (!_v4.$) {
								var secondRange = _v4.a;
								return _List_fromArray(
									[
										A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										errorMessage,
										$stil4m$elm_syntax$Elm$Syntax$Range$combine(
											_List_fromArray(
												[checkInfo.a, secondRange])),
										_List_fromArray(
											[
												$jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall(checkInfo),
												$jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall(
												{
													c: firstArgOfSecondCall,
													a: $stil4m$elm_syntax$Elm$Syntax$Node$range(secondFn),
													x: true
												})
											]))
									]);
							} else {
								return _List_Nil;
							}
						case '<|':
							var secondFn = _v0.c;
							var firstArgOfSecondCall = _v0.d;
							var _v5 = A2(secondFunctionCheck, checkInfo.s, secondFn);
							if (!_v5.$) {
								var secondRange = _v5.a;
								return _List_fromArray(
									[
										A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										errorMessage,
										$stil4m$elm_syntax$Elm$Syntax$Range$combine(
											_List_fromArray(
												[checkInfo.a, secondRange])),
										_List_fromArray(
											[
												$jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall(checkInfo),
												$jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall(
												{
													c: firstArgOfSecondCall,
													a: $stil4m$elm_syntax$Elm$Syntax$Node$range(secondFn),
													x: false
												})
											]))
									]);
							} else {
								return _List_Nil;
							}
						default:
							break _v0$3;
					}
				default:
					break _v0$3;
			}
		}
		return _List_Nil;
	});
var $jfmengels$elm_review_simplify$Simplify$basicsNegateChecks = function (checkInfo) {
	return A3($jfmengels$elm_review_simplify$Simplify$removeAlongWithOtherFunctionCheck, $jfmengels$elm_review_simplify$Simplify$negateNegateCompositionErrorMessage, $jfmengels$elm_review_simplify$Simplify$getNegateFunction, checkInfo);
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString = function (bool) {
	return bool ? 'True' : 'False';
};
var $jfmengels$elm_review_simplify$Simplify$Match$Determined = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_simplify$Simplify$Match$Undetermined = {$: 1};
var $jfmengels$elm_review_simplify$Simplify$Infer$isBoolean = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$isBoolean$fn(expr, _v0) {
		var inferred = _v0;
		return A2(
			$elm$core$Maybe$andThen,
			function (value) {
				switch (value.$) {
					case 0:
						return $elm$core$Maybe$Just(true);
					case 1:
						return $elm$core$Maybe$Just(false);
					case 2:
						return $elm$core$Maybe$Nothing;
					default:
						return $elm$core$Maybe$Nothing;
				}
			},
			A2($pzp1997$assoc_list$AssocList$get, expr, inferred.cb));
	});
var $jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean = F2(function $jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean$fn(resources, baseNode) {
		var node = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 3) {
			switch (_v0.b) {
				case 'True':
					var _v1 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, resources.s, node);
					if ((((!_v1.$) && _v1.a.b) && (_v1.a.a === 'Basics')) && (!_v1.a.b.b)) {
						var _v2 = _v1.a;
						return $jfmengels$elm_review_simplify$Simplify$Match$Determined(true);
					} else {
						return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
					}
				case 'False':
					var _v3 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, resources.s, node);
					if ((((!_v3.$) && _v3.a.b) && (_v3.a.a === 'Basics')) && (!_v3.a.b.b)) {
						var _v4 = _v3.a;
						return $jfmengels$elm_review_simplify$Simplify$Match$Determined(false);
					} else {
						return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
					}
				default:
					var name = _v0.b;
					var _v5 = A2(
						$elm$core$Maybe$andThen,
						function (moduleName) {
							return A2(
								$jfmengels$elm_review_simplify$Simplify$Infer$get,
								A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, moduleName, name),
								resources.I.a);
						},
						A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, resources.s, node));
					_v5$2:
					while (true) {
						if (!_v5.$) {
							if ((((_v5.a.$ === 3) && _v5.a.a.b) && (_v5.a.a.a === 'Basics')) && (!_v5.a.a.b.b)) {
								switch (_v5.a.b) {
									case 'True':
										var _v6 = _v5.a;
										var _v7 = _v6.a;
										return $jfmengels$elm_review_simplify$Simplify$Match$Determined(true);
									case 'False':
										var _v8 = _v5.a;
										var _v9 = _v8.a;
										return $jfmengels$elm_review_simplify$Simplify$Match$Determined(false);
									default:
										break _v5$2;
								}
							} else {
								break _v5$2;
							}
						} else {
							return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
						}
					}
					return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
			}
		} else {
			var _v10 = A2(
				$jfmengels$elm_review_simplify$Simplify$Infer$isBoolean,
				$stil4m$elm_syntax$Elm$Syntax$Node$value(
					A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, node)),
				resources.I.a);
			if (!_v10.$) {
				var bool = _v10.a;
				return $jfmengels$elm_review_simplify$Simplify$Match$Determined(bool);
			} else {
				return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$basicsNotChecks = function (checkInfo) {
	var _v0 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, checkInfo, checkInfo.c);
	if (!_v0.$) {
		var bool = _v0.a;
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace the call to `not` by the boolean value directly.']),
					bx: 'Expression is equal to ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(!bool)
				},
				checkInfo.b,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(!bool)),
								checkInfo)))
					]))
			]);
	} else {
		return A3($jfmengels$elm_review_simplify$Simplify$removeAlongWithOtherFunctionCheck, $jfmengels$elm_review_simplify$Simplify$notNotCompositionErrorMessage, $jfmengels$elm_review_simplify$Simplify$AstHelpers$getNotFunction, checkInfo);
	}
};
var $jfmengels$elm_review_simplify$Simplify$cmdCollection = {
	aP: function (resources) {
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
			A2(
				$jfmengels$elm_review_simplify$Simplify$qualify,
				_Utils_Tuple2(
					_List_fromArray(
						['Platform', 'Cmd']),
					'none'),
				resources));
	},
	Y: 'Cmd.none',
	aS: A2(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
		_List_fromArray(
			['Platform', 'Cmd']),
		'none'),
	eY: 'Cmd',
	B: 'command'
};
var $jfmengels$elm_review_simplify$Simplify$extractQualifyResources = function (resources) {
	return {E: resources.E, u: resources.u, A: resources.A};
};
var $jfmengels$elm_review_simplify$Simplify$emptyAsString = F2(function $jfmengels$elm_review_simplify$Simplify$emptyAsString$fn(qualifyResources, emptiable) {
		return emptiable.aP(
			$jfmengels$elm_review_simplify$Simplify$extractQualifyResources(qualifyResources));
	});
var $jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix = F4(function $jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix$fn(empty, parentRange, lastArg, qualifyResources) {
		return _List_fromArray(
			[
				function () {
				if (!lastArg.$) {
					return A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, parentRange, empty);
				} else {
					return A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						parentRange,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									'always'),
								qualifyResources)) + (' ' + empty));
				}
			}()
			]);
	});
var $jfmengels$elm_review_simplify$Simplify$collectionDiffChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionDiffChecks$fn(collection, checkInfo) {
		var collectionEmptyAsString = A2($jfmengels$elm_review_simplify$Simplify$emptyAsString, checkInfo, collection);
		var collectionArg = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
		return A2(
			$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
			_List_fromArray(
				[
					function (_v0) {
					var _v1 = A2(collection.O, checkInfo.s, checkInfo.c);
					if (((!_v1.$) && (!_v1.a.$)) && (!_v1.a.a)) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by ' + (collectionEmptyAsString + '.')]),
									bx: 'Diffing ' + (collectionEmptyAsString + (' will result in ' + collectionEmptyAsString))
								},
								checkInfo.a,
								A4($jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix, collectionEmptyAsString, checkInfo.b, collectionArg, checkInfo))
							]);
					} else {
						return _List_Nil;
					}
				},
					function (_v2) {
					var _v3 = A2(
						$elm$core$Maybe$andThen,
						collection.O(checkInfo.s),
						collectionArg);
					if (((!_v3.$) && (!_v3.a.$)) && (!_v3.a.a)) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by the ' + (collection.B + ' itself.')]),
									bx: 'Diffing a ' + (collection.B + (' with ' + (collectionEmptyAsString + (' will result in the ' + (collection.B + ' itself')))))
								},
								checkInfo.a,
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.b.dv
										}),
										$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: checkInfo.b.c4,
											dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4
										})
									]))
							]);
					} else {
						return _List_Nil;
					}
				}
				]),
			0);
	});
var $jfmengels$elm_review_simplify$Simplify$Evaluate$isAlwaysBoolean = F2(function $jfmengels$elm_review_simplify$Simplify$Evaluate$isAlwaysBoolean$fn(resources, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		_v0$2:
		while (true) {
			switch (_v0.$) {
				case 1:
					if ((((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'always')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
						var _v1 = _v0.a;
						var _v2 = _v1.a;
						var alwaysRange = _v2.a;
						var _v3 = _v2.b;
						var _v4 = _v1.b;
						var _boolean = _v4.a;
						var _v5 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, resources.s, alwaysRange);
						if ((((!_v5.$) && _v5.a.b) && (_v5.a.a === 'Basics')) && (!_v5.a.b.b)) {
							var _v6 = _v5.a;
							return A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, resources, _boolean);
						} else {
							return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
						}
					} else {
						break _v0$2;
					}
				case 17:
					var expression = _v0.a.eC;
					return A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, resources, expression);
				default:
					break _v0$2;
			}
		}
		return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
	});
var $jfmengels$elm_review_simplify$Simplify$toIdentityFix = function (config) {
	var _v0 = config.bV;
	if (_v0.$ === 1) {
		return _List_fromArray(
			[
				A2(
				$jfmengels$elm_review$Review$Fix$replaceRangeBy,
				config.bg.b,
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
					A2(
						$jfmengels$elm_review_simplify$Simplify$qualify,
						_Utils_Tuple2(
							_List_fromArray(
								['Basics']),
							'identity'),
						config.bg)))
			]);
	} else {
		var _v1 = _v0.a;
		var lastArgRange = _v1.a;
		return $jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
			{n: lastArgRange, b: config.bg.b});
	}
};
var $jfmengels$elm_review_simplify$Simplify$noopFix = function (checkInfo) {
	return $jfmengels$elm_review_simplify$Simplify$toIdentityFix(
		{
			bV: $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
			bg: checkInfo
		});
};
var $jfmengels$elm_review_simplify$Simplify$collectionFilterChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionFilterChecks$fn(collection, checkInfo) {
		var collectionEmptyAsString = A2($jfmengels$elm_review_simplify$Simplify$emptyAsString, checkInfo, collection);
		var collectionArg = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
		var _v0 = A2(
			$elm$core$Maybe$andThen,
			collection.O(checkInfo.s),
			collectionArg);
		if (((!_v0.$) && (!_v0.a.$)) && (!_v0.a.a)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by ' + (collectionEmptyAsString + '.')]),
						bx: 'Using ' + (collection.eY + ('.filter on ' + (collectionEmptyAsString + (' will result in ' + collectionEmptyAsString))))
					},
					checkInfo.a,
					$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
				]);
		} else {
			var _v1 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$isAlwaysBoolean, checkInfo, checkInfo.c);
			if (!_v1.$) {
				if (_v1.a) {
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can remove this call and replace it by the ' + (collection.B + ' itself.')]),
								bx: 'Using ' + (collection.eY + ('.filter with a function that will always return True is the same as not using ' + (collection.eY + '.filter')))
							},
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
						]);
				} else {
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can remove this call and replace it by ' + (collectionEmptyAsString + '.')]),
								bx: 'Using ' + (collection.eY + ('.filter with a function that will always return False will result in ' + collectionEmptyAsString))
							},
							checkInfo.a,
							A4($jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix, collectionEmptyAsString, checkInfo.b, collectionArg, checkInfo))
						]);
				}
			} else {
				return _List_Nil;
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$collectionFromListChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionFromListChecks$fn(collection, checkInfo) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
		if ((_v0.$ === 19) && (!_v0.a.b)) {
			var collectionEmptyAsString = A2($jfmengels$elm_review_simplify$Simplify$emptyAsString, checkInfo, collection);
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by ' + (collectionEmptyAsString + '.')]),
						bx: 'The call to ' + (collection.eY + ('.fromList will result in ' + collectionEmptyAsString))
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, collectionEmptyAsString)
						]))
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$collectionInsertChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionInsertChecks$fn(collection, checkInfo) {
		var _v0 = A2(
			$elm$core$Maybe$andThen,
			collection.O(checkInfo.s),
			$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
		if (((!_v0.$) && (!_v0.a.$)) && (!_v0.a.a)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by ' + (collection.eY + '.singleton.')]),
						bx: 'Use ' + (collection.eY + ('.singleton instead of inserting in ' + A2($jfmengels$elm_review_simplify$Simplify$emptyAsString, checkInfo, collection)))
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											[collection.eY]),
										'singleton'),
									checkInfo))),
							checkInfo.x ? $jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.a.dv, dv: checkInfo.b.dv}) : $jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: checkInfo.b.c4,
								dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4
							})
						]))
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$collectionIntersectChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionIntersectChecks$fn(collection, checkInfo) {
		var collectionEmptyAsString = A2($jfmengels$elm_review_simplify$Simplify$emptyAsString, checkInfo, collection);
		var collectionArg = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
		return A2(
			$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
			_List_fromArray(
				[
					function (_v0) {
					var _v1 = A2(collection.O, checkInfo.s, checkInfo.c);
					if (((!_v1.$) && (!_v1.a.$)) && (!_v1.a.a)) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by ' + (collectionEmptyAsString + '.')]),
									bx: 'Using ' + (collection.eY + ('.intersect on ' + (collectionEmptyAsString + (' will result in ' + collectionEmptyAsString))))
								},
								checkInfo.a,
								A4($jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix, collectionEmptyAsString, checkInfo.b, collectionArg, checkInfo))
							]);
					} else {
						return _List_Nil;
					}
				},
					function (_v2) {
					var _v3 = A2(
						$elm$core$Maybe$andThen,
						collection.O(checkInfo.s),
						collectionArg);
					if (((!_v3.$) && (!_v3.a.$)) && (!_v3.a.a)) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by ' + (collectionEmptyAsString + '.')]),
									bx: 'Using ' + (collection.eY + ('.intersect on ' + (collectionEmptyAsString + (' will result in ' + collectionEmptyAsString))))
								},
								checkInfo.a,
								A4($jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix, collectionEmptyAsString, checkInfo.b, collectionArg, checkInfo))
							]);
					} else {
						return _List_Nil;
					}
				}
				]),
			0);
	});
var $jfmengels$elm_review_simplify$Simplify$collectionIsEmptyChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionIsEmptyChecks$fn(collection, checkInfo) {
		var _v0 = A2(collection.O, checkInfo.s, checkInfo.c);
		if (!_v0.$) {
			if ((!_v0.a.$) && (!_v0.a.a)) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by True.']),
							bx: 'The call to ' + (collection.eY + '.isEmpty will result in True')
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								checkInfo.b,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['Basics']),
											'True'),
										checkInfo)))
							]))
					]);
			} else {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by False.']),
							bx: 'The call to ' + (collection.eY + '.isEmpty will result in False')
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								checkInfo.b,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['Basics']),
											'False'),
										checkInfo)))
							]))
					]);
			}
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$collectionMapChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionMapChecks$fn(collection, checkInfo) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			collection.aS(checkInfo.s),
			$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
		if ((!_v0.$) && _v0.a) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by ' + (collection.Y + '.')]),
						bx: 'Using ' + (collection.eY + ('.map on ' + (collection.Y + (' will result in ' + collection.Y))))
					},
					checkInfo.a,
					$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
				]);
		} else {
			return A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity, checkInfo.s, checkInfo.c) ? _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can remove this call and replace it by the ' + (collection.B + ' itself.')]),
						bx: 'Using ' + (collection.eY + ('.map with an identity function is the same as not using ' + (collection.eY + '.map')))
					},
					checkInfo.a,
					$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
				]) : _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$replaceByBoolFix = F4(function $jfmengels$elm_review_simplify$Simplify$replaceByBoolFix$fn(parentRange, lastArg, replacementValue, qualifyResources) {
		return _List_fromArray(
			[
				function () {
				if (!lastArg.$) {
					return A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						parentRange,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(replacementValue));
				} else {
					return A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						parentRange,
						'(' + ($jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									'always'),
								qualifyResources)) + (' ' + ($jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(replacementValue)),
								qualifyResources)) + ')'))));
				}
			}()
			]);
	});
var $jfmengels$elm_review_simplify$Simplify$collectionMemberChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionMemberChecks$fn(collection, checkInfo) {
		var collectionArg = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
		var _v0 = A2(
			$elm$core$Maybe$andThen,
			collection.O(checkInfo.s),
			collectionArg);
		if (((!_v0.$) && (!_v0.a.$)) && (!_v0.a.a)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by False.']),
						bx: 'Using ' + (collection.eY + ('.member on ' + (collection.Y + ' will result in False')))
					},
					checkInfo.a,
					A4($jfmengels$elm_review_simplify$Simplify$replaceByBoolFix, checkInfo.b, collectionArg, false, checkInfo))
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$collectionPartitionChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionPartitionChecks$fn(collection, checkInfo) {
		var collectionEmptyAsString = A2($jfmengels$elm_review_simplify$Simplify$emptyAsString, checkInfo, collection);
		var _v0 = A2(
			$elm$core$Maybe$andThen,
			collection.O(checkInfo.s),
			$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
		if (((!_v0.$) && (!_v0.a.$)) && (!_v0.a.a)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by ( ' + (collectionEmptyAsString + (', ' + (collectionEmptyAsString + ' ).')))]),
						bx: 'Using ' + (collection.eY + ('.partition on ' + (collection.Y + (' will result in ( ' + (collectionEmptyAsString + (', ' + (collectionEmptyAsString + ' )')))))))
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '( ' + (collectionEmptyAsString + (', ' + (collectionEmptyAsString + ' )'))))
						]))
				]);
		} else {
			var _v1 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$isAlwaysBoolean, checkInfo, checkInfo.c);
			if (!_v1.$) {
				if (_v1.a) {
					var _v2 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
					if (!_v2.$) {
						var listArg = _v2.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['Since the predicate function always returns True, the second ' + (collection.B + (' will always be ' + (collection.Y + '.')))]),
									bx: 'All elements will go to the first ' + collection.B
								},
								checkInfo.a,
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(listArg).dv,
											dv: checkInfo.a.dv
										},
										'( '),
										A2(
										$jfmengels$elm_review$Review$Fix$insertAt,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(listArg).c4,
										', ' + (collectionEmptyAsString + ' )'))
									]))
							]);
					} else {
						return _List_Nil;
					}
				} else {
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['Since the predicate function always returns False, the first ' + (collection.B + (' will always be ' + (collection.Y + '.')))]),
								bx: 'All elements will go to the second ' + collection.B
							},
							checkInfo.a,
							function () {
								var _v3 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
								if (!_v3.$) {
									var listArg = _v3.a;
									return _List_fromArray(
										[
											A2(
											$jfmengels$elm_review$Review$Fix$replaceRangeBy,
											{
												c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(listArg).dv,
												dv: checkInfo.a.dv
											},
											'( ' + (collectionEmptyAsString + ', ')),
											A2(
											$jfmengels$elm_review$Review$Fix$insertAt,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(listArg).c4,
											' )')
										]);
								} else {
									return _List_fromArray(
										[
											A2(
											$jfmengels$elm_review$Review$Fix$replaceRangeBy,
											checkInfo.b,
											'(' + ($jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
												A2(
													$jfmengels$elm_review_simplify$Simplify$qualify,
													_Utils_Tuple2(
														_List_fromArray(
															['Tuple']),
														'pair'),
													checkInfo)) + (' ' + (collectionEmptyAsString + ')'))))
										]);
								}
							}())
						]);
				}
			} else {
				return _List_Nil;
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$collectionRemoveChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionRemoveChecks$fn(collection, checkInfo) {
		var _v0 = A2(
			$elm$core$Maybe$andThen,
			collection.O(checkInfo.s),
			$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
		if (((!_v0.$) && (!_v0.a.$)) && (!_v0.a.a)) {
			var collectionEmptyAsString = A2($jfmengels$elm_review_simplify$Simplify$emptyAsString, checkInfo, collection);
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by ' + (collectionEmptyAsString + '.')]),
						bx: 'Using ' + (collection.eY + ('.remove on ' + (collectionEmptyAsString + (' will result in ' + collectionEmptyAsString))))
					},
					checkInfo.a,
					$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$collectionSizeChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionSizeChecks$fn(collection, checkInfo) {
		var _v0 = A2(collection.O, checkInfo.s, checkInfo.c);
		if ((!_v0.$) && (!_v0.a.$)) {
			var size = _v0.a.a;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['The ' + (collection.$7 + (' of the ' + (collection.B + ' can be determined by looking at the code.')))]),
						bx: 'The ' + (collection.$7 + (' of the ' + (collection.B + (' is ' + $elm$core$String$fromInt(size)))))
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							checkInfo.b,
							$elm$core$String$fromInt(size))
						]))
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$collectionToListChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionToListChecks$fn(collection, checkInfo) {
		var _v0 = A2(collection.O, checkInfo.s, checkInfo.c);
		if (((!_v0.$) && (!_v0.a.$)) && (!_v0.a.a)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by [].']),
						bx: 'The call to ' + (collection.eY + '.toList will result in []')
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
						]))
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$collectionUnionChecks = F2(function $jfmengels$elm_review_simplify$Simplify$collectionUnionChecks$fn(collection, checkInfo) {
		return A2(
			$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
			_List_fromArray(
				[
					function (_v0) {
					var _v1 = A2(collection.O, checkInfo.s, checkInfo.c);
					if (((!_v1.$) && (!_v1.a.$)) && (!_v1.a.a)) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by the set itself.']),
									bx: 'Unnecessary union with Set.empty'
								},
								checkInfo.a,
								$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
							]);
					} else {
						return _List_Nil;
					}
				},
					function (_v2) {
					var _v3 = A2(
						$elm$core$Maybe$andThen,
						collection.O(checkInfo.s),
						$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
					if (((!_v3.$) && (!_v3.a.$)) && (!_v3.a.a)) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by the set itself.']),
									bx: 'Unnecessary union with Set.empty'
								},
								checkInfo.a,
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.b.dv
										}),
										$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: checkInfo.b.c4,
											dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4
										})
									]))
							]);
					} else {
						return _List_Nil;
					}
				}
				]),
			0);
	});
var $jfmengels$elm_review_simplify$Simplify$Exactly = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_simplify$Simplify$NotEmpty = {$: 1};
var $stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral = function (a) {
	return {$: 12, a: a};
};
var $jfmengels$elm_review_simplify$Simplify$traverseHelp = F3(function $jfmengels$elm_review_simplify$Simplify$traverseHelp$fn(f, list, acc) {
		traverseHelp:
		while (true) {
			if (list.b) {
				var head = list.a;
				var tail = list.b;
				var _v1 = f(head);
				if (!_v1.$) {
					var a = _v1.a;
					var $temp$f = f,
						$temp$list = tail,
						$temp$acc = A2($elm$core$List$cons, a, acc);
					f = $temp$f;
					list = $temp$list;
					acc = $temp$acc;
					continue traverseHelp;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Just(
					$elm$core$List$reverse(acc));
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$traverse = F2(function $jfmengels$elm_review_simplify$Simplify$traverse$fn(f, list) {
		return A3($jfmengels$elm_review_simplify$Simplify$traverseHelp, f, list, _List_Nil);
	});
var $jfmengels$elm_review_simplify$Simplify$getComparableExpressionHelper = F2(function $jfmengels$elm_review_simplify$Simplify$getComparableExpressionHelper$fn(sign, _v0) {
		getComparableExpressionHelper:
		while (true) {
			var expression = _v0.b;
			switch (expression.$) {
				case 7:
					var _int = expression.a;
					return $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Syntax$Expression$Integer(sign * _int)
							]));
				case 8:
					var hex = expression.a;
					return $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Syntax$Expression$Integer(sign * hex)
							]));
				case 9:
					var _float = expression.a;
					return $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(sign * _float)
							]));
				case 10:
					var expr = expression.a;
					var $temp$sign = (-1) * sign,
						$temp$_v0 = expr;
					sign = $temp$sign;
					_v0 = $temp$_v0;
					continue getComparableExpressionHelper;
				case 11:
					var string = expression.a;
					return $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Syntax$Expression$Literal(string)
							]));
				case 12:
					var _char = expression.a;
					return $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral(_char)
							]));
				case 14:
					var expr = expression.a;
					var $temp$sign = 1,
						$temp$_v0 = expr;
					sign = $temp$sign;
					_v0 = $temp$_v0;
					continue getComparableExpressionHelper;
				case 13:
					var exprs = expression.a;
					return A2(
						$elm$core$Maybe$map,
						$elm$core$List$concat,
						A2(
							$jfmengels$elm_review_simplify$Simplify$traverse,
							$jfmengels$elm_review_simplify$Simplify$getComparableExpressionHelper(1),
							exprs));
				case 19:
					var exprs = expression.a;
					return A2(
						$elm$core$Maybe$map,
						$elm$core$List$concat,
						A2(
							$jfmengels$elm_review_simplify$Simplify$traverse,
							$jfmengels$elm_review_simplify$Simplify$getComparableExpressionHelper(1),
							exprs));
				default:
					return $elm$core$Maybe$Nothing;
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$getComparableExpression = $jfmengels$elm_review_simplify$Simplify$getComparableExpressionHelper(1);
var $jfmengels$elm_review_simplify$Simplify$uniqueHelp = F3(function $jfmengels$elm_review_simplify$Simplify$uniqueHelp$fn(existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				if (A2($elm$core$List$member, first, existing)) {
					var $temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$existing = A2($elm$core$List$cons, first, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$unique = function (list) {
	return A3($jfmengels$elm_review_simplify$Simplify$uniqueHelp, _List_Nil, list, _List_Nil);
};
var $jfmengels$elm_review_simplify$Simplify$determineIfCollectionIsEmpty = F4(function $jfmengels$elm_review_simplify$Simplify$determineIfCollectionIsEmpty$fn(moduleName, singletonNumberOfArgs, lookupTable, node) {
		if (A4($jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction, moduleName, 'empty', lookupTable, node)) {
			return $elm$core$Maybe$Just(
				$jfmengels$elm_review_simplify$Simplify$Exactly(0));
		} else {
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
			_v0$2:
			while (true) {
				if (((_v0.$ === 1) && _v0.a.b) && (_v0.a.a.b.$ === 3)) {
					switch (_v0.a.a.b.b) {
						case 'singleton':
							var _v1 = _v0.a;
							var _v2 = _v1.a;
							var fnRange = _v2.a;
							var _v3 = _v2.b;
							var args = _v1.b;
							return (_Utils_eq(
								$elm$core$List$length(args),
								singletonNumberOfArgs) && _Utils_eq(
								A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, fnRange),
								$elm$core$Maybe$Just(moduleName))) ? $elm$core$Maybe$Just(
								$jfmengels$elm_review_simplify$Simplify$Exactly(1)) : $elm$core$Maybe$Nothing;
						case 'fromList':
							if ((_v0.a.b.b && (_v0.a.b.a.b.$ === 19)) && (!_v0.a.b.b.b)) {
								var _v4 = _v0.a;
								var _v5 = _v4.a;
								var fnRange = _v5.a;
								var _v6 = _v5.b;
								var _v7 = _v4.b;
								var _v8 = _v7.a;
								var list = _v8.b.a;
								if (_Utils_eq(
									A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, fnRange),
									$elm$core$Maybe$Just(moduleName))) {
									if (_Utils_eq(
										moduleName,
										_List_fromArray(
											['Set']))) {
										if (!list.b) {
											return $elm$core$Maybe$Just(
												$jfmengels$elm_review_simplify$Simplify$Exactly(0));
										} else {
											if (!list.b.b) {
												return $elm$core$Maybe$Just(
													$jfmengels$elm_review_simplify$Simplify$Exactly(1));
											} else {
												var _v10 = A2($jfmengels$elm_review_simplify$Simplify$traverse, $jfmengels$elm_review_simplify$Simplify$getComparableExpression, list);
												if (_v10.$ === 1) {
													return $elm$core$Maybe$Just($jfmengels$elm_review_simplify$Simplify$NotEmpty);
												} else {
													var comparableExpressions = _v10.a;
													return $elm$core$Maybe$Just(
														$jfmengels$elm_review_simplify$Simplify$Exactly(
															$elm$core$List$length(
																$jfmengels$elm_review_simplify$Simplify$unique(comparableExpressions))));
												}
											}
										}
									} else {
										return $elm$core$Maybe$Just(
											$jfmengels$elm_review_simplify$Simplify$Exactly(
												$elm$core$List$length(list)));
									}
								} else {
									return $elm$core$Maybe$Nothing;
								}
							} else {
								break _v0$2;
							}
						default:
							break _v0$2;
					}
				} else {
					break _v0$2;
				}
			}
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$dictCollection = {
	O: A2(
		$jfmengels$elm_review_simplify$Simplify$determineIfCollectionIsEmpty,
		_List_fromArray(
			['Dict']),
		2),
	aP: function (resources) {
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
			A2(
				$jfmengels$elm_review_simplify$Simplify$qualify,
				_Utils_Tuple2(
					_List_fromArray(
						['Dict']),
					'empty'),
				resources));
	},
	Y: 'Dict.empty',
	aS: A2(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
		_List_fromArray(
			['Dict']),
		'empty'),
	eY: 'Dict',
	$7: 'size',
	B: 'Dict'
};
var $jfmengels$elm_review_simplify$Simplify$collapsedConsRemoveElementFix = function (_v0) {
	var toRemove = _v0.gn;
	var tailRange = _v0.hN;
	var _v1 = _Utils_Tuple2(toRemove.fp, toRemove.fo);
	if (_v1.a.$ === 1) {
		if (_v1.b.$ === 1) {
			var _v2 = _v1.a;
			var _v3 = _v1.b;
			return _List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(
					{c4: tailRange.dv, dv: toRemove.cm.f4.dv})
				]);
		} else {
			var _v4 = _v1.a;
			var after = _v1.b.a;
			return _List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(
					{
						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(after).dv,
						dv: toRemove.cm.f4.dv
					})
				]);
		}
	} else {
		var before = _v1.a.a;
		return _List_fromArray(
			[
				$jfmengels$elm_review$Review$Fix$removeRange(
				{
					c4: toRemove.cm.f4.c4,
					dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(before).c4
				})
			]);
	}
};
var $jfmengels$elm_review_simplify$Simplify$findMapNeighboringAfter = F3(function $jfmengels$elm_review_simplify$Simplify$findMapNeighboringAfter$fn(before, tryMap, list) {
		findMapNeighboringAfter:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var now = list.a;
				var after = list.b;
				var _v1 = tryMap(now);
				if (!_v1.$) {
					var found = _v1.a;
					return $elm$core$Maybe$Just(
						{
							fo: $elm$core$List$head(after),
							fp: before,
							cm: found
						});
				} else {
					var $temp$before = $elm$core$Maybe$Just(now),
						$temp$tryMap = tryMap,
						$temp$list = after;
					before = $temp$before;
					tryMap = $temp$tryMap;
					list = $temp$list;
					continue findMapNeighboringAfter;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$findMapNeighboring = F2(function $jfmengels$elm_review_simplify$Simplify$findMapNeighboring$fn(tryMap, list) {
		return A3($jfmengels$elm_review_simplify$Simplify$findMapNeighboringAfter, $elm$core$Maybe$Nothing, tryMap, list);
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificBool = F3(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificBool$fn(specificBool, lookupTable, expressionNode) {
		return A4(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
			_List_fromArray(
				['Basics']),
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(specificBool),
			lookupTable,
			expressionNode);
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getBool = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getBool$fn(lookupTable, expressionNode) {
		return A3($jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificBool, true, lookupTable, expressionNode) ? $elm$core$Maybe$Just(true) : (A3($jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificBool, false, lookupTable, expressionNode) ? $elm$core$Maybe$Just(false) : $elm$core$Maybe$Nothing);
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getCollapsedCons = function (expressionNode) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(expressionNode));
	if ((_v0.$ === 2) && (_v0.a === '::')) {
		var head = _v0.c;
		var tail = _v0.d;
		var tailCollapsed = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getCollapsedCons(tail);
		if (tailCollapsed.$ === 1) {
			return $elm$core$Maybe$Just(
				{
					$8: _List_fromArray(
						[head]),
					S: tail
				});
		} else {
			var tailCollapsedList = tailCollapsed.a;
			return $elm$core$Maybe$Just(
				{
					$8: A2($elm$core$List$cons, head, tailCollapsedList.$8),
					S: tailCollapsedList.S
				});
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getListLiteral = function (expressionNode) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(expressionNode);
	if (_v0.$ === 19) {
		var list = _v0.a;
		return $elm$core$Maybe$Just(list);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingletonCall = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingletonCall$fn(lookupTable, expressionNode) {
		var _v0 = A3(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunctionCall,
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'singleton'),
			lookupTable,
			expressionNode);
		if (!_v0.$) {
			var singletonCall = _v0.a;
			var _v1 = singletonCall.au;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(
					{a2: singletonCall.c});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getTuple = function (expressionNode) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(expressionNode);
	if ((((_v0.$ === 13) && _v0.a.b) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
		var _v1 = _v0.a;
		var first = _v1.a;
		var _v2 = _v1.b;
		var second = _v2.a;
		return $elm$core$Maybe$Just(
			{
				dT: first,
				f4: $stil4m$elm_syntax$Elm$Syntax$Node$range(expressionNode),
				fe: second
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_simplify$Simplify$htmlAttributesClassListFalseElementError = {
	eq: _List_fromArray(
		['You can remove the tuple list element where the second part is False.']),
	bx: 'In a Html.Attributes.classList, a tuple paired with False can be removed'
};
var $jfmengels$elm_review_simplify$Simplify$listLiteralElementRemoveFix = function (toRemove) {
	var _v0 = _Utils_Tuple2(toRemove.fp, toRemove.fo);
	if (_v0.a.$ === 1) {
		if (_v0.b.$ === 1) {
			var _v1 = _v0.a;
			var _v2 = _v0.b;
			return _List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(toRemove.cm.f4)
				]);
		} else {
			var _v3 = _v0.a;
			var after = _v0.b.a;
			return _List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(
					{
						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(after).dv,
						dv: toRemove.cm.f4.dv
					})
				]);
		}
	} else {
		var before = _v0.a.a;
		return _List_fromArray(
			[
				$jfmengels$elm_review$Review$Fix$removeRange(
				{
					c4: toRemove.cm.f4.c4,
					dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(before).c4
				})
			]);
	}
};
var $jfmengels$elm_review_simplify$Simplify$needsParens = function (expr) {
	switch (expr.$) {
		case 1:
			return true;
		case 2:
			return true;
		case 4:
			return true;
		case 10:
			return true;
		case 15:
			return true;
		case 16:
			return true;
		case 17:
			return true;
		default:
			return false;
	}
};
var $jfmengels$elm_review_simplify$Simplify$parenthesizeFix = function (toSurround) {
	return _List_fromArray(
		[
			A2($jfmengels$elm_review$Review$Fix$insertAt, toSurround.dv, '('),
			A2($jfmengels$elm_review$Review$Fix$insertAt, toSurround.c4, ')')
		]);
};
var $jfmengels$elm_review_simplify$Simplify$parenthesizeIfNeededFix = function (expressionNode) {
	return $jfmengels$elm_review_simplify$Simplify$needsParens(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(expressionNode)) ? $jfmengels$elm_review_simplify$Simplify$parenthesizeFix(
		$stil4m$elm_syntax$Elm$Syntax$Node$range(expressionNode)) : _List_Nil;
};
var $jfmengels$elm_review_simplify$Simplify$htmlAttributesClassListChecks = function (checkInfo) {
	var listArg = checkInfo.c;
	var singleTrueChecks = function (_v10) {
		var first = _v10.dT;
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by Html.Attributes.class with the String from the single tuple list element.']),
					bx: 'Html.Attributes.classList with a single tuple paired with True can be replaced with Html.Attributes.class'
				},
				checkInfo.a,
				_Utils_ap(
					$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
						{
							n: $stil4m$elm_syntax$Elm$Syntax$Node$range(first),
							b: $stil4m$elm_syntax$Elm$Syntax$Node$range(listArg)
						}),
					_Utils_ap(
						$jfmengels$elm_review_simplify$Simplify$parenthesizeIfNeededFix(first),
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								checkInfo.a,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['Html', 'Attributes']),
											'class'),
										checkInfo)))
							]))))
			]);
	};
	var getTupleWithSpecificSecond = F2(function getTupleWithSpecificSecond$fn(specificBool, expressionNode) {
			var _v9 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getTuple(expressionNode);
			if (!_v9.$) {
				var tuple = _v9.a;
				return A3($jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificBool, specificBool, checkInfo.s, tuple.fe) ? $elm$core$Maybe$Just(
					{dT: tuple.dT, f4: tuple.f4}) : $elm$core$Maybe$Nothing;
			} else {
				return $elm$core$Maybe$Nothing;
			}
		});
	var getTupleWithSecond = function (expressionNode) {
		var _v7 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getTuple(expressionNode);
		if (!_v7.$) {
			var tuple = _v7.a;
			var _v8 = A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getBool, checkInfo.s, tuple.fe);
			if (!_v8.$) {
				var bool = _v8.a;
				return $elm$core$Maybe$Just(
					{dT: tuple.dT, f4: tuple.f4, fe: bool});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var singleElementListChecks = function (single) {
		var _v6 = getTupleWithSecond(single.a2);
		if (!_v6.$) {
			var tuple = _v6.a;
			return tuple.fe ? singleTrueChecks(tuple) : _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					$jfmengels$elm_review_simplify$Simplify$htmlAttributesClassListFalseElementError,
					checkInfo.a,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(listArg),
							'[]')
						]))
				]);
		} else {
			return _List_Nil;
		}
	};
	var _v0 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getListLiteral(listArg);
	if (!_v0.$) {
		if (_v0.a.b && (!_v0.a.b.b)) {
			var _v1 = _v0.a;
			var single = _v1.a;
			return singleElementListChecks(
				{a2: single});
		} else {
			var nonSingletonList = _v0.a;
			var _v2 = A2(
				$jfmengels$elm_review_simplify$Simplify$findMapNeighboring,
				getTupleWithSpecificSecond(false),
				nonSingletonList);
			if (!_v2.$) {
				var classPart = _v2.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						$jfmengels$elm_review_simplify$Simplify$htmlAttributesClassListFalseElementError,
						checkInfo.a,
						$jfmengels$elm_review_simplify$Simplify$listLiteralElementRemoveFix(classPart))
					]);
			} else {
				return _List_Nil;
			}
		}
	} else {
		var _v3 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getCollapsedCons(listArg);
		if (!_v3.$) {
			var classParts = _v3.a;
			var _v4 = A2(
				$jfmengels$elm_review_simplify$Simplify$findMapNeighboring,
				getTupleWithSpecificSecond(false),
				classParts.$8);
			if (!_v4.$) {
				var classPart = _v4.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						$jfmengels$elm_review_simplify$Simplify$htmlAttributesClassListFalseElementError,
						checkInfo.a,
						$jfmengels$elm_review_simplify$Simplify$collapsedConsRemoveElementFix(
							{
								hN: $stil4m$elm_syntax$Elm$Syntax$Node$range(classParts.S),
								gn: classPart
							}))
					]);
			} else {
				return _List_Nil;
			}
		} else {
			var _v5 = A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingletonCall, checkInfo.s, listArg);
			if (!_v5.$) {
				var single = _v5.a;
				return singleElementListChecks(single);
			} else {
				return _List_Nil;
			}
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$listAllChecks = function (checkInfo) {
	var _v0 = A2(
		$elm$core$Maybe$map,
		A2($elm$core$Basics$composeR, $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens, $stil4m$elm_syntax$Elm$Syntax$Node$value),
		$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
	if (((!_v0.$) && (_v0.a.$ === 19)) && (!_v0.a.a.b)) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by True.']),
					bx: 'The call to List.all will result in True'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									'True'),
								checkInfo)))
					]))
			]);
	} else {
		var _v1 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$isAlwaysBoolean, checkInfo, checkInfo.c);
		if ((!_v1.$) && _v1.a) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by True.']),
						bx: 'The call to List.all will result in True'
					},
					checkInfo.a,
					A4(
						$jfmengels$elm_review_simplify$Simplify$replaceByBoolFix,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
						true,
						checkInfo))
				]);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$listAnyChecks = function (checkInfo) {
	var _v0 = A2(
		$elm$core$Maybe$map,
		A2($elm$core$Basics$composeR, $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens, $stil4m$elm_syntax$Elm$Syntax$Node$value),
		$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
	if (((!_v0.$) && (_v0.a.$ === 19)) && (!_v0.a.a.b)) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by False.']),
					bx: 'The call to List.any will result in False'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									'False'),
								checkInfo)))
					]))
			]);
	} else {
		var listArg = _v0;
		var _v1 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$isAlwaysBoolean, checkInfo, checkInfo.c);
		if ((!_v1.$) && (!_v1.a)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by False.']),
						bx: 'The call to List.any will result in False'
					},
					checkInfo.a,
					A4($jfmengels$elm_review_simplify$Simplify$replaceByBoolFix, checkInfo.b, listArg, false, checkInfo))
				]);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$listAppendEmptyErrorInfo = {
	eq: _List_fromArray(
		['You can remove the List.append function and the [].']),
	bx: 'Appending [] doesn\'t have any effect'
};
var $jfmengels$elm_review_simplify$Simplify$locationsCompare = function (_v0) {
	var aEnd = _v0.a;
	var bEnd = _v0.b;
	var _v1 = A2($elm$core$Basics$compare, aEnd.b1, bEnd.b1);
	switch (_v1) {
		case 1:
			return A2($elm$core$Basics$compare, aEnd.bH, bEnd.bH);
		case 0:
			return 0;
		default:
			return 2;
	}
};
var $jfmengels$elm_review_simplify$Simplify$rangeBetweenExclusive = function (_v0) {
	var aRange = _v0.a;
	var bRange = _v0.b;
	var _v1 = $jfmengels$elm_review_simplify$Simplify$locationsCompare(
		_Utils_Tuple2(aRange.dv, bRange.dv));
	if (_v1 === 2) {
		return {c4: aRange.dv, dv: bRange.c4};
	} else {
		return {c4: bRange.dv, dv: aRange.c4};
	}
};
var $jfmengels$elm_review_simplify$Simplify$rangeWithoutListBrackets = function (listRange) {
	return {
		c4: {bH: listRange.c4.bH - 1, b1: listRange.c4.b1},
		dv: {bH: listRange.dv.bH + 1, b1: listRange.dv.b1}
	};
};
var $jfmengels$elm_review_simplify$Simplify$listAppendChecks = function (checkInfo) {
	var _v0 = _Utils_Tuple2(
		checkInfo.c,
		$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
	_v0$1:
	while (true) {
		_v0$3:
		while (true) {
			if (_v0.a.b.$ === 19) {
				if (!_v0.a.b.a.b) {
					var _v1 = _v0.a;
					var secondListArgument = _v0.b;
					if (secondListArgument.$ === 1) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								_Utils_update(
									$jfmengels$elm_review_simplify$Simplify$listAppendEmptyErrorInfo,
									{
										eq: _List_fromArray(
											['You can replace this call by identity.'])
									}),
								checkInfo.a,
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										checkInfo.b,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Basics']),
													'identity'),
												checkInfo)))
									]))
							]);
					} else {
						var _v3 = secondListArgument.a;
						var secondListRange = _v3.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								$jfmengels$elm_review_simplify$Simplify$listAppendEmptyErrorInfo,
								checkInfo.a,
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{n: secondListRange, b: checkInfo.b}))
							]);
					}
				} else {
					if ((!_v0.b.$) && (_v0.b.a.b.$ === 19)) {
						if (!_v0.b.a.b.a.b) {
							break _v0$1;
						} else {
							var _v6 = _v0.a;
							var firstListRange = _v6.a;
							var _v7 = _v6.b.a;
							var _v8 = _v0.b.a;
							var secondListRange = _v8.a;
							var _v9 = _v8.b.a;
							return _List_fromArray(
								[
									A3(
									$jfmengels$elm_review$Review$Rule$errorWithFix,
									{
										eq: _List_fromArray(
											['Try moving all the elements into a single list.']),
										bx: 'Appending literal lists could be simplified to be a single List'
									},
									checkInfo.a,
									function () {
										if (checkInfo.x) {
											return A2(
												$elm$core$List$cons,
												A2(
													$jfmengels$elm_review$Review$Fix$insertAt,
													$jfmengels$elm_review_simplify$Simplify$rangeWithoutListBrackets(secondListRange).dv,
													checkInfo.eD(
														$jfmengels$elm_review_simplify$Simplify$rangeWithoutListBrackets(firstListRange)) + ','),
												$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
													{n: secondListRange, b: checkInfo.b}));
										} else {
											var betweenListArguments = $jfmengels$elm_review_simplify$Simplify$rangeBetweenExclusive(
												_Utils_Tuple2(firstListRange, secondListRange));
											return A2(
												$elm$core$List$cons,
												A2(
													$jfmengels$elm_review$Review$Fix$replaceRangeBy,
													{
														c4: {bH: betweenListArguments.c4.bH + 1, b1: betweenListArguments.c4.b1},
														dv: {bH: betweenListArguments.dv.bH - 1, b1: betweenListArguments.dv.b1}
													},
													','),
												$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
													{
														n: $stil4m$elm_syntax$Elm$Syntax$Range$combine(
															_List_fromArray(
																[firstListRange, secondListRange])),
														b: checkInfo.b
													}));
										}
									}())
								]);
						}
					} else {
						break _v0$3;
					}
				}
			} else {
				if (((!_v0.b.$) && (_v0.b.a.b.$ === 19)) && (!_v0.b.a.b.a.b)) {
					break _v0$1;
				} else {
					break _v0$3;
				}
			}
		}
		return _List_Nil;
	}
	var _v4 = _v0.a;
	var firstListRange = _v4.a;
	var _v5 = _v0.b.a;
	return _List_fromArray(
		[
			A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			$jfmengels$elm_review_simplify$Simplify$listAppendEmptyErrorInfo,
			checkInfo.a,
			$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
				{n: firstListRange, b: checkInfo.b}))
		]);
};
var $jfmengels$elm_review_simplify$Simplify$determineListLength = F2(function $jfmengels$elm_review_simplify$Simplify$determineListLength$fn(lookupTable, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		_v0$3:
		while (true) {
			switch (_v0.$) {
				case 19:
					var list = _v0.a;
					return $elm$core$Maybe$Just(
						$jfmengels$elm_review_simplify$Simplify$Exactly(
							$elm$core$List$length(list)));
				case 2:
					if (_v0.a === '::') {
						var right = _v0.d;
						var _v1 = A2($jfmengels$elm_review_simplify$Simplify$determineListLength, lookupTable, right);
						if ((!_v1.$) && (!_v1.a.$)) {
							var n = _v1.a.a;
							return $elm$core$Maybe$Just(
								$jfmengels$elm_review_simplify$Simplify$Exactly(n + 1));
						} else {
							return $elm$core$Maybe$Just($jfmengels$elm_review_simplify$Simplify$NotEmpty);
						}
					} else {
						break _v0$3;
					}
				case 1:
					if ((((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'singleton')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
						var _v2 = _v0.a;
						var _v3 = _v2.a;
						var fnRange = _v3.a;
						var _v4 = _v3.b;
						var _v5 = _v2.b;
						return _Utils_eq(
							A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, fnRange),
							$elm$core$Maybe$Just(
								_List_fromArray(
									['List']))) ? $elm$core$Maybe$Just(
							$jfmengels$elm_review_simplify$Simplify$Exactly(1)) : $elm$core$Maybe$Nothing;
					} else {
						break _v0$3;
					}
				default:
					break _v0$3;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isEmptyList = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
	if ((_v0.$ === 19) && (!_v0.a.b)) {
		return true;
	} else {
		return false;
	}
};
var $jfmengels$elm_review_simplify$Simplify$listCollection = {
	O: $jfmengels$elm_review_simplify$Simplify$determineListLength,
	aP: function (_v0) {
		return '[]';
	},
	Y: '[]',
	aS: function (_v1) {
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$isEmptyList;
	},
	eY: 'List',
	$7: 'length',
	B: 'list'
};
var $jfmengels$elm_review_simplify$Simplify$findConsecutiveListLiterals = F2(function $jfmengels$elm_review_simplify$Simplify$findConsecutiveListLiterals$fn(firstListElement, restOfListElements) {
		findConsecutiveListLiterals:
		while (true) {
			var _v0 = _Utils_Tuple2(firstListElement, restOfListElements);
			if (_v0.b.b) {
				if ((_v0.a.b.$ === 19) && (_v0.b.a.b.$ === 19)) {
					var _v1 = _v0.a;
					var firstRange = _v1.a;
					var _v2 = _v0.b;
					var second = _v2.a;
					var secondRange = second.a;
					var rest = _v2.b;
					return A2(
						$elm$core$List$cons,
						A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							{
								c4: {bH: secondRange.dv.bH + 1, b1: secondRange.dv.b1},
								dv: {bH: firstRange.c4.bH - 1, b1: firstRange.c4.b1}
							},
							', '),
						A2($jfmengels$elm_review_simplify$Simplify$findConsecutiveListLiterals, second, rest));
				} else {
					var _v3 = _v0.b;
					var x = _v3.a;
					var xs = _v3.b;
					var $temp$firstListElement = x,
						$temp$restOfListElements = xs;
					firstListElement = $temp$firstListElement;
					restOfListElements = $temp$restOfListElements;
					continue findConsecutiveListLiterals;
				}
			} else {
				return _List_Nil;
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$findEmptyLiteralHelp = F2(function $jfmengels$elm_review_simplify$Simplify$findEmptyLiteralHelp$fn(nodes, previousItemEnd) {
		findEmptyLiteralHelp:
		while (true) {
			if (!nodes.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var head = nodes.a;
				var range = head.a;
				var rest = nodes.b;
				if ($jfmengels$elm_review_simplify$Simplify$AstHelpers$isEmptyList(head)) {
					return $elm$core$Maybe$Just(
						{
							a2: range,
							f7: {c4: range.c4, dv: previousItemEnd}
						});
				} else {
					var $temp$nodes = rest,
						$temp$previousItemEnd = range.c4;
					nodes = $temp$nodes;
					previousItemEnd = $temp$previousItemEnd;
					continue findEmptyLiteralHelp;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$findEmptyLiteral = function (nodes) {
	if (!nodes.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var head = nodes.a;
		var range = head.a;
		var rest = nodes.b;
		if ($jfmengels$elm_review_simplify$Simplify$AstHelpers$isEmptyList(head)) {
			var end = function () {
				if (!rest.b) {
					return range.c4;
				} else {
					var _v2 = rest.a;
					var nextItem = _v2.a;
					return nextItem.dv;
				}
			}();
			return $elm$core$Maybe$Just(
				{
					a2: range,
					f7: {c4: end, dv: range.dv}
				});
		} else {
			return A2($jfmengels$elm_review_simplify$Simplify$findEmptyLiteralHelp, rest, range.c4);
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isListLiteral = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	if (_v0.$ === 19) {
		return true;
	} else {
		return false;
	}
};
var $jfmengels$elm_review_simplify$Simplify$removeBoundariesFix = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$range(node);
	var start = _v0.dv;
	var end = _v0.c4;
	return _List_fromArray(
		[
			$jfmengels$elm_review$Review$Fix$removeRange(
			{
				c4: {bH: start.bH + 1, b1: start.b1},
				dv: {bH: start.bH, b1: start.b1}
			}),
			$jfmengels$elm_review$Review$Fix$removeRange(
			{
				c4: {bH: end.bH, b1: end.b1},
				dv: {bH: end.bH - 1, b1: end.b1}
			})
		]);
};
var $jfmengels$elm_review_simplify$Simplify$listConcatChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	if (_v0.$ === 19) {
		var list = _v0.a;
		if (list.b) {
			if (!list.b.b) {
				var _v2 = list.a;
				var elementRange = _v2.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['The value of the operation will be the element itself. You should replace this expression by that.']),
							bx: 'Unnecessary use of List.concat on a list with 1 element'
						},
						checkInfo.b,
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								{c4: elementRange.dv, dv: checkInfo.b.dv}),
								$jfmengels$elm_review$Review$Fix$removeRange(
								{c4: checkInfo.b.c4, dv: elementRange.c4})
							]))
					]);
			} else {
				var args = list;
				var firstListElement = args.a;
				var restOfListElements = args.b;
				var _v3 = $jfmengels$elm_review_simplify$Simplify$findEmptyLiteral(list);
				if (!_v3.$) {
					var element = _v3.a.a2;
					var removalRange = _v3.a.f7;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['This element is unnecessary and can be removed.']),
								bx: 'Found empty list in the list given List.concat'
							},
							element,
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(removalRange)
								]))
						]);
				} else {
					if (A2($elm$core$List$all, $jfmengels$elm_review_simplify$Simplify$AstHelpers$isListLiteral, list)) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['Try moving all the elements into a single list.']),
									bx: 'Expression could be simplified to be a single List'
								},
								checkInfo.b,
								A2(
									$elm$core$List$cons,
									$jfmengels$elm_review$Review$Fix$removeRange(checkInfo.a),
									A2($elm$core$List$concatMap, $jfmengels$elm_review_simplify$Simplify$removeBoundariesFix, args)))
							]);
					} else {
						var _v4 = A2($jfmengels$elm_review_simplify$Simplify$findConsecutiveListLiterals, firstListElement, restOfListElements);
						if (!_v4.b) {
							return _List_Nil;
						} else {
							var fixes = _v4;
							return _List_fromArray(
								[
									A3(
									$jfmengels$elm_review$Review$Rule$errorWithFix,
									{
										eq: _List_fromArray(
											['Try moving all the elements from consecutive list literals so that they form a single list.']),
										bx: 'Consecutive literal lists should be merged'
									},
									checkInfo.a,
									fixes)
								]);
						}
					}
				}
			}
		} else {
			return _List_Nil;
		}
	} else {
		var _v5 = A3(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunctionCall,
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'map'),
			checkInfo.s,
			checkInfo.c);
		if (!_v5.$) {
			var match = _v5.a;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['List.concatMap is meant for this exact purpose and will also be faster.']),
						bx: 'List.map and List.concat can be combined using List.concatMap'
					},
					checkInfo.a,
					_List_fromArray(
						[
							$jfmengels$elm_review_simplify$Simplify$removeFunctionFromFunctionCall(checkInfo),
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							match.a,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['List']),
										'concatMap'),
									checkInfo)))
						]))
				]);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$isAlwaysEmptyList = F2(function $jfmengels$elm_review_simplify$Simplify$isAlwaysEmptyList$fn(lookupTable, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		_v0$2:
		while (true) {
			switch (_v0.$) {
				case 1:
					if ((((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'always')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
						var _v1 = _v0.a;
						var _v2 = _v1.a;
						var alwaysRange = _v2.a;
						var _v3 = _v2.b;
						var _v4 = _v1.b;
						var alwaysValue = _v4.a;
						var _v5 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, alwaysRange);
						if ((((!_v5.$) && _v5.a.b) && (_v5.a.a === 'Basics')) && (!_v5.a.b.b)) {
							var _v6 = _v5.a;
							return $jfmengels$elm_review_simplify$Simplify$AstHelpers$isEmptyList(alwaysValue);
						} else {
							return false;
						}
					} else {
						break _v0$2;
					}
				case 17:
					var expression = _v0.a.eC;
					return $jfmengels$elm_review_simplify$Simplify$AstHelpers$isEmptyList(expression);
				default:
					break _v0$2;
			}
		}
		return false;
	});
var $jfmengels$elm_review_simplify$Simplify$replaceBySubExpressionFix = F2(function $jfmengels$elm_review_simplify$Simplify$replaceBySubExpressionFix$fn(outerRange, _v0) {
		var exprRange = _v0.a;
		var exprValue = _v0.b;
		return $jfmengels$elm_review_simplify$Simplify$needsParens(exprValue) ? _List_fromArray(
			[
				A2(
				$jfmengels$elm_review$Review$Fix$replaceRangeBy,
				{c4: exprRange.dv, dv: outerRange.dv},
				'('),
				A2(
				$jfmengels$elm_review$Review$Fix$replaceRangeBy,
				{c4: outerRange.c4, dv: exprRange.c4},
				')')
			]) : _List_fromArray(
			[
				$jfmengels$elm_review$Review$Fix$removeRange(
				{c4: exprRange.dv, dv: outerRange.dv}),
				$jfmengels$elm_review$Review$Fix$removeRange(
				{c4: outerRange.c4, dv: exprRange.c4})
			]);
	});
var $jfmengels$elm_review_simplify$Simplify$combineSingleElementFixes = F3(function $jfmengels$elm_review_simplify$Simplify$combineSingleElementFixes$fn(lookupTable, nodes, soFar) {
		combineSingleElementFixes:
		while (true) {
			if (!nodes.b) {
				return $elm$core$Maybe$Just(soFar);
			} else {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v7 = A2($jfmengels$elm_review_simplify$Simplify$replaceSingleElementListBySingleValue, lookupTable, node);
				if (_v7.$ === 1) {
					return $elm$core$Maybe$Nothing;
				} else {
					var fixes = _v7.a;
					var $temp$lookupTable = lookupTable,
						$temp$nodes = restOfNodes,
						$temp$soFar = _Utils_ap(fixes, soFar);
					lookupTable = $temp$lookupTable;
					nodes = $temp$nodes;
					soFar = $temp$soFar;
					continue combineSingleElementFixes;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$replaceSingleElementListBySingleValue = F2(function $jfmengels$elm_review_simplify$Simplify$replaceSingleElementListBySingleValue$fn(lookupTable, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		_v0$4:
		while (true) {
			switch (_v0.$) {
				case 19:
					if (_v0.a.b && (!_v0.a.b.b)) {
						var _v1 = _v0.a;
						var listElement = _v1.a;
						return $elm$core$Maybe$Just(
							A2(
								$jfmengels$elm_review_simplify$Simplify$replaceBySubExpressionFix,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
								listElement));
					} else {
						break _v0$4;
					}
				case 1:
					if ((((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'singleton')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
						var _v2 = _v0.a;
						var _v3 = _v2.a;
						var fnRange = _v3.a;
						var _v4 = _v3.b;
						var _v5 = _v2.b;
						return _Utils_eq(
							A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, fnRange),
							$elm$core$Maybe$Just(
								_List_fromArray(
									['List']))) ? $elm$core$Maybe$Just(
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(fnRange)
								])) : $elm$core$Maybe$Nothing;
					} else {
						break _v0$4;
					}
				case 4:
					var thenBranch = _v0.b;
					var elseBranch = _v0.c;
					return A3(
						$jfmengels$elm_review_simplify$Simplify$combineSingleElementFixes,
						lookupTable,
						_List_fromArray(
							[thenBranch, elseBranch]),
						_List_Nil);
				case 16:
					var cases = _v0.a.ia;
					return A3(
						$jfmengels$elm_review_simplify$Simplify$combineSingleElementFixes,
						lookupTable,
						A2($elm$core$List$map, $elm$core$Tuple$second, cases),
						_List_Nil);
				default:
					break _v0$4;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $jfmengels$elm_review_simplify$Simplify$replaceSingleElementListBySingleValue_RENAME = F3(function $jfmengels$elm_review_simplify$Simplify$replaceSingleElementListBySingleValue_RENAME$fn(resources, fnRange, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		if (_v0.$ === 17) {
			var expression = _v0.a.eC;
			var _v1 = A2($jfmengels$elm_review_simplify$Simplify$replaceSingleElementListBySingleValue, resources.s, expression);
			if (!_v1.$) {
				var fixes = _v1.a;
				return $elm$core$Maybe$Just(
					_List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['The function passed to List.concatMap always returns a list with a single element.']),
								bx: 'Use List.map instead'
							},
							fnRange,
							A2(
								$elm$core$List$cons,
								A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									fnRange,
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
										A2(
											$jfmengels$elm_review_simplify$Simplify$qualify,
											_Utils_Tuple2(
												_List_fromArray(
													['List']),
												'map'),
											resources))),
								fixes))
						]));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$listConcatMapChecks = function (checkInfo) {
	if (A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity, checkInfo.s, checkInfo.c)) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by List.concat.']),
					bx: 'Using List.concatMap with an identity function is the same as using List.concat'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						{
							c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
							dv: checkInfo.a.dv
						},
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['List']),
									'concat'),
								checkInfo)))
					]))
			]);
	} else {
		if (A2($jfmengels$elm_review_simplify$Simplify$isAlwaysEmptyList, checkInfo.s, checkInfo.c)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by an empty list.']),
						bx: 'List.concatMap will result in on an empty list'
					},
					checkInfo.a,
					A4(
						$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
						'[]',
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
						checkInfo))
				]);
		} else {
			var _v0 = A3($jfmengels$elm_review_simplify$Simplify$replaceSingleElementListBySingleValue_RENAME, checkInfo, checkInfo.a, checkInfo.c);
			if (!_v0.$) {
				var errors = _v0.a;
				return errors;
			} else {
				var _v1 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
				if ((((!_v1.$) && (_v1.a.b.$ === 19)) && _v1.a.b.a.b) && (!_v1.a.b.a.b.b)) {
					var _v2 = _v1.a;
					var listRange = _v2.a;
					var _v3 = _v2.b.a;
					var listElement = _v3.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by a call to the function directly.']),
								bx: 'Using List.concatMap on an element with a single item is the same as calling the function directly on that lone element.'
							},
							checkInfo.a,
							A2(
								$elm$core$List$cons,
								$jfmengels$elm_review$Review$Fix$removeRange(checkInfo.a),
								A2($jfmengels$elm_review_simplify$Simplify$replaceBySubExpressionFix, listRange, listElement)))
						]);
				} else {
					return _List_Nil;
				}
			}
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
	switch (_v0.$) {
		case 7:
			var n = _v0.a;
			return $elm$core$Maybe$Just(n);
		case 8:
			var n = _v0.a;
			return $elm$core$Maybe$Just(n);
		case 9:
			var n = _v0.a;
			return $elm$core$Maybe$Just(n);
		case 10:
			var expr = _v0.a;
			return A2(
				$elm$core$Maybe$map,
				$elm$core$Basics$negate,
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue(expr));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_simplify$Simplify$listDropChecks = function (checkInfo) {
	if (_Utils_eq(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue(checkInfo.c),
		$elm$core$Maybe$Just(0))) {
		var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
		if (!_v0.$) {
			var _v1 = _v0.a;
			var secondArgRange = _v1.a;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by the list itself.']),
						bx: 'Dropping 0 items from a list will result in the list itself'
					},
					checkInfo.a,
					_List_fromArray(
						[
							checkInfo.x ? $jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.b.c4, dv: secondArgRange.c4}) : $jfmengels$elm_review$Review$Fix$removeRange(
							{c4: secondArgRange.dv, dv: checkInfo.b.dv})
						]))
				]);
		} else {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this function by identity.']),
						bx: 'Dropping 0 items from a list will result in the list itself'
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							checkInfo.b,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['Basics']),
										'identity'),
									checkInfo)))
						]))
				]);
		}
	} else {
		var _v2 = A2(
			$elm$core$Maybe$andThen,
			$jfmengels$elm_review_simplify$Simplify$determineListLength(checkInfo.s),
			$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
		if (((!_v2.$) && (!_v2.a.$)) && (!_v2.a.a)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by [].']),
						bx: 'Using List.drop on [] will result in []'
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
						]))
				]);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$collectJusts = F3(function $jfmengels$elm_review_simplify$Simplify$collectJusts$fn(lookupTable, list, acc) {
		collectJusts:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Just(acc);
			} else {
				var element = list.a;
				var restOfList = list.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(element);
				if ((((((_v1.$ === 1) && _v1.a.b) && (_v1.a.a.b.$ === 3)) && (_v1.a.a.b.b === 'Just')) && _v1.a.b.b) && (!_v1.a.b.b.b)) {
					var _v2 = _v1.a;
					var _v3 = _v2.a;
					var justRange = _v3.a;
					var _v4 = _v3.b;
					var _v5 = _v2.b;
					var justArg = _v5.a;
					var _v6 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, justRange);
					if ((((!_v6.$) && _v6.a.b) && (_v6.a.a === 'Maybe')) && (!_v6.a.b.b)) {
						var _v7 = _v6.a;
						var $temp$lookupTable = lookupTable,
							$temp$list = restOfList,
							$temp$acc = A2(
							$elm$core$List$cons,
							{
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(justArg).dv,
								dv: justRange.dv
							},
							acc);
						lookupTable = $temp$lookupTable;
						list = $temp$list;
						acc = $temp$acc;
						continue collectJusts;
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$combineMaybeValues = F2(function $jfmengels$elm_review_simplify$Simplify$combineMaybeValues$fn(lookupTable, nodes) {
		if (nodes.b) {
			var node = nodes.a;
			var restOfNodes = nodes.b;
			var _v25 = A2($jfmengels$elm_review_simplify$Simplify$getMaybeValues, lookupTable, node);
			if (_v25.$ === 1) {
				return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
			} else {
				var nodeValue = _v25.a;
				return A3($jfmengels$elm_review_simplify$Simplify$combineMaybeValuesHelp, lookupTable, restOfNodes, nodeValue);
			}
		} else {
			return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$combineMaybeValuesHelp = F3(function $jfmengels$elm_review_simplify$Simplify$combineMaybeValuesHelp$fn(lookupTable, nodes, soFar) {
		combineMaybeValuesHelp:
		while (true) {
			if (nodes.b) {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v18 = A2($jfmengels$elm_review_simplify$Simplify$getMaybeValues, lookupTable, node);
				if (_v18.$ === 1) {
					return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
				} else {
					var nodeValue = _v18.a;
					var _v19 = _Utils_Tuple2(nodeValue, soFar);
					if (_v19.a.$ === 1) {
						if (!_v19.b.$) {
							var _v21 = _v19.a;
							return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
						} else {
							var _v22 = _v19.a;
							var _v23 = _v19.b;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = restOfNodes,
								$temp$soFar = $elm$core$Maybe$Nothing;
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							soFar = $temp$soFar;
							continue combineMaybeValuesHelp;
						}
					} else {
						if (_v19.b.$ === 1) {
							var _v20 = _v19.b;
							return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
						} else {
							var a = _v19.a.a;
							var b = _v19.b.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = restOfNodes,
								$temp$soFar = $elm$core$Maybe$Just(
								_Utils_ap(a, b));
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							soFar = $temp$soFar;
							continue combineMaybeValuesHelp;
						}
					}
				}
			} else {
				return $jfmengels$elm_review_simplify$Simplify$Match$Determined(soFar);
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$getMaybeValues = F2(function $jfmengels$elm_review_simplify$Simplify$getMaybeValues$fn(lookupTable, baseNode) {
		getMaybeValues:
		while (true) {
			var node = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
			_v0$7:
			while (true) {
				switch (_v0.$) {
					case 1:
						if ((((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'Just')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
							var _v1 = _v0.a;
							var _v2 = _v1.a;
							var justRange = _v2.a;
							var _v3 = _v2.b;
							var _v4 = _v1.b;
							var arg = _v4.a;
							var _v5 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, justRange);
							if ((((!_v5.$) && _v5.a.b) && (_v5.a.a === 'Maybe')) && (!_v5.a.b.b)) {
								var _v6 = _v5.a;
								return $jfmengels$elm_review_simplify$Simplify$Match$Determined(
									$elm$core$Maybe$Just(
										_List_fromArray(
											[
												{
												c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).dv,
												dv: justRange.dv
											}
											])));
							} else {
								return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
							}
						} else {
							break _v0$7;
						}
					case 2:
						switch (_v0.a) {
							case '|>':
								if ((_v0.d.b.$ === 3) && (_v0.d.b.b === 'Just')) {
									var arg = _v0.c;
									var _v7 = _v0.d;
									var justRange = _v7.a;
									var _v8 = _v7.b;
									var _v9 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, justRange);
									if ((((!_v9.$) && _v9.a.b) && (_v9.a.a === 'Maybe')) && (!_v9.a.b.b)) {
										var _v10 = _v9.a;
										return $jfmengels$elm_review_simplify$Simplify$Match$Determined(
											$elm$core$Maybe$Just(
												_List_fromArray(
													[
														{
														c4: justRange.c4,
														dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).c4
													}
													])));
									} else {
										return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
									}
								} else {
									break _v0$7;
								}
							case '<|':
								if ((_v0.c.b.$ === 3) && (_v0.c.b.b === 'Just')) {
									var _v11 = _v0.c;
									var justRange = _v11.a;
									var _v12 = _v11.b;
									var arg = _v0.d;
									var _v13 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, justRange);
									if ((((!_v13.$) && _v13.a.b) && (_v13.a.a === 'Maybe')) && (!_v13.a.b.b)) {
										var _v14 = _v13.a;
										return $jfmengels$elm_review_simplify$Simplify$Match$Determined(
											$elm$core$Maybe$Just(
												_List_fromArray(
													[
														{
														c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).dv,
														dv: justRange.dv
													}
													])));
									} else {
										return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
									}
								} else {
									break _v0$7;
								}
							default:
								break _v0$7;
						}
					case 3:
						if (_v0.b === 'Nothing') {
							var _v15 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node);
							if ((((!_v15.$) && _v15.a.b) && (_v15.a.a === 'Maybe')) && (!_v15.a.b.b)) {
								var _v16 = _v15.a;
								return $jfmengels$elm_review_simplify$Simplify$Match$Determined($elm$core$Maybe$Nothing);
							} else {
								return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
							}
						} else {
							break _v0$7;
						}
					case 15:
						var expression = _v0.a.eC;
						var $temp$lookupTable = lookupTable,
							$temp$baseNode = expression;
						lookupTable = $temp$lookupTable;
						baseNode = $temp$baseNode;
						continue getMaybeValues;
					case 4:
						var thenBranch = _v0.b;
						var elseBranch = _v0.c;
						return A2(
							$jfmengels$elm_review_simplify$Simplify$combineMaybeValues,
							lookupTable,
							_List_fromArray(
								[thenBranch, elseBranch]));
					case 16:
						var cases = _v0.a.ia;
						return A2(
							$jfmengels$elm_review_simplify$Simplify$combineMaybeValues,
							lookupTable,
							A2($elm$core$List$map, $elm$core$Tuple$second, cases));
					default:
						break _v0$7;
				}
			}
			return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Match$map = F2(function $jfmengels$elm_review_simplify$Simplify$Match$map$fn(mapper, match) {
		if (!match.$) {
			var a = match.a;
			return $jfmengels$elm_review_simplify$Simplify$Match$Determined(
				mapper(a));
		} else {
			return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$isAlwaysMaybe = F2(function $jfmengels$elm_review_simplify$Simplify$isAlwaysMaybe$fn(lookupTable, baseNode) {
		var node = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$3:
		while (true) {
			switch (_v0.$) {
				case 3:
					if (_v0.b === 'Just') {
						var _v1 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node);
						if ((((!_v1.$) && _v1.a.b) && (_v1.a.a === 'Maybe')) && (!_v1.a.b.b)) {
							var _v2 = _v1.a;
							return $jfmengels$elm_review_simplify$Simplify$Match$Determined(
								$elm$core$Maybe$Just(
									{
										bA: _List_fromArray(
											[
												$stil4m$elm_syntax$Elm$Syntax$Node$range(node)
											]),
										bC: false
									}));
						} else {
							return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
						}
					} else {
						break _v0$3;
					}
				case 1:
					if ((((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'always')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
						var _v3 = _v0.a;
						var _v4 = _v3.a;
						var alwaysRange = _v4.a;
						var _v5 = _v4.b;
						var _v6 = _v3.b;
						var value = _v6.a;
						var _v7 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, alwaysRange);
						if ((((!_v7.$) && _v7.a.b) && (_v7.a.a === 'Basics')) && (!_v7.a.b.b)) {
							var _v8 = _v7.a;
							return A2(
								$jfmengels$elm_review_simplify$Simplify$Match$map,
								$elm$core$Maybe$map(
									function (ranges) {
										return {bA: ranges, bC: false};
									}),
								A2($jfmengels$elm_review_simplify$Simplify$getMaybeValues, lookupTable, value));
						} else {
							return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
						}
					} else {
						break _v0$3;
					}
				case 17:
					var expression = _v0.a.eC;
					return A2(
						$jfmengels$elm_review_simplify$Simplify$Match$map,
						$elm$core$Maybe$map(
							function (ranges) {
								return {bA: ranges, bC: true};
							}),
						A2($jfmengels$elm_review_simplify$Simplify$getMaybeValues, lookupTable, expression));
				default:
					break _v0$3;
			}
		}
		return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
	});
var $jfmengels$elm_review_simplify$Simplify$removeFunctionAndFirstArg = F2(function $jfmengels$elm_review_simplify$Simplify$removeFunctionAndFirstArg$fn(checkInfo, secondArgRange) {
		return checkInfo.x ? $jfmengels$elm_review$Review$Fix$removeRange(
			{
				c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
				dv: secondArgRange.c4
			}) : $jfmengels$elm_review$Review$Fix$removeRange(
			{c4: secondArgRange.dv, dv: checkInfo.a.dv});
	});
var $jfmengels$elm_review_simplify$Simplify$listFilterMapChecks = function (checkInfo) {
	var _v0 = A2($jfmengels$elm_review_simplify$Simplify$isAlwaysMaybe, checkInfo.s, checkInfo.c);
	if (!_v0.$) {
		if (!_v0.a.$) {
			var ranges = _v0.a.a.bA;
			var throughLambdaFunction = _v0.a.a.bC;
			return throughLambdaFunction ? _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can remove the `Just`s and replace the call by List.map.']),
						bx: 'Using List.filterMap with a function that will always return Just is the same as using List.map'
					},
					checkInfo.a,
					A2(
						$elm$core$List$cons,
						A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['List']),
										'map'),
									checkInfo))),
						A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, ranges)))
				]) : _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can remove this call and replace it by the list itself.']),
						bx: 'Using List.filterMap with a function that will always return Just is the same as not using List.filterMap'
					},
					checkInfo.a,
					$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
				]);
		} else {
			var _v1 = _v0.a;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can remove this call and replace it by an empty list.']),
						bx: 'Using List.filterMap with a function that will always return Nothing will result in an empty list'
					},
					checkInfo.a,
					A4(
						$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
						'[]',
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
						checkInfo))
				]);
		}
	} else {
		if (A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity, checkInfo.s, checkInfo.c)) {
			var _v2 = A2(
				$elm$core$Maybe$andThen,
				A2(
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunctionCall,
					_Utils_Tuple2(
						_List_fromArray(
							['List']),
						'map'),
					checkInfo.s),
				$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
			if (!_v2.$) {
				var listArg = _v2.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['List.filterMap is meant for this exact purpose and will also be faster.']),
							bx: 'List.map and List.filterMap identity can be combined using List.filterMap'
						},
						{
							c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
							dv: checkInfo.a.dv
						},
						_List_fromArray(
							[
								A2($jfmengels$elm_review_simplify$Simplify$removeFunctionAndFirstArg, checkInfo, listArg.e0),
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								listArg.a,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['List']),
											'filterMap'),
										checkInfo)))
							]))
					]);
			} else {
				var _v3 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
				if ((!_v3.$) && (_v3.a.b.$ === 19)) {
					var _v4 = _v3.a;
					var listRange = _v4.a;
					var list = _v4.b.a;
					var _v5 = A3($jfmengels$elm_review_simplify$Simplify$collectJusts, checkInfo.s, list, _List_Nil);
					if (!_v5.$) {
						var justRanges = _v5.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['All of the elements in the list are `Just`s, which can be simplified by removing all of the `Just`s.']),
									bx: 'Unnecessary use of List.filterMap identity'
								},
								{
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
									dv: checkInfo.a.dv
								},
								A2(
									$elm$core$List$cons,
									checkInfo.x ? $jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
											dv: listRange.c4
										}) : $jfmengels$elm_review$Review$Fix$removeRange(
										{c4: listRange.dv, dv: checkInfo.a.dv}),
									A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, justRanges)))
							]);
					} else {
						return _List_Nil;
					}
				} else {
					return _List_Nil;
				}
			}
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$getAlwaysResult = F2(function $jfmengels$elm_review_simplify$Simplify$getAlwaysResult$fn(inferResources, expressionNode) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(expressionNode));
		_v0$4:
		while (true) {
			switch (_v0.$) {
				case 1:
					if ((((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'always')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
						var _v1 = _v0.a;
						var _v2 = _v1.a;
						var alwaysRange = _v2.a;
						var _v3 = _v2.b;
						var _v4 = _v1.b;
						var result = _v4.a;
						var _v5 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, inferResources.s, alwaysRange);
						if ((((!_v5.$) && _v5.a.b) && (_v5.a.a === 'Basics')) && (!_v5.a.b.b)) {
							var _v6 = _v5.a;
							return $elm$core$Maybe$Just(result);
						} else {
							return $elm$core$Maybe$Nothing;
						}
					} else {
						break _v0$4;
					}
				case 2:
					switch (_v0.a) {
						case '<|':
							if ((_v0.c.b.$ === 3) && (_v0.c.b.b === 'always')) {
								var _v7 = _v0.c;
								var alwaysRange = _v7.a;
								var _v8 = _v7.b;
								var result = _v0.d;
								var _v9 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, inferResources.s, alwaysRange);
								if ((((!_v9.$) && _v9.a.b) && (_v9.a.a === 'Basics')) && (!_v9.a.b.b)) {
									var _v10 = _v9.a;
									return $elm$core$Maybe$Just(result);
								} else {
									return $elm$core$Maybe$Nothing;
								}
							} else {
								break _v0$4;
							}
						case '|>':
							if ((_v0.d.b.$ === 3) && (_v0.d.b.b === 'always')) {
								var result = _v0.c;
								var _v11 = _v0.d;
								var alwaysRange = _v11.a;
								var _v12 = _v11.b;
								var _v13 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, inferResources.s, alwaysRange);
								if ((((!_v13.$) && _v13.a.b) && (_v13.a.a === 'Basics')) && (!_v13.a.b.b)) {
									var _v14 = _v13.a;
									return $elm$core$Maybe$Just(result);
								} else {
									return $elm$core$Maybe$Nothing;
								}
							} else {
								break _v0$4;
							}
						default:
							break _v0$4;
					}
				case 17:
					var lambda = _v0.a;
					var _v15 = lambda.h0;
					if (!_v15.b) {
						return $elm$core$Maybe$Nothing;
					} else {
						if (!_v15.a.b.$) {
							if (!_v15.b.b) {
								var _v16 = _v15.a;
								var _v17 = _v16.b;
								return $elm$core$Maybe$Just(lambda.eC);
							} else {
								var _v18 = _v15.a;
								var _v19 = _v18.b;
								var patternsAfter_ = _v15.b;
								return $elm$core$Maybe$Just(
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(expressionNode),
										$stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression(
											{h0: patternsAfter_, eC: lambda.eC})));
							}
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}
				default:
					break _v0$4;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isBinaryOperation = F3(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$isBinaryOperation$fn(symbol, checkInfo, expression) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, checkInfo, expression));
		switch (_v0.$) {
			case 5:
				var operatorSymbol = _v0.a;
				return _Utils_eq(operatorSymbol, symbol);
			case 17:
				var lambda = _v0.a;
				var _v1 = lambda.h0;
				_v1$3:
				while (true) {
					if (!_v1.b) {
						return false;
					} else {
						if (_v1.a.b.$ === 11) {
							if (!_v1.b.b) {
								var _v2 = _v1.a;
								var element = _v2.b.a;
								var _v3 = $stil4m$elm_syntax$Elm$Syntax$Node$value(lambda.eC);
								if (((((((_v3.$ === 1) && _v3.a.b) && (_v3.a.a.b.$ === 5)) && _v3.a.b.b) && (_v3.a.b.a.b.$ === 3)) && (!_v3.a.b.a.b.a.b)) && (!_v3.a.b.b.b)) {
									var _v4 = _v3.a;
									var _v5 = _v4.a;
									var operatorSymbol = _v5.b.a;
									var _v6 = _v4.b;
									var _v7 = _v6.a;
									var _v8 = _v7.b;
									var argument = _v8.b;
									return _Utils_eq(operatorSymbol, symbol) && _Utils_eq(argument, element);
								} else {
									return false;
								}
							} else {
								if ((_v1.b.a.b.$ === 11) && (!_v1.b.b.b)) {
									var _v9 = _v1.a;
									var element = _v9.b.a;
									var _v10 = _v1.b;
									var _v11 = _v10.a;
									var soFar = _v11.b.a;
									var _v12 = $stil4m$elm_syntax$Elm$Syntax$Node$value(lambda.eC);
									_v12$2:
									while (true) {
										switch (_v12.$) {
											case 1:
												if ((((((((_v12.a.b && (_v12.a.a.b.$ === 5)) && _v12.a.b.b) && (_v12.a.b.a.b.$ === 3)) && (!_v12.a.b.a.b.a.b)) && _v12.a.b.b.b) && (_v12.a.b.b.a.b.$ === 3)) && (!_v12.a.b.b.a.b.a.b)) && (!_v12.a.b.b.b.b)) {
													var _v13 = _v12.a;
													var _v14 = _v13.a;
													var operatorSymbol = _v14.b.a;
													var _v15 = _v13.b;
													var _v16 = _v15.a;
													var _v17 = _v16.b;
													var left = _v17.b;
													var _v18 = _v15.b;
													var _v19 = _v18.a;
													var _v20 = _v19.b;
													var right = _v20.b;
													return _Utils_eq(operatorSymbol, symbol) && ((_Utils_eq(left, element) && _Utils_eq(right, soFar)) || (_Utils_eq(left, soFar) && _Utils_eq(right, element)));
												} else {
													break _v12$2;
												}
											case 2:
												if ((((_v12.c.b.$ === 3) && (!_v12.c.b.a.b)) && (_v12.d.b.$ === 3)) && (!_v12.d.b.a.b)) {
													var operatorSymbol = _v12.a;
													var _v21 = _v12.c;
													var _v22 = _v21.b;
													var left = _v22.b;
													var _v23 = _v12.d;
													var _v24 = _v23.b;
													var right = _v24.b;
													return _Utils_eq(operatorSymbol, symbol) && ((_Utils_eq(left, element) && _Utils_eq(right, soFar)) || (_Utils_eq(left, soFar) && _Utils_eq(right, element)));
												} else {
													break _v12$2;
												}
											default:
												break _v12$2;
										}
									}
									return false;
								} else {
									break _v1$3;
								}
							}
						} else {
							break _v1$3;
						}
					}
				}
				return false;
			default:
				return false;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$thirdArg = function (checkInfo) {
	return checkInfo.gk;
};
var $jfmengels$elm_review_simplify$Simplify$listFoldAnyDirectionChecks = F2(function $jfmengels$elm_review_simplify$Simplify$listFoldAnyDirectionChecks$fn(foldOperationName, checkInfo) {
		var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
		if (_v0.$ === 1) {
			return _List_Nil;
		} else {
			var initialArgument = _v0.a;
			var listArg = $jfmengels$elm_review_simplify$Simplify$thirdArg(checkInfo);
			var _v1 = A2(
				$elm$core$Maybe$andThen,
				A2(
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunctionCall,
					_Utils_Tuple2(
						_List_fromArray(
							['Set']),
						'toList'),
					checkInfo.s),
				listArg);
			if (!_v1.$) {
				var setToListCall = _v1.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['Using Set.' + (foldOperationName + ' directly is meant for this exact purpose and will also be faster.')]),
							bx: 'To fold a set, you don\'t need to convert to a List'
						},
						checkInfo.a,
						_Utils_ap(
							$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
								{
									n: $stil4m$elm_syntax$Elm$Syntax$Node$range(setToListCall.c),
									b: setToListCall.e0
								}),
							_List_fromArray(
								[
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									checkInfo.a,
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
										A2(
											$jfmengels$elm_review_simplify$Simplify$qualify,
											_Utils_Tuple2(
												_List_fromArray(
													['Set']),
												foldOperationName),
											checkInfo)))
								])))
					]);
			} else {
				var initialNumber = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue(initialArgument);
				var numberBinaryOperationChecks = function (operation) {
					var fixWith = function (fixes) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										[
											'Using List.' + (foldOperationName + (' (' + (operation.b7 + (') ' + ($elm$core$String$fromInt(operation.eJ) + (' is the same as using List.' + (operation.aJ + '.')))))))
										]),
									bx: 'Use List.' + (operation.aJ + ' instead')
								},
								checkInfo.a,
								fixes)
							]);
					};
					if (_Utils_eq(
						initialNumber,
						$elm$core$Maybe$Just(operation.eJ))) {
						return fixWith(
							_List_fromArray(
								[
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									{
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(initialArgument).c4,
										dv: checkInfo.a.dv
									},
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
										A2(
											$jfmengels$elm_review_simplify$Simplify$qualify,
											_Utils_Tuple2(
												_List_fromArray(
													['List']),
												operation.aJ),
											checkInfo)))
								]));
					} else {
						if (listArg.$ === 1) {
							return _List_Nil;
						} else {
							return checkInfo.x ? fixWith(
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$insertAt,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(initialArgument).c4,
										')'),
										A2(
										$jfmengels$elm_review$Review$Fix$insertAt,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(initialArgument).dv,
										operation.b7 + ' '),
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
											dv: checkInfo.a.dv
										},
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['List']),
													operation.aJ),
												checkInfo)) + ')'),
										A2($jfmengels$elm_review$Review$Fix$insertAt, checkInfo.b.dv, '((')
									])) : fixWith(
								_List_fromArray(
									[
										A2($jfmengels$elm_review$Review$Fix$insertAt, checkInfo.b.c4, ')'),
										A2(
										$jfmengels$elm_review$Review$Fix$insertAt,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(initialArgument).c4,
										' ' + (operation.b7 + (' (' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['List']),
													operation.aJ),
												checkInfo))))),
										$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(initialArgument).dv,
											dv: checkInfo.a.dv
										})
									]));
						}
					}
				};
				var boolBinaryOperationChecks = F2(function boolBinaryOperationChecks$fn(operation, initialIsDetermining) {
						return _Utils_eq(initialIsDetermining, operation.cd) ? _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										[
											'You can replace this call by ' + ($jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(operation.cd) + '.')
										]),
									bx: 'The call to List.' + (foldOperationName + (' will result in ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(operation.cd)))
								},
								checkInfo.a,
								A4(
									$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(operation.cd),
									checkInfo.b,
									$jfmengels$elm_review_simplify$Simplify$thirdArg(checkInfo),
									checkInfo))
							]) : _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										[
											'Using List.' + (foldOperationName + (' (' + (operation.b7 + (') ' + ($jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(!operation.cd) + (' is the same as using List.' + (operation.aJ + ' identity.')))))))
										]),
									bx: 'Use List.' + (operation.aJ + ' identity instead')
								},
								checkInfo.a,
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(initialArgument).c4,
											dv: checkInfo.a.dv
										},
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['List']),
													operation.aJ),
												checkInfo)) + (' ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Basics']),
													'identity'),
												checkInfo))))
									]))
							]);
					});
				if (A2(
					$elm$core$Maybe$withDefault,
					false,
					A2($elm$core$Maybe$map, $jfmengels$elm_review_simplify$Simplify$AstHelpers$isEmptyList, listArg))) {
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by the initial accumulator.']),
								bx: 'The call to List.' + (foldOperationName + ' will result in the initial accumulator')
							},
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
								{
									n: $stil4m$elm_syntax$Elm$Syntax$Node$range(initialArgument),
									b: checkInfo.b
								}))
						]);
				} else {
					if (A2(
						$elm$core$Maybe$withDefault,
						false,
						A2(
							$elm$core$Maybe$map,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity(checkInfo.s),
							A2($jfmengels$elm_review_simplify$Simplify$getAlwaysResult, checkInfo, checkInfo.c)))) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by the initial accumulator.']),
									bx: 'The call to List.' + (foldOperationName + ' will result in the initial accumulator')
								},
								checkInfo.a,
								function () {
									if (listArg.$ === 1) {
										return _List_fromArray(
											[
												A2(
												$jfmengels$elm_review$Review$Fix$replaceRangeBy,
												{
													c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
													dv: checkInfo.a.dv
												},
												$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
													A2(
														$jfmengels$elm_review_simplify$Simplify$qualify,
														_Utils_Tuple2(
															_List_fromArray(
																['Basics']),
															'always'),
														checkInfo)))
											]);
									} else {
										return $jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
											{
												n: $stil4m$elm_syntax$Elm$Syntax$Node$range(initialArgument),
												b: checkInfo.b
											});
									}
								}())
							]);
					} else {
						if (A3($jfmengels$elm_review_simplify$Simplify$AstHelpers$isBinaryOperation, '*', checkInfo, checkInfo.c)) {
							return numberBinaryOperationChecks(
								{eJ: 1, aJ: 'product', b7: '*'});
						} else {
							if (A3($jfmengels$elm_review_simplify$Simplify$AstHelpers$isBinaryOperation, '+', checkInfo, checkInfo.c)) {
								return numberBinaryOperationChecks(
									{eJ: 0, aJ: 'sum', b7: '+'});
							} else {
								var _v3 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, checkInfo, initialArgument);
								if (_v3.$ === 1) {
									return _List_Nil;
								} else {
									var initialBool = _v3.a;
									return A3($jfmengels$elm_review_simplify$Simplify$AstHelpers$isBinaryOperation, '&&', checkInfo, checkInfo.c) ? A2(
										boolBinaryOperationChecks,
										{cd: false, aJ: 'all', b7: '&&'},
										initialBool) : (A3($jfmengels$elm_review_simplify$Simplify$AstHelpers$isBinaryOperation, '||', checkInfo, checkInfo.c) ? A2(
										boolBinaryOperationChecks,
										{cd: true, aJ: 'any', b7: '||'},
										initialBool) : _List_Nil);
								}
							}
						}
					}
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$listFoldlChecks = function (checkInfo) {
	return A2($jfmengels$elm_review_simplify$Simplify$listFoldAnyDirectionChecks, 'foldl', checkInfo);
};
var $jfmengels$elm_review_simplify$Simplify$listFoldrChecks = function (checkInfo) {
	return A2($jfmengels$elm_review_simplify$Simplify$listFoldAnyDirectionChecks, 'foldr', checkInfo);
};
var $jfmengels$elm_review_simplify$Simplify$listHeadExistsError = {
	eq: _List_fromArray(
		['You can replace this call by Just the first list element.']),
	bx: 'Using List.head on a list with a first element will result in Just that element'
};
var $jfmengels$elm_review_simplify$Simplify$listHeadChecks = function (checkInfo) {
	var listArg = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.c);
	var justFirstElementError = function (keep) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				$jfmengels$elm_review_simplify$Simplify$listHeadExistsError,
				checkInfo.a,
				_Utils_ap(
					$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
						{
							n: keep,
							b: $stil4m$elm_syntax$Elm$Syntax$Node$range(listArg)
						}),
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['Maybe']),
										'Just'),
									checkInfo)))
						])))
			]);
	};
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(listArg);
	_v0$3:
	while (true) {
		switch (_v0.$) {
			case 19:
				if (!_v0.a.b) {
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by Nothing.']),
								bx: 'Using List.head on an empty list will result in Nothing'
							},
							checkInfo.a,
							_List_fromArray(
								[
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									checkInfo.b,
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
										A2(
											$jfmengels$elm_review_simplify$Simplify$qualify,
											_Utils_Tuple2(
												_List_fromArray(
													['Maybe']),
												'Nothing'),
											checkInfo)))
								]))
						]);
				} else {
					var _v1 = _v0.a;
					var _v2 = _v1.a;
					var headRange = _v2.a;
					var head = _v2.b;
					return $jfmengels$elm_review_simplify$Simplify$needsParens(head) ? _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							$jfmengels$elm_review_simplify$Simplify$listHeadExistsError,
							checkInfo.a,
							_Utils_ap(
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{
										n: headRange,
										b: $stil4m$elm_syntax$Elm$Syntax$Node$range(listArg)
									}),
								_List_fromArray(
									[
										A2($jfmengels$elm_review$Review$Fix$insertAt, headRange.dv, '('),
										A2($jfmengels$elm_review$Review$Fix$insertAt, headRange.c4, ')'),
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										checkInfo.a,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Maybe']),
													'Just'),
												checkInfo)))
									])))
						]) : justFirstElementError(headRange);
				}
			case 2:
				if (_v0.a === '::') {
					var head = _v0.c;
					return justFirstElementError(
						$stil4m$elm_syntax$Elm$Syntax$Node$range(head));
				} else {
					break _v0$3;
				}
			default:
				break _v0$3;
		}
	}
	var _v3 = A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingletonCall, checkInfo.s, listArg);
	if (!_v3.$) {
		var single = _v3.a;
		return justFirstElementError(
			$stil4m$elm_syntax$Elm$Syntax$Node$range(single.a2));
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$getAlwaysArgument = F2(function $jfmengels$elm_review_simplify$Simplify$getAlwaysArgument$fn(lookupTable, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		_v0$3:
		while (true) {
			switch (_v0.$) {
				case 1:
					if ((((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'always')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
						var _v1 = _v0.a;
						var _v2 = _v1.a;
						var alwaysRange = _v2.a;
						var _v3 = _v2.b;
						var _v4 = _v1.b;
						var arg = _v4.a;
						return _Utils_eq(
							A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, alwaysRange),
							$elm$core$Maybe$Just(
								_List_fromArray(
									['Basics']))) ? $elm$core$Maybe$Just(
							{
								el: alwaysRange,
								e5: {
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).dv,
									dv: alwaysRange.dv
								}
							}) : $elm$core$Maybe$Nothing;
					} else {
						break _v0$3;
					}
				case 2:
					switch (_v0.a) {
						case '<|':
							if ((_v0.c.b.$ === 3) && (_v0.c.b.b === 'always')) {
								var _v5 = _v0.c;
								var alwaysRange = _v5.a;
								var _v6 = _v5.b;
								var arg = _v0.d;
								return _Utils_eq(
									A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, alwaysRange),
									$elm$core$Maybe$Just(
										_List_fromArray(
											['Basics']))) ? $elm$core$Maybe$Just(
									{
										el: alwaysRange,
										e5: {
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).dv,
											dv: alwaysRange.dv
										}
									}) : $elm$core$Maybe$Nothing;
							} else {
								break _v0$3;
							}
						case '|>':
							if ((_v0.d.b.$ === 3) && (_v0.d.b.b === 'always')) {
								var arg = _v0.c;
								var _v7 = _v0.d;
								var alwaysRange = _v7.a;
								var _v8 = _v7.b;
								return _Utils_eq(
									A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, alwaysRange),
									$elm$core$Maybe$Just(
										_List_fromArray(
											['Basics']))) ? $elm$core$Maybe$Just(
									{
										el: alwaysRange,
										e5: {
											c4: alwaysRange.c4,
											dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).c4
										}
									}) : $elm$core$Maybe$Nothing;
							} else {
								break _v0$3;
							}
						default:
							break _v0$3;
					}
				default:
					break _v0$3;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $jfmengels$elm_review_simplify$Simplify$listIndexedMapChecks = function (checkInfo) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.c);
	if (_v0.b.$ === 17) {
		var lambdaRange = _v0.a;
		var args = _v0.b.a.h0;
		var expression = _v0.b.a.eC;
		var _v1 = A2(
			$elm$core$Maybe$map,
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParensFromPattern,
			$elm$core$List$head(args));
		if ((!_v1.$) && (!_v1.a.b.$)) {
			var _v2 = _v1.a;
			var patternRange = _v2.a;
			var _v3 = _v2.b;
			var rangeToRemove = function () {
				if (!args.b) {
					return $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange;
				} else {
					if (!args.b.b) {
						return {
							c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(expression).dv,
							dv: lambdaRange.dv
						};
					} else {
						var first = args.a;
						var _v5 = args.b;
						var second = _v5.a;
						return {
							c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(second).dv,
							dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(first).dv
						};
					}
				}
			}();
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['Using List.indexedMap while ignoring the first argument is the same thing as calling List.map.']),
						bx: 'Use List.map instead'
					},
					patternRange,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['List']),
										'map'),
									checkInfo))),
							$jfmengels$elm_review$Review$Fix$removeRange(rangeToRemove)
						]))
				]);
		} else {
			return _List_Nil;
		}
	} else {
		var _v6 = A2($jfmengels$elm_review_simplify$Simplify$getAlwaysArgument, checkInfo.s, checkInfo.c);
		if (!_v6.$) {
			var alwaysRange = _v6.a.el;
			var rangeToRemove = _v6.a.e5;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['Using List.indexedMap while ignoring the first argument is the same thing as calling List.map.']),
						bx: 'Use List.map instead'
					},
					alwaysRange,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['List']),
										'map'),
									checkInfo))),
							$jfmengels$elm_review$Review$Fix$removeRange(rangeToRemove)
						]))
				]);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$dictToListMapChecks = function (listMapCheckInfo) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(listMapCheckInfo);
	if (!_v0.$) {
		var listArgument = _v0.a;
		var _v1 = A3(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificReducedFunctionCall,
			_Utils_Tuple2(
				_List_fromArray(
					['Dict']),
				'toList'),
			listMapCheckInfo.s,
			listArgument);
		if (!_v1.$) {
			var dictToListCall = _v1.a;
			var error = function (info) {
				return A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					$jfmengels$elm_review_simplify$Simplify$dictToListMapErrorInfo(info),
					listMapCheckInfo.a,
					_Utils_ap(
						$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
							{
								n: $stil4m$elm_syntax$Elm$Syntax$Node$range(dictToListCall.c),
								b: $stil4m$elm_syntax$Elm$Syntax$Node$range(listArgument)
							}),
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									_List_fromArray(
										[
											listMapCheckInfo.a,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(listMapCheckInfo.c)
										])),
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['Dict']),
											info.cP),
										listMapCheckInfo)))
							])));
			};
			return A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleFirstAccess, listMapCheckInfo.s, listMapCheckInfo.c) ? _List_fromArray(
				[
					error(
					{cP: 'keys', ek: 'first'})
				]) : (A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isTupleSecondAccess, listMapCheckInfo.s, listMapCheckInfo.c) ? _List_fromArray(
				[
					error(
					{cP: 'values', ek: 'second'})
				]) : _List_Nil);
		} else {
			return _List_Nil;
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$listMapChecks = function (checkInfo) {
	return A2(
		$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
		_List_fromArray(
			[
				function (_v0) {
				return A2($jfmengels$elm_review_simplify$Simplify$collectionMapChecks, $jfmengels$elm_review_simplify$Simplify$listCollection, checkInfo);
			},
				function (_v1) {
				return $jfmengels$elm_review_simplify$Simplify$dictToListMapChecks(checkInfo);
			}
			]),
		0);
};
var $jfmengels$elm_review_simplify$Simplify$multiAlways = F3(function $jfmengels$elm_review_simplify$Simplify$multiAlways$fn(alwaysCount, alwaysResultExpressionAsString, qualifyResources) {
		switch (alwaysCount) {
			case 0:
				return alwaysResultExpressionAsString;
			case 1:
				return $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
					A2(
						$jfmengels$elm_review_simplify$Simplify$qualify,
						_Utils_Tuple2(
							_List_fromArray(
								['Basics']),
							'always'),
						qualifyResources)) + (' ' + alwaysResultExpressionAsString);
			default:
				var alwaysCountPositive = alwaysCount;
				return '(\\' + (A2($elm$core$String$repeat, alwaysCountPositive, '_ ') + ('-> ' + (alwaysResultExpressionAsString + ')')));
		}
	});
var $jfmengels$elm_review_simplify$Simplify$listMapNChecks = F2(function $jfmengels$elm_review_simplify$Simplify$listMapNChecks$fn(_v0, checkInfo) {
		var n = _v0.d6;
		if (A2(
			$elm$core$List$any,
			function (_v1) {
				var list = _v1.b;
				return _Utils_eq(
					list,
					$stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(_List_Nil));
			},
			checkInfo.au)) {
			var callReplacement = A3(
				$jfmengels$elm_review_simplify$Simplify$multiAlways,
				n - $elm$core$List$length(checkInfo.au),
				'[]',
				checkInfo);
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by ' + (callReplacement + '.')]),
						bx: 'Using List.map' + ($elm$core$String$fromInt(n) + ' with any list being [] will result in []')
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, callReplacement)
						]))
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$listMaximumChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	_v0$2:
	while (true) {
		if (_v0.$ === 19) {
			if (!_v0.a.b) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by Nothing.']),
							bx: 'Using List.maximum on [] will result in Nothing'
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								checkInfo.b,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['Maybe']),
											'Nothing'),
										checkInfo)))
							]))
					]);
			} else {
				if (!_v0.a.b.b) {
					var _v1 = _v0.a;
					var _v2 = _v1.a;
					var elementRange = _v2.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by Just the single element itself.']),
								bx: 'List.maximum on a list with a single element will result in Just the element itself'
							},
							checkInfo.a,
							_Utils_ap(
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{n: elementRange, b: checkInfo.b}),
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$insertAt,
										checkInfo.b.dv,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Maybe']),
													'Just'),
												checkInfo)) + ' ')
									])))
						]);
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return _List_Nil;
};
var $jfmengels$elm_review_simplify$Simplify$Normalize$ConfirmedEquality = 0;
var $jfmengels$elm_review_simplify$Simplify$Normalize$ConfirmedInequality = 1;
var $jfmengels$elm_review_simplify$Simplify$Normalize$HasBothValues = F2(function $jfmengels$elm_review_simplify$Simplify$Normalize$HasBothValues$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$MissingOtherValue = {$: 0};
var $jfmengels$elm_review_simplify$Simplify$Normalize$Unconfirmed = 2;
var $jfmengels$elm_review_simplify$Simplify$Normalize$fromEquality = function (bool) {
	return bool ? 0 : 1;
};
var $jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue = function (node) {
	getNumberValue:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$10:
		while (true) {
			switch (_v0.$) {
				case 7:
					var value = _v0.a;
					return $elm$core$Maybe$Just(value);
				case 8:
					var _int = _v0.a;
					return $elm$core$Maybe$Just(_int);
				case 9:
					var _float = _v0.a;
					return $elm$core$Maybe$Just(_float);
				case 14:
					var expr = _v0.a;
					var $temp$node = expr;
					node = $temp$node;
					continue getNumberValue;
				case 15:
					var expression = _v0.a.eC;
					var $temp$node = expression;
					node = $temp$node;
					continue getNumberValue;
				case 2:
					switch (_v0.a) {
						case '+':
							var left = _v0.c;
							var right = _v0.d;
							return A3(
								$elm$core$Maybe$map2,
								$elm$core$Basics$add,
								$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(left),
								$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(right));
						case '-':
							var left = _v0.c;
							var right = _v0.d;
							return A3(
								$elm$core$Maybe$map2,
								$elm$core$Basics$sub,
								$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(left),
								$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(right));
						case '*':
							var left = _v0.c;
							var right = _v0.d;
							return A3(
								$elm$core$Maybe$map2,
								$elm$core$Basics$mul,
								$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(left),
								$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(right));
						case '/':
							var left = _v0.c;
							var right = _v0.d;
							return A3(
								$elm$core$Maybe$map2,
								$elm$core$Basics$fdiv,
								$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(left),
								$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(right));
						default:
							break _v0$10;
					}
				case 10:
					var expr = _v0.a;
					return A2(
						$elm$core$Maybe$map,
						$elm$core$Basics$negate,
						$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(expr));
				default:
					break _v0$10;
			}
		}
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_simplify$Simplify$Normalize$compareNumbers = F2(function $jfmengels$elm_review_simplify$Simplify$Normalize$compareNumbers$fn(leftValue, right) {
		var _v0 = $jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(right);
		if (!_v0.$) {
			var rightValue = _v0.a;
			return $jfmengels$elm_review_simplify$Simplify$Normalize$fromEquality(
				_Utils_eq(leftValue, rightValue));
		} else {
			return 2;
		}
	});
var $elm$core$Dict$merge = F6(function $elm$core$Dict$merge$fn(leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(function stepState$fn(rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$removeParens = function (node) {
	removeParens:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (_v0.$ === 14) {
			var expr = _v0.a;
			var $temp$node = expr;
			node = $temp$node;
			continue removeParens;
		} else {
			return node;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$Normalize$compareEqualityOfAll = F2(function $jfmengels$elm_review_simplify$Simplify$Normalize$compareEqualityOfAll$fn(leftList, rightList) {
		compareEqualityOfAll:
		while (true) {
			var _v25 = _Utils_Tuple2(leftList, rightList);
			if (_v25.a.b && _v25.b.b) {
				var _v26 = _v25.a;
				var left = _v26.a;
				var restOfLeft = _v26.b;
				var _v27 = _v25.b;
				var right = _v27.a;
				var restOfRight = _v27.b;
				var _v28 = A3($jfmengels$elm_review_simplify$Simplify$Normalize$compareHelp, left, right, true);
				switch (_v28) {
					case 0:
						var $temp$leftList = restOfLeft,
							$temp$rightList = restOfRight;
						leftList = $temp$leftList;
						rightList = $temp$rightList;
						continue compareEqualityOfAll;
					case 1:
						return 2;
					default:
						return 2;
				}
			} else {
				return 0;
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$compareHelp = F3(function $jfmengels$elm_review_simplify$Simplify$Normalize$compareHelp$fn(leftNode, right, canFlip) {
		compareHelp:
		while (true) {
			var fallback = function (_v24) {
				return canFlip ? A3($jfmengels$elm_review_simplify$Simplify$Normalize$compareHelp, right, leftNode, false) : (_Utils_eq(leftNode, right) ? 0 : 2);
			};
			var _v10 = $stil4m$elm_syntax$Elm$Syntax$Node$value(leftNode);
			switch (_v10.$) {
				case 7:
					var left = _v10.a;
					return A2($jfmengels$elm_review_simplify$Simplify$Normalize$compareNumbers, left, right);
				case 9:
					var left = _v10.a;
					return A2($jfmengels$elm_review_simplify$Simplify$Normalize$compareNumbers, left, right);
				case 2:
					var leftOp = _v10.a;
					var leftLeft = _v10.c;
					var leftRight = _v10.d;
					if (A2(
						$elm$core$List$member,
						leftOp,
						_List_fromArray(
							['+', '-', '*', '/']))) {
						var _v11 = $jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(leftNode);
						if (!_v11.$) {
							var leftValue = _v11.a;
							var _v12 = $jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(right);
							if (!_v12.$) {
								var rightValue = _v12.a;
								return $jfmengels$elm_review_simplify$Simplify$Normalize$fromEquality(
									_Utils_eq(leftValue, rightValue));
							} else {
								return fallback(0);
							}
						} else {
							return fallback(0);
						}
					} else {
						var _v13 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
							$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
						if (_v13.$ === 2) {
							var rightOp = _v13.a;
							var rightLeft = _v13.c;
							var rightRight = _v13.d;
							return _Utils_eq(leftOp, rightOp) ? A2(
								$jfmengels$elm_review_simplify$Simplify$Normalize$compareEqualityOfAll,
								_List_fromArray(
									[leftLeft, leftRight]),
								_List_fromArray(
									[rightLeft, rightRight])) : fallback(0);
						} else {
							return fallback(0);
						}
					}
				case 11:
					var left = _v10.a;
					var _v14 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
					if (_v14.$ === 11) {
						var rightValue = _v14.a;
						return $jfmengels$elm_review_simplify$Simplify$Normalize$fromEquality(
							_Utils_eq(left, rightValue));
					} else {
						return fallback(0);
					}
				case 12:
					var left = _v10.a;
					var _v15 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
					if (_v15.$ === 12) {
						var rightValue = _v15.a;
						return $jfmengels$elm_review_simplify$Simplify$Normalize$fromEquality(
							_Utils_eq(left, rightValue));
					} else {
						return fallback(0);
					}
				case 3:
					var moduleNameLeft = _v10.a;
					var leftName = _v10.b;
					var _v16 = $stil4m$elm_syntax$Elm$Syntax$Node$value(right);
					if (_v16.$ === 3) {
						var moduleNameRight = _v16.a;
						var rightName = _v16.b;
						return (_Utils_eq(leftName, rightName) && _Utils_eq(moduleNameRight, moduleNameLeft)) ? 0 : fallback(0);
					} else {
						return fallback(0);
					}
				case 19:
					var leftList = _v10.a;
					var _v17 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
					if (_v17.$ === 19) {
						var rightList = _v17.a;
						return (!_Utils_eq(
							$elm$core$List$length(leftList),
							$elm$core$List$length(rightList))) ? 1 : A3($jfmengels$elm_review_simplify$Simplify$Normalize$compareLists, leftList, rightList, 0);
					} else {
						return fallback(0);
					}
				case 13:
					var leftList = _v10.a;
					var _v18 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
					if (_v18.$ === 13) {
						var rightList = _v18.a;
						return A3($jfmengels$elm_review_simplify$Simplify$Normalize$compareLists, leftList, rightList, 0);
					} else {
						return fallback(0);
					}
				case 18:
					var leftList = _v10.a;
					var _v19 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
					if (_v19.$ === 18) {
						var rightList = _v19.a;
						return A3($jfmengels$elm_review_simplify$Simplify$Normalize$compareRecords, leftList, rightList, 0);
					} else {
						return fallback(0);
					}
				case 22:
					var leftBaseValue = _v10.a;
					var leftList = _v10.b;
					var _v20 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
					if (_v20.$ === 22) {
						var rightBaseValue = _v20.a;
						var rightList = _v20.b;
						return _Utils_eq(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(leftBaseValue),
							$stil4m$elm_syntax$Elm$Syntax$Node$value(rightBaseValue)) ? A3($jfmengels$elm_review_simplify$Simplify$Normalize$compareRecords, leftList, rightList, 0) : A3($jfmengels$elm_review_simplify$Simplify$Normalize$compareRecords, leftList, rightList, 2);
					} else {
						return fallback(0);
					}
				case 1:
					var leftArgs = _v10.a;
					var _v21 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
					if (_v21.$ === 1) {
						var rightArgs = _v21.a;
						return A2($jfmengels$elm_review_simplify$Simplify$Normalize$compareEqualityOfAll, leftArgs, rightArgs);
					} else {
						return fallback(0);
					}
				case 20:
					var leftExpr = _v10.a;
					var leftName = _v10.b;
					var _v22 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
					if (_v22.$ === 20) {
						var rightExpr = _v22.a;
						var rightName = _v22.b;
						if (_Utils_eq(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(leftName),
							$stil4m$elm_syntax$Elm$Syntax$Node$value(rightName))) {
							var $temp$leftNode = leftExpr,
								$temp$right = rightExpr,
								$temp$canFlip = canFlip;
							leftNode = $temp$leftNode;
							right = $temp$right;
							canFlip = $temp$canFlip;
							continue compareHelp;
						} else {
							return 2;
						}
					} else {
						return fallback(0);
					}
				case 0:
					return 0;
				case 4:
					var leftCond = _v10.a;
					var leftThen = _v10.b;
					var leftElse = _v10.c;
					var _v23 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$jfmengels$elm_review_simplify$Simplify$Normalize$removeParens(right));
					if (_v23.$ === 4) {
						var rightCond = _v23.a;
						var rightThen = _v23.b;
						var rightElse = _v23.c;
						return A2(
							$jfmengels$elm_review_simplify$Simplify$Normalize$compareEqualityOfAll,
							_List_fromArray(
								[leftCond, leftThen, leftElse]),
							_List_fromArray(
								[rightCond, rightThen, rightElse]));
					} else {
						return fallback(0);
					}
				default:
					return fallback(0);
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$compareLists = F3(function $jfmengels$elm_review_simplify$Simplify$Normalize$compareLists$fn(leftList, rightList, acc) {
		compareLists:
		while (true) {
			var _v6 = _Utils_Tuple2(leftList, rightList);
			if (_v6.a.b && _v6.b.b) {
				var _v7 = _v6.a;
				var left = _v7.a;
				var restOfLeft = _v7.b;
				var _v8 = _v6.b;
				var right = _v8.a;
				var restOfRight = _v8.b;
				var _v9 = A2($jfmengels$elm_review_simplify$Simplify$Normalize$compareWithoutNormalization, left, right);
				switch (_v9) {
					case 0:
						var $temp$leftList = restOfLeft,
							$temp$rightList = restOfRight,
							$temp$acc = acc;
						leftList = $temp$leftList;
						rightList = $temp$rightList;
						acc = $temp$acc;
						continue compareLists;
					case 1:
						return 1;
					default:
						var $temp$leftList = restOfLeft,
							$temp$rightList = restOfRight,
							$temp$acc = 2;
						leftList = $temp$leftList;
						rightList = $temp$rightList;
						acc = $temp$acc;
						continue compareLists;
				}
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$compareRecordFields = F2(function $jfmengels$elm_review_simplify$Simplify$Normalize$compareRecordFields$fn(recordFieldComparisons, acc) {
		compareRecordFields:
		while (true) {
			if (!recordFieldComparisons.b) {
				return acc;
			} else {
				if (!recordFieldComparisons.a.$) {
					var _v3 = recordFieldComparisons.a;
					var rest = recordFieldComparisons.b;
					var $temp$recordFieldComparisons = rest,
						$temp$acc = 2;
					recordFieldComparisons = $temp$recordFieldComparisons;
					acc = $temp$acc;
					continue compareRecordFields;
				} else {
					var _v4 = recordFieldComparisons.a;
					var a = _v4.a;
					var b = _v4.b;
					var rest = recordFieldComparisons.b;
					var _v5 = A3($jfmengels$elm_review_simplify$Simplify$Normalize$compareHelp, a, b, true);
					switch (_v5) {
						case 1:
							return 1;
						case 0:
							var $temp$recordFieldComparisons = rest,
								$temp$acc = acc;
							recordFieldComparisons = $temp$recordFieldComparisons;
							acc = $temp$acc;
							continue compareRecordFields;
						default:
							var $temp$recordFieldComparisons = rest,
								$temp$acc = 2;
							recordFieldComparisons = $temp$recordFieldComparisons;
							acc = $temp$acc;
							continue compareRecordFields;
					}
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$compareRecords = F3(function $jfmengels$elm_review_simplify$Simplify$Normalize$compareRecords$fn(leftList, rightList, acc) {
		var rightFields = A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$stil4m$elm_syntax$Elm$Syntax$Node$value,
				$elm$core$Tuple$mapFirst($stil4m$elm_syntax$Elm$Syntax$Node$value)),
			rightList);
		var leftFields = A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$stil4m$elm_syntax$Elm$Syntax$Node$value,
				$elm$core$Tuple$mapFirst($stil4m$elm_syntax$Elm$Syntax$Node$value)),
			leftList);
		var recordFieldComparisons = $elm$core$Dict$values(
			A6(
				$elm$core$Dict$merge,
				F2(
					function (key, _v0) {
						return A2($elm$core$Dict$insert, key, $jfmengels$elm_review_simplify$Simplify$Normalize$MissingOtherValue);
					}),
				F3(
					function (key, a, b) {
						return A2(
							$elm$core$Dict$insert,
							key,
							A2($jfmengels$elm_review_simplify$Simplify$Normalize$HasBothValues, a, b));
					}),
				F2(
					function (key, _v1) {
						return A2($elm$core$Dict$insert, key, $jfmengels$elm_review_simplify$Simplify$Normalize$MissingOtherValue);
					}),
				$elm$core$Dict$fromList(leftFields),
				$elm$core$Dict$fromList(rightFields),
				$elm$core$Dict$empty));
		return A2($jfmengels$elm_review_simplify$Simplify$Normalize$compareRecordFields, recordFieldComparisons, acc);
	});
var $jfmengels$elm_review_simplify$Simplify$Normalize$compareWithoutNormalization = F2(function $jfmengels$elm_review_simplify$Simplify$Normalize$compareWithoutNormalization$fn(leftNode, right) {
		return A3($jfmengels$elm_review_simplify$Simplify$Normalize$compareHelp, leftNode, right, true);
	});
var $jfmengels$elm_review_simplify$Simplify$getBeforeLastCons = function (expressionNode) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(expressionNode);
	if ((_v0.$ === 2) && (_v0.a === '::')) {
		var beforeCons = _v0.c;
		var afterCons = _v0.d;
		return A2(
			$elm$core$List$cons,
			beforeCons,
			$jfmengels$elm_review_simplify$Simplify$getBeforeLastCons(afterCons));
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$listMemberChecks = function (checkInfo) {
	var needleArg = checkInfo.c;
	var needleArgNormalized = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, checkInfo, needleArg);
	var isNeedle = function (element) {
		return !A2(
			$jfmengels$elm_review_simplify$Simplify$Normalize$compareWithoutNormalization,
			A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, checkInfo, element),
			needleArgNormalized);
	};
	var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
	if (!_v0.$) {
		var listArg = _v0.a;
		var needleRange = $stil4m$elm_syntax$Elm$Syntax$Node$range(needleArg);
		var singleNonNormalizedEqualElementError = function (element) {
			var elementRange = $stil4m$elm_syntax$Elm$Syntax$Node$range(element);
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by checking whether the member to find and the list element are equal.']),
						bx: 'Using List.member on an list with a single element is equivalent to directly checking for equality'
					},
					checkInfo.a,
					$elm$core$List$concat(
						_List_fromArray(
							[
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
								{
									n: $stil4m$elm_syntax$Elm$Syntax$Range$combine(
										_List_fromArray(
											[needleRange, elementRange])),
									b: checkInfo.b
								}),
								_List_fromArray(
								[
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									$jfmengels$elm_review_simplify$Simplify$rangeBetweenExclusive(
										_Utils_Tuple2(needleRange, elementRange)),
									' == ')
								]),
								$jfmengels$elm_review_simplify$Simplify$parenthesizeIfNeededFix(element)
							])))
				]);
		};
		var listMemberExistsError = _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by True.']),
					bx: 'Using List.member on a list which contains the given element will result in True'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									'True'),
								checkInfo)))
					]))
			]);
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(listArg));
		_v1$2:
		while (true) {
			switch (_v1.$) {
				case 19:
					var listLiteral = _v1.a;
					if (!listLiteral.b) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by False.']),
									bx: 'Using List.member on an empty list will result in False'
								},
								checkInfo.a,
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										checkInfo.b,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Basics']),
													'False'),
												checkInfo)))
									]))
							]);
					} else {
						var head = listLiteral.a;
						var tail = listLiteral.b;
						if (A2(
							$elm$core$List$any,
							isNeedle,
							A2($elm$core$List$cons, head, tail))) {
							return listMemberExistsError;
						} else {
							if (!tail.b) {
								return singleNonNormalizedEqualElementError(head);
							} else {
								return _List_Nil;
							}
						}
					}
				case 2:
					if (_v1.a === '::') {
						var head = _v1.c;
						var tail = _v1.d;
						return A2(
							$elm$core$List$any,
							isNeedle,
							A2(
								$elm$core$List$cons,
								head,
								$jfmengels$elm_review_simplify$Simplify$getBeforeLastCons(tail))) ? listMemberExistsError : _List_Nil;
					} else {
						break _v1$2;
					}
				default:
					break _v1$2;
			}
		}
		var _v4 = A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingletonCall, checkInfo.s, listArg);
		if (!_v4.$) {
			var single = _v4.a;
			return isNeedle(single.a2) ? listMemberExistsError : singleNonNormalizedEqualElementError(single.a2);
		} else {
			return _List_Nil;
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$listMinimumChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	_v0$2:
	while (true) {
		if (_v0.$ === 19) {
			if (!_v0.a.b) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by Nothing.']),
							bx: 'Using List.minimum on [] will result in Nothing'
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								checkInfo.b,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['Maybe']),
											'Nothing'),
										checkInfo)))
							]))
					]);
			} else {
				if (!_v0.a.b.b) {
					var _v1 = _v0.a;
					var _v2 = _v1.a;
					var elementRange = _v2.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by Just the single element itself.']),
								bx: 'List.minimum on a list with a single element will result in Just the element itself'
							},
							checkInfo.a,
							_Utils_ap(
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{n: elementRange, b: checkInfo.b}),
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$insertAt,
										checkInfo.b.dv,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Maybe']),
													'Just'),
												checkInfo)) + ' ')
									])))
						]);
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return _List_Nil;
};
var $jfmengels$elm_review_simplify$Simplify$listProductChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	_v0$2:
	while (true) {
		if (_v0.$ === 19) {
			if (!_v0.a.b) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by 1.']),
							bx: 'Using List.product on [] will result in 1'
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '1')
							]))
					]);
			} else {
				if (!_v0.a.b.b) {
					var _v1 = _v0.a;
					var _v2 = _v1.a;
					var elementRange = _v2.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by the single element itself.']),
								bx: 'List.product on a list with a single element will result in the element itself'
							},
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
								{n: elementRange, b: checkInfo.b}))
						]);
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return _List_Nil;
};
var $jfmengels$elm_review_simplify$Simplify$Evaluate$getInt = F2(function $jfmengels$elm_review_simplify$Simplify$Evaluate$getInt$fn(resources, baseNode) {
		var node = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 7:
				var n = _v0.a;
				return $elm$core$Maybe$Just(n);
			case 8:
				var n = _v0.a;
				return $elm$core$Maybe$Just(n);
			case 10:
				var expr = _v0.a;
				return A2(
					$elm$core$Maybe$map,
					$elm$core$Basics$negate,
					A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getInt, resources, expr));
			case 3:
				var name = _v0.b;
				var _v1 = A2(
					$elm$core$Maybe$andThen,
					function (moduleName) {
						return A2(
							$jfmengels$elm_review_simplify$Simplify$Infer$get,
							A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, moduleName, name),
							resources.I.a);
					},
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, resources.s, node));
				if ((!_v1.$) && (_v1.a.$ === 7)) {
					var _int = _v1.a.a;
					return $elm$core$Maybe$Just(_int);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$listRangeChecks = function (checkInfo) {
	var _v0 = A2(
		$elm$core$Maybe$andThen,
		$jfmengels$elm_review_simplify$Simplify$Evaluate$getInt(checkInfo),
		$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
	if (!_v0.$) {
		var second = _v0.a;
		var _v1 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getInt, checkInfo, checkInfo.c);
		if (!_v1.$) {
			var first = _v1.a;
			return (_Utils_cmp(first, second) > 0) ? _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['The second argument to List.range is bigger than the first one, therefore you can replace this list by an empty list.']),
						bx: 'The call to List.range will result in []'
					},
					checkInfo.a,
					A4(
						$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
						'[]',
						checkInfo.b,
						$elm$core$Maybe$Just(second),
						checkInfo))
				]) : _List_Nil;
		} else {
			return _List_Nil;
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$listRepeatChecks = function (checkInfo) {
	var _v0 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getInt, checkInfo, checkInfo.c);
	if (!_v0.$) {
		var intValue = _v0.a;
		return (intValue < 1) ? _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['Using List.repeat with a number less than 1 will result in an empty list. You can replace this call by an empty list.']),
					bx: 'List.repeat will result in an empty list'
				},
				checkInfo.a,
				A4(
					$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
					'[]',
					checkInfo.b,
					$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
					checkInfo))
			]) : _List_Nil;
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$reverseReverseCompositionErrorMessage = {
	eq: _List_fromArray(
		['Composing `reverse` with `reverse` cancel each other out.']),
	bx: 'Unnecessary double reversal'
};
var $jfmengels$elm_review_simplify$Simplify$listReverseChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.c));
	if ((_v0.$ === 19) && (!_v0.a.b)) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by [].']),
					bx: 'Using List.reverse on [] will result in []'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
					]))
			]);
	} else {
		return A3(
			$jfmengels$elm_review_simplify$Simplify$removeAlongWithOtherFunctionCheck,
			$jfmengels$elm_review_simplify$Simplify$reverseReverseCompositionErrorMessage,
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunction(
				_Utils_Tuple2(
					_List_fromArray(
						['List']),
					'reverse')),
			checkInfo);
	}
};
var $jfmengels$elm_review_simplify$Simplify$identityError = function (config) {
	return A3(
		$jfmengels$elm_review$Review$Rule$errorWithFix,
		{
			eq: function () {
				var _v0 = config.bV;
				if (_v0.$ === 1) {
					return _List_fromArray(
						['You can replace this call by identity.']);
				} else {
					return _List_fromArray(
						['You can replace this call by the ' + (config.d1 + ' itself.')]);
				}
			}(),
			bx: 'Using ' + (config.fj + (' will always return the same given ' + config.d1))
		},
		config.bg.a,
		$jfmengels$elm_review_simplify$Simplify$toIdentityFix(
			{bV: config.bV, bg: config.bg}));
};
var $jfmengels$elm_review_simplify$Simplify$listSortByChecks = function (checkInfo) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
	_v0$2:
	while (true) {
		if ((!_v0.$) && (_v0.a.b.$ === 19)) {
			if (!_v0.a.b.a.b) {
				var _v1 = _v0.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by [].']),
							bx: 'Using List.sortBy on [] will result in []'
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
							]))
					]);
			} else {
				if (!_v0.a.b.a.b.b) {
					var _v2 = _v0.a;
					var singletonListRange = _v2.a;
					var _v3 = _v2.b.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by the list itself.']),
								bx: 'Sorting a list with a single element will result in the list itself'
							},
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
								{n: singletonListRange, b: checkInfo.b}))
						]);
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	var _v4 = A2($jfmengels$elm_review_simplify$Simplify$getAlwaysResult, checkInfo, checkInfo.c);
	if (!_v4.$) {
		return _List_fromArray(
			[
				$jfmengels$elm_review_simplify$Simplify$identityError(
				{
					bV: $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
					d1: 'list',
					bg: checkInfo,
					fj: 'List.sortBy (always a)'
				})
			]);
	} else {
		return A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity, checkInfo.s, checkInfo.c) ? _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by List.sort.']),
					bx: 'Using List.sortBy identity is the same as using List.sort'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						{
							c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
							dv: checkInfo.a.dv
						},
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['List']),
									'sort'),
								checkInfo)))
					]))
			]) : _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$listSortChecks = function (checkInfo) {
	var _v0 = checkInfo.c;
	_v0$2:
	while (true) {
		if (_v0.b.$ === 19) {
			if (!_v0.b.a.b) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by [].']),
							bx: 'Using List.sort on [] will result in []'
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
							]))
					]);
			} else {
				if (!_v0.b.a.b.b) {
					var singletonListRange = _v0.a;
					var _v1 = _v0.b.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by the list itself.']),
								bx: 'Sorting a list with a single element will result in the list itself'
							},
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
								{n: singletonListRange, b: checkInfo.b}))
						]);
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return _List_Nil;
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getOrder = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getOrder$fn(lookupTable, expression) {
		return A4(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
			_List_fromArray(
				['Basics']),
			'LT',
			lookupTable,
			expression) ? $elm$core$Maybe$Just(0) : (A4(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
			_List_fromArray(
				['Basics']),
			'EQ',
			lookupTable,
			expression) ? $elm$core$Maybe$Just(1) : (A4(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
			_List_fromArray(
				['Basics']),
			'GT',
			lookupTable,
			expression) ? $elm$core$Maybe$Just(2) : $elm$core$Maybe$Nothing));
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$orderToString = function (order) {
	switch (order) {
		case 0:
			return 'LT';
		case 1:
			return 'EQ';
		default:
			return 'GT';
	}
};
var $jfmengels$elm_review_simplify$Simplify$listSortWithChecks = function (checkInfo) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
	_v0$2:
	while (true) {
		if ((!_v0.$) && (_v0.a.b.$ === 19)) {
			if (!_v0.a.b.a.b) {
				var _v1 = _v0.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by [].']),
							bx: 'Using List.sortWith on [] will result in []'
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
							]))
					]);
			} else {
				if (!_v0.a.b.a.b.b) {
					var _v2 = _v0.a;
					var singletonListRange = _v2.a;
					var _v3 = _v2.b.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by the list itself.']),
								bx: 'Sorting a list with a single element will result in the list itself'
							},
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
								{n: singletonListRange, b: checkInfo.b}))
						]);
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	var alwaysAlwaysOrder = A2(
		$elm$core$Maybe$andThen,
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$getOrder(checkInfo.s),
		A2(
			$elm$core$Maybe$andThen,
			$jfmengels$elm_review_simplify$Simplify$getAlwaysResult(checkInfo),
			A2($jfmengels$elm_review_simplify$Simplify$getAlwaysResult, checkInfo, checkInfo.c)));
	if (alwaysAlwaysOrder.$ === 1) {
		return _List_Nil;
	} else {
		var order = alwaysAlwaysOrder.a;
		var fixToIdentity = _List_fromArray(
			[
				$jfmengels$elm_review_simplify$Simplify$identityError(
				{
					bV: $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
					d1: 'list',
					bg: checkInfo,
					fj: 'List.sortWith (\\_ _ -> ' + ($jfmengels$elm_review_simplify$Simplify$AstHelpers$orderToString(order) + ')')
				})
			]);
		switch (order) {
			case 0:
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by List.reverse.']),
							bx: 'Using List.sortWith (\\_ _ -> LT) is the same as using List.reverse'
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
									dv: checkInfo.a.dv
								},
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['List']),
											'reverse'),
										checkInfo)))
							]))
					]);
			case 1:
				return fixToIdentity;
			default:
				return fixToIdentity;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$listSumChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	_v0$2:
	while (true) {
		if (_v0.$ === 19) {
			if (!_v0.a.b) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by 0.']),
							bx: 'Using List.sum on [] will result in 0'
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '0')
							]))
					]);
			} else {
				if (!_v0.a.b.b) {
					var _v1 = _v0.a;
					var _v2 = _v1.a;
					var elementRange = _v2.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by the single element itself.']),
								bx: 'Summing a list with a single element will result in the element itself'
							},
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
								{n: elementRange, b: checkInfo.b}))
						]);
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return _List_Nil;
};
var $jfmengels$elm_review_simplify$Simplify$listEmptyTailExistsError = {
	eq: _List_fromArray(
		['You can replace this call by Just the empty list.']),
	bx: 'Using List.tail on a list with a single element will result in Just the empty list'
};
var $jfmengels$elm_review_simplify$Simplify$listTailExistsError = {
	eq: _List_fromArray(
		['You can replace this call by Just the list elements after the first.']),
	bx: 'Using List.tail on a list with some elements will result in Just the elements after the first'
};
var $jfmengels$elm_review_simplify$Simplify$listTailChecks = function (checkInfo) {
	var listArg = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.c);
	var listArgRange = $stil4m$elm_syntax$Elm$Syntax$Node$range(listArg);
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(listArg);
	_v0$2:
	while (true) {
		switch (_v0.$) {
			case 19:
				var listLiteral = _v0.a;
				if (!listLiteral.b) {
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by Nothing.']),
								bx: 'Using List.tail on an empty list will result in Nothing'
							},
							checkInfo.a,
							_List_fromArray(
								[
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									checkInfo.b,
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
										A2(
											$jfmengels$elm_review_simplify$Simplify$qualify,
											_Utils_Tuple2(
												_List_fromArray(
													['Maybe']),
												'Nothing'),
											checkInfo)))
								]))
						]);
				} else {
					if (!listLiteral.b.b) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								$jfmengels$elm_review_simplify$Simplify$listEmptyTailExistsError,
								checkInfo.a,
								_List_fromArray(
									[
										A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, listArgRange, '[]'),
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										checkInfo.a,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Maybe']),
													'Just'),
												checkInfo)))
									]))
							]);
					} else {
						var _v2 = listLiteral.a;
						var headRange = _v2.a;
						var _v3 = listLiteral.b;
						var _v4 = _v3.a;
						var tailFirstRange = _v4.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								$jfmengels$elm_review_simplify$Simplify$listTailExistsError,
								checkInfo.a,
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										{c4: tailFirstRange.dv, dv: headRange.dv}),
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										checkInfo.a,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Maybe']),
													'Just'),
												checkInfo)))
									]))
							]);
					}
				}
			case 2:
				if (_v0.a === '::') {
					var tail = _v0.d;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							$jfmengels$elm_review_simplify$Simplify$listTailExistsError,
							checkInfo.a,
							_Utils_ap(
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{
										n: $stil4m$elm_syntax$Elm$Syntax$Node$range(tail),
										b: listArgRange
									}),
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										checkInfo.a,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Maybe']),
													'Just'),
												checkInfo)))
									])))
						]);
				} else {
					break _v0$2;
				}
			default:
				break _v0$2;
		}
	}
	var _v5 = A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingletonCall, checkInfo.s, listArg);
	if (!_v5.$) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				$jfmengels$elm_review_simplify$Simplify$listEmptyTailExistsError,
				checkInfo.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c),
						'[]'),
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.a,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Maybe']),
									'Just'),
								checkInfo)))
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$listTakeChecks = function (checkInfo) {
	var listArg = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
	if (_Utils_eq(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue(checkInfo.c),
		$elm$core$Maybe$Just(0))) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by [].']),
					bx: 'Taking 0 items from a list will result in []'
				},
				checkInfo.a,
				A4($jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix, '[]', checkInfo.b, listArg, checkInfo))
			]);
	} else {
		var _v0 = A2(
			$elm$core$Maybe$andThen,
			$jfmengels$elm_review_simplify$Simplify$determineListLength(checkInfo.s),
			listArg);
		if (((!_v0.$) && (!_v0.a.$)) && (!_v0.a.a)) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by [].']),
						bx: 'Using List.take on [] will result in []'
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
						]))
				]);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$listUnzipChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	if ((_v0.$ === 19) && (!_v0.a.b)) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by ( [], [] ).']),
					bx: 'Using List.unzip on [] will result in ( [], [] )'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '( [], [] )')
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$Match$maybeAndThen = F2(function $jfmengels$elm_review_simplify$Simplify$Match$maybeAndThen$fn(fn, maybe) {
		if (!maybe.$) {
			var a = maybe.a;
			return fn(a);
		} else {
			return $jfmengels$elm_review_simplify$Simplify$Match$Undetermined;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$maybeCollection = {
	aP: function (resources) {
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
			A2(
				$jfmengels$elm_review_simplify$Simplify$qualify,
				_Utils_Tuple2(
					_List_fromArray(
						['Maybe']),
					'Nothing'),
				resources));
	},
	Y: 'Nothing',
	aS: A2(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
		_List_fromArray(
			['Maybe']),
		'Nothing'),
	fV: function (resources) {
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
			A2(
				$jfmengels$elm_review_simplify$Simplify$qualify,
				_Utils_Tuple2(
					_List_fromArray(
						['Maybe']),
					'Just'),
				resources));
	},
	eY: 'Maybe',
	B: 'maybe'
};
var $jfmengels$elm_review_simplify$Simplify$maybeAndThenChecks = function (checkInfo) {
	var maybeEmptyAsString = A2($jfmengels$elm_review_simplify$Simplify$emptyAsString, checkInfo, $jfmengels$elm_review_simplify$Simplify$maybeCollection);
	return A2(
		$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
		_List_fromArray(
			[
				function (_v0) {
				var _v1 = A2(
					$jfmengels$elm_review_simplify$Simplify$Match$maybeAndThen,
					$jfmengels$elm_review_simplify$Simplify$getMaybeValues(checkInfo.s),
					$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
				if (!_v1.$) {
					if (!_v1.a.$) {
						var justRanges = _v1.a.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can remove the Just and just call the function directly.']),
									bx: 'Calling ' + ($jfmengels$elm_review_simplify$Simplify$maybeCollection.eY + '.andThen on a value that is known to be Just')
								},
								checkInfo.a,
								A2(
									$elm$core$List$cons,
									$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.a.dv
										}),
									A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, justRanges)))
							]);
					} else {
						var _v2 = _v1.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by ' + (maybeEmptyAsString + '.')]),
									bx: 'Using ' + ($jfmengels$elm_review_simplify$Simplify$maybeCollection.eY + ('.andThen on ' + (maybeEmptyAsString + (' will result in ' + maybeEmptyAsString))))
								},
								checkInfo.a,
								$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
							]);
					}
				} else {
					return _List_Nil;
				}
			},
				function (_v3) {
				var _v4 = A2($jfmengels$elm_review_simplify$Simplify$isAlwaysMaybe, checkInfo.s, checkInfo.c);
				if (!_v4.$) {
					if (!_v4.a.$) {
						var ranges = _v4.a.a.bA;
						var throughLambdaFunction = _v4.a.a.bC;
						return throughLambdaFunction ? _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['Using ' + ($jfmengels$elm_review_simplify$Simplify$maybeCollection.eY + '.andThen with a function that always returns Just is the same thing as using Maybe.map.')]),
									bx: 'Use ' + ($jfmengels$elm_review_simplify$Simplify$maybeCollection.eY + '.map instead')
								},
								checkInfo.a,
								A2(
									$elm$core$List$cons,
									A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										checkInfo.a,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														[$jfmengels$elm_review_simplify$Simplify$maybeCollection.eY]),
													'map'),
												checkInfo))),
									A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, ranges)))
							]) : _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can remove this call and replace it by the value itself.']),
									bx: 'Using Maybe.andThen with a function that will always return Just is the same as not using Maybe.andThen'
								},
								checkInfo.a,
								$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
							]);
					} else {
						var _v5 = _v4.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can remove this call and replace it by Nothing.']),
									bx: 'Using ' + ($jfmengels$elm_review_simplify$Simplify$maybeCollection.eY + '.andThen with a function that will always return Nothing will result in Nothing')
								},
								checkInfo.a,
								A4(
									$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
									maybeEmptyAsString,
									checkInfo.b,
									$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
									checkInfo))
							]);
					}
				} else {
					return _List_Nil;
				}
			}
			]),
		0);
};
var $jfmengels$elm_review_simplify$Simplify$maybeMapChecks = function (checkInfo) {
	return A2(
		$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
		_List_fromArray(
			[
				function (_v0) {
				return A2($jfmengels$elm_review_simplify$Simplify$collectionMapChecks, $jfmengels$elm_review_simplify$Simplify$maybeCollection, checkInfo);
			},
				function (_v1) {
				var _v2 = A2(
					$jfmengels$elm_review_simplify$Simplify$Match$maybeAndThen,
					$jfmengels$elm_review_simplify$Simplify$getMaybeValues(checkInfo.s),
					$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
				if ((!_v2.$) && (!_v2.a.$)) {
					var justRanges = _v2.a.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['The function can be called without Maybe.map.']),
								bx: 'Calling Maybe.map on a value that is Just'
							},
							checkInfo.a,
							checkInfo.x ? _Utils_ap(
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.a.dv
										}),
										A2(
										$jfmengels$elm_review$Review$Fix$insertAt,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
										' |> ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Maybe']),
													'Just'),
												checkInfo)))
									]),
								A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, justRanges)) : _Utils_ap(
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.b.dv
										},
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Maybe']),
													'Just'),
												checkInfo)) + ' ('),
										A2($jfmengels$elm_review$Review$Fix$insertAt, checkInfo.b.c4, ')')
									]),
								A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, justRanges)))
						]);
				} else {
					return _List_Nil;
				}
			}
			]),
		0);
};
var $jfmengels$elm_review_simplify$Simplify$maybeWithDefaultChecks = function (checkInfo) {
	var _v0 = A2(
		$jfmengels$elm_review_simplify$Simplify$Match$maybeAndThen,
		$jfmengels$elm_review_simplify$Simplify$getMaybeValues(checkInfo.s),
		$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
	if (!_v0.$) {
		if (!_v0.a.$) {
			var justRanges = _v0.a.a;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by the value wrapped in Just.']),
						bx: 'Using Maybe.withDefault on a value that is Just will result in that value'
					},
					checkInfo.a,
					_Utils_ap(
						A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, justRanges),
						$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo)))
				]);
		} else {
			var _v1 = _v0.a;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by the default value.']),
						bx: 'Using Maybe.withDefault on Nothing will result in the default value'
					},
					checkInfo.a,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
								dv: checkInfo.b.dv
							}),
							$jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: checkInfo.b.c4,
								dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4
							})
						]))
				]);
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$oneOfChecks = function (checkInfo) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(checkInfo.c);
	if (((_v0.b.$ === 19) && _v0.b.a.b) && (!_v0.b.a.b.b)) {
		var _v1 = _v0.b.a;
		var listElement = _v1.a;
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['There is only a single element in the list of elements to try out.']),
					bx: 'Unnecessary oneOf'
				},
				checkInfo.a,
				A2($jfmengels$elm_review_simplify$Simplify$replaceBySubExpressionFix, checkInfo.b, listElement))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$reportEmptyListFirstArgument = function (_v0) {
	var _v1 = _v0.a;
	var moduleName = _v1.a;
	var name = _v1.b;
	var _function = _v0.b;
	return _Utils_Tuple2(
		_Utils_Tuple2(moduleName, name),
		function (checkInfo) {
			var _v2 = checkInfo.c;
			if ((_v2.b.$ === 19) && (!_v2.b.a.b)) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by an empty list.']),
							bx: 'Using ' + ($jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								_Utils_Tuple2(moduleName, name)) + ' on an empty list will result in an empty list')
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
							]))
					]);
			} else {
				return _function(checkInfo);
			}
		});
};
var $jfmengels$elm_review_simplify$Simplify$reportEmptyListSecondArgument = function (_v0) {
	var _v1 = _v0.a;
	var moduleName = _v1.a;
	var name = _v1.b;
	var _function = _v0.b;
	return _Utils_Tuple2(
		_Utils_Tuple2(moduleName, name),
		function (checkInfo) {
			var _v2 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
			if (((!_v2.$) && (_v2.a.b.$ === 19)) && (!_v2.a.b.a.b)) {
				var _v3 = _v2.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by an empty list.']),
							bx: 'Using ' + ($jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								_Utils_Tuple2(moduleName, name)) + ' on an empty list will result in an empty list')
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
							]))
					]);
			} else {
				return _function(checkInfo);
			}
		});
};
var $jfmengels$elm_review_simplify$Simplify$combineResultValues = F2(function $jfmengels$elm_review_simplify$Simplify$combineResultValues$fn(lookupTable, nodes) {
		if (nodes.b) {
			var node = nodes.a;
			var restOfNodes = nodes.b;
			var _v33 = A2($jfmengels$elm_review_simplify$Simplify$getResultValues, lookupTable, node);
			if (_v33.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var nodeValue = _v33.a;
				return A3($jfmengels$elm_review_simplify$Simplify$combineResultValuesHelp, lookupTable, restOfNodes, nodeValue);
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$combineResultValuesHelp = F3(function $jfmengels$elm_review_simplify$Simplify$combineResultValuesHelp$fn(lookupTable, nodes, soFar) {
		combineResultValuesHelp:
		while (true) {
			if (nodes.b) {
				var node = nodes.a;
				var restOfNodes = nodes.b;
				var _v30 = A2($jfmengels$elm_review_simplify$Simplify$getResultValues, lookupTable, node);
				if (_v30.$ === 1) {
					return $elm$core$Maybe$Nothing;
				} else {
					var nodeValue = _v30.a;
					var _v31 = _Utils_Tuple2(nodeValue, soFar);
					if (_v31.a.$ === 1) {
						if (!_v31.b.$) {
							return $elm$core$Maybe$Nothing;
						} else {
							var soFarRange = _v31.b.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = restOfNodes,
								$temp$soFar = $elm$core$Result$Err(soFarRange);
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							soFar = $temp$soFar;
							continue combineResultValuesHelp;
						}
					} else {
						if (_v31.b.$ === 1) {
							return $elm$core$Maybe$Nothing;
						} else {
							var a = _v31.a.a;
							var b = _v31.b.a;
							var $temp$lookupTable = lookupTable,
								$temp$nodes = restOfNodes,
								$temp$soFar = $elm$core$Result$Ok(
								_Utils_ap(a, b));
							lookupTable = $temp$lookupTable;
							nodes = $temp$nodes;
							soFar = $temp$soFar;
							continue combineResultValuesHelp;
						}
					}
				}
			} else {
				return $elm$core$Maybe$Just(soFar);
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$getResultValues = F2(function $jfmengels$elm_review_simplify$Simplify$getResultValues$fn(lookupTable, baseNode) {
		getResultValues:
		while (true) {
			var node = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
			_v0$9:
			while (true) {
				switch (_v0.$) {
					case 1:
						if (((_v0.a.b && (_v0.a.a.b.$ === 3)) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
							switch (_v0.a.a.b.b) {
								case 'Ok':
									var _v1 = _v0.a;
									var _v2 = _v1.a;
									var okRange = _v2.a;
									var _v3 = _v2.b;
									var _v4 = _v1.b;
									var arg = _v4.a;
									var _v5 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, okRange);
									if ((((!_v5.$) && _v5.a.b) && (_v5.a.a === 'Result')) && (!_v5.a.b.b)) {
										var _v6 = _v5.a;
										return $elm$core$Maybe$Just(
											$elm$core$Result$Ok(
												_List_fromArray(
													[
														{
														c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).dv,
														dv: okRange.dv
													}
													])));
									} else {
										return $elm$core$Maybe$Nothing;
									}
								case 'Err':
									var _v15 = _v0.a;
									var _v16 = _v15.a;
									var errRange = _v16.a;
									var _v17 = _v16.b;
									var _v18 = _v15.b;
									var arg = _v18.a;
									var _v19 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, errRange);
									if ((((!_v19.$) && _v19.a.b) && (_v19.a.a === 'Result')) && (!_v19.a.b.b)) {
										var _v20 = _v19.a;
										return $elm$core$Maybe$Just(
											$elm$core$Result$Err(
												{
													c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).dv,
													dv: errRange.dv
												}));
									} else {
										return $elm$core$Maybe$Nothing;
									}
								default:
									break _v0$9;
							}
						} else {
							break _v0$9;
						}
					case 2:
						switch (_v0.a) {
							case '|>':
								if (_v0.d.b.$ === 3) {
									switch (_v0.d.b.b) {
										case 'Ok':
											var arg = _v0.c;
											var _v7 = _v0.d;
											var okRange = _v7.a;
											var _v8 = _v7.b;
											var _v9 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, okRange);
											if ((((!_v9.$) && _v9.a.b) && (_v9.a.a === 'Result')) && (!_v9.a.b.b)) {
												var _v10 = _v9.a;
												return $elm$core$Maybe$Just(
													$elm$core$Result$Ok(
														_List_fromArray(
															[
																{
																c4: okRange.c4,
																dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).c4
															}
															])));
											} else {
												return $elm$core$Maybe$Nothing;
											}
										case 'Err':
											var arg = _v0.c;
											var _v21 = _v0.d;
											var errRange = _v21.a;
											var _v22 = _v21.b;
											var _v23 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, errRange);
											if ((((!_v23.$) && _v23.a.b) && (_v23.a.a === 'Result')) && (!_v23.a.b.b)) {
												var _v24 = _v23.a;
												return $elm$core$Maybe$Just(
													$elm$core$Result$Err(
														{
															c4: errRange.c4,
															dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).c4
														}));
											} else {
												return $elm$core$Maybe$Nothing;
											}
										default:
											break _v0$9;
									}
								} else {
									break _v0$9;
								}
							case '<|':
								if (_v0.c.b.$ === 3) {
									switch (_v0.c.b.b) {
										case 'Ok':
											var _v11 = _v0.c;
											var okRange = _v11.a;
											var _v12 = _v11.b;
											var arg = _v0.d;
											var _v13 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, okRange);
											if ((((!_v13.$) && _v13.a.b) && (_v13.a.a === 'Result')) && (!_v13.a.b.b)) {
												var _v14 = _v13.a;
												return $elm$core$Maybe$Just(
													$elm$core$Result$Ok(
														_List_fromArray(
															[
																{
																c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).dv,
																dv: okRange.dv
															}
															])));
											} else {
												return $elm$core$Maybe$Nothing;
											}
										case 'Err':
											var _v25 = _v0.c;
											var errRange = _v25.a;
											var _v26 = _v25.b;
											var arg = _v0.d;
											var _v27 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, errRange);
											if ((((!_v27.$) && _v27.a.b) && (_v27.a.a === 'Result')) && (!_v27.a.b.b)) {
												var _v28 = _v27.a;
												return $elm$core$Maybe$Just(
													$elm$core$Result$Err(
														{
															c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).dv,
															dv: errRange.dv
														}));
											} else {
												return $elm$core$Maybe$Nothing;
											}
										default:
											break _v0$9;
									}
								} else {
									break _v0$9;
								}
							default:
								break _v0$9;
						}
					case 15:
						var expression = _v0.a.eC;
						var $temp$lookupTable = lookupTable,
							$temp$baseNode = expression;
						lookupTable = $temp$lookupTable;
						baseNode = $temp$baseNode;
						continue getResultValues;
					case 4:
						var thenBranch = _v0.b;
						var elseBranch = _v0.c;
						return A2(
							$jfmengels$elm_review_simplify$Simplify$combineResultValues,
							lookupTable,
							_List_fromArray(
								[thenBranch, elseBranch]));
					case 16:
						var cases = _v0.a.ia;
						return A2(
							$jfmengels$elm_review_simplify$Simplify$combineResultValues,
							lookupTable,
							A2($elm$core$List$map, $elm$core$Tuple$second, cases));
					default:
						break _v0$9;
				}
			}
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$isAlwaysResult = F2(function $jfmengels$elm_review_simplify$Simplify$isAlwaysResult$fn(lookupTable, baseNode) {
		var node = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode);
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$4:
		while (true) {
			switch (_v0.$) {
				case 3:
					switch (_v0.b) {
						case 'Ok':
							var _v1 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node);
							if ((((!_v1.$) && _v1.a.b) && (_v1.a.a === 'Result')) && (!_v1.a.b.b)) {
								var _v2 = _v1.a;
								return $elm$core$Maybe$Just(
									$elm$core$Result$Ok(
										{
											bA: _List_fromArray(
												[
													$stil4m$elm_syntax$Elm$Syntax$Node$range(node)
												]),
											bC: false
										}));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						case 'Err':
							var _v3 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameFor, lookupTable, node);
							if ((((!_v3.$) && _v3.a.b) && (_v3.a.a === 'Result')) && (!_v3.a.b.b)) {
								var _v4 = _v3.a;
								return $elm$core$Maybe$Just(
									$elm$core$Result$Err(
										$stil4m$elm_syntax$Elm$Syntax$Node$range(node)));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						default:
							break _v0$4;
					}
				case 1:
					if ((((_v0.a.b && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'always')) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
						var _v5 = _v0.a;
						var _v6 = _v5.a;
						var alwaysRange = _v6.a;
						var _v7 = _v6.b;
						var _v8 = _v5.b;
						var value = _v8.a;
						var _v9 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, alwaysRange);
						if ((((!_v9.$) && _v9.a.b) && (_v9.a.a === 'Basics')) && (!_v9.a.b.b)) {
							var _v10 = _v9.a;
							return A2(
								$elm$core$Maybe$map,
								$elm$core$Result$map(
									function (ranges) {
										return {bA: ranges, bC: false};
									}),
								A2($jfmengels$elm_review_simplify$Simplify$getResultValues, lookupTable, value));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					} else {
						break _v0$4;
					}
				case 17:
					var expression = _v0.a.eC;
					return A2(
						$elm$core$Maybe$map,
						$elm$core$Result$map(
							function (ranges) {
								return {bA: ranges, bC: true};
							}),
						A2($jfmengels$elm_review_simplify$Simplify$getResultValues, lookupTable, expression));
				default:
					break _v0$4;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificCall = F4(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificCall$fn(moduleName, fnName, lookupTable, node) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(node));
		if (((((_v0.$ === 1) && _v0.a.b) && (_v0.a.a.b.$ === 3)) && _v0.a.b.b) && (!_v0.a.b.b.b)) {
			var _v1 = _v0.a;
			var _v2 = _v1.a;
			var noneRange = _v2.a;
			var _v3 = _v2.b;
			var foundFnName = _v3.b;
			var _v4 = _v1.b;
			return _Utils_eq(foundFnName, fnName) && _Utils_eq(
				A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, noneRange),
				$elm$core$Maybe$Just(moduleName));
		} else {
			return false;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$resultCollection = {
	aP: function (resources) {
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
			A2(
				$jfmengels$elm_review_simplify$Simplify$qualify,
				_Utils_Tuple2(
					_List_fromArray(
						['Maybe']),
					'Nothing'),
				resources));
	},
	Y: 'an error',
	aS: A2(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificCall,
		_List_fromArray(
			['Result']),
		'Err'),
	fV: function (resources) {
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
			A2(
				$jfmengels$elm_review_simplify$Simplify$qualify,
				_Utils_Tuple2(
					_List_fromArray(
						['Result']),
					'Ok'),
				resources));
	},
	eY: 'Result',
	B: 'result'
};
var $jfmengels$elm_review_simplify$Simplify$resultAndThenChecks = function (checkInfo) {
	return A2(
		$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
		_List_fromArray(
			[
				function (_v0) {
				var _v1 = A2(
					$elm$core$Maybe$andThen,
					$jfmengels$elm_review_simplify$Simplify$getResultValues(checkInfo.s),
					$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
				if (!_v1.$) {
					if (!_v1.a.$) {
						var okRanges = _v1.a.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can remove the Ok and just call the function directly.']),
									bx: 'Calling ' + ($jfmengels$elm_review_simplify$Simplify$resultCollection.eY + '.andThen on a value that is known to be Ok')
								},
								checkInfo.a,
								A2(
									$elm$core$List$cons,
									$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.a.dv
										}),
									A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, okRanges)))
							]);
					} else {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['You can replace this call by the error itself.']),
									bx: 'Using ' + ($jfmengels$elm_review_simplify$Simplify$resultCollection.eY + '.andThen on an error will result in the error')
								},
								checkInfo.a,
								$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
							]);
					}
				} else {
					return _List_Nil;
				}
			},
				function (_v2) {
				var _v3 = A2($jfmengels$elm_review_simplify$Simplify$isAlwaysResult, checkInfo.s, checkInfo.c);
				if ((!_v3.$) && (!_v3.a.$)) {
					var ranges = _v3.a.a.bA;
					var throughLambdaFunction = _v3.a.a.bC;
					return throughLambdaFunction ? _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['Using Result.andThen with a function that always returns Ok is the same thing as using Result.map.']),
								bx: 'Use Result.map instead'
							},
							checkInfo.a,
							A2(
								$elm$core$List$cons,
								A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									checkInfo.a,
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
										A2(
											$jfmengels$elm_review_simplify$Simplify$qualify,
											_Utils_Tuple2(
												_List_fromArray(
													[$jfmengels$elm_review_simplify$Simplify$resultCollection.eY]),
												'map'),
											checkInfo))),
								A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, ranges)))
						]) : _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can remove this call and replace it by the value itself.']),
								bx: 'Using Result.andThen with a function that will always return Just is the same as not using Result.andThen'
							},
							checkInfo.a,
							$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo))
						]);
				} else {
					return _List_Nil;
				}
			}
			]),
		0);
};
var $jfmengels$elm_review_simplify$Simplify$resultMapChecks = function (checkInfo) {
	return A2(
		$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
		_List_fromArray(
			[
				function (_v0) {
				return A2($jfmengels$elm_review_simplify$Simplify$collectionMapChecks, $jfmengels$elm_review_simplify$Simplify$resultCollection, checkInfo);
			},
				function (_v1) {
				var _v2 = A2(
					$elm$core$Maybe$andThen,
					$jfmengels$elm_review_simplify$Simplify$getResultValues(checkInfo.s),
					$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
				if ((!_v2.$) && (!_v2.a.$)) {
					var okRanges = _v2.a.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['The function can be called without Result.map.']),
								bx: 'Calling Result.map on a value that is Ok'
							},
							checkInfo.a,
							checkInfo.x ? _Utils_ap(
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.a.dv
										}),
										A2(
										$jfmengels$elm_review$Review$Fix$insertAt,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
										' |> ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Result']),
													'Ok'),
												checkInfo)))
									]),
								A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, okRanges)) : _Utils_ap(
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.b.dv
										},
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Result']),
													'Ok'),
												checkInfo)) + ' ('),
										A2($jfmengels$elm_review$Review$Fix$insertAt, checkInfo.b.c4, ')')
									]),
								A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, okRanges)))
						]);
				} else {
					return _List_Nil;
				}
			}
			]),
		0);
};
var $jfmengels$elm_review_simplify$Simplify$resultMapErrorChecks = function (checkInfo) {
	var maybeResultArg = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
	return A2(
		$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
		_List_fromArray(
			[
				function (_v0) {
				return A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$isIdentity, checkInfo.s, checkInfo.c) ? _List_fromArray(
					[
						$jfmengels$elm_review_simplify$Simplify$identityError(
						{bV: maybeResultArg, d1: 'result', bg: checkInfo, fj: 'Result.mapError identity'})
					]) : _List_Nil;
			},
				function (_v1) {
				var _v2 = A2(
					$elm$core$Maybe$andThen,
					A2(
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunctionCall,
						_Utils_Tuple2(
							_List_fromArray(
								['Result']),
							'Err'),
						checkInfo.s),
					maybeResultArg);
				if (_v2.$ === 1) {
					return _List_Nil;
				} else {
					var errCall = _v2.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							$jfmengels$elm_review_simplify$Simplify$resultMapErrorOnErrErrorInfo,
							checkInfo.a,
							checkInfo.x ? _Utils_ap(
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.a.dv
										}),
										A2(
										$jfmengels$elm_review$Review$Fix$insertAt,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
										' |> ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Result']),
													'Err'),
												checkInfo)))
									]),
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{
										n: $stil4m$elm_syntax$Elm$Syntax$Node$range(errCall.c),
										b: errCall.e0
									})) : _Utils_ap(
								_List_fromArray(
									[
										A2(
										$jfmengels$elm_review$Review$Fix$replaceRangeBy,
										{
											c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
											dv: checkInfo.b.dv
										},
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
											A2(
												$jfmengels$elm_review_simplify$Simplify$qualify,
												_Utils_Tuple2(
													_List_fromArray(
														['Result']),
													'Err'),
												checkInfo)) + ' ('),
										A2($jfmengels$elm_review$Review$Fix$insertAt, checkInfo.b.c4, ')')
									]),
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{
										n: $stil4m$elm_syntax$Elm$Syntax$Node$range(errCall.c),
										b: errCall.e0
									})))
						]);
				}
			},
				function (_v3) {
				if (maybeResultArg.$ === 1) {
					return _List_Nil;
				} else {
					var resultArg = maybeResultArg.a;
					var _v5 = A2($jfmengels$elm_review_simplify$Simplify$getResultValues, checkInfo.s, resultArg);
					if ((!_v5.$) && (!_v5.a.$)) {
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								$jfmengels$elm_review_simplify$Simplify$resultMapErrorOnOkErrorInfo,
								checkInfo.a,
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{
										n: $stil4m$elm_syntax$Elm$Syntax$Node$range(resultArg),
										b: checkInfo.b
									}))
							]);
					} else {
						return _List_Nil;
					}
				}
			}
			]),
		0);
};
var $jfmengels$elm_review_simplify$Simplify$resultToMaybeChecks = function (checkInfo) {
	var _v0 = A2($jfmengels$elm_review_simplify$Simplify$getResultValues, checkInfo.s, checkInfo.c);
	if (!_v0.$) {
		if (!_v0.a.$) {
			var okRanges = _v0.a.a;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by the value itself wrapped in Just.']),
						bx: 'Using Result.toMaybe on a value that is Ok will result in Just that value itself'
					},
					checkInfo.a,
					_Utils_ap(
						A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, okRanges),
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								checkInfo.a,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['Maybe']),
											'Just'),
										checkInfo)))
							])))
				]);
		} else {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by Nothing.']),
						bx: 'Using Result.toMaybe on an error will result in Nothing'
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							checkInfo.b,
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['Maybe']),
										'Nothing'),
									checkInfo)))
						]))
				]);
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$resultWithDefaultChecks = function (checkInfo) {
	var _v0 = A2(
		$elm$core$Maybe$andThen,
		$jfmengels$elm_review_simplify$Simplify$getResultValues(checkInfo.s),
		$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
	if (!_v0.$) {
		if (!_v0.a.$) {
			var okRanges = _v0.a.a;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by the value wrapped in Ok.']),
						bx: 'Using Result.withDefault on a value that is Ok will result in that value'
					},
					checkInfo.a,
					_Utils_ap(
						A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$removeRange, okRanges),
						$jfmengels$elm_review_simplify$Simplify$noopFix(checkInfo)))
				]);
		} else {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can replace this call by the default value.']),
						bx: 'Using Result.withDefault on an error will result in the default value'
					},
					checkInfo.a,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).dv,
								dv: checkInfo.b.dv
							}),
							$jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: checkInfo.b.c4,
								dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4
							})
						]))
				]);
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$setCollection = {
	O: A2(
		$jfmengels$elm_review_simplify$Simplify$determineIfCollectionIsEmpty,
		_List_fromArray(
			['Set']),
		1),
	aP: function (resources) {
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
			A2(
				$jfmengels$elm_review_simplify$Simplify$qualify,
				_Utils_Tuple2(
					_List_fromArray(
						['Set']),
					'empty'),
				resources));
	},
	Y: 'Set.empty',
	aS: A2(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
		_List_fromArray(
			['Set']),
		'empty'),
	eY: 'Set',
	$7: 'size',
	B: 'set'
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingleton = F2(function $jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingleton$fn(lookupTable, baseNode) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode));
		if (_v0.$ === 19) {
			if (_v0.a.b && (!_v0.a.b.b)) {
				var _v1 = _v0.a;
				var element = _v1.a;
				return $elm$core$Maybe$Just(
					{a2: element});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingletonCall, lookupTable, baseNode);
		}
	});
var $jfmengels$elm_review_simplify$Simplify$setFromListSingletonChecks = function (checkInfo) {
	var _v0 = A2($jfmengels$elm_review_simplify$Simplify$AstHelpers$getListSingleton, checkInfo.s, checkInfo.c);
	if (_v0.$ === 1) {
		return _List_Nil;
	} else {
		var listSingleton = _v0.a;
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				$jfmengels$elm_review_simplify$Simplify$setFromListSingletonError,
				checkInfo.a,
				_Utils_ap(
					$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
						{
							n: $stil4m$elm_syntax$Elm$Syntax$Node$range(listSingleton.a2),
							b: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c)
						}),
					_Utils_ap(
						$jfmengels$elm_review_simplify$Simplify$parenthesizeIfNeededFix(listSingleton.a2),
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								checkInfo.a,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['Set']),
											'singleton'),
										checkInfo)))
							]))))
			]);
	}
};
var $jfmengels$elm_review_simplify$Simplify$setFromListChecks = function (checkInfo) {
	return _Utils_ap(
		A2($jfmengels$elm_review_simplify$Simplify$collectionFromListChecks, $jfmengels$elm_review_simplify$Simplify$setCollection, checkInfo),
		$jfmengels$elm_review_simplify$Simplify$setFromListSingletonChecks(checkInfo));
};
var $jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString = '\"\"';
var $jfmengels$elm_review_simplify$Simplify$stringConcatChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	if ((_v0.$ === 19) && (!_v0.a.b)) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by an empty string.']),
					bx: 'Using String.concat on an empty list will result in an empty string'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, $jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString)
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$stringFromListChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	_v0$2:
	while (true) {
		if (_v0.$ === 19) {
			if (!_v0.a.b) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['You can replace this call by ' + ($jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString + '.')]),
							bx: 'Calling String.fromList [] will result in ' + $jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, $jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString)
							]))
					]);
			} else {
				if (!_v0.a.b.b) {
					var _v1 = _v0.a;
					var onlyChar = _v1.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by String.fromChar with the contained char.']),
								bx: 'Calling String.fromList with a list with a single char is the same as String.fromChar with the contained char'
							},
							checkInfo.a,
							_Utils_ap(
								$jfmengels$elm_review_simplify$Simplify$keepOnlyFix(
									{
										n: $stil4m$elm_syntax$Elm$Syntax$Node$range(onlyChar),
										b: checkInfo.b
									}),
								_Utils_ap(
									$jfmengels$elm_review_simplify$Simplify$parenthesizeIfNeededFix(onlyChar),
									_List_fromArray(
										[
											A2(
											$jfmengels$elm_review$Review$Fix$insertAt,
											checkInfo.b.dv,
											$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
												A2(
													$jfmengels$elm_review_simplify$Simplify$qualify,
													_Utils_Tuple2(
														_List_fromArray(
															['String']),
														'fromChar'),
													checkInfo)) + ' ')
										]))))
						]);
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return _List_Nil;
};
var $jfmengels$elm_review_simplify$Simplify$stringIsEmptyChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	if (_v0.$ === 11) {
		var str = _v0.a;
		var replacementValue = $jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(str === '');
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by ' + (replacementValue + '.')]),
					bx: 'The call to String.isEmpty will result in ' + replacementValue
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, replacementValue)
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$stringJoinChecks = function (checkInfo) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
	if (((!_v0.$) && (_v0.a.b.$ === 19)) && (!_v0.a.b.a.b)) {
		var _v1 = _v0.a;
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by an empty string.']),
					bx: 'Using String.join on an empty list will result in an empty string'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '\"\"')
					]))
			]);
	} else {
		var _v2 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
		if ((_v2.$ === 11) && (_v2.a === '')) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['Using String.join with an empty separator is the same as using String.concat.']),
						bx: 'Use String.concat instead'
					},
					checkInfo.a,
					_List_fromArray(
						[
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							{
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
								dv: checkInfo.a.dv
							},
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
								A2(
									$jfmengels$elm_review_simplify$Simplify$qualify,
									_Utils_Tuple2(
										_List_fromArray(
											['String']),
										'concat'),
									checkInfo)))
						]))
				]);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$stringLeftChecks = function (checkInfo) {
	var _v0 = _Utils_Tuple2(
		checkInfo.c,
		$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
	_v0$0:
	while (true) {
		_v0$3:
		while (true) {
			switch (_v0.a.b.$) {
				case 7:
					if (((!_v0.b.$) && (_v0.b.a.b.$ === 11)) && (_v0.b.a.b.a === '')) {
						break _v0$0;
					} else {
						if (!_v0.a.b.a) {
							var _v2 = _v0.a;
							return _List_fromArray(
								[
									A3(
									$jfmengels$elm_review$Review$Rule$errorWithFix,
									{
										eq: _List_fromArray(
											['You can replace this call by an empty string.']),
										bx: 'Using String.left with length 0 will result in an empty string'
									},
									checkInfo.a,
									A4(
										$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString,
										checkInfo.b,
										$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
										checkInfo))
								]);
						} else {
							break _v0$3;
						}
					}
				case 10:
					if (((!_v0.b.$) && (_v0.b.a.b.$ === 11)) && (_v0.b.a.b.a === '')) {
						break _v0$0;
					} else {
						if (_v0.a.b.a.b.$ === 7) {
							var _v3 = _v0.a;
							var _v4 = _v3.b.a;
							return _List_fromArray(
								[
									A3(
									$jfmengels$elm_review$Review$Rule$errorWithFix,
									{
										eq: _List_fromArray(
											['You can replace this call by an empty string.']),
										bx: 'Using String.left with negative length will result in an empty string'
									},
									checkInfo.a,
									A4(
										$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString,
										checkInfo.b,
										$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
										checkInfo))
								]);
						} else {
							break _v0$3;
						}
					}
				default:
					if (((!_v0.b.$) && (_v0.b.a.b.$ === 11)) && (_v0.b.a.b.a === '')) {
						break _v0$0;
					} else {
						break _v0$3;
					}
			}
		}
		return _List_Nil;
	}
	var _v1 = _v0.b.a;
	return _List_fromArray(
		[
			A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['You can replace this call by an empty string.']),
				bx: 'Using String.left on an empty string will result in an empty string'
			},
			checkInfo.a,
			_List_fromArray(
				[
					A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '\"\"')
				]))
		]);
};
var $jfmengels$elm_review_simplify$Simplify$stringLengthChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	if (_v0.$ === 11) {
		var str = _v0.a;
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['The length of the string can be determined by looking at the code.']),
					bx: 'The length of the string is ' + $elm$core$String$fromInt(
						$elm$core$String$length(str))
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						checkInfo.b,
						$elm$core$String$fromInt(
							$elm$core$String$length(str)))
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$stringLinesChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	if ((_v0.$ === 11) && (_v0.a === '')) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by an empty list.']),
					bx: 'Using String.lines on an empty string will result in an empty list'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$stringRepeatChecks = function (checkInfo) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
	if (((!_v0.$) && (_v0.a.b.$ === 11)) && (_v0.a.b.a === '')) {
		var _v1 = _v0.a;
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by an empty string.']),
					bx: 'Using String.repeat with an empty string will result in an empty string'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '\"\"')
					]))
			]);
	} else {
		var _v2 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getInt, checkInfo, checkInfo.c);
		if (!_v2.$) {
			var intValue = _v2.a;
			return (intValue === 1) ? _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['Using String.repeat with 1 will result in the second argument.']),
						bx: 'String.repeat 1 won\'t do anything'
					},
					checkInfo.a,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{
								c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(checkInfo.c).c4,
								dv: checkInfo.a.dv
							})
						]))
				]) : ((intValue < 1) ? _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['Using String.repeat with a number less than 1 will result in an empty string. You can replace this call by an empty string.']),
						bx: 'String.repeat will result in an empty string'
					},
					checkInfo.a,
					A4(
						$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString,
						checkInfo.b,
						$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
						checkInfo))
				]) : _List_Nil);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$Normalize$compare = F3(function $jfmengels$elm_review_simplify$Simplify$Normalize$compare$fn(resources, leftNode, right) {
		return A3(
			$jfmengels$elm_review_simplify$Simplify$Normalize$compareHelp,
			A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, leftNode),
			A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, resources, right),
			true);
	});
var $jfmengels$elm_review_simplify$Simplify$stringReplaceChecks = function (checkInfo) {
	var _v0 = $jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo);
	if (!_v0.$) {
		var secondArg_ = _v0.a;
		var _v1 = A3($jfmengels$elm_review_simplify$Simplify$Normalize$compare, checkInfo, checkInfo.c, secondArg_);
		if (!_v1) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['The pattern to replace and the replacement are equal, therefore the result of the String.replace call will be the original string.']),
						bx: 'The result of String.replace will be the original string'
					},
					checkInfo.a,
					function () {
						var _v2 = $jfmengels$elm_review_simplify$Simplify$thirdArg(checkInfo);
						if (!_v2.$) {
							var thirdArg_ = _v2.a;
							return _List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(
									{
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(thirdArg_).dv,
										dv: checkInfo.a.dv
									})
								]);
						} else {
							return _List_fromArray(
								[
									A2(
									$jfmengels$elm_review$Review$Fix$replaceRangeBy,
									{
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(secondArg_).c4,
										dv: checkInfo.a.dv
									},
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
										A2(
											$jfmengels$elm_review_simplify$Simplify$qualify,
											_Utils_Tuple2(
												_List_fromArray(
													['Basics']),
												'identity'),
											checkInfo)))
								]);
						}
					}())
				]);
		} else {
			var _v3 = _Utils_Tuple3(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c),
				$stil4m$elm_syntax$Elm$Syntax$Node$value(secondArg_),
				$jfmengels$elm_review_simplify$Simplify$thirdArg(checkInfo));
			_v3$2:
			while (true) {
				if ((!_v3.c.$) && (_v3.c.a.b.$ === 11)) {
					if (_v3.c.a.b.a === '') {
						var _v4 = _v3.c.a;
						var thirdRange = _v4.a;
						return _List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['Replacing anything on an empty string results in an empty string.']),
									bx: 'The result of String.replace will be the empty string'
								},
								checkInfo.a,
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										{c4: thirdRange.dv, dv: checkInfo.a.dv})
									]))
							]);
					} else {
						if ((_v3.a.$ === 11) && (_v3.b.$ === 11)) {
							var first = _v3.a.a;
							var second = _v3.b.a;
							var _v5 = _v3.c.a;
							var thirdRange = _v5.a;
							var third = _v5.b.a;
							return ((!A2($elm$core$String$contains, '\u000D', first)) && _Utils_eq(
								A3($elm$core$String$replace, first, second, third),
								third)) ? _List_fromArray(
								[
									A3(
									$jfmengels$elm_review$Review$Rule$errorWithFix,
									{
										eq: _List_fromArray(
											['The replacement doesn\'t haven\'t any noticeable impact. You can remove the call to String.replace.']),
										bx: 'The result of String.replace will be the original string'
									},
									checkInfo.a,
									checkInfo.x ? _List_fromArray(
										[
											$jfmengels$elm_review$Review$Fix$removeRange(
											{c4: checkInfo.b.c4, dv: thirdRange.c4})
										]) : _List_fromArray(
										[
											$jfmengels$elm_review$Review$Fix$removeRange(
											{c4: thirdRange.dv, dv: checkInfo.a.dv})
										]))
								]) : _List_Nil;
						} else {
							break _v3$2;
						}
					}
				} else {
					break _v3$2;
				}
			}
			return _List_Nil;
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$stringReverseChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	if ((_v0.$ === 11) && (_v0.a === '')) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by an empty string.']),
					bx: 'Using String.reverse on an empty string will result in an empty string'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, $jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString)
					]))
			]);
	} else {
		return A3(
			$jfmengels$elm_review_simplify$Simplify$removeAlongWithOtherFunctionCheck,
			$jfmengels$elm_review_simplify$Simplify$reverseReverseCompositionErrorMessage,
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getSpecificFunction(
				_Utils_Tuple2(
					_List_fromArray(
						['String']),
					'reverse')),
			checkInfo);
	}
};
var $jfmengels$elm_review_simplify$Simplify$stringRightChecks = function (checkInfo) {
	var _v0 = _Utils_Tuple2(
		checkInfo.c,
		$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo));
	_v0$0:
	while (true) {
		_v0$3:
		while (true) {
			switch (_v0.a.b.$) {
				case 7:
					if (((!_v0.b.$) && (_v0.b.a.b.$ === 11)) && (_v0.b.a.b.a === '')) {
						break _v0$0;
					} else {
						if (!_v0.a.b.a) {
							var _v2 = _v0.a;
							return _List_fromArray(
								[
									A3(
									$jfmengels$elm_review$Review$Rule$errorWithFix,
									{
										eq: _List_fromArray(
											['You can replace this call by an empty string.']),
										bx: 'Using String.right with length 0 will result in an empty string'
									},
									checkInfo.a,
									A4(
										$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString,
										checkInfo.b,
										$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
										checkInfo))
								]);
						} else {
							break _v0$3;
						}
					}
				case 10:
					if (((!_v0.b.$) && (_v0.b.a.b.$ === 11)) && (_v0.b.a.b.a === '')) {
						break _v0$0;
					} else {
						if (_v0.a.b.a.b.$ === 7) {
							var _v3 = _v0.a;
							var _v4 = _v3.b.a;
							return _List_fromArray(
								[
									A3(
									$jfmengels$elm_review$Review$Rule$errorWithFix,
									{
										eq: _List_fromArray(
											['You can replace this call by an empty string.']),
										bx: 'Using String.right with negative length will result in an empty string'
									},
									checkInfo.a,
									A4(
										$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
										$jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString,
										checkInfo.b,
										$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
										checkInfo))
								]);
						} else {
							break _v0$3;
						}
					}
				default:
					if (((!_v0.b.$) && (_v0.b.a.b.$ === 11)) && (_v0.b.a.b.a === '')) {
						break _v0$0;
					} else {
						break _v0$3;
					}
			}
		}
		return _List_Nil;
	}
	var _v1 = _v0.b.a;
	return _List_fromArray(
		[
			A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['You can replace this call by an empty string.']),
				bx: 'Using String.right on an empty string will result in an empty string'
			},
			checkInfo.a,
			_List_fromArray(
				[
					A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '\"\"')
				]))
		]);
};
var $jfmengels$elm_review_simplify$Simplify$stringSliceChecks = function (checkInfo) {
	var _v0 = _Utils_Tuple2(
		$jfmengels$elm_review_simplify$Simplify$secondArg(checkInfo),
		$jfmengels$elm_review_simplify$Simplify$thirdArg(checkInfo));
	_v0$0:
	while (true) {
		if (!_v0.a.$) {
			if (((!_v0.b.$) && (_v0.b.a.b.$ === 11)) && (_v0.b.a.b.a === '')) {
				break _v0$0;
			} else {
				if ((_v0.a.a.b.$ === 7) && (!_v0.a.a.b.a)) {
					var _v2 = _v0.a.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['You can replace this call by an empty string.']),
								bx: 'Using String.slice with end index 0 will result in an empty string'
							},
							checkInfo.a,
							A4(
								$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString,
								checkInfo.b,
								$jfmengels$elm_review_simplify$Simplify$thirdArg(checkInfo),
								checkInfo))
						]);
				} else {
					var end = _v0.a.a;
					return A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$withDefault,
							A3(
								$jfmengels$elm_review_simplify$Simplify$Normalize$areAllTheSame,
								checkInfo,
								checkInfo.c,
								_List_fromArray(
									[end])) ? $elm$core$Maybe$Just(
								_List_fromArray(
									[
										A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										{
											eq: _List_fromArray(
												['You can replace this call by an empty string.']),
											bx: 'Using String.slice with equal start and end index will result in an empty string'
										},
										checkInfo.a,
										A4(
											$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
											$jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString,
											checkInfo.b,
											$jfmengels$elm_review_simplify$Simplify$thirdArg(checkInfo),
											checkInfo))
									])) : $elm$core$Maybe$Nothing,
							A3(
								$elm$core$Maybe$map2,
								F2(
									function (startInt, endInt) {
										return ((_Utils_cmp(startInt, endInt) > -1) && (((_Utils_cmp(startInt, -1) < 1) && (_Utils_cmp(endInt, -1) < 1)) || ((startInt >= 0) && (endInt >= 0)))) ? $elm$core$Maybe$Just(
											_List_fromArray(
												[
													A3(
													$jfmengels$elm_review$Review$Rule$errorWithFix,
													{
														eq: _List_fromArray(
															['You can replace this slice operation by \"\".']),
														bx: 'The call to String.slice will result in \"\"'
													},
													checkInfo.a,
													A4(
														$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
														$jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString,
														checkInfo.b,
														$jfmengels$elm_review_simplify$Simplify$thirdArg(checkInfo),
														checkInfo))
												])) : $elm$core$Maybe$Nothing;
									}),
								A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getInt, checkInfo, checkInfo.c),
								A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getInt, checkInfo, end))));
				}
			}
		} else {
			if (((!_v0.b.$) && (_v0.b.a.b.$ === 11)) && (_v0.b.a.b.a === '')) {
				break _v0$0;
			} else {
				var _v3 = _v0.a;
				return _List_Nil;
			}
		}
	}
	var _v1 = _v0.b.a;
	return _List_fromArray(
		[
			A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['You can replace this call by an empty string.']),
				bx: 'Using String.slice on an empty string will result in an empty string'
			},
			checkInfo.a,
			A4(
				$jfmengels$elm_review_simplify$Simplify$replaceByEmptyFix,
				$jfmengels$elm_review_simplify$Simplify$AstHelpers$emptyStringAsString,
				checkInfo.b,
				$jfmengels$elm_review_simplify$Simplify$thirdArg(checkInfo),
				checkInfo))
		]);
};
var $jfmengels$elm_review_simplify$Simplify$stringWordsChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
	if ((_v0.$ === 11) && (_v0.a === '')) {
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['You can replace this call by an empty list.']),
					bx: 'Using String.words on an empty string will result in an empty list'
				},
				checkInfo.a,
				_List_fromArray(
					[
						A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, checkInfo.b, '[]')
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$subAndCmdBatchChecks = F2(function $jfmengels$elm_review_simplify$Simplify$subAndCmdBatchChecks$fn(moduleName, checkInfo) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.c);
		if (_v0.$ === 19) {
			if (!_v0.a.b) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								[moduleName + ('.batch [] and ' + (moduleName + '.none are equivalent but the latter is more idiomatic in Elm code'))]),
							bx: 'Replace by ' + (moduleName + '.batch')
						},
						checkInfo.a,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								checkInfo.b,
								$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
									A2(
										$jfmengels$elm_review_simplify$Simplify$qualify,
										_Utils_Tuple2(
											_List_fromArray(
												['Platform', moduleName]),
											'none'),
										checkInfo)))
							]))
					]);
			} else {
				if (!_v0.a.b.b) {
					var _v1 = _v0.a;
					var listElement = _v1.a;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									[moduleName + '.batch with a single element is equal to that element.']),
								bx: 'Unnecessary ' + (moduleName + '.batch')
							},
							checkInfo.a,
							A2($jfmengels$elm_review_simplify$Simplify$replaceBySubExpressionFix, checkInfo.b, listElement))
						]);
				} else {
					var args = _v0.a;
					return A2(
						$elm$core$List$filterMap,
						function (_v2) {
							var prev = _v2.a;
							var arg = _v2.b;
							var next = _v2.c;
							var _v3 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(arg);
							if ((_v3.b.$ === 3) && (_v3.b.b === 'none')) {
								var batchRange = _v3.a;
								var _v4 = _v3.b;
								return _Utils_eq(
									A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, checkInfo.s, batchRange),
									$elm$core$Maybe$Just(
										_List_fromArray(
											['Platform', moduleName]))) ? $elm$core$Maybe$Just(
									A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										{
											eq: _List_fromArray(
												[moduleName + ('.none will be ignored by ' + (moduleName + '.batch.'))]),
											bx: 'Unnecessary ' + (moduleName + '.none')
										},
										$stil4m$elm_syntax$Elm$Syntax$Node$range(arg),
										function () {
											if (!prev.$) {
												var prevRange = prev.a;
												return _List_fromArray(
													[
														$jfmengels$elm_review$Review$Fix$removeRange(
														{
															c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).c4,
															dv: prevRange.c4
														})
													]);
											} else {
												if (!next.$) {
													var nextRange = next.a;
													return _List_fromArray(
														[
															$jfmengels$elm_review$Review$Fix$removeRange(
															{
																c4: nextRange.dv,
																dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(arg).dv
															})
														]);
												} else {
													return _List_fromArray(
														[
															A2(
															$jfmengels$elm_review$Review$Fix$replaceRangeBy,
															checkInfo.b,
															$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
																A2(
																	$jfmengels$elm_review_simplify$Simplify$qualify,
																	_Utils_Tuple2(
																		_List_fromArray(
																			['Platform', moduleName]),
																		'none'),
																	checkInfo)))
														]);
												}
											}
										}())) : $elm$core$Maybe$Nothing;
							} else {
								return $elm$core$Maybe$Nothing;
							}
						},
						A4(
							$elm$core$List$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$List$cons,
								$elm$core$Maybe$Nothing,
								A2(
									$elm$core$List$map,
									A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$range, $elm$core$Maybe$Just),
									args)),
							args,
							_Utils_ap(
								A2(
									$elm$core$List$map,
									A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$range, $elm$core$Maybe$Just),
									A2($elm$core$List$drop, 1, args)),
								_List_fromArray(
									[$elm$core$Maybe$Nothing]))));
				}
			}
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$subCollection = {
	aP: function (resources) {
		return $jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
			A2(
				$jfmengels$elm_review_simplify$Simplify$qualify,
				_Utils_Tuple2(
					_List_fromArray(
						['Platform', 'Sub']),
					'none'),
				resources));
	},
	Y: 'Sub.none',
	aS: A2(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$isSpecificValueOrFunction,
		_List_fromArray(
			['Platform', 'Sub']),
		'none'),
	eY: 'Sub',
	B: 'subscription'
};
var $jfmengels$elm_review_simplify$Simplify$functionCallChecks = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Basics']),
				'identity'),
			$jfmengels$elm_review_simplify$Simplify$basicsIdentityChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Basics']),
				'always'),
			$jfmengels$elm_review_simplify$Simplify$basicsAlwaysChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Basics']),
				'not'),
			$jfmengels$elm_review_simplify$Simplify$basicsNotChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Basics']),
				'negate'),
			$jfmengels$elm_review_simplify$Simplify$basicsNegateChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Maybe']),
				'map'),
			$jfmengels$elm_review_simplify$Simplify$maybeMapChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Maybe']),
				'andThen'),
			$jfmengels$elm_review_simplify$Simplify$maybeAndThenChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Maybe']),
				'withDefault'),
			$jfmengels$elm_review_simplify$Simplify$maybeWithDefaultChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Result']),
				'map'),
			$jfmengels$elm_review_simplify$Simplify$resultMapChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Result']),
				'mapError'),
			$jfmengels$elm_review_simplify$Simplify$resultMapErrorChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Result']),
				'andThen'),
			$jfmengels$elm_review_simplify$Simplify$resultAndThenChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Result']),
				'withDefault'),
			$jfmengels$elm_review_simplify$Simplify$resultWithDefaultChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Result']),
				'toMaybe'),
			$jfmengels$elm_review_simplify$Simplify$resultToMaybeChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'append'),
			$jfmengels$elm_review_simplify$Simplify$listAppendChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'head'),
			$jfmengels$elm_review_simplify$Simplify$listHeadChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'tail'),
			$jfmengels$elm_review_simplify$Simplify$listTailChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'member'),
			$jfmengels$elm_review_simplify$Simplify$listMemberChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'map'),
			$jfmengels$elm_review_simplify$Simplify$listMapChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'filter'),
			$jfmengels$elm_review_simplify$Simplify$collectionFilterChecks($jfmengels$elm_review_simplify$Simplify$listCollection)),
			$jfmengels$elm_review_simplify$Simplify$reportEmptyListSecondArgument(
			_Utils_Tuple2(
				_Utils_Tuple2(
					_List_fromArray(
						['List']),
					'filterMap'),
				$jfmengels$elm_review_simplify$Simplify$listFilterMapChecks)),
			$jfmengels$elm_review_simplify$Simplify$reportEmptyListFirstArgument(
			_Utils_Tuple2(
				_Utils_Tuple2(
					_List_fromArray(
						['List']),
					'concat'),
				$jfmengels$elm_review_simplify$Simplify$listConcatChecks)),
			$jfmengels$elm_review_simplify$Simplify$reportEmptyListSecondArgument(
			_Utils_Tuple2(
				_Utils_Tuple2(
					_List_fromArray(
						['List']),
					'concatMap'),
				$jfmengels$elm_review_simplify$Simplify$listConcatMapChecks)),
			$jfmengels$elm_review_simplify$Simplify$reportEmptyListSecondArgument(
			_Utils_Tuple2(
				_Utils_Tuple2(
					_List_fromArray(
						['List']),
					'indexedMap'),
				$jfmengels$elm_review_simplify$Simplify$listIndexedMapChecks)),
			$jfmengels$elm_review_simplify$Simplify$reportEmptyListSecondArgument(
			_Utils_Tuple2(
				_Utils_Tuple2(
					_List_fromArray(
						['List']),
					'intersperse'),
				function (_v0) {
					return _List_Nil;
				})),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'sum'),
			$jfmengels$elm_review_simplify$Simplify$listSumChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'product'),
			$jfmengels$elm_review_simplify$Simplify$listProductChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'minimum'),
			$jfmengels$elm_review_simplify$Simplify$listMinimumChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'maximum'),
			$jfmengels$elm_review_simplify$Simplify$listMaximumChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'foldl'),
			$jfmengels$elm_review_simplify$Simplify$listFoldlChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'foldr'),
			$jfmengels$elm_review_simplify$Simplify$listFoldrChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'all'),
			$jfmengels$elm_review_simplify$Simplify$listAllChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'any'),
			$jfmengels$elm_review_simplify$Simplify$listAnyChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'range'),
			$jfmengels$elm_review_simplify$Simplify$listRangeChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'length'),
			$jfmengels$elm_review_simplify$Simplify$collectionSizeChecks($jfmengels$elm_review_simplify$Simplify$listCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'repeat'),
			$jfmengels$elm_review_simplify$Simplify$listRepeatChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'isEmpty'),
			$jfmengels$elm_review_simplify$Simplify$collectionIsEmptyChecks($jfmengels$elm_review_simplify$Simplify$listCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'partition'),
			$jfmengels$elm_review_simplify$Simplify$collectionPartitionChecks($jfmengels$elm_review_simplify$Simplify$listCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'reverse'),
			$jfmengels$elm_review_simplify$Simplify$listReverseChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'sort'),
			$jfmengels$elm_review_simplify$Simplify$listSortChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'sortBy'),
			$jfmengels$elm_review_simplify$Simplify$listSortByChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'sortWith'),
			$jfmengels$elm_review_simplify$Simplify$listSortWithChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'take'),
			$jfmengels$elm_review_simplify$Simplify$listTakeChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'drop'),
			$jfmengels$elm_review_simplify$Simplify$listDropChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'map2'),
			$jfmengels$elm_review_simplify$Simplify$listMapNChecks(
				{d6: 2})),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'map3'),
			$jfmengels$elm_review_simplify$Simplify$listMapNChecks(
				{d6: 3})),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'map4'),
			$jfmengels$elm_review_simplify$Simplify$listMapNChecks(
				{d6: 4})),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'map5'),
			$jfmengels$elm_review_simplify$Simplify$listMapNChecks(
				{d6: 5})),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['List']),
				'unzip'),
			$jfmengels$elm_review_simplify$Simplify$listUnzipChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'map'),
			$jfmengels$elm_review_simplify$Simplify$collectionMapChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'filter'),
			$jfmengels$elm_review_simplify$Simplify$collectionFilterChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'remove'),
			$jfmengels$elm_review_simplify$Simplify$collectionRemoveChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'isEmpty'),
			$jfmengels$elm_review_simplify$Simplify$collectionIsEmptyChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'size'),
			$jfmengels$elm_review_simplify$Simplify$collectionSizeChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'member'),
			$jfmengels$elm_review_simplify$Simplify$collectionMemberChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'fromList'),
			$jfmengels$elm_review_simplify$Simplify$setFromListChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'toList'),
			$jfmengels$elm_review_simplify$Simplify$collectionToListChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'partition'),
			$jfmengels$elm_review_simplify$Simplify$collectionPartitionChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'intersect'),
			$jfmengels$elm_review_simplify$Simplify$collectionIntersectChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'diff'),
			$jfmengels$elm_review_simplify$Simplify$collectionDiffChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'union'),
			$jfmengels$elm_review_simplify$Simplify$collectionUnionChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				'insert'),
			$jfmengels$elm_review_simplify$Simplify$collectionInsertChecks($jfmengels$elm_review_simplify$Simplify$setCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Dict']),
				'isEmpty'),
			$jfmengels$elm_review_simplify$Simplify$collectionIsEmptyChecks($jfmengels$elm_review_simplify$Simplify$dictCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Dict']),
				'fromList'),
			$jfmengels$elm_review_simplify$Simplify$collectionFromListChecks($jfmengels$elm_review_simplify$Simplify$dictCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Dict']),
				'toList'),
			$jfmengels$elm_review_simplify$Simplify$collectionToListChecks($jfmengels$elm_review_simplify$Simplify$dictCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Dict']),
				'size'),
			$jfmengels$elm_review_simplify$Simplify$collectionSizeChecks($jfmengels$elm_review_simplify$Simplify$dictCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Dict']),
				'member'),
			$jfmengels$elm_review_simplify$Simplify$collectionMemberChecks($jfmengels$elm_review_simplify$Simplify$dictCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Dict']),
				'partition'),
			$jfmengels$elm_review_simplify$Simplify$collectionPartitionChecks($jfmengels$elm_review_simplify$Simplify$dictCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'fromList'),
			$jfmengels$elm_review_simplify$Simplify$stringFromListChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'isEmpty'),
			$jfmengels$elm_review_simplify$Simplify$stringIsEmptyChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'concat'),
			$jfmengels$elm_review_simplify$Simplify$stringConcatChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'join'),
			$jfmengels$elm_review_simplify$Simplify$stringJoinChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'length'),
			$jfmengels$elm_review_simplify$Simplify$stringLengthChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'repeat'),
			$jfmengels$elm_review_simplify$Simplify$stringRepeatChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'replace'),
			$jfmengels$elm_review_simplify$Simplify$stringReplaceChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'words'),
			$jfmengels$elm_review_simplify$Simplify$stringWordsChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'lines'),
			$jfmengels$elm_review_simplify$Simplify$stringLinesChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'reverse'),
			$jfmengels$elm_review_simplify$Simplify$stringReverseChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'slice'),
			$jfmengels$elm_review_simplify$Simplify$stringSliceChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'left'),
			$jfmengels$elm_review_simplify$Simplify$stringLeftChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['String']),
				'right'),
			$jfmengels$elm_review_simplify$Simplify$stringRightChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Platform', 'Cmd']),
				'batch'),
			$jfmengels$elm_review_simplify$Simplify$subAndCmdBatchChecks('Cmd')),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Platform', 'Cmd']),
				'map'),
			$jfmengels$elm_review_simplify$Simplify$collectionMapChecks($jfmengels$elm_review_simplify$Simplify$cmdCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Platform', 'Sub']),
				'batch'),
			$jfmengels$elm_review_simplify$Simplify$subAndCmdBatchChecks('Sub')),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Platform', 'Sub']),
				'map'),
			$jfmengels$elm_review_simplify$Simplify$collectionMapChecks($jfmengels$elm_review_simplify$Simplify$subCollection)),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Json', 'Decode']),
				'oneOf'),
			$jfmengels$elm_review_simplify$Simplify$oneOfChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Html', 'Attributes']),
				'classList'),
			$jfmengels$elm_review_simplify$Simplify$htmlAttributesClassListChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Parser']),
				'oneOf'),
			$jfmengels$elm_review_simplify$Simplify$oneOfChecks),
			_Utils_Tuple2(
			_Utils_Tuple2(
				_List_fromArray(
					['Parser', 'Advanced']),
				'oneOf'),
			$jfmengels$elm_review_simplify$Simplify$oneOfChecks)
		]));
var $jfmengels$elm_review_simplify$Simplify$Infer$NotEquals = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$NotEquals$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$Or = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$Or$fn(a, b) {
		return {$: 2, a: a, b: b};
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$Equals = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$Equals$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$convertToFact = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$convertToFact$fn(expr, shouldBe) {
		return shouldBe ? _List_fromArray(
			[
				A2($jfmengels$elm_review_simplify$Simplify$Infer$Equals, expr, $jfmengels$elm_review_simplify$Simplify$Infer$trueExpr),
				A2($jfmengels$elm_review_simplify$Simplify$Infer$NotEquals, expr, $jfmengels$elm_review_simplify$Simplify$Infer$falseExpr)
			]) : _List_fromArray(
			[
				A2($jfmengels$elm_review_simplify$Simplify$Infer$Equals, expr, $jfmengels$elm_review_simplify$Simplify$Infer$falseExpr),
				A2($jfmengels$elm_review_simplify$Simplify$Infer$NotEquals, expr, $jfmengels$elm_review_simplify$Simplify$Infer$trueExpr)
			]);
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$DFalse = {$: 1};
var $jfmengels$elm_review_simplify$Simplify$Infer$DNumber = function (a) {
	return {$: 2, a: a};
};
var $jfmengels$elm_review_simplify$Simplify$Infer$DString = function (a) {
	return {$: 3, a: a};
};
var $jfmengels$elm_review_simplify$Simplify$Infer$DTrue = {$: 0};
var $jfmengels$elm_review_simplify$Simplify$Infer$expressionToDeduced = function (expression) {
	_v0$4:
	while (true) {
		switch (expression.$) {
			case 3:
				if ((expression.a.b && (expression.a.a === 'Basics')) && (!expression.a.b.b)) {
					switch (expression.b) {
						case 'True':
							var _v1 = expression.a;
							return $elm$core$Maybe$Just($jfmengels$elm_review_simplify$Simplify$Infer$DTrue);
						case 'False':
							var _v2 = expression.a;
							return $elm$core$Maybe$Just($jfmengels$elm_review_simplify$Simplify$Infer$DFalse);
						default:
							break _v0$4;
					}
				} else {
					break _v0$4;
				}
			case 9:
				var _float = expression.a;
				return $elm$core$Maybe$Just(
					$jfmengels$elm_review_simplify$Simplify$Infer$DNumber(_float));
			case 11:
				var string = expression.a;
				return $elm$core$Maybe$Just(
					$jfmengels$elm_review_simplify$Simplify$Infer$DString(string));
			default:
				break _v0$4;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $jfmengels$elm_review_simplify$Simplify$Infer$areCompatible = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$areCompatible$fn(value, factValue) {
		var _v0 = _Utils_Tuple2(value, factValue);
		_v0$4:
		while (true) {
			switch (_v0.a.$) {
				case 0:
					if (((((_v0.b.$ === 3) && _v0.b.a.b) && (_v0.b.a.a === 'Basics')) && (!_v0.b.a.b.b)) && (_v0.b.b === 'True')) {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						var _v3 = _v2.a;
						return true;
					} else {
						break _v0$4;
					}
				case 1:
					if (((((_v0.b.$ === 3) && _v0.b.a.b) && (_v0.b.a.a === 'Basics')) && (!_v0.b.a.b.b)) && (_v0.b.b === 'False')) {
						var _v4 = _v0.a;
						var _v5 = _v0.b;
						var _v6 = _v5.a;
						return true;
					} else {
						break _v0$4;
					}
				case 2:
					if (_v0.b.$ === 9) {
						var valueFloat = _v0.a.a;
						var factFloat = _v0.b.a;
						return _Utils_eq(valueFloat, factFloat);
					} else {
						break _v0$4;
					}
				default:
					if (_v0.b.$ === 11) {
						var valueString = _v0.a.a;
						var factString = _v0.b.a;
						return _Utils_eq(valueString, factString);
					} else {
						break _v0$4;
					}
			}
		}
		return false;
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$areIncompatible = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$areIncompatible$fn(value, factValue) {
		var _v0 = _Utils_Tuple2(value, factValue);
		_v0$4:
		while (true) {
			switch (_v0.a.$) {
				case 0:
					if (((((_v0.b.$ === 3) && _v0.b.a.b) && (_v0.b.a.a === 'Basics')) && (!_v0.b.a.b.b)) && (_v0.b.b === 'False')) {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						var _v3 = _v2.a;
						return true;
					} else {
						break _v0$4;
					}
				case 1:
					if (((((_v0.b.$ === 3) && _v0.b.a.b) && (_v0.b.a.a === 'Basics')) && (!_v0.b.a.b.b)) && (_v0.b.b === 'True')) {
						var _v4 = _v0.a;
						var _v5 = _v0.b;
						var _v6 = _v5.a;
						return true;
					} else {
						break _v0$4;
					}
				case 2:
					if (_v0.b.$ === 9) {
						var valueFloat = _v0.a.a;
						var factFloat = _v0.b.a;
						return !_Utils_eq(valueFloat, factFloat);
					} else {
						break _v0$4;
					}
				default:
					if (_v0.b.$ === 11) {
						var valueString = _v0.a.a;
						var factString = _v0.b.a;
						return !_Utils_eq(valueString, factString);
					} else {
						break _v0$4;
					}
			}
		}
		return false;
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$ifSatisfy = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$ifSatisfy$fn(_v0, _v1) {
		var target = _v0.a;
		var value = _v0.b;
		var targetFact = _v1.a;
		var otherFact = _v1.b;
		switch (targetFact.$) {
			case 0:
				var factTarget = targetFact.a;
				var factValue = targetFact.b;
				return (_Utils_eq(factTarget, target) && A2($jfmengels$elm_review_simplify$Simplify$Infer$areIncompatible, value, factValue)) ? $elm$core$Maybe$Just(otherFact) : $elm$core$Maybe$Nothing;
			case 1:
				var factTarget = targetFact.a;
				var factValue = targetFact.b;
				return (_Utils_eq(factTarget, target) && A2($jfmengels$elm_review_simplify$Simplify$Infer$areCompatible, value, factValue)) ? $elm$core$Maybe$Just(otherFact) : $elm$core$Maybe$Nothing;
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$mergeEqualFacts = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$mergeEqualFacts$fn(equalFact, fact) {
		if (fact.$ === 2) {
			var left = fact.a;
			var right = fact.b;
			return $elm$core$List$concat(
				A2(
					$elm$core$List$filterMap,
					$jfmengels$elm_review_simplify$Simplify$Infer$ifSatisfy(equalFact),
					_Utils_ap(
						A2(
							$elm$core$List$map,
							function (cond) {
								return _Utils_Tuple2(cond, right);
							},
							left),
						A2(
							$elm$core$List$map,
							function (cond) {
								return _Utils_Tuple2(cond, left);
							},
							right))));
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$deduceNewFacts = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$deduceNewFacts$fn(newFact, facts) {
		switch (newFact.$) {
			case 0:
				var factTarget = newFact.a;
				var factValue = newFact.b;
				var _v1 = $jfmengels$elm_review_simplify$Simplify$Infer$expressionToDeduced(factValue);
				if (!_v1.$) {
					var value = _v1.a;
					return A2(
						$elm$core$List$concatMap,
						$jfmengels$elm_review_simplify$Simplify$Infer$mergeEqualFacts(
							_Utils_Tuple2(factTarget, value)),
						facts);
				} else {
					return _List_fromArray(
						[
							A2($jfmengels$elm_review_simplify$Simplify$Infer$Equals, factValue, factTarget)
						]);
				}
			case 1:
				return _List_Nil;
			default:
				return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$equalsFact = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$equalsFact$fn(a, b) {
		var _v0 = $jfmengels$elm_review_simplify$Simplify$Infer$expressionToDeduced(a);
		if (!_v0.$) {
			var deducedValue = _v0.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(b, deducedValue));
		} else {
			var _v1 = $jfmengels$elm_review_simplify$Simplify$Infer$expressionToDeduced(b);
			if (!_v1.$) {
				var deducedValue = _v1.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, deducedValue));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $pzp1997$assoc_list$AssocList$remove = F2(function $pzp1997$assoc_list$AssocList$remove$fn(targetKey, _v0) {
		var alist = _v0;
		return A2(
			$elm$core$List$filter,
			function (_v1) {
				var key = _v1.a;
				return !_Utils_eq(key, targetKey);
			},
			alist);
	});
var $pzp1997$assoc_list$AssocList$insert = F3(function $pzp1997$assoc_list$AssocList$insert$fn(key, value, dict) {
		var _v0 = A2($pzp1997$assoc_list$AssocList$remove, key, dict);
		var alteredAlist = _v0;
		return A2(
			$elm$core$List$cons,
			_Utils_Tuple2(key, value),
			alteredAlist);
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$notDeduced = function (_v0) {
	var a = _v0.a;
	var deducedValue = _v0.b;
	switch (deducedValue.$) {
		case 0:
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(a, $jfmengels$elm_review_simplify$Simplify$Infer$DFalse));
		case 1:
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(a, $jfmengels$elm_review_simplify$Simplify$Infer$DTrue));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review_simplify$Simplify$Infer$injectFacts = F2(function $jfmengels$elm_review_simplify$Simplify$Infer$injectFacts$fn(newFacts, _v0) {
		injectFacts:
		while (true) {
			var inferred = _v0;
			if (!newFacts.b) {
				return inferred;
			} else {
				var newFact = newFacts.a;
				var restOfFacts = newFacts.b;
				if (A2($elm$core$List$member, newFact, inferred.ir)) {
					var $temp$newFacts = restOfFacts,
						$temp$_v0 = inferred;
					newFacts = $temp$newFacts;
					_v0 = $temp$_v0;
					continue injectFacts;
				} else {
					var newFactsToVisit = A2($jfmengels$elm_review_simplify$Simplify$Infer$deduceNewFacts, newFact, inferred.ir);
					var deducedFromNewFact = function () {
						switch (newFact.$) {
							case 0:
								var a = newFact.a;
								var b = newFact.b;
								return A2($jfmengels$elm_review_simplify$Simplify$Infer$equalsFact, a, b);
							case 1:
								var a = newFact.a;
								var b = newFact.b;
								return A2(
									$elm$core$Maybe$andThen,
									$jfmengels$elm_review_simplify$Simplify$Infer$notDeduced,
									A2($jfmengels$elm_review_simplify$Simplify$Infer$equalsFact, a, b));
							default:
								return $elm$core$Maybe$Nothing;
						}
					}();
					var $temp$newFacts = _Utils_ap(newFactsToVisit, restOfFacts),
						$temp$_v0 = {
						cb: function () {
							if (!deducedFromNewFact.$) {
								var _v3 = deducedFromNewFact.a;
								var a = _v3.a;
								var b = _v3.b;
								return A3($pzp1997$assoc_list$AssocList$insert, a, b, inferred.cb);
							} else {
								return inferred.cb;
							}
						}(),
						ir: A2($elm$core$List$cons, newFact, inferred.ir)
					};
					newFacts = $temp$newFacts;
					_v0 = $temp$_v0;
					continue injectFacts;
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$inferOnEquality = F4(function $jfmengels$elm_review_simplify$Simplify$Infer$inferOnEquality$fn(_v0, _v1, shouldBe, dict) {
		var expr = _v0.b;
		var other = _v1.b;
		_v2$5:
		while (true) {
			switch (expr.$) {
				case 7:
					var _int = expr.a;
					return shouldBe ? A2(
						$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review_simplify$Simplify$Infer$Equals,
								other,
								$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(_int))
							]),
						dict) : A2(
						$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review_simplify$Simplify$Infer$NotEquals,
								other,
								$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(_int))
							]),
						dict);
				case 9:
					var _float = expr.a;
					return shouldBe ? A2(
						$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review_simplify$Simplify$Infer$Equals,
								other,
								$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(_float))
							]),
						dict) : A2(
						$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review_simplify$Simplify$Infer$NotEquals,
								other,
								$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(_float))
							]),
						dict);
				case 11:
					var str = expr.a;
					return shouldBe ? A2(
						$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review_simplify$Simplify$Infer$Equals,
								other,
								$stil4m$elm_syntax$Elm$Syntax$Expression$Literal(str))
							]),
						dict) : A2(
						$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review_simplify$Simplify$Infer$NotEquals,
								other,
								$stil4m$elm_syntax$Elm$Syntax$Expression$Literal(str))
							]),
						dict);
				case 3:
					if ((expr.a.b && (expr.a.a === 'Basics')) && (!expr.a.b.b)) {
						switch (expr.b) {
							case 'True':
								var _v3 = expr.a;
								return A2(
									$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
									_List_fromArray(
										[
											A2(
											$jfmengels$elm_review_simplify$Simplify$Infer$Equals,
											other,
											shouldBe ? $jfmengels$elm_review_simplify$Simplify$Infer$trueExpr : $jfmengels$elm_review_simplify$Simplify$Infer$falseExpr)
										]),
									dict);
							case 'False':
								var _v4 = expr.a;
								return A2(
									$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
									_List_fromArray(
										[
											A2(
											$jfmengels$elm_review_simplify$Simplify$Infer$Equals,
											other,
											shouldBe ? $jfmengels$elm_review_simplify$Simplify$Infer$falseExpr : $jfmengels$elm_review_simplify$Simplify$Infer$trueExpr)
										]),
									dict);
							default:
								break _v2$5;
						}
					} else {
						break _v2$5;
					}
				default:
					break _v2$5;
			}
		}
		return dict;
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$infer = F3(function $jfmengels$elm_review_simplify$Simplify$Infer$infer$fn(nodes, shouldBe, acc) {
		return A3(
			$elm$core$List$foldl,
			$jfmengels$elm_review_simplify$Simplify$Infer$inferHelp(shouldBe),
			acc,
			nodes);
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$inferHelp = F3(function $jfmengels$elm_review_simplify$Simplify$Infer$inferHelp$fn(shouldBe, node, acc) {
		inferHelp:
		while (true) {
			var dict = A2(
				$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
				A2($jfmengels$elm_review_simplify$Simplify$Infer$convertToFact, node, shouldBe),
				acc);
			_v0$5:
			while (true) {
				switch (node.$) {
					case 1:
						if (((((((node.a.b && (node.a.a.b.$ === 3)) && node.a.a.b.a.b) && (node.a.a.b.a.a === 'Basics')) && (!node.a.a.b.a.b.b)) && (node.a.a.b.b === 'not')) && node.a.b.b) && (!node.a.b.b.b)) {
							var _v1 = node.a;
							var _v2 = _v1.a;
							var _v3 = _v2.b;
							var _v4 = _v3.a;
							var _v5 = _v1.b;
							var expression = _v5.a;
							var $temp$shouldBe = !shouldBe,
								$temp$node = $stil4m$elm_syntax$Elm$Syntax$Node$value(expression),
								$temp$acc = dict;
							shouldBe = $temp$shouldBe;
							node = $temp$node;
							acc = $temp$acc;
							continue inferHelp;
						} else {
							break _v0$5;
						}
					case 2:
						switch (node.a) {
							case '&&':
								var _v6 = node.c;
								var left = _v6.b;
								var _v7 = node.d;
								var right = _v7.b;
								return shouldBe ? A3(
									$jfmengels$elm_review_simplify$Simplify$Infer$infer,
									_List_fromArray(
										[left, right]),
									shouldBe,
									dict) : A2(
									$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
									_List_fromArray(
										[
											A2(
											$jfmengels$elm_review_simplify$Simplify$Infer$Or,
											A2($jfmengels$elm_review_simplify$Simplify$Infer$convertToFact, left, false),
											A2($jfmengels$elm_review_simplify$Simplify$Infer$convertToFact, right, false))
										]),
									dict);
							case '||':
								var _v8 = node.c;
								var left = _v8.b;
								var _v9 = node.d;
								var right = _v9.b;
								return shouldBe ? A2(
									$jfmengels$elm_review_simplify$Simplify$Infer$injectFacts,
									_List_fromArray(
										[
											A2(
											$jfmengels$elm_review_simplify$Simplify$Infer$Or,
											A2($jfmengels$elm_review_simplify$Simplify$Infer$convertToFact, left, true),
											A2($jfmengels$elm_review_simplify$Simplify$Infer$convertToFact, right, true))
										]),
									dict) : A3(
									$jfmengels$elm_review_simplify$Simplify$Infer$infer,
									_List_fromArray(
										[left, right]),
									shouldBe,
									dict);
							case '==':
								var inf = node.b;
								var left = node.c;
								var right = node.d;
								return A4(
									$jfmengels$elm_review_simplify$Simplify$Infer$inferOnEquality,
									right,
									left,
									shouldBe,
									A4(
										$jfmengels$elm_review_simplify$Simplify$Infer$inferOnEquality,
										left,
										right,
										shouldBe,
										(shouldBe ? $jfmengels$elm_review_simplify$Simplify$Infer$injectFacts(
											_List_fromArray(
												[
													A2(
													$jfmengels$elm_review_simplify$Simplify$Infer$NotEquals,
													A4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication, '/=', inf, left, right),
													$jfmengels$elm_review_simplify$Simplify$Infer$trueExpr)
												])) : $elm$core$Basics$identity)(dict)));
							case '/=':
								var inf = node.b;
								var left = node.c;
								var right = node.d;
								return A4(
									$jfmengels$elm_review_simplify$Simplify$Infer$inferOnEquality,
									right,
									left,
									!shouldBe,
									A4(
										$jfmengels$elm_review_simplify$Simplify$Infer$inferOnEquality,
										left,
										right,
										!shouldBe,
										(shouldBe ? $jfmengels$elm_review_simplify$Simplify$Infer$injectFacts(
											_List_fromArray(
												[
													A2(
													$jfmengels$elm_review_simplify$Simplify$Infer$NotEquals,
													A4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication, '==', inf, left, right),
													$jfmengels$elm_review_simplify$Simplify$Infer$trueExpr)
												])) : $elm$core$Basics$identity)(dict)));
							default:
								break _v0$5;
						}
					default:
						break _v0$5;
				}
			}
			return dict;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$Infer$inferForIfCondition = F3(function $jfmengels$elm_review_simplify$Simplify$Infer$inferForIfCondition$fn(condition, _v0, inferred) {
		var trueBranchRange = _v0.jk;
		var falseBranchRange = _v0.is;
		return _List_fromArray(
			[
				_Utils_Tuple2(
				trueBranchRange,
				A3(
					$jfmengels$elm_review_simplify$Simplify$Infer$infer,
					_List_fromArray(
						[condition]),
					true,
					inferred)),
				_Utils_Tuple2(
				falseBranchRange,
				A3(
					$jfmengels$elm_review_simplify$Simplify$Infer$infer,
					_List_fromArray(
						[condition]),
					false,
					inferred))
			]);
	});
var $jfmengels$elm_review_simplify$Simplify$onlyErrors = function (errors) {
	return {bO: errors, I: _List_Nil, cL: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty, aW: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty};
};
var $jfmengels$elm_review_simplify$Simplify$targetIfKeyword = function (_v0) {
	var start = _v0.dv;
	return {
		c4: _Utils_update(
			start,
			{bH: start.bH + 2}),
		dv: start
	};
};
var $jfmengels$elm_review_simplify$Simplify$ifChecks = F3(function $jfmengels$elm_review_simplify$Simplify$ifChecks$fn(context, nodeRange, _v0) {
		var condition = _v0.gy;
		var trueBranch = _v0.hU;
		var falseBranch = _v0.gU;
		var _v1 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, context, condition);
		if (!_v1.$) {
			if (_v1.a) {
				return A2(
					$jfmengels$elm_review_simplify$Simplify$errorsAndRangesToIgnore,
					_List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['The expression can be replaced by what is inside the \'then\' branch.']),
								bx: 'The condition will always evaluate to True'
							},
							$jfmengels$elm_review_simplify$Simplify$targetIfKeyword(nodeRange),
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(
									{
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(trueBranch).dv,
										dv: nodeRange.dv
									}),
									$jfmengels$elm_review$Review$Fix$removeRange(
									{
										c4: nodeRange.c4,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(trueBranch).c4
									})
								]))
						]),
					A2(
						$jfmengels$elm_review_simplify$Simplify$RangeDict$singleton,
						$stil4m$elm_syntax$Elm$Syntax$Node$range(condition),
						0));
			} else {
				return A2(
					$jfmengels$elm_review_simplify$Simplify$errorsAndRangesToIgnore,
					_List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['The expression can be replaced by what is inside the \'else\' branch.']),
								bx: 'The condition will always evaluate to False'
							},
							$jfmengels$elm_review_simplify$Simplify$targetIfKeyword(nodeRange),
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(
									{
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(falseBranch).dv,
										dv: nodeRange.dv
									})
								]))
						]),
					A2(
						$jfmengels$elm_review_simplify$Simplify$RangeDict$singleton,
						$stil4m$elm_syntax$Elm$Syntax$Node$range(condition),
						0));
			}
		} else {
			var _v2 = _Utils_Tuple2(
				A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, context, trueBranch),
				A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, context, falseBranch));
			_v2$2:
			while (true) {
				if (!_v2.a.$) {
					if (_v2.a.a) {
						if ((!_v2.b.$) && (!_v2.b.a)) {
							return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
								_List_fromArray(
									[
										A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										{
											eq: _List_fromArray(
												['The expression can be replaced by the condition.']),
											bx: 'The if expression\'s value is the same as the condition'
										},
										$jfmengels$elm_review_simplify$Simplify$targetIfKeyword(nodeRange),
										_List_fromArray(
											[
												$jfmengels$elm_review$Review$Fix$removeRange(
												{
													c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(condition).dv,
													dv: nodeRange.dv
												}),
												$jfmengels$elm_review$Review$Fix$removeRange(
												{
													c4: nodeRange.c4,
													dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(condition).c4
												})
											]))
									]));
						} else {
							break _v2$2;
						}
					} else {
						if ((!_v2.b.$) && _v2.b.a) {
							return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
								_List_fromArray(
									[
										A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										{
											eq: _List_fromArray(
												['The expression can be replaced by the condition wrapped by `not`.']),
											bx: 'The if expression\'s value is the inverse of the condition'
										},
										$jfmengels$elm_review_simplify$Simplify$targetIfKeyword(nodeRange),
										_List_fromArray(
											[
												A2(
												$jfmengels$elm_review$Review$Fix$replaceRangeBy,
												{
													c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(condition).dv,
													dv: nodeRange.dv
												},
												$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
													A2(
														$jfmengels$elm_review_simplify$Simplify$qualify,
														_Utils_Tuple2(
															_List_fromArray(
																['Basics']),
															'not'),
														context)) + ' ('),
												A2(
												$jfmengels$elm_review$Review$Fix$replaceRangeBy,
												{
													c4: nodeRange.c4,
													dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(condition).c4
												},
												')')
											]))
									]));
						} else {
							break _v2$2;
						}
					}
				} else {
					break _v2$2;
				}
			}
			var _v3 = A3($jfmengels$elm_review_simplify$Simplify$Normalize$compare, context, trueBranch, falseBranch);
			if (!_v3) {
				return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
					_List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['The expression can be replaced by the contents of either branch.']),
								bx: 'The values in both branches is the same.'
							},
							$jfmengels$elm_review_simplify$Simplify$targetIfKeyword(nodeRange),
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(
									{
										c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(trueBranch).dv,
										dv: nodeRange.dv
									}),
									$jfmengels$elm_review$Review$Fix$removeRange(
									{
										c4: nodeRange.c4,
										dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(trueBranch).c4
									})
								]))
						]));
			} else {
				return {
					bO: _List_Nil,
					I: A3(
						$jfmengels$elm_review_simplify$Simplify$Infer$inferForIfCondition,
						$stil4m$elm_syntax$Elm$Syntax$Node$value(
							A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, context, condition)),
						{
							is: $stil4m$elm_syntax$Elm$Syntax$Node$range(falseBranch),
							jk: $stil4m$elm_syntax$Elm$Syntax$Node$range(trueBranch)
						},
						context.I.a),
					cL: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty,
					aW: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty
				};
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$replaceSubExpressionByRecordAccessFix = F2(function $jfmengels$elm_review_simplify$Simplify$replaceSubExpressionByRecordAccessFix$fn(fieldName, _v0) {
		var exprRange = _v0.a;
		var exprValue = _v0.b;
		return $jfmengels$elm_review_simplify$Simplify$needsParens(exprValue) ? _List_fromArray(
			[
				A2($jfmengels$elm_review$Review$Fix$insertAt, exprRange.dv, '('),
				A2($jfmengels$elm_review$Review$Fix$insertAt, exprRange.c4, ').' + fieldName)
			]) : _List_fromArray(
			[
				A2($jfmengels$elm_review$Review$Fix$insertAt, exprRange.c4, '.' + fieldName)
			]);
	});
var $jfmengels$elm_review_simplify$Simplify$injectRecordAccessIntoLetExpression = F3(function $jfmengels$elm_review_simplify$Simplify$injectRecordAccessIntoLetExpression$fn(recordRange, letBody, _v0) {
		var fieldRange = _v0.a;
		var fieldName = _v0.b;
		var removalRange = {c4: fieldRange.c4, dv: recordRange.c4};
		return A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['Accessing the field outside a let/in expression can be simplified to access the field inside it']),
				bx: 'Field access can be simplified'
			},
			removalRange,
			A2(
				$elm$core$List$cons,
				$jfmengels$elm_review$Review$Fix$removeRange(removalRange),
				A2($jfmengels$elm_review_simplify$Simplify$replaceSubExpressionByRecordAccessFix, fieldName, letBody)));
	});
var $jfmengels$elm_review_simplify$Simplify$lastElementRange = function (nodes) {
	lastElementRange:
	while (true) {
		if (!nodes.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!nodes.b.b) {
				var last = nodes.a;
				return $elm$core$Maybe$Just(
					$stil4m$elm_syntax$Elm$Syntax$Node$range(last));
			} else {
				var rest = nodes.b;
				var $temp$nodes = rest;
				nodes = $temp$nodes;
				continue lastElementRange;
			}
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$letKeyWordRange = function (range) {
	return {
		c4: {bH: range.dv.bH + 3, b1: range.dv.b1},
		dv: range.dv
	};
};
var $jfmengels$elm_review_simplify$Simplify$letInChecks = function (letBlock) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(letBlock.eC);
	if (_v0.$ === 15) {
		var letRange = $jfmengels$elm_review_simplify$Simplify$letKeyWordRange(
			$stil4m$elm_syntax$Elm$Syntax$Node$range(letBlock.eC));
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['Let blocks can contain multiple declarations, and there is no advantage to having multiple chained let expressions rather than one longer let expression.']),
					bx: 'Let blocks can be joined together'
				},
				letRange,
				function () {
					var _v1 = $jfmengels$elm_review_simplify$Simplify$lastElementRange(letBlock.gD);
					if (!_v1.$) {
						var lastDeclRange = _v1.a;
						return _List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{c4: letRange.c4, dv: lastDeclRange.c4},
								'\n')
							]);
					} else {
						return _List_Nil;
					}
				}())
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$alwaysSameDetails = _List_fromArray(
	['This condition will always result in the same value. You may have hardcoded a value or mistyped a condition.']);
var $jfmengels$elm_review_simplify$Simplify$unnecessaryDetails = _List_fromArray(
	['A part of this condition is unnecessary. You can remove it and it would not impact the behavior of the program.']);
var $jfmengels$elm_review_simplify$Simplify$unnecessaryMessage = 'Part of the expression is unnecessary';
var $jfmengels$elm_review_simplify$Simplify$and_isLeftSimplifiableError = function (checkInfo) {
	var _v0 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, checkInfo, checkInfo.k);
	if (!_v0.$) {
		if (_v0.a) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{eq: $jfmengels$elm_review_simplify$Simplify$unnecessaryDetails, bx: $jfmengels$elm_review_simplify$Simplify$unnecessaryMessage},
					checkInfo.b,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.i.dv, dv: checkInfo.g.dv})
						]))
				]);
		} else {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{eq: $jfmengels$elm_review_simplify$Simplify$alwaysSameDetails, bx: 'Comparison is always False'},
					checkInfo.b,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.i.c4, dv: checkInfo.g.c4})
						]))
				]);
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$and_isRightSimplifiableError = function (checkInfo) {
	var _v0 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, checkInfo, checkInfo.l);
	if (!_v0.$) {
		if (_v0.a) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{eq: $jfmengels$elm_review_simplify$Simplify$unnecessaryDetails, bx: $jfmengels$elm_review_simplify$Simplify$unnecessaryMessage},
					checkInfo.b,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.i.c4, dv: checkInfo.g.c4})
						]))
				]);
		} else {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{eq: $jfmengels$elm_review_simplify$Simplify$alwaysSameDetails, bx: 'Comparison is always False'},
					checkInfo.b,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.i.dv, dv: checkInfo.g.dv})
						]))
				]);
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$RemoveFrom = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review_simplify$Simplify$rangeAndFixForRedundantCondition = F3(function $jfmengels$elm_review_simplify$Simplify$rangeAndFixForRedundantCondition$fn(redundantConditionResolution, node, qualifyResources) {
		if (!redundantConditionResolution.$) {
			var locationOfPrevElement = redundantConditionResolution.a;
			var range = {
				c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(node).c4,
				dv: locationOfPrevElement
			};
			return _Utils_Tuple2(
				range,
				_List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(range)
					]));
		} else {
			var noopValue = redundantConditionResolution.a;
			var range = $stil4m$elm_syntax$Elm$Syntax$Node$range(node);
			return _Utils_Tuple2(
				range,
				_List_fromArray(
					[
						A2(
						$jfmengels$elm_review$Review$Fix$replaceRangeBy,
						range,
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$qualifiedToString(
							A2(
								$jfmengels$elm_review_simplify$Simplify$qualify,
								_Utils_Tuple2(
									_List_fromArray(
										['Basics']),
									$jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(noopValue)),
								qualifyResources)))
					]));
		}
	});
var $jfmengels$elm_review_simplify$Simplify$errorForRedundantCondition = F4(function $jfmengels$elm_review_simplify$Simplify$errorForRedundantCondition$fn(operator, redundantConditionResolution, node, qualifyResources) {
		var _v0 = A3($jfmengels$elm_review_simplify$Simplify$rangeAndFixForRedundantCondition, redundantConditionResolution, node, qualifyResources);
		var range = _v0.a;
		var fix = _v0.b;
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['This condition is the same as another one found on the left side of the (' + (operator + ') operator, therefore one of them can be removed.')]),
					bx: 'Condition is redundant'
				},
				range,
				fix)
			]);
	});
var $jfmengels$elm_review_simplify$Simplify$areSimilarConditionsError = F4(function $jfmengels$elm_review_simplify$Simplify$areSimilarConditionsError$fn(resources, operator, nodeToCompareTo, _v0) {
		var redundantConditionResolution = _v0.a;
		var nodeToLookAt = _v0.b;
		var _v1 = A3($jfmengels$elm_review_simplify$Simplify$Normalize$compare, resources, nodeToCompareTo, nodeToLookAt);
		switch (_v1) {
			case 0:
				return A4($jfmengels$elm_review_simplify$Simplify$errorForRedundantCondition, operator, redundantConditionResolution, nodeToLookAt, resources);
			case 1:
				return _List_Nil;
			default:
				return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$ReplaceByNoop = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_simplify$Simplify$listConditions = F3(function $jfmengels$elm_review_simplify$Simplify$listConditions$fn(operatorToLookFor, redundantConditionResolution, node) {
		listConditions:
		while (true) {
			var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
			switch (_v0.$) {
				case 14:
					var expr = _v0.a;
					var noopValue = operatorToLookFor === '&&';
					var $temp$operatorToLookFor = operatorToLookFor,
						$temp$redundantConditionResolution = $jfmengels$elm_review_simplify$Simplify$ReplaceByNoop(noopValue),
						$temp$node = expr;
					operatorToLookFor = $temp$operatorToLookFor;
					redundantConditionResolution = $temp$redundantConditionResolution;
					node = $temp$node;
					continue listConditions;
				case 2:
					var operator = _v0.a;
					var left = _v0.c;
					var right = _v0.d;
					return _Utils_eq(operator, operatorToLookFor) ? _Utils_ap(
						A3($jfmengels$elm_review_simplify$Simplify$listConditions, operatorToLookFor, redundantConditionResolution, left),
						A3(
							$jfmengels$elm_review_simplify$Simplify$listConditions,
							operatorToLookFor,
							$jfmengels$elm_review_simplify$Simplify$RemoveFrom(
								$stil4m$elm_syntax$Elm$Syntax$Node$range(left).c4),
							right)) : _List_fromArray(
						[
							_Utils_Tuple2(redundantConditionResolution, node)
						]);
				default:
					return _List_fromArray(
						[
							_Utils_Tuple2(redundantConditionResolution, node)
						]);
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$findSimilarConditionsError = function (operatorCheckInfo) {
	var conditionsOnTheRight = A3(
		$jfmengels$elm_review_simplify$Simplify$listConditions,
		operatorCheckInfo.iV,
		$jfmengels$elm_review_simplify$Simplify$RemoveFrom(operatorCheckInfo.g.c4),
		operatorCheckInfo.l);
	var errorsForNode = function (nodeToCompareTo) {
		return A2(
			$elm$core$List$concatMap,
			A3($jfmengels$elm_review_simplify$Simplify$areSimilarConditionsError, operatorCheckInfo, operatorCheckInfo.iV, nodeToCompareTo),
			conditionsOnTheRight);
	};
	return A2(
		$elm$core$List$concatMap,
		A2($elm$core$Basics$composeR, $elm$core$Tuple$second, errorsForNode),
		A3(
			$jfmengels$elm_review_simplify$Simplify$listConditions,
			operatorCheckInfo.iV,
			$jfmengels$elm_review_simplify$Simplify$RemoveFrom(operatorCheckInfo.g.c4),
			operatorCheckInfo.k));
};
var $jfmengels$elm_review_simplify$Simplify$andChecks = function (operatorCheckInfo) {
	return A2(
		$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
		_List_fromArray(
			[
				function (_v0) {
				return $elm$core$List$concat(
					_List_fromArray(
						[
							$jfmengels$elm_review_simplify$Simplify$and_isLeftSimplifiableError(operatorCheckInfo),
							$jfmengels$elm_review_simplify$Simplify$and_isRightSimplifiableError(operatorCheckInfo)
						]));
			},
				function (_v1) {
				return $jfmengels$elm_review_simplify$Simplify$findSimilarConditionsError(operatorCheckInfo);
			}
			]),
		0);
};
var $jfmengels$elm_review_simplify$Simplify$comparisonError = F2(function $jfmengels$elm_review_simplify$Simplify$comparisonError$fn(bool, range) {
		var boolAsString = $jfmengels$elm_review_simplify$Simplify$AstHelpers$boolToString(bool);
		return A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['Based on the values and/or the context, we can determine that the value of this operation will always be ' + (boolAsString + '.')]),
				bx: 'Comparison is always ' + boolAsString
			},
			range,
			_List_fromArray(
				[
					A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, range, boolAsString)
				]));
	});
var $jfmengels$elm_review_simplify$Simplify$comparisonChecks = F2(function $jfmengels$elm_review_simplify$Simplify$comparisonChecks$fn(operatorFunction, operatorCheckInfo) {
		var _v0 = A3(
			$elm$core$Maybe$map2,
			operatorFunction,
			$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(operatorCheckInfo.k),
			$jfmengels$elm_review_simplify$Simplify$Normalize$getNumberValue(operatorCheckInfo.l));
		if (!_v0.$) {
			var bool = _v0.a;
			return _List_fromArray(
				[
					A2($jfmengels$elm_review_simplify$Simplify$comparisonError, bool, operatorCheckInfo.b)
				]);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$consChecks = function (checkInfo) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.l);
	if (_v0.$ === 19) {
		if (!_v0.a.b) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['Try moving the element inside the list it is being added to.']),
						bx: 'Element added to the beginning of the list could be included in the list'
					},
					checkInfo.g,
					_List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$insertAt, checkInfo.g.dv, '[ '),
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							{c4: checkInfo.i.c4, dv: checkInfo.g.c4},
							' ]')
						]))
				]);
		} else {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['Try moving the element inside the list it is being added to.']),
						bx: 'Element added to the beginning of the list could be included in the list'
					},
					checkInfo.g,
					_List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$insertAt, checkInfo.g.dv, '[ '),
							A2(
							$jfmengels$elm_review$Review$Fix$replaceRangeBy,
							{
								c4: {bH: checkInfo.i.dv.bH + 1, b1: checkInfo.i.dv.b1},
								dv: checkInfo.g.c4
							},
							',')
						]))
				]);
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$divisionChecks = function (checkInfo) {
	if (_Utils_eq(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue(checkInfo.l),
		$elm$core$Maybe$Just(1))) {
		var range = {c4: checkInfo.i.c4, dv: checkInfo.g.c4};
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['Dividing by 1 does not change the value of the number.']),
					bx: 'Unnecessary division by 1'
				},
				range,
				_List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(range)
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$getNotCall = F2(function $jfmengels$elm_review_simplify$Simplify$getNotCall$fn(lookupTable, baseNode) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseNode));
		if ((((_v0.$ === 1) && _v0.a.b) && (_v0.a.a.b.$ === 3)) && (_v0.a.a.b.b === 'not')) {
			var _v1 = _v0.a;
			var _v2 = _v1.a;
			var notRange = _v2.a;
			var _v3 = _v2.b;
			var _v4 = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, lookupTable, notRange);
			if ((((!_v4.$) && _v4.a.b) && (_v4.a.a === 'Basics')) && (!_v4.a.b.b)) {
				var _v5 = _v4.a;
				return $elm$core$Maybe$Just(notRange);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$equalityChecks = F2(function $jfmengels$elm_review_simplify$Simplify$equalityChecks$fn(isEqual, checkInfo) {
		if (_Utils_eq(
			A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, checkInfo, checkInfo.l),
			$jfmengels$elm_review_simplify$Simplify$Match$Determined(isEqual))) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['The result of the expression will be the same with or without the comparison.']),
						bx: 'Unnecessary comparison with boolean'
					},
					checkInfo.b,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.i.c4, dv: checkInfo.g.c4})
						]))
				]);
		} else {
			if (_Utils_eq(
				A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, checkInfo, checkInfo.k),
				$jfmengels$elm_review_simplify$Simplify$Match$Determined(isEqual))) {
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['The result of the expression will be the same with or without the comparison.']),
							bx: 'Unnecessary comparison with boolean'
						},
						checkInfo.b,
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								{c4: checkInfo.i.dv, dv: checkInfo.g.dv})
							]))
					]);
			} else {
				var _v0 = A3(
					$elm$core$Maybe$map2,
					$elm$core$Tuple$pair,
					A2($jfmengels$elm_review_simplify$Simplify$getNotCall, checkInfo.s, checkInfo.k),
					A2($jfmengels$elm_review_simplify$Simplify$getNotCall, checkInfo.s, checkInfo.l));
				if (!_v0.$) {
					var _v1 = _v0.a;
					var notRangeLeft = _v1.a;
					var notRangeRight = _v1.b;
					return _List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['Since both sides are negated using `not`, they are redundant and can be removed.']),
								bx: 'Unnecessary negation on both sides'
							},
							checkInfo.b,
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(notRangeLeft),
									$jfmengels$elm_review$Review$Fix$removeRange(notRangeRight)
								]))
						]);
				} else {
					var inferred = checkInfo.I.a;
					var normalizeAndInfer = function (node) {
						var newNode = A2($jfmengels$elm_review_simplify$Simplify$Normalize$normalize, checkInfo, node);
						var _v3 = A2(
							$jfmengels$elm_review_simplify$Simplify$Infer$get,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(newNode),
							inferred);
						if (!_v3.$) {
							var expr = _v3.a;
							return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, expr);
						} else {
							return newNode;
						}
					};
					var normalizedLeft = normalizeAndInfer(checkInfo.k);
					var normalizedRight = normalizeAndInfer(checkInfo.l);
					var _v2 = A2($jfmengels$elm_review_simplify$Simplify$Normalize$compareWithoutNormalization, normalizedLeft, normalizedRight);
					switch (_v2) {
						case 0:
							return _List_fromArray(
								[
									A2($jfmengels$elm_review_simplify$Simplify$comparisonError, isEqual, checkInfo.b)
								]);
						case 1:
							return _List_fromArray(
								[
									A2($jfmengels$elm_review_simplify$Simplify$comparisonError, !isEqual, checkInfo.b)
								]);
						default:
							return _List_Nil;
					}
				}
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$minusChecks = function (checkInfo) {
	if (_Utils_eq(
		$jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue(checkInfo.l),
		$elm$core$Maybe$Just(0))) {
		var range = {c4: checkInfo.i.c4, dv: checkInfo.g.c4};
		return _List_fromArray(
			[
				A3(
				$jfmengels$elm_review$Review$Rule$errorWithFix,
				{
					eq: _List_fromArray(
						['Subtracting 0 does not change the value of the number.']),
					bx: 'Unnecessary subtraction with 0'
				},
				range,
				_List_fromArray(
					[
						$jfmengels$elm_review$Review$Fix$removeRange(range)
					]))
			]);
	} else {
		if (_Utils_eq(
			$jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue(checkInfo.k),
			$elm$core$Maybe$Just(0))) {
			var range = {c4: checkInfo.i.dv, dv: checkInfo.g.dv};
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['You can negate the expression on the right like `-n`.']),
						bx: 'Unnecessary subtracting from 0'
					},
					range,
					$jfmengels$elm_review_simplify$Simplify$needsParens(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.l)) ? _List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, range, '-('),
							A2($jfmengels$elm_review$Review$Fix$insertAt, checkInfo.i.c4, ')')
						]) : _List_fromArray(
						[
							A2($jfmengels$elm_review$Review$Fix$replaceRangeBy, range, '-')
						]))
				]);
		} else {
			return _List_Nil;
		}
	}
};
var $jfmengels$elm_review_simplify$Simplify$multiplyChecks = function (checkInfo) {
	return A2(
		$elm$core$Maybe$withDefault,
		_List_Nil,
		A2(
			$jfmengels$elm_review_simplify$Simplify$findMap,
			function (_v0) {
				var node = _v0.a;
				var getRange = _v0.b;
				var _v1 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue(node);
				if (!_v1.$) {
					var number = _v1.a;
					return (number === 1) ? $elm$core$Maybe$Just(
						_List_fromArray(
							[
								A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['Multiplying by 1 does not change the value of the number.']),
									bx: 'Unnecessary multiplication by 1'
								},
								getRange(0),
								_List_fromArray(
									[
										$jfmengels$elm_review$Review$Fix$removeRange(
										getRange(0))
									]))
							])) : ((!number) ? $elm$core$Maybe$Just(
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Rule$error,
								{
									eq: _List_fromArray(
										['Multiplying by 0 will turn finite numbers into 0 and keep NaN and (-)Infinity', 'Most likely, multiplying by 0 was unintentional and you had a different factor in mind.', 'If you do want the described behavior, though, make your intention clear for the reader\nby explicitly checking for `Basics.isNaN` and `Basics.isInfinite`.', 'Basics.isNaN: https://package.elm-lang.org/packages/elm/core/latest/Basics#isNaN\nBasics.isInfinite: https://package.elm-lang.org/packages/elm/core/latest/Basics#isInfinite']),
									bx: 'Multiplication by 0 should be replaced'
								},
								getRange(0))
							])) : $elm$core$Maybe$Nothing);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			_List_fromArray(
				[
					_Utils_Tuple2(
					checkInfo.l,
					function (_v2) {
						return {c4: checkInfo.i.c4, dv: checkInfo.g.c4};
					}),
					_Utils_Tuple2(
					checkInfo.k,
					function (_v3) {
						return {c4: checkInfo.i.dv, dv: checkInfo.g.dv};
					})
				])));
};
var $jfmengels$elm_review_simplify$Simplify$or_isLeftSimplifiableError = function (checkInfo) {
	var _v0 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, checkInfo, checkInfo.k);
	if (!_v0.$) {
		if (_v0.a) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{eq: $jfmengels$elm_review_simplify$Simplify$alwaysSameDetails, bx: 'Comparison is always True'},
					checkInfo.b,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.i.c4, dv: checkInfo.g.c4})
						]))
				]);
		} else {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{eq: $jfmengels$elm_review_simplify$Simplify$unnecessaryDetails, bx: $jfmengels$elm_review_simplify$Simplify$unnecessaryMessage},
					checkInfo.b,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.i.dv, dv: checkInfo.g.dv})
						]))
				]);
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$or_isRightSimplifiableError = function (checkInfo) {
	var _v0 = A2($jfmengels$elm_review_simplify$Simplify$Evaluate$getBoolean, checkInfo, checkInfo.l);
	if (!_v0.$) {
		if (_v0.a) {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{eq: $jfmengels$elm_review_simplify$Simplify$unnecessaryDetails, bx: $jfmengels$elm_review_simplify$Simplify$unnecessaryMessage},
					checkInfo.b,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.i.dv, dv: checkInfo.g.dv})
						]))
				]);
		} else {
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{eq: $jfmengels$elm_review_simplify$Simplify$unnecessaryDetails, bx: $jfmengels$elm_review_simplify$Simplify$unnecessaryMessage},
					checkInfo.b,
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Fix$removeRange(
							{c4: checkInfo.i.c4, dv: checkInfo.g.c4})
						]))
				]);
		}
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review_simplify$Simplify$orChecks = function (operatorCheckInfo) {
	return A2(
		$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
		_List_fromArray(
			[
				function (_v0) {
				return $elm$core$List$concat(
					_List_fromArray(
						[
							$jfmengels$elm_review_simplify$Simplify$or_isLeftSimplifiableError(operatorCheckInfo),
							$jfmengels$elm_review_simplify$Simplify$or_isRightSimplifiableError(operatorCheckInfo)
						]));
			},
				function (_v1) {
				return $jfmengels$elm_review_simplify$Simplify$findSimilarConditionsError(operatorCheckInfo);
			}
			]),
		0);
};
var $jfmengels$elm_review_simplify$Simplify$plusChecks = function (checkInfo) {
	return A2(
		$elm$core$Maybe$withDefault,
		_List_Nil,
		A2(
			$jfmengels$elm_review_simplify$Simplify$findMap,
			function (_v0) {
				var node = _v0.a;
				var getRange = _v0.b;
				return _Utils_eq(
					$jfmengels$elm_review_simplify$Simplify$AstHelpers$getUncomputedNumberValue(node),
					$elm$core$Maybe$Just(0)) ? $elm$core$Maybe$Just(
					_List_fromArray(
						[
							A3(
							$jfmengels$elm_review$Review$Rule$errorWithFix,
							{
								eq: _List_fromArray(
									['Adding 0 does not change the value of the number.']),
								bx: 'Unnecessary addition with 0'
							},
							getRange(0),
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Fix$removeRange(
									getRange(0))
								]))
						])) : $elm$core$Maybe$Nothing;
			},
			_List_fromArray(
				[
					_Utils_Tuple2(
					checkInfo.l,
					function (_v1) {
						return {c4: checkInfo.i.c4, dv: checkInfo.g.c4};
					}),
					_Utils_Tuple2(
					checkInfo.k,
					function (_v2) {
						return {c4: checkInfo.i.dv, dv: checkInfo.g.dv};
					})
				])));
};
var $jfmengels$elm_review_simplify$Simplify$errorForAddingEmptyLists = F2(function $jfmengels$elm_review_simplify$Simplify$errorForAddingEmptyLists$fn(range, rangeToRemove) {
		return A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['You should remove the concatenation with the empty list.']),
				bx: 'Concatenating with a single list doesn\'t have any effect'
			},
			range,
			_List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(rangeToRemove)
				]));
	});
var $jfmengels$elm_review_simplify$Simplify$errorForAddingEmptyStrings = F2(function $jfmengels$elm_review_simplify$Simplify$errorForAddingEmptyStrings$fn(range, rangeToRemove) {
		return A3(
			$jfmengels$elm_review$Review$Rule$errorWithFix,
			{
				eq: _List_fromArray(
					['You should remove the concatenation with the empty string.']),
				bx: 'Unnecessary concatenation with an empty string'
			},
			range,
			_List_fromArray(
				[
					$jfmengels$elm_review$Review$Fix$removeRange(rangeToRemove)
				]));
	});
var $jfmengels$elm_review_simplify$Simplify$plusplusChecks = function (checkInfo) {
	var _v0 = _Utils_Tuple2(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.k),
		$stil4m$elm_syntax$Elm$Syntax$Node$value(checkInfo.l));
	_v0$3:
	while (true) {
		_v0$6:
		while (true) {
			switch (_v0.a.$) {
				case 11:
					switch (_v0.b.$) {
						case 11:
							if (_v0.a.a === '') {
								return _List_fromArray(
									[
										A2(
										$jfmengels$elm_review_simplify$Simplify$errorForAddingEmptyStrings,
										checkInfo.g,
										{c4: checkInfo.i.dv, dv: checkInfo.g.dv})
									]);
							} else {
								if (_v0.b.a === '') {
									return _List_fromArray(
										[
											A2(
											$jfmengels$elm_review_simplify$Simplify$errorForAddingEmptyStrings,
											checkInfo.i,
											{c4: checkInfo.i.c4, dv: checkInfo.g.c4})
										]);
								} else {
									break _v0$6;
								}
							}
						case 19:
							if (!_v0.b.a.b) {
								break _v0$3;
							} else {
								break _v0$6;
							}
						default:
							break _v0$6;
					}
				case 19:
					if (!_v0.a.a.b) {
						return _List_fromArray(
							[
								A2(
								$jfmengels$elm_review_simplify$Simplify$errorForAddingEmptyLists,
								checkInfo.g,
								{c4: checkInfo.i.dv, dv: checkInfo.g.dv})
							]);
					} else {
						if (_v0.b.$ === 19) {
							if (!_v0.b.a.b) {
								break _v0$3;
							} else {
								return _List_fromArray(
									[
										A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										{
											eq: _List_fromArray(
												['Try moving all the elements into a single list.']),
											bx: 'Expression could be simplified to be a single List'
										},
										checkInfo.b,
										_List_fromArray(
											[
												A2(
												$jfmengels$elm_review$Review$Fix$replaceRangeBy,
												{
													c4: {bH: checkInfo.i.dv.bH + 1, b1: checkInfo.i.dv.b1},
													dv: {bH: checkInfo.g.c4.bH - 1, b1: checkInfo.g.c4.b1}
												},
												',')
											]))
									]);
							}
						} else {
							if (!_v0.a.a.b.b) {
								var _v1 = _v0.a.a;
								var listElement = _v1.a;
								return checkInfo.fU ? _List_Nil : _List_fromArray(
									[
										A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										{
											eq: _List_fromArray(
												['Concatenating a list with a single value is the same as using (::) on the list with the value.']),
											bx: 'Should use (::) instead of (++)'
										},
										checkInfo.b,
										A2(
											$elm$core$List$cons,
											A2(
												$jfmengels$elm_review$Review$Fix$replaceRangeBy,
												{c4: checkInfo.i.dv, dv: checkInfo.g.c4},
												' :: '),
											A2($jfmengels$elm_review_simplify$Simplify$replaceBySubExpressionFix, checkInfo.g, listElement)))
									]);
							} else {
								break _v0$6;
							}
						}
					}
				default:
					if ((_v0.b.$ === 19) && (!_v0.b.a.b)) {
						break _v0$3;
					} else {
						break _v0$6;
					}
			}
		}
		return _List_Nil;
	}
	return _List_fromArray(
		[
			A2(
			$jfmengels$elm_review_simplify$Simplify$errorForAddingEmptyLists,
			checkInfo.i,
			{c4: checkInfo.i.c4, dv: checkInfo.g.c4})
		]);
};
var $jfmengels$elm_review_simplify$Simplify$operatorChecks = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('+', $jfmengels$elm_review_simplify$Simplify$plusChecks),
			_Utils_Tuple2('-', $jfmengels$elm_review_simplify$Simplify$minusChecks),
			_Utils_Tuple2('*', $jfmengels$elm_review_simplify$Simplify$multiplyChecks),
			_Utils_Tuple2('/', $jfmengels$elm_review_simplify$Simplify$divisionChecks),
			_Utils_Tuple2('++', $jfmengels$elm_review_simplify$Simplify$plusplusChecks),
			_Utils_Tuple2('::', $jfmengels$elm_review_simplify$Simplify$consChecks),
			_Utils_Tuple2('||', $jfmengels$elm_review_simplify$Simplify$orChecks),
			_Utils_Tuple2('&&', $jfmengels$elm_review_simplify$Simplify$andChecks),
			_Utils_Tuple2(
			'==',
			$jfmengels$elm_review_simplify$Simplify$equalityChecks(true)),
			_Utils_Tuple2(
			'/=',
			$jfmengels$elm_review_simplify$Simplify$equalityChecks(false)),
			_Utils_Tuple2(
			'<',
			$jfmengels$elm_review_simplify$Simplify$comparisonChecks($elm$core$Basics$lt)),
			_Utils_Tuple2(
			'>',
			$jfmengels$elm_review_simplify$Simplify$comparisonChecks($elm$core$Basics$gt)),
			_Utils_Tuple2(
			'<=',
			$jfmengels$elm_review_simplify$Simplify$comparisonChecks($elm$core$Basics$le)),
			_Utils_Tuple2(
			'>=',
			$jfmengels$elm_review_simplify$Simplify$comparisonChecks($elm$core$Basics$ge))
		]));
var $jfmengels$elm_review_simplify$Simplify$recordAccessChecks = F4(function $jfmengels$elm_review_simplify$Simplify$recordAccessChecks$fn(nodeRange, recordNameRange, fieldName, setters) {
		var _v0 = A2(
			$jfmengels$elm_review_simplify$Simplify$findMap,
			function (_v1) {
				var _v2 = _v1.b;
				var setterField = _v2.a;
				var setterValue = _v2.b;
				return _Utils_eq(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(setterField),
					fieldName) ? $elm$core$Maybe$Just(setterValue) : $elm$core$Maybe$Nothing;
			},
			setters);
		if (!_v0.$) {
			var setter = _v0.a;
			return _List_fromArray(
				[
					A3(
					$jfmengels$elm_review$Review$Rule$errorWithFix,
					{
						eq: _List_fromArray(
							['Accessing the field of a record or record update can be simplified to just that field\'s value']),
						bx: 'Field access can be simplified'
					},
					nodeRange,
					A2($jfmengels$elm_review_simplify$Simplify$replaceBySubExpressionFix, nodeRange, setter))
				]);
		} else {
			if (!recordNameRange.$) {
				var rnr = recordNameRange.a;
				return _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['Accessing the field of an unrelated record update can be simplified to just the original field\'s value']),
							bx: 'Field access can be simplified'
						},
						nodeRange,
						_List_fromArray(
							[
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{c4: rnr.dv, dv: nodeRange.dv},
								''),
								A2(
								$jfmengels$elm_review$Review$Fix$replaceRangeBy,
								{c4: nodeRange.c4, dv: rnr.c4},
								'.' + fieldName)
							]))
					]);
			} else {
				return _List_Nil;
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$isUnnecessaryRecordUpdateSetter = F3(function $jfmengels$elm_review_simplify$Simplify$isUnnecessaryRecordUpdateSetter$fn(variable, field, value) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(value);
		if (((_v0.$ === 20) && (_v0.a.b.$ === 3)) && (!_v0.a.b.a.b)) {
			var _v1 = _v0.a;
			var _v2 = _v1.b;
			var valueHolder = _v2.b;
			var fieldName = _v0.b;
			return _Utils_eq(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(field),
				$stil4m$elm_syntax$Elm$Syntax$Node$value(fieldName)) && _Utils_eq(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(variable),
				valueHolder);
		} else {
			return false;
		}
	});
var $jfmengels$elm_review_simplify$Simplify$removeRecordFields = F3(function $jfmengels$elm_review_simplify$Simplify$removeRecordFields$fn(recordUpdateRange, variable, fields) {
		if (!fields.b) {
			return _List_Nil;
		} else {
			if (!fields.b.b) {
				var _v1 = fields.a;
				var _v2 = _v1.b;
				var field = _v2.a;
				var valueWithParens = _v2.b;
				var value = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(valueWithParens);
				return A3($jfmengels$elm_review_simplify$Simplify$isUnnecessaryRecordUpdateSetter, variable, field, value) ? _List_fromArray(
					[
						A3(
						$jfmengels$elm_review$Review$Rule$errorWithFix,
						{
							eq: _List_fromArray(
								['The field is being set to its own value.']),
							bx: 'Unnecessary field assignment'
						},
						$stil4m$elm_syntax$Elm$Syntax$Node$range(value),
						_List_fromArray(
							[
								$jfmengels$elm_review$Review$Fix$removeRange(
								{
									c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(variable).dv,
									dv: recordUpdateRange.dv
								}),
								$jfmengels$elm_review$Review$Fix$removeRange(
								{
									c4: recordUpdateRange.c4,
									dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(variable).c4
								})
							]))
					]) : _List_Nil;
			} else {
				var _v3 = fields.a;
				var firstRange = _v3.a;
				var _v4 = fields.b;
				var second = _v4.a;
				return A2(
					$elm$core$List$filterMap,
					function (_v5) {
						var _v6 = _v5.a;
						var range = _v6.a;
						var _v7 = _v6.b;
						var field = _v7.a;
						var valueWithParens = _v7.b;
						var previousRange = _v5.b;
						var value = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(valueWithParens);
						return A3($jfmengels$elm_review_simplify$Simplify$isUnnecessaryRecordUpdateSetter, variable, field, value) ? $elm$core$Maybe$Just(
							A3(
								$jfmengels$elm_review$Review$Rule$errorWithFix,
								{
									eq: _List_fromArray(
										['The field is being set to its own value.']),
									bx: 'Unnecessary field assignment'
								},
								$stil4m$elm_syntax$Elm$Syntax$Node$range(value),
								function () {
									if (!previousRange.$) {
										var prevRange = previousRange.a;
										return _List_fromArray(
											[
												$jfmengels$elm_review$Review$Fix$removeRange(
												{c4: range.c4, dv: prevRange.c4})
											]);
									} else {
										return _List_fromArray(
											[
												$jfmengels$elm_review$Review$Fix$removeRange(
												{
													c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(second).dv,
													dv: firstRange.dv
												})
											]);
									}
								}())) : $elm$core$Maybe$Nothing;
					},
					A3(
						$elm$core$List$map2,
						$elm$core$Tuple$pair,
						fields,
						A2(
							$elm$core$List$cons,
							$elm$core$Maybe$Nothing,
							A2(
								$elm$core$List$map,
								A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$range, $elm$core$Maybe$Just),
								fields))));
			}
		}
	});
var $jfmengels$elm_review_simplify$Simplify$expressionVisitorHelp = F2(function $jfmengels$elm_review_simplify$Simplify$expressionVisitorHelp$fn(node, context) {
		var toCheckInfo = function (checkInfo) {
			return {
				au: checkInfo.au,
				eD: context.eD,
				c: checkInfo.c,
				a: checkInfo.a,
				E: context.E,
				I: context.I,
				u: context.u,
				s: context.s,
				A: context.A,
				b: $stil4m$elm_syntax$Elm$Syntax$Node$range(node),
				ga: $elm$core$List$head(checkInfo.au),
				gk: $elm$core$List$head(
					A2($elm$core$List$drop, 1, checkInfo.au)),
				x: checkInfo.x
			};
		};
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		_v0$15:
		while (true) {
			_v0$18:
			while (true) {
				switch (_v0.$) {
					case 4:
						var condition = _v0.a;
						var trueBranch = _v0.b;
						var falseBranch = _v0.c;
						return A3(
							$jfmengels$elm_review_simplify$Simplify$ifChecks,
							context,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							{gy: condition, gU: falseBranch, hU: trueBranch});
					case 1:
						if (_v0.a.b && _v0.a.b.b) {
							switch (_v0.a.a.b.$) {
								case 3:
									var _v1 = _v0.a;
									var _v2 = _v1.a;
									var fnRange = _v2.a;
									var _v3 = _v2.b;
									var fnName = _v3.b;
									var _v4 = _v1.b;
									var firstArg = _v4.a;
									var restOfArguments = _v4.b;
									var _v5 = A2(
										$elm$core$Maybe$andThen,
										function (moduleName) {
											return A2(
												$elm$core$Dict$get,
												_Utils_Tuple2(moduleName, fnName),
												$jfmengels$elm_review_simplify$Simplify$functionCallChecks);
										},
										A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, context.s, fnRange));
									if (!_v5.$) {
										var checkFn = _v5.a;
										return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
											checkFn(
												toCheckInfo(
													{au: restOfArguments, c: firstArg, a: fnRange, x: false})));
									} else {
										return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
									}
								case 14:
									if (_v0.a.a.b.a.b.$ === 17) {
										var _v6 = _v0.a;
										var _v7 = _v6.a;
										var _v8 = _v7.b.a;
										var lambdaRange = _v8.a;
										var lambda = _v8.b.a;
										var _v9 = _v6.b;
										var firstArgument = _v9.a;
										var _v10 = lambda.h0;
										_v10$2:
										while (true) {
											if (_v10.b) {
												switch (_v10.a.b.$) {
													case 1:
														var _v11 = _v10.a;
														var unitRange = _v11.a;
														var _v12 = _v11.b;
														var otherPatterns = _v10.b;
														return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
															_List_fromArray(
																[
																	A3(
																	$jfmengels$elm_review$Review$Rule$errorWithFix,
																	{
																		eq: _List_fromArray(
																			['This function is expecting a unit, but also passing it directly.', 'Maybe this was made in attempt to make the computation lazy, but in practice the function will be evaluated eagerly.']),
																		bx: 'Unnecessary unit argument'
																	},
																	unitRange,
																	function () {
																		if (!otherPatterns.b) {
																			return _List_fromArray(
																				[
																					$jfmengels$elm_review$Review$Fix$removeRange(
																					{
																						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(lambda.eC).dv,
																						dv: lambdaRange.dv
																					}),
																					$jfmengels$elm_review$Review$Fix$removeRange(
																					$stil4m$elm_syntax$Elm$Syntax$Node$range(firstArgument))
																				]);
																		} else {
																			var secondPattern = otherPatterns.a;
																			return _List_fromArray(
																				[
																					$jfmengels$elm_review$Review$Fix$removeRange(
																					{
																						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(secondPattern).dv,
																						dv: unitRange.dv
																					}),
																					$jfmengels$elm_review$Review$Fix$removeRange(
																					$stil4m$elm_syntax$Elm$Syntax$Node$range(firstArgument))
																				]);
																		}
																	}())
																]));
													case 0:
														var _v14 = _v10.a;
														var allRange = _v14.a;
														var _v15 = _v14.b;
														var otherPatterns = _v10.b;
														return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
															_List_fromArray(
																[
																	A3(
																	$jfmengels$elm_review$Review$Rule$errorWithFix,
																	{
																		eq: _List_fromArray(
																			['This function is being passed an argument that is directly ignored.', 'Maybe this was made in attempt to make the computation lazy, but in practice the function will be evaluated eagerly.']),
																		bx: 'Unnecessary wildcard argument argument'
																	},
																	allRange,
																	function () {
																		if (!otherPatterns.b) {
																			return _List_fromArray(
																				[
																					$jfmengels$elm_review$Review$Fix$removeRange(
																					{
																						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(lambda.eC).dv,
																						dv: lambdaRange.dv
																					}),
																					$jfmengels$elm_review$Review$Fix$removeRange(
																					$stil4m$elm_syntax$Elm$Syntax$Node$range(firstArgument))
																				]);
																		} else {
																			var secondPattern = otherPatterns.a;
																			return _List_fromArray(
																				[
																					$jfmengels$elm_review$Review$Fix$removeRange(
																					{
																						c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(secondPattern).dv,
																						dv: allRange.dv
																					}),
																					$jfmengels$elm_review$Review$Fix$removeRange(
																					$stil4m$elm_syntax$Elm$Syntax$Node$range(firstArgument))
																				]);
																		}
																	}())
																]));
													default:
														break _v10$2;
												}
											} else {
												break _v10$2;
											}
										}
										return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
									} else {
										break _v0$18;
									}
								case 5:
									if (_v0.a.b.b.b && (!_v0.a.b.b.b.b)) {
										var _v17 = _v0.a;
										var _v18 = _v17.a;
										var operatorRange = _v18.a;
										var operator = _v18.b.a;
										var _v19 = _v17.b;
										var left = _v19.a;
										var _v20 = _v19.b;
										var right = _v20.a;
										return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
											_List_fromArray(
												[
													A3(
													$jfmengels$elm_review$Review$Rule$errorWithFix,
													{
														eq: _List_fromArray(
															['The prefix form is generally more unfamiliar to Elm developers, and therefore it is nicer when the infix form is used.']),
														bx: 'Use the infix form (a + b) over the prefix form ((+) a b)'
													},
													operatorRange,
													_List_fromArray(
														[
															$jfmengels$elm_review$Review$Fix$removeRange(
															{
																c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv,
																dv: operatorRange.dv
															}),
															A2(
															$jfmengels$elm_review$Review$Fix$insertAt,
															$stil4m$elm_syntax$Elm$Syntax$Node$range(right).dv,
															operator + ' ')
														]))
												]));
									} else {
										break _v0$18;
									}
								default:
									break _v0$18;
							}
						} else {
							break _v0$18;
						}
					case 22:
						var variable = _v0.a;
						var fields = _v0.b;
						return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
							A3(
								$jfmengels$elm_review_simplify$Simplify$removeRecordFields,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
								variable,
								fields));
					case 16:
						var caseBlock = _v0.a;
						return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
							A3(
								$jfmengels$elm_review_simplify$Simplify$caseOfChecks,
								context,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
								caseBlock));
					case 15:
						var caseBlock = _v0.a;
						return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
							$jfmengels$elm_review_simplify$Simplify$letInChecks(caseBlock));
					case 2:
						switch (_v0.a) {
							case '<|':
								switch (_v0.c.b.$) {
									case 3:
										var _v21 = _v0.c;
										var fnRange = _v21.a;
										var _v22 = _v21.b;
										var fnName = _v22.b;
										var firstArg = _v0.d;
										var _v23 = A2(
											$elm$core$Maybe$andThen,
											function (moduleName) {
												return A2(
													$elm$core$Dict$get,
													_Utils_Tuple2(moduleName, fnName),
													$jfmengels$elm_review_simplify$Simplify$functionCallChecks);
											},
											A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, context.s, fnRange));
										if (!_v23.$) {
											var checkFn = _v23.a;
											return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
												checkFn(
													toCheckInfo(
														{au: _List_Nil, c: firstArg, a: fnRange, x: false})));
										} else {
											return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
										}
									case 1:
										if ((_v0.c.b.a.b && (_v0.c.b.a.a.b.$ === 3)) && _v0.c.b.a.b.b) {
											var _v24 = _v0.c;
											var applicationRange = _v24.a;
											var _v25 = _v24.b.a;
											var _v26 = _v25.a;
											var fnRange = _v26.a;
											var _v27 = _v26.b;
											var fnName = _v27.b;
											var _v28 = _v25.b;
											var firstArg = _v28.a;
											var argsBetweenFirstAndLast = _v28.b;
											var lastArg = _v0.d;
											var _v29 = A2(
												$elm$core$Maybe$andThen,
												function (moduleName) {
													return A2(
														$elm$core$Dict$get,
														_Utils_Tuple2(moduleName, fnName),
														$jfmengels$elm_review_simplify$Simplify$functionCallChecks);
												},
												A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, context.s, fnRange));
											if (!_v29.$) {
												var checkFn = _v29.a;
												return A2(
													$jfmengels$elm_review_simplify$Simplify$errorsAndRangesToIgnore,
													checkFn(
														toCheckInfo(
															{
																au: _Utils_ap(
																	argsBetweenFirstAndLast,
																	_List_fromArray(
																		[lastArg])),
																c: firstArg,
																a: fnRange,
																x: false
															})),
													A2($jfmengels$elm_review_simplify$Simplify$RangeDict$singleton, applicationRange, 0));
											} else {
												return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
											}
										} else {
											break _v0$15;
										}
									default:
										break _v0$15;
								}
							case '|>':
								switch (_v0.d.b.$) {
									case 3:
										var firstArg = _v0.c;
										var _v30 = _v0.d;
										var fnRange = _v30.a;
										var _v31 = _v30.b;
										var fnName = _v31.b;
										var _v32 = A2(
											$elm$core$Maybe$andThen,
											function (moduleName) {
												return A2(
													$elm$core$Dict$get,
													_Utils_Tuple2(moduleName, fnName),
													$jfmengels$elm_review_simplify$Simplify$functionCallChecks);
											},
											A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, context.s, fnRange));
										if (!_v32.$) {
											var checkFn = _v32.a;
											return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
												checkFn(
													toCheckInfo(
														{au: _List_Nil, c: firstArg, a: fnRange, x: true})));
										} else {
											return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
										}
									case 1:
										if ((_v0.d.b.a.b && (_v0.d.b.a.a.b.$ === 3)) && _v0.d.b.a.b.b) {
											var lastArg = _v0.c;
											var _v33 = _v0.d;
											var applicationRange = _v33.a;
											var _v34 = _v33.b.a;
											var _v35 = _v34.a;
											var fnRange = _v35.a;
											var _v36 = _v35.b;
											var fnName = _v36.b;
											var _v37 = _v34.b;
											var firstArg = _v37.a;
											var argsBetweenFirstAndLast = _v37.b;
											var _v38 = A2(
												$elm$core$Maybe$andThen,
												function (moduleName) {
													return A2(
														$elm$core$Dict$get,
														_Utils_Tuple2(moduleName, fnName),
														$jfmengels$elm_review_simplify$Simplify$functionCallChecks);
												},
												A2($jfmengels$elm_review$Review$ModuleNameLookupTable$moduleNameAt, context.s, fnRange));
											if (!_v38.$) {
												var checkFn = _v38.a;
												return A2(
													$jfmengels$elm_review_simplify$Simplify$errorsAndRangesToIgnore,
													checkFn(
														toCheckInfo(
															{
																au: _Utils_ap(
																	argsBetweenFirstAndLast,
																	_List_fromArray(
																		[lastArg])),
																c: firstArg,
																a: fnRange,
																x: true
															})),
													A2($jfmengels$elm_review_simplify$Simplify$RangeDict$singleton, applicationRange, 0));
											} else {
												return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
											}
										} else {
											break _v0$15;
										}
									default:
										break _v0$15;
								}
							case '>>':
								if ((_v0.d.b.$ === 2) && (_v0.d.b.a === '>>')) {
									var left = _v0.c;
									var _v39 = _v0.d;
									var _v40 = _v39.b;
									var right = _v40.c;
									return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
										A2(
											$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
											$jfmengels$elm_review_simplify$Simplify$compositionChecks,
											{
												D: true,
												E: context.E,
												k: left,
												g: $stil4m$elm_syntax$Elm$Syntax$Node$range(left),
												u: context.u,
												s: context.s,
												A: context.A,
												b: {
													c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).c4,
													dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv
												},
												l: right,
												i: $stil4m$elm_syntax$Elm$Syntax$Node$range(right)
											}));
								} else {
									var left = _v0.c;
									var right = _v0.d;
									return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
										A2(
											$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
											$jfmengels$elm_review_simplify$Simplify$compositionChecks,
											{
												D: true,
												E: context.E,
												k: left,
												g: $stil4m$elm_syntax$Elm$Syntax$Node$range(left),
												u: context.u,
												s: context.s,
												A: context.A,
												b: $stil4m$elm_syntax$Elm$Syntax$Node$range(node),
												l: right,
												i: $stil4m$elm_syntax$Elm$Syntax$Node$range(right)
											}));
								}
							case '<<':
								if ((_v0.c.b.$ === 2) && (_v0.c.b.a === '<<')) {
									var _v41 = _v0.c;
									var _v42 = _v41.b;
									var left = _v42.d;
									var right = _v0.d;
									return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
										A2(
											$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
											$jfmengels$elm_review_simplify$Simplify$compositionChecks,
											{
												D: false,
												E: context.E,
												k: left,
												g: $stil4m$elm_syntax$Elm$Syntax$Node$range(left),
												u: context.u,
												s: context.s,
												A: context.A,
												b: {
													c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(right).c4,
													dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(left).dv
												},
												l: right,
												i: $stil4m$elm_syntax$Elm$Syntax$Node$range(right)
											}));
								} else {
									var left = _v0.c;
									var right = _v0.d;
									return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
										A2(
											$jfmengels$elm_review_simplify$Simplify$firstThatReportsError,
											$jfmengels$elm_review_simplify$Simplify$compositionChecks,
											{
												D: false,
												E: context.E,
												k: left,
												g: $stil4m$elm_syntax$Elm$Syntax$Node$range(left),
												u: context.u,
												s: context.s,
												A: context.A,
												b: $stil4m$elm_syntax$Elm$Syntax$Node$range(node),
												l: right,
												i: $stil4m$elm_syntax$Elm$Syntax$Node$range(right)
											}));
								}
							default:
								break _v0$15;
						}
					case 10:
						var baseExpr = _v0.a;
						var _v44 = $jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(baseExpr);
						if (_v44.b.$ === 10) {
							var range = _v44.a;
							var negatedValue = _v44.b.a;
							var doubleNegationRange = {
								c4: {bH: range.dv.bH + 1, b1: range.dv.b1},
								dv: $stil4m$elm_syntax$Elm$Syntax$Node$range(node).dv
							};
							return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
								_List_fromArray(
									[
										A3(
										$jfmengels$elm_review$Review$Rule$errorWithFix,
										{
											eq: _List_fromArray(
												['Negating a number twice is the same as the number itself.']),
											bx: 'Unnecessary double number negation'
										},
										doubleNegationRange,
										A2(
											$jfmengels$elm_review_simplify$Simplify$replaceBySubExpressionFix,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
											negatedValue))
									]));
						} else {
							return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
						}
					case 20:
						var record = _v0.a;
						var field = _v0.b;
						var _v45 = $stil4m$elm_syntax$Elm$Syntax$Node$value(
							$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(record));
						switch (_v45.$) {
							case 18:
								var setters = _v45.a;
								return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
									A4(
										$jfmengels$elm_review_simplify$Simplify$recordAccessChecks,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
										$elm$core$Maybe$Nothing,
										$stil4m$elm_syntax$Elm$Syntax$Node$value(field),
										setters));
							case 22:
								var _v46 = _v45.a;
								var recordNameRange = _v46.a;
								var setters = _v45.b;
								return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
									A4(
										$jfmengels$elm_review_simplify$Simplify$recordAccessChecks,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
										$elm$core$Maybe$Just(recordNameRange),
										$stil4m$elm_syntax$Elm$Syntax$Node$value(field),
										setters));
							case 15:
								var expression = _v45.a.eC;
								return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
									_List_fromArray(
										[
											A3(
											$jfmengels$elm_review_simplify$Simplify$injectRecordAccessIntoLetExpression,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(record),
											expression,
											field)
										]));
							case 4:
								var thenBranch = _v45.b;
								var elseBranch = _v45.c;
								return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
									A4(
										$jfmengels$elm_review_simplify$Simplify$distributeFieldAccess,
										'an if/then/else',
										$stil4m$elm_syntax$Elm$Syntax$Node$range(record),
										_List_fromArray(
											[thenBranch, elseBranch]),
										field));
							case 16:
								var cases = _v45.a.ia;
								return $jfmengels$elm_review_simplify$Simplify$onlyErrors(
									A4(
										$jfmengels$elm_review_simplify$Simplify$distributeFieldAccess,
										'a case/of',
										$stil4m$elm_syntax$Elm$Syntax$Node$range(record),
										A2($elm$core$List$map, $elm$core$Tuple$second, cases),
										field));
							default:
								return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
						}
					default:
						break _v0$18;
				}
			}
			return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
		}
		var operator = _v0.a;
		var left = _v0.c;
		var right = _v0.d;
		var _v43 = A2($elm$core$Dict$get, operator, $jfmengels$elm_review_simplify$Simplify$operatorChecks);
		if (!_v43.$) {
			var checkFn = _v43.a;
			return {
				bO: checkFn(
					{
						E: context.E,
						I: context.I,
						fU: A2(
							$jfmengels$elm_review_simplify$Simplify$RangeDict$member,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							context.aW),
						k: left,
						g: $stil4m$elm_syntax$Elm$Syntax$Node$range(left),
						u: context.u,
						s: context.s,
						A: context.A,
						iV: operator,
						b: $stil4m$elm_syntax$Elm$Syntax$Node$range(node),
						l: right,
						i: $stil4m$elm_syntax$Elm$Syntax$Node$range(right)
					}),
				I: _List_Nil,
				cL: $jfmengels$elm_review_simplify$Simplify$RangeDict$empty,
				aW: (operator === '++') ? A2(
					$jfmengels$elm_review_simplify$Simplify$RangeDict$singleton,
					$stil4m$elm_syntax$Elm$Syntax$Node$range(
						$jfmengels$elm_review_simplify$Simplify$AstHelpers$removeParens(right)),
					0) : $jfmengels$elm_review_simplify$Simplify$RangeDict$empty
			};
		} else {
			return $jfmengels$elm_review_simplify$Simplify$onlyErrors(_List_Nil);
		}
	});
var $jfmengels$elm_review_simplify$Simplify$RangeDict$get = F2(function $jfmengels$elm_review_simplify$Simplify$RangeDict$get$fn(range, _v0) {
		var rangeDict = _v0;
		return A2(
			$elm$core$Dict$get,
			$jfmengels$elm_review_simplify$Simplify$RangeDict$rangeAsString(range),
			rangeDict);
	});
var $jfmengels$elm_review_simplify$Simplify$RangeDict$union = F2(function $jfmengels$elm_review_simplify$Simplify$RangeDict$union$fn(_v0, _v1) {
		var aRangeDict = _v0;
		var bRangeDict = _v1;
		return A2($elm$core$Dict$union, aRangeDict, bRangeDict);
	});
var $jfmengels$elm_review_simplify$Simplify$expressionVisitor = F2(function $jfmengels$elm_review_simplify$Simplify$expressionVisitor$fn(node, context) {
		var expressionRange = $stil4m$elm_syntax$Elm$Syntax$Node$range(node);
		var contextWithInferredConstants = function () {
			var _v3 = A2($jfmengels$elm_review_simplify$Simplify$RangeDict$get, expressionRange, context.cx);
			if (_v3.$ === 1) {
				return context;
			} else {
				var inferredConstants = _v3.a;
				var _v4 = context.I;
				var previous = _v4.a;
				var previousStack = _v4.b;
				return _Utils_update(
					context,
					{
						I: _Utils_Tuple2(
							inferredConstants,
							A2($elm$core$List$cons, previous, previousStack))
					});
			}
		}();
		if (A2($jfmengels$elm_review_simplify$Simplify$RangeDict$member, expressionRange, context.cL)) {
			return _Utils_Tuple2(_List_Nil, contextWithInferredConstants);
		} else {
			var withNewBranchLocalBindings = A2(
				$jfmengels$elm_review_simplify$Simplify$RangeDict$union,
				$jfmengels$elm_review_simplify$Simplify$expressionBranchLocalBindings(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(node)),
				context.cV);
			var withExpressionSurfaceBindings = A3(
				$jfmengels$elm_review_simplify$Simplify$RangeDict$insert,
				expressionRange,
				$jfmengels$elm_review_simplify$Simplify$expressionSurfaceBindings(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(node)),
				context.u);
			var contextWithInferredConstantsAndLocalBindings = function () {
				var _v2 = A2($jfmengels$elm_review_simplify$Simplify$RangeDict$get, expressionRange, context.cV);
				if (_v2.$ === 1) {
					return _Utils_update(
						contextWithInferredConstants,
						{cV: withNewBranchLocalBindings, u: withExpressionSurfaceBindings});
				} else {
					var currentBranchLocalBindings = _v2.a;
					return _Utils_update(
						contextWithInferredConstants,
						{
							cV: A2($jfmengels$elm_review_simplify$Simplify$RangeDict$remove, expressionRange, withNewBranchLocalBindings),
							u: A3($jfmengels$elm_review_simplify$Simplify$RangeDict$insert, expressionRange, currentBranchLocalBindings, withExpressionSurfaceBindings)
						});
				}
			}();
			var _v0 = A2($jfmengels$elm_review_simplify$Simplify$expressionVisitorHelp, node, contextWithInferredConstantsAndLocalBindings);
			var errors = _v0.bO;
			var rangesToIgnore = _v0.cL;
			var rightSidesOfPlusPlus = _v0.aW;
			var inferredConstants = _v0.I;
			return _Utils_Tuple2(
				errors,
				_Utils_update(
					contextWithInferredConstantsAndLocalBindings,
					{
						cx: A3(
							$elm$core$List$foldl,
							F2(
								function (_v1, acc) {
									var range = _v1.a;
									var constants = _v1.b;
									return A3($jfmengels$elm_review_simplify$Simplify$RangeDict$insert, range, constants, acc);
								}),
							contextWithInferredConstants.cx,
							inferredConstants),
						cL: A2($jfmengels$elm_review_simplify$Simplify$RangeDict$union, rangesToIgnore, context.cL),
						aW: A2($jfmengels$elm_review_simplify$Simplify$RangeDict$union, rightSidesOfPlusPlus, context.aW)
					}));
		}
	});
var $jfmengels$elm_review_simplify$Simplify$moduleVisitor = function (schema) {
	return A2(
		$jfmengels$elm_review$Review$Rule$withExpressionExitVisitor,
		F2(
			function (node, context) {
				return _Utils_Tuple2(
					_List_Nil,
					A2($jfmengels$elm_review_simplify$Simplify$expressionExitVisitor, node, context));
			}),
		A2(
			$jfmengels$elm_review$Review$Rule$withExpressionEnterVisitor,
			$jfmengels$elm_review_simplify$Simplify$expressionVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withDeclarationEnterVisitor,
				F2(
					function (node, context) {
						return _Utils_Tuple2(
							_List_Nil,
							A2($jfmengels$elm_review_simplify$Simplify$declarationVisitor, node, context));
					}),
				A2(
					$jfmengels$elm_review$Review$Rule$withDeclarationListVisitor,
					F2(
						function (decls, context) {
							return _Utils_Tuple2(
								_List_Nil,
								A2($jfmengels$elm_review_simplify$Simplify$declarationListVisitor, decls, context));
						}),
					schema))));
};
var $jfmengels$elm_review_simplify$Simplify$rule = function (_v0) {
	var config = _v0;
	return $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
		$jfmengels$elm_review$Review$Rule$providesFixesForProjectRule(
			A2(
				$jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator,
				{cl: $jfmengels$elm_review_simplify$Simplify$foldProjectContexts, cn: $jfmengels$elm_review_simplify$Simplify$fromModuleToProject, gY: $jfmengels$elm_review_simplify$Simplify$fromProjectToModule},
				$jfmengels$elm_review$Review$Rule$withContextFromImportedModules(
					A2(
						$jfmengels$elm_review$Review$Rule$withModuleVisitor,
						$jfmengels$elm_review_simplify$Simplify$moduleVisitor,
						A2(
							$jfmengels$elm_review$Review$Rule$withDirectDependenciesProjectVisitor,
							$jfmengels$elm_review_simplify$Simplify$dependenciesVisitor(
								$elm$core$Set$fromList(config.eK)),
							A2($jfmengels$elm_review$Review$Rule$newProjectRuleSchema, 'Simplify', $jfmengels$elm_review_simplify$Simplify$initialContext)))))));
};
var $author$project$ReviewConfig$config = _List_fromArray(
	[
		$jfmengels$elm_review_documentation$Docs$ReviewAtDocs$rule,
		$jfmengels$elm_review_common$NoConfusingPrefixOperator$rule,
		$jfmengels$elm_review_debug$NoDebug$Log$rule,
		A2(
		$jfmengels$elm_review$Review$Rule$ignoreErrorsForDirectories,
		_List_fromArray(
			['tests/']),
		$jfmengels$elm_review_debug$NoDebug$TodoOrToString$rule),
		$jfmengels$elm_review_common$NoExposingEverything$rule,
		$jfmengels$elm_review_common$NoImportingEverything$rule(_List_Nil),
		$jfmengels$elm_review_common$NoMissingTypeAnnotation$rule,
		$jfmengels$elm_review_common$NoMissingTypeExpose$rule,
		$jfmengels$elm_review_code_style$NoSimpleLetBody$rule,
		$jfmengels$elm_review_common$NoPrematureLetComputation$rule,
		$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructors$rule(_List_Nil),
		$jfmengels$elm_review_unused$NoUnused$CustomTypeConstructorArgs$rule,
		$jfmengels$elm_review_unused$NoUnused$Dependencies$rule,
		$jfmengels$elm_review_unused$NoUnused$Exports$rule,
		$jfmengels$elm_review_unused$NoUnused$Parameters$rule,
		$jfmengels$elm_review_unused$NoUnused$Patterns$rule,
		$jfmengels$elm_review_unused$NoUnused$Variables$rule,
		$jfmengels$elm_review_simplify$Simplify$rule($jfmengels$elm_review_simplify$Simplify$defaults)
	]);
var $author$project$Elm$Review$Main$DecodedFlags = function (fixMode) {
	return function (fixLimit) {
		return function (enableExtract) {
			return function (unsuppressMode) {
				return function (detailsMode) {
					return function (reportMode) {
						return function (ignoreProblematicDependencies) {
							return function (rulesFilter) {
								return function (ignoredDirs) {
									return function (ignoredFiles) {
										return function (writeSuppressionFiles) {
											return function (logger) {
												return {aH: detailsMode, c3: enableExtract, cj: fixLimit, aQ: fixMode, cr: ignoreProblematicDependencies, fO: ignoredDirs, fP: ignoredFiles, fW: logger, b0: reportMode, f9: rulesFilter, aZ: unsuppressMode, dy: writeSuppressionFiles};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$Elm$Review$Reporter$WithDetails = 0;
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $author$project$Elm$Review$Main$decodeDetailsMode = A2(
	$elm$json$Json$Decode$andThen,
	function (detailsMode) {
		switch (detailsMode) {
			case 'with-details':
				return $elm$json$Json$Decode$succeed(0);
			case 'without-details':
				return $elm$json$Json$Decode$succeed(1);
			default:
				return $elm$json$Json$Decode$fail('I could not understand the following details mode: ' + detailsMode);
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Elm$Review$Main$Mode_Fix = 1;
var $author$project$Elm$Review$Main$Mode_FixAll = 2;
var $author$project$Elm$Review$Main$decodeFix = A2(
	$elm$json$Json$Decode$andThen,
	function (fixMode) {
		switch (fixMode) {
			case 'dontfix':
				return $elm$json$Json$Decode$succeed(0);
			case 'fix':
				return $elm$json$Json$Decode$succeed(1);
			case 'fixAll':
				return $elm$json$Json$Decode$succeed(2);
			default:
				return $elm$json$Json$Decode$fail('I could not understand the following fix mode: ' + fixMode);
		}
	},
	$elm$json$Json$Decode$string);
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $author$project$Elm$Review$Main$decodeFixLimit = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			function (n) {
				return $elm$core$Maybe$Just(
					A2($elm$core$Basics$max, 1, n));
			},
			$elm$json$Json$Decode$int),
			$elm$json$Json$Decode$null($elm$core$Maybe$Nothing)
		]));
var $author$project$Elm$Review$Main$Json = 1;
var $author$project$Elm$Review$Main$decodeReportMode = A2(
	$elm$json$Json$Decode$andThen,
	function (reportMode) {
		switch (reportMode) {
			case 'human':
				return $elm$json$Json$Decode$succeed(0);
			case 'json':
				return $elm$json$Json$Decode$succeed(1);
			default:
				return $elm$json$Json$Decode$fail('I could not understand the following report mode: ' + reportMode);
		}
	},
	$elm$json$Json$Decode$string);
var $elm$json$Json$Decode$list = _Json_decodeList;
var $author$project$Elm$Review$Main$decodeRulesFilter = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			A2($elm$core$Basics$composeR, $elm$core$Set$fromList, $elm$core$Maybe$Just),
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
			$elm$json$Json$Decode$null($elm$core$Maybe$Nothing)
		]));
var $author$project$Elm$Review$CliCommunication$Key = $elm$core$Basics$identity;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$Elm$Review$CliCommunication$decoder = A2($elm$json$Json$Decode$map, $elm$core$Basics$identity, $elm$json$Json$Decode$value);
var $author$project$Elm$Review$UnsuppressMode$UnsuppressAll = {$: 0};
var $author$project$Elm$Review$UnsuppressMode$UnsuppressRules = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$UnsuppressMode$decoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			A2($elm$core$Basics$composeR, $elm$core$Set$fromList, $author$project$Elm$Review$UnsuppressMode$UnsuppressRules),
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
			A2(
			$elm$json$Json$Decode$map,
			function (bool) {
				return bool ? $author$project$Elm$Review$UnsuppressMode$UnsuppressAll : $author$project$Elm$Review$UnsuppressMode$UnsuppressNone;
			},
			$elm$json$Json$Decode$bool)
		]));
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $author$project$Elm$Review$Main$field = F3(function $author$project$Elm$Review$Main$field$fn(key, valDecoder, decoder) {
		return A3(
			$elm$json$Json$Decode$map2,
			$elm$core$Basics$apR,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $author$project$Elm$Review$Main$decodeFlags = A3(
	$author$project$Elm$Review$Main$field,
	'logger',
	$author$project$Elm$Review$CliCommunication$decoder,
	A3(
		$author$project$Elm$Review$Main$field,
		'writeSuppressionFiles',
		$elm$json$Json$Decode$bool,
		A3(
			$author$project$Elm$Review$Main$field,
			'ignoredFiles',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
			A3(
				$author$project$Elm$Review$Main$field,
				'ignoredDirs',
				$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
				A3(
					$author$project$Elm$Review$Main$field,
					'rulesFilter',
					$author$project$Elm$Review$Main$decodeRulesFilter,
					A3(
						$author$project$Elm$Review$Main$field,
						'ignoreProblematicDependencies',
						$elm$json$Json$Decode$bool,
						A3(
							$author$project$Elm$Review$Main$field,
							'report',
							$author$project$Elm$Review$Main$decodeReportMode,
							A3(
								$author$project$Elm$Review$Main$field,
								'detailsMode',
								$author$project$Elm$Review$Main$decodeDetailsMode,
								A3(
									$author$project$Elm$Review$Main$field,
									'unsuppress',
									$author$project$Elm$Review$UnsuppressMode$decoder,
									A3(
										$author$project$Elm$Review$Main$field,
										'enableExtract',
										$elm$json$Json$Decode$bool,
										A3(
											$author$project$Elm$Review$Main$field,
											'fixLimit',
											$author$project$Elm$Review$Main$decodeFixLimit,
											A3(
												$author$project$Elm$Review$Main$field,
												'fixMode',
												$author$project$Elm$Review$Main$decodeFix,
												$elm$json$Json$Decode$succeed($author$project$Elm$Review$Main$DecodedFlags)))))))))))));
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Elm$Review$CliCommunication$dummy = $elm$json$Json$Encode$bool(true);
var $author$project$Elm$Review$RefusedErrorFixes$RefusedErrorFixes = $elm$core$Basics$identity;
var $author$project$Elm$Review$RefusedErrorFixes$empty = $elm$core$Set$empty;
var $author$project$Elm$Review$SuppressedErrors$SuppressedErrors = $elm$core$Basics$identity;
var $author$project$Elm$Review$SuppressedErrors$empty = $elm$core$Dict$empty;
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$Elm$Review$Main$encodePosition = function (position) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'line',
				$elm$json$Json$Encode$int(position.b1)),
				_Utils_Tuple2(
				'column',
				$elm$json$Json$Encode$int(position.bH))
			]));
};
var $author$project$Elm$Review$Main$encodeRange = function (range) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'start',
				$author$project$Elm$Review$Main$encodePosition(range.dv)),
				_Utils_Tuple2(
				'end',
				$author$project$Elm$Review$Main$encodePosition(range.c4))
			]));
};
var $author$project$Elm$Review$Main$encodeReportPart = function (_v0) {
	var str = _v0.jb;
	var color = _v0.ic;
	var href = _v0.iy;
	return (_Utils_eq(color, $elm$core$Maybe$Nothing) && _Utils_eq(href, $elm$core$Maybe$Nothing)) ? $elm$json$Json$Encode$string(str) : $elm$json$Json$Encode$object(
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'string',
						$elm$json$Json$Encode$string(str))),
					A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$json$Json$Encode$string,
						$elm$core$Tuple$pair('color')),
					color),
					A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$json$Json$Encode$string,
						$elm$core$Tuple$pair('href')),
					href)
				])));
};
var $author$project$Elm$Review$Main$encodeReport = function (texts) {
	return A2($elm$json$Json$Encode$list, $author$project$Elm$Review$Main$encodeReportPart, texts);
};
var $author$project$Elm$Review$Text$Text = $elm$core$Basics$identity;
var $author$project$Elm$Review$Text$from = function (value) {
	return {ic: $elm$core$Maybe$Nothing, iy: $elm$core$Maybe$Nothing, jb: value};
};
var $elm$core$Array$fromListHelp = F3(function $elm$core$Array$fromListHelp$fn(list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{Z: nodeList, K: nodeListSize, S: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(function $elm$core$Array$getHelp$fn(shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!_v0.$) {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(function $elm$core$Array$get$fn(index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$String$trimLeft = _String_trimLeft;
var $author$project$Elm$Review$Reporter$getIndexOfFirstNonSpace = function (string) {
	return $elm$core$String$length(string) - $elm$core$String$length(
		$elm$core$String$trimLeft(string));
};
var $elm$core$List$intersperse = F2(function $elm$core$List$intersperse$fn(sep, xs) {
  if (!xs.b) {
    return xs;
  }
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;

  end.b = _List_Cons(xs.a, _List_Nil);
  end = end.b;
  xs = xs.b;

  for (; xs.b; xs = xs.b) {
    var valNode = _List_Cons(xs.a, _List_Nil);
    var sepNode = _List_Cons(sep, valNode);
    end.b = sepNode;
    end = valNode;
  }

  return tmp.b;
});
var $author$project$Elm$Review$Text$join = F2(function $author$project$Elm$Review$Text$join$fn(sep, chunks) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$intersperse,
				_List_fromArray(
					[
						$author$project$Elm$Review$Text$from(sep)
					]),
				chunks));
	});
var $author$project$Elm$Review$Reporter$lengthOfLineNumber = function (lineNumber) {
	return $elm$core$String$length(
		$elm$core$String$fromInt(lineNumber));
};
var $elm$core$String$padLeft = F3(function $elm$core$String$padLeft$fn(n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $author$project$Elm$Review$Reporter$lineNumberPrefix = F2(function $author$project$Elm$Review$Reporter$lineNumberPrefix$fn(maxLineNumberLength, rowIndex) {
		return A3(
			$elm$core$String$padLeft,
			maxLineNumberLength,
			' ',
			$elm$core$String$fromInt(rowIndex + 1)) + '| ';
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $elm$core$String$trimRight = _String_trimRight;
var $author$project$Elm$Review$Text$inRed = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			ic: $elm$core$Maybe$Just('#FF0000')
		});
};
var $author$project$Elm$Review$Reporter$underline = F2(function $author$project$Elm$Review$Reporter$underline$fn(gutterLength, _v0) {
		var start = _v0.dv;
		var end = _v0.c4;
		var lineContent = _v0.eR;
		var lineChars = $elm$core$String$toList(lineContent);
		var preText = A2($elm$core$List$take, (gutterLength + start) - 1, lineChars);
		var unicodePreOffset = $elm$core$String$length(
			$elm$core$String$fromList(preText)) - $elm$core$List$length(preText);
		var inText = A2(
			$elm$core$List$take,
			end - start,
			A2($elm$core$List$drop, (gutterLength + start) - 1, lineChars));
		var unicodeInOffset = $elm$core$String$length(
			$elm$core$String$fromList(inText)) - $elm$core$List$length(inText);
		return _List_fromArray(
			[
				$author$project$Elm$Review$Text$from(
				A2($elm$core$String$repeat, ((gutterLength + unicodePreOffset) + start) - 1, ' ')),
				$author$project$Elm$Review$Text$inRed(
				$author$project$Elm$Review$Text$from(
					A2($elm$core$String$repeat, (unicodeInOffset + end) - start, '^')))
			]);
	});
var $author$project$Elm$Review$Reporter$underlineWholeLine = F2(function $author$project$Elm$Review$Reporter$underlineWholeLine$fn(gutterLength, line) {
		var start = $author$project$Elm$Review$Reporter$getIndexOfFirstNonSpace(line);
		var end = $elm$core$String$length(line);
		return _List_fromArray(
			[
				$author$project$Elm$Review$Text$from(
				A2($elm$core$String$repeat, gutterLength + start, ' ')),
				$author$project$Elm$Review$Text$inRed(
				$author$project$Elm$Review$Text$from(
					A2($elm$core$String$repeat, end - start, '^')))
			]);
	});
var $author$project$Elm$Review$Reporter$codeExtract = function (_v0) {
	var source = _v0;
	var lines = $elm$core$Array$fromList(
		$elm$core$String$lines(source));
	var getRowAtLine = function (rowIndex) {
		var _v2 = A2($elm$core$Array$get, rowIndex, lines);
		if (!_v2.$) {
			var line = _v2.a;
			return $elm$core$String$trimRight(line);
		} else {
			return '';
		}
	};
	return function (_v1) {
		var start = _v1.dv;
		var end = _v1.c4;
		var maxLineNumber = $elm$core$String$isEmpty(
			getRowAtLine(end.b1 + 1)) ? end.b1 : (end.b1 + 1);
		var maxLineNumberLength = $author$project$Elm$Review$Reporter$lengthOfLineNumber(maxLineNumber);
		var gutterLength = $elm$core$String$length(
			A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, maxLineNumber));
		var getRowWithLineNumberUnlessEmpty = function (rowIndex) {
			var line = getRowAtLine(rowIndex);
			return $elm$core$String$isEmpty(line) ? _List_Nil : _List_fromArray(
				[
					$author$project$Elm$Review$Text$from(
					_Utils_ap(
						A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, rowIndex),
						line))
				]);
		};
		var getRowWithLineNumber = function (rowIndex) {
			return _Utils_ap(
				A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, rowIndex),
				getRowAtLine(rowIndex));
		};
		if (_Utils_eq(start.b1, end.b1)) {
			if (_Utils_eq(start.bH, end.bH)) {
				return _List_Nil;
			} else {
				var lineContent = getRowWithLineNumber(start.b1 - 1);
				return A2(
					$author$project$Elm$Review$Text$join,
					'\n',
					A2(
						$elm$core$List$filter,
						A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$List$isEmpty),
						_List_fromArray(
							[
								getRowWithLineNumberUnlessEmpty(start.b1 - 2),
								_List_fromArray(
								[
									$author$project$Elm$Review$Text$from(lineContent)
								]),
								A2(
								$author$project$Elm$Review$Reporter$underline,
								gutterLength,
								{c4: end.bH, eR: lineContent, dv: start.bH}),
								getRowWithLineNumberUnlessEmpty(end.b1)
							])));
			}
		} else {
			var startLineNumber = start.b1 - 1;
			var startLineContent = getRowAtLine(startLineNumber);
			var startLineContentWithLineNumber = _Utils_ap(
				A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, startLineNumber),
				startLineContent);
			var linesBetweenStartAndEnd = A2($elm$core$List$range, start.b1, end.b1 - 2);
			var endLine = end.b1 - 1;
			var endLineContent = getRowAtLine(endLine);
			var endLineContentWithLineNumber = _Utils_ap(
				A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, endLine),
				endLineContent);
			return A2(
				$author$project$Elm$Review$Text$join,
				'\n',
				A2(
					$elm$core$List$filter,
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$List$isEmpty),
					_List_fromArray(
						[
							getRowWithLineNumberUnlessEmpty(startLineNumber - 1),
							_List_fromArray(
							[
								$author$project$Elm$Review$Text$from(startLineContentWithLineNumber)
							]),
							A2(
							$author$project$Elm$Review$Reporter$underline,
							gutterLength,
							{
								c4: $elm$core$List$length(
									$elm$core$String$toList(startLineContent)) + 1,
								eR: startLineContentWithLineNumber,
								dv: start.bH
							}),
							A2(
							$author$project$Elm$Review$Text$join,
							'\n',
							A2(
								$elm$core$List$map,
								function (middleLine) {
									var line = getRowAtLine(middleLine);
									return $elm$core$String$isEmpty(line) ? _List_fromArray(
										[
											$author$project$Elm$Review$Text$from(
											getRowWithLineNumber(middleLine))
										]) : A2(
										$elm$core$List$cons,
										$author$project$Elm$Review$Text$from(
											getRowWithLineNumber(middleLine)),
										A2(
											$elm$core$List$cons,
											$author$project$Elm$Review$Text$from('\n'),
											A2($author$project$Elm$Review$Reporter$underlineWholeLine, gutterLength, line)));
								},
								linesBetweenStartAndEnd)),
							_List_fromArray(
							[
								$author$project$Elm$Review$Text$from(endLineContentWithLineNumber)
							]),
							A2(
							$author$project$Elm$Review$Reporter$underline,
							gutterLength,
							{
								c4: end.bH,
								eR: endLineContentWithLineNumber,
								dv: $author$project$Elm$Review$Reporter$getIndexOfFirstNonSpace(endLineContent) + 1
							}),
							getRowWithLineNumberUnlessEmpty(endLine + 1)
						])));
		}
	};
};
var $author$project$Elm$Review$Text$inBlue = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			ic: $elm$core$Maybe$Just('#33BBC8')
		});
};
var $author$project$Elm$Review$Text$inYellow = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			ic: $elm$core$Maybe$Just('#E8C338')
		});
};
var $author$project$Elm$Review$Reporter$addFixPrefix = F3(function $author$project$Elm$Review$Reporter$addFixPrefix$fn(mode, error, previous) {
		if (mode === 1) {
			var _v1 = error.gW;
			if (!_v1.$) {
				return A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$inYellow(
						$author$project$Elm$Review$Text$from('(FIX FAILED) ')),
					previous);
			} else {
				return previous;
			}
		} else {
			if (error.hw) {
				var _v2 = error.gW;
				if (!_v2.$) {
					return previous;
				} else {
					return A2(
						$elm$core$List$cons,
						$author$project$Elm$Review$Text$inBlue(
							$author$project$Elm$Review$Text$from('(fix) ')),
						previous);
				}
			} else {
				return previous;
			}
		}
	});
var $author$project$Elm$Review$Text$inOrange = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			ic: $elm$core$Maybe$Just('#FFA500')
		});
};
var $author$project$Elm$Review$Reporter$addSuppressedPrefix = F2(function $author$project$Elm$Review$Reporter$addSuppressedPrefix$fn(error, previous) {
		return error.hK ? A2(
			$elm$core$List$cons,
			$author$project$Elm$Review$Text$inOrange(
				$author$project$Elm$Review$Text$from('(unsuppressed) ')),
			previous) : previous;
	});
var $author$project$Elm$Review$Text$withLink = F2(function $author$project$Elm$Review$Text$withLink$fn(maybeLink, _v0) {
		var text = _v0;
		return _Utils_update(
			text,
			{iy: maybeLink});
	});
var $author$project$Elm$Review$Reporter$formatErrorTitle = F2(function $author$project$Elm$Review$Reporter$formatErrorTitle$fn(mode, error) {
		return A2(
			$author$project$Elm$Review$Reporter$addSuppressedPrefix,
			error,
			A3(
				$author$project$Elm$Review$Reporter$addFixPrefix,
				mode,
				error,
				_List_fromArray(
					[
						A2(
						$author$project$Elm$Review$Text$withLink,
						error.hA,
						$author$project$Elm$Review$Text$inRed(
							$author$project$Elm$Review$Text$from(error.f8))),
						$author$project$Elm$Review$Text$from(': ' + error.bx)
					])));
	});
var $author$project$Elm$Review$Reporter$reasonFromProblem = function (problem) {
	switch (problem.$) {
		case 0:
			return 'it resulted in the same source code.';
		case 1:
			return 'it resulted in invalid Elm code.';
		default:
			return 'it was invalid.';
	}
};
var $author$project$Elm$Review$Reporter$formatErrorWithExtract = F4(function $author$project$Elm$Review$Reporter$formatErrorWithExtract$fn(detailsMode, mode, source, error) {
		var fixFailMessage = function () {
			if (mode === 1) {
				var _v3 = error.gW;
				if (!_v3.$) {
					var problem = _v3.a;
					return _List_fromArray(
						[
							$author$project$Elm$Review$Text$from('\n\n'),
							$author$project$Elm$Review$Text$inYellow(
							$author$project$Elm$Review$Text$from(
								'I failed to apply the automatic fix because ' + $author$project$Elm$Review$Reporter$reasonFromProblem(problem)))
						]);
				} else {
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		}();
		var details = function () {
			if (!detailsMode) {
				return A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$from('\n\n'),
					A2(
						$elm$core$List$intersperse,
						$author$project$Elm$Review$Text$from('\n\n'),
						A2($elm$core$List$map, $author$project$Elm$Review$Text$from, error.eq)));
			} else {
				return _List_Nil;
			}
		}();
		var codeExtract_ = function () {
			var _v0 = A2($author$project$Elm$Review$Reporter$codeExtract, source, error.f4);
			if (!_v0.b) {
				return _List_Nil;
			} else {
				var sourceCodeExtract = _v0;
				return A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$from('\n\n'),
					sourceCodeExtract);
			}
		}();
		return $elm$core$List$concat(
			_List_fromArray(
				[
					A2($author$project$Elm$Review$Reporter$formatErrorTitle, mode, error),
					codeExtract_,
					details,
					fixFailMessage
				]));
	});
var $author$project$Elm$Review$Text$simplifyHelp = F3(function $author$project$Elm$Review$Text$simplifyHelp$fn(previousTexts, lastText, chunks) {
		simplifyHelp:
		while (true) {
			if (!chunks.b) {
				return A2($elm$core$List$cons, lastText, previousTexts);
			} else {
				var newLastText = chunks.a;
				var restOfChunks = chunks.b;
				if (_Utils_eq(lastText.ic, newLastText.ic) && _Utils_eq(lastText.iy, newLastText.iy)) {
					var $temp$previousTexts = previousTexts,
						$temp$lastText = {
						ic: lastText.ic,
						iy: lastText.iy,
						jb: _Utils_ap(lastText.jb, newLastText.jb)
					},
						$temp$chunks = restOfChunks;
					previousTexts = $temp$previousTexts;
					lastText = $temp$lastText;
					chunks = $temp$chunks;
					continue simplifyHelp;
				} else {
					var $temp$previousTexts = A2($elm$core$List$cons, lastText, previousTexts),
						$temp$lastText = newLastText,
						$temp$chunks = restOfChunks;
					previousTexts = $temp$previousTexts;
					lastText = $temp$lastText;
					chunks = $temp$chunks;
					continue simplifyHelp;
				}
			}
		}
	});
var $author$project$Elm$Review$Text$simplify = function (chunks) {
	if (!chunks.b) {
		return _List_Nil;
	} else {
		var chunk = chunks.a;
		var restOfChunks = chunks.b;
		return $elm$core$List$reverse(
			A3($author$project$Elm$Review$Text$simplifyHelp, _List_Nil, chunk, restOfChunks));
	}
};
var $author$project$Elm$Review$Text$toRecord = function (_v0) {
	var text = _v0;
	return text;
};
var $author$project$Elm$Review$Reporter$formatIndividualError = F3(function $author$project$Elm$Review$Reporter$formatIndividualError$fn(detailsMode, source, error) {
		return A2(
			$elm$core$List$map,
			$author$project$Elm$Review$Text$toRecord,
			$author$project$Elm$Review$Text$simplify(
				A4($author$project$Elm$Review$Reporter$formatErrorWithExtract, detailsMode, 0, source, error)));
	});
var $author$project$Elm$Review$Main$encodeConfigurationError = F2(function $author$project$Elm$Review$Main$encodeConfigurationError$fn(detailsMode, error) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'rule',
					$elm$json$Json$Encode$string(error.f8)),
					_Utils_Tuple2(
					'message',
					$elm$json$Json$Encode$string(error.bx)),
					_Utils_Tuple2(
					'details',
					A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, error.eq)),
					_Utils_Tuple2(
					'region',
					$author$project$Elm$Review$Main$encodeRange($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)),
					_Utils_Tuple2(
					'formatted',
					$author$project$Elm$Review$Main$encodeReport(
						A3($author$project$Elm$Review$Reporter$formatIndividualError, detailsMode, '', error)))
				]));
	});
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Elm$Review$Main$encodeFilePath = function (filePath) {
	switch (filePath.$) {
		case 0:
			var path = filePath.a;
			return $elm$json$Json$Encode$string(path);
		case 1:
			return $elm$json$Json$Encode$null;
		default:
			return $elm$json$Json$Encode$null;
	}
};
var $author$project$Elm$Review$Main$encodeConfigurationErrors = F2(function $author$project$Elm$Review$Main$encodeConfigurationErrors$fn(detailsMode, errors) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'path',
					$author$project$Elm$Review$Main$encodeFilePath($author$project$Elm$Review$Reporter$ConfigurationError)),
					_Utils_Tuple2(
					'errors',
					A2(
						$elm$json$Json$Encode$list,
						$author$project$Elm$Review$Main$encodeConfigurationError(detailsMode),
						errors))
				]));
	});
var $author$project$Elm$Review$Reporter$Fixing = 1;
var $author$project$Elm$Review$Reporter$classifyFixesHelp = F2(function $author$project$Elm$Review$Reporter$classifyFixesHelp$fn(errors, acc) {
		classifyFixesHelp:
		while (true) {
			if (!errors.b) {
				return acc;
			} else {
				var error = errors.a;
				var rest = errors.b;
				var _v1 = error.gW;
				if (!_v1.$) {
					var $temp$errors = rest,
						$temp$acc = {
						cp: acc.cp,
						b2: A2($elm$core$Set$insert, error.f8, acc.b2)
					};
					errors = $temp$errors;
					acc = $temp$acc;
					continue classifyFixesHelp;
				} else {
					var $temp$errors = rest,
						$temp$acc = {cp: true, b2: acc.b2};
					errors = $temp$errors;
					acc = $temp$acc;
					continue classifyFixesHelp;
				}
			}
		}
	});
var $author$project$Elm$Review$Reporter$classifyFixes = function (errors) {
	var _v0 = A2(
		$author$project$Elm$Review$Reporter$classifyFixesHelp,
		errors,
		{cp: false, b2: $elm$core$Set$empty});
	var rulesWithInvalidFixes = _v0.b2;
	var hasIgnoredFixableErrors = _v0.cp;
	return {cp: hasIgnoredFixableErrors, b2: rulesWithInvalidFixes};
};
var $author$project$Elm$Review$Reporter$filePath = function (path_) {
	switch (path_.$) {
		case 0:
			var str = path_.a;
			return str;
		case 1:
			return '';
		default:
			return '';
	}
};
var $author$project$Elm$Review$Reporter$fixableErrors = function (files) {
	return A2(
		$elm$core$List$concatMap,
		function (_v0) {
			var errors = _v0.bO;
			return A2(
				$elm$core$List$filter,
				function (error) {
					return error.hw;
				},
				errors);
		},
		files);
};
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $author$project$Elm$Review$SuppressedErrors$count = function (_v0) {
	var suppressedErrors = _v0;
	return $elm$core$List$sum(
		$elm$core$Dict$values(suppressedErrors));
};
var $author$project$Elm$Review$Text$inGreen = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			ic: $elm$core$Maybe$Just('#008000')
		});
};
var $author$project$Elm$Review$Reporter$pluralizeEnding = F2(function $author$project$Elm$Review$Reporter$pluralizeEnding$fn(n, word) {
		return (n > 1) ? (word + 's') : word;
	});
var $author$project$Elm$Review$Reporter$formatNoErrors = F3(function $author$project$Elm$Review$Reporter$formatNoErrors$fn(suppressedErrors, originalNumberOfSuppressedErrors, errorsHaveBeenFixedPreviously) {
		var numberOfSuppressedErrors = $author$project$Elm$Review$SuppressedErrors$count(suppressedErrors);
		var suppressedErrorMessage = function () {
			if (!numberOfSuppressedErrors) {
				return _List_Nil;
			} else {
				var are = (numberOfSuppressedErrors === 1) ? 'is' : 'are';
				return $elm$core$List$concat(
					_List_fromArray(
						[
							_List_fromArray(
							[
								$author$project$Elm$Review$Text$from('\n\nThere ' + (are + ' still ')),
								$author$project$Elm$Review$Text$inOrange(
								$author$project$Elm$Review$Text$from(
									$elm$core$String$fromInt(numberOfSuppressedErrors) + (' suppressed ' + A2($author$project$Elm$Review$Reporter$pluralizeEnding, numberOfSuppressedErrors, 'error')))),
								$author$project$Elm$Review$Text$from(' to address')
							]),
							(_Utils_cmp(numberOfSuppressedErrors, originalNumberOfSuppressedErrors) < 0) ? _List_fromArray(
							[
								$author$project$Elm$Review$Text$from(', and you just fixed '),
								$author$project$Elm$Review$Text$inGreen(
								$author$project$Elm$Review$Text$from(
									$elm$core$String$fromInt(originalNumberOfSuppressedErrors - numberOfSuppressedErrors))),
								$author$project$Elm$Review$Text$from('!')
							]) : _List_fromArray(
							[
								$author$project$Elm$Review$Text$from('.')
							])
						]));
			}
		}();
		var mainMessage = errorsHaveBeenFixedPreviously ? 'I found no more errors!' : 'I found no errors!';
		return A2(
			$elm$core$List$map,
			$author$project$Elm$Review$Text$toRecord,
			A2(
				$elm$core$List$cons,
				$author$project$Elm$Review$Text$from(mainMessage),
				suppressedErrorMessage));
	});
var $author$project$Elm$Review$Reporter$fileSeparator = F2(function $author$project$Elm$Review$Reporter$fileSeparator$fn(pathAbove, pathBelow) {
		return _List_fromArray(
			[
				$author$project$Elm$Review$Text$from(
				'\n\n' + A2(
					$elm$core$String$repeat,
					73 - $elm$core$String$length(
						$author$project$Elm$Review$Reporter$filePath(pathAbove)),
					' ')),
				$author$project$Elm$Review$Text$inRed(
				$author$project$Elm$Review$Text$from(
					($author$project$Elm$Review$Reporter$filePath(pathAbove) + '  ↑') + ('\n====o======================================================================o====' + ('\n    ↓  ' + $author$project$Elm$Review$Reporter$filePath(pathBelow))))),
				$author$project$Elm$Review$Text$from('\n\n\n')
			]);
	});
var $author$project$Elm$Review$Reporter$compareRange = F2(function $author$project$Elm$Review$Reporter$compareRange$fn(a, b) {
		return (_Utils_cmp(a.dv.b1, b.dv.b1) < 0) ? 0 : ((_Utils_cmp(a.dv.b1, b.dv.b1) > 0) ? 2 : ((_Utils_cmp(a.dv.bH, b.dv.bH) < 0) ? 0 : ((_Utils_cmp(a.dv.bH, b.dv.bH) > 0) ? 2 : ((_Utils_cmp(a.c4.b1, b.c4.b1) < 0) ? 0 : ((_Utils_cmp(a.c4.b1, b.c4.b1) > 0) ? 2 : ((_Utils_cmp(a.c4.bH, b.c4.bH) < 0) ? 0 : ((_Utils_cmp(a.c4.bH, b.c4.bH) > 0) ? 2 : 1)))))));
	});
var $author$project$Elm$Review$Reporter$compareErrorPositions = F2(function $author$project$Elm$Review$Reporter$compareErrorPositions$fn(a, b) {
		return A2($author$project$Elm$Review$Reporter$compareRange, a.f4, b.f4);
	});
var $author$project$Elm$Review$Reporter$firstErrorPrefix = '-- ELM-REVIEW ERROR -';
var $author$project$Elm$Review$Reporter$header = F3(function $author$project$Elm$Review$Reporter$header$fn(isFirstError, filePath_, range) {
		var position = function () {
			switch (filePath_.$) {
				case 0:
					var str = filePath_.a;
					return ' ' + (str + (':' + ($elm$core$String$fromInt(range.dv.b1) + (':' + $elm$core$String$fromInt(range.dv.bH)))));
				case 1:
					return ' GLOBAL ERROR';
				default:
					return ' CONFIGURATION ERROR';
			}
		}();
		return isFirstError ? $author$project$Elm$Review$Text$inBlue(
			$author$project$Elm$Review$Text$from(
				_Utils_ap(
					$author$project$Elm$Review$Reporter$firstErrorPrefix,
					A3(
						$elm$core$String$padLeft,
						80 - $elm$core$String$length($author$project$Elm$Review$Reporter$firstErrorPrefix),
						'-',
						position)))) : $author$project$Elm$Review$Text$from(
			'────' + A3($elm$core$String$padLeft, 76, '─', position));
	});
var $author$project$Elm$Review$Reporter$formatReportForFileWithExtract = F3(function $author$project$Elm$Review$Reporter$formatReportForFileWithExtract$fn(detailsMode, mode, file) {
		return A2(
			$author$project$Elm$Review$Text$join,
			'\n\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (index, error) {
						return A2(
							$author$project$Elm$Review$Text$join,
							'\n\n',
							_List_fromArray(
								[
									_List_fromArray(
									[
										A3($author$project$Elm$Review$Reporter$header, !index, file.iX, error.f4)
									]),
									A4($author$project$Elm$Review$Reporter$formatErrorWithExtract, detailsMode, mode, file.i8, error)
								]));
					}),
				A2($elm$core$List$sortWith, $author$project$Elm$Review$Reporter$compareErrorPositions, file.bO)));
	});
var $author$project$Elm$Review$Reporter$formatReports = F3(function $author$project$Elm$Review$Reporter$formatReports$fn(detailsMode, mode, files) {
		if (!files.b) {
			return _List_Nil;
		} else {
			if (!files.b.b) {
				var file = files.a;
				return A3($author$project$Elm$Review$Reporter$formatReportForFileWithExtract, detailsMode, mode, file);
			} else {
				var firstFile = files.a;
				var _v1 = files.b;
				var secondFile = _v1.a;
				var restOfFiles = _v1.b;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A3($author$project$Elm$Review$Reporter$formatReportForFileWithExtract, detailsMode, mode, firstFile),
							A2($author$project$Elm$Review$Reporter$fileSeparator, firstFile.iX, secondFile.iX),
							A3(
							$author$project$Elm$Review$Reporter$formatReports,
							detailsMode,
							mode,
							A2($elm$core$List$cons, secondFile, restOfFiles))
						]));
			}
		}
	});
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === -2) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Set$isEmpty = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$isEmpty(dict);
};
var $author$project$Elm$Review$Reporter$pluralize = F2(function $author$project$Elm$Review$Reporter$pluralize$fn(n, word) {
		return $elm$core$String$fromInt(n) + (' ' + A2($author$project$Elm$Review$Reporter$pluralizeEnding, n, word));
	});
var $author$project$Elm$Review$Reporter$showUnsuppressedWarning = F2(function $author$project$Elm$Review$Reporter$showUnsuppressedWarning$fn(unsuppressMode, files) {
		switch (unsuppressMode.$) {
			case 0:
				return false;
			case 1:
				var set = unsuppressMode.a;
				return A2(
					$elm$core$List$any,
					function (file) {
						return A2(
							$elm$core$List$any,
							function (error) {
								return error.hK && (!A2($elm$core$Set$member, error.f8, set));
							},
							file.bO);
					},
					files);
			default:
				return A2(
					$elm$core$List$any,
					function (file) {
						return A2(
							$elm$core$List$any,
							function (error) {
								return error.hK;
							},
							file.bO);
					},
					files);
		}
	});
var $author$project$Elm$Review$Reporter$totalNumberOfErrorsHelp = F2(function $author$project$Elm$Review$Reporter$totalNumberOfErrorsHelp$fn(files, acc) {
		totalNumberOfErrorsHelp:
		while (true) {
			if (!files.b) {
				return acc;
			} else {
				var file = files.a;
				var xs = files.b;
				var $temp$files = xs,
					$temp$acc = acc + $elm$core$List$length(file.bO);
				files = $temp$files;
				acc = $temp$acc;
				continue totalNumberOfErrorsHelp;
			}
		}
	});
var $author$project$Elm$Review$Reporter$totalNumberOfErrors = function (files) {
	return A2($author$project$Elm$Review$Reporter$totalNumberOfErrorsHelp, files, 0);
};
var $author$project$Elm$Review$Reporter$formatReport = F2(function $author$project$Elm$Review$Reporter$formatReport$fn(_v0, files) {
		var suppressedErrors = _v0.aa;
		var unsuppressMode = _v0.aZ;
		var originalNumberOfSuppressedErrors = _v0.dq;
		var detailsMode = _v0.aH;
		var mode = _v0.hh;
		var errorsHaveBeenFixedPreviously = _v0.c5;
		var numberOfErrors = $author$project$Elm$Review$Reporter$totalNumberOfErrors(files);
		if (!numberOfErrors) {
			return A3($author$project$Elm$Review$Reporter$formatNoErrors, suppressedErrors, originalNumberOfSuppressedErrors, errorsHaveBeenFixedPreviously);
		} else {
			var filesWithErrors = A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.iX;
					},
					$author$project$Elm$Review$Reporter$filePath),
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.bO;
						},
						A2($elm$core$Basics$composeR, $elm$core$List$isEmpty, $elm$core$Basics$not)),
					files));
			var _v1 = $author$project$Elm$Review$Reporter$classifyFixes(
				$author$project$Elm$Review$Reporter$fixableErrors(files));
			var rulesWithInvalidFixes = _v1.b2;
			var hasIgnoredFixableErrors = _v1.cp;
			return A2(
				$elm$core$List$map,
				$author$project$Elm$Review$Text$toRecord,
				$author$project$Elm$Review$Text$simplify(
					A2(
						$author$project$Elm$Review$Text$join,
						'\n\n',
						A2(
							$elm$core$List$filterMap,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$core$Maybe$Just(
									A3($author$project$Elm$Review$Reporter$formatReports, detailsMode, mode, filesWithErrors)),
									A2($author$project$Elm$Review$Reporter$showUnsuppressedWarning, unsuppressMode, files) ? $elm$core$Maybe$Just(
									_List_fromArray(
										[
											$author$project$Elm$Review$Text$inOrange(
											$author$project$Elm$Review$Text$from('Errors marked with (unsuppressed) were previously suppressed, but you introduced new errors for the same rule and file. There are now more of those than what I previously allowed. Please fix them until you have at most as many errors as before. Maybe fix a few more while you\'re there?'))
										])) : $elm$core$Maybe$Nothing,
									hasIgnoredFixableErrors ? $elm$core$Maybe$Just(
									_List_fromArray(
										[
											$author$project$Elm$Review$Text$inBlue(
											$author$project$Elm$Review$Text$from('Errors marked with (fix) can be fixed automatically using `elm-review --fix`.'))
										])) : $elm$core$Maybe$Nothing,
									((mode === 1) && (!$elm$core$Set$isEmpty(rulesWithInvalidFixes))) ? $elm$core$Maybe$Just(
									_List_fromArray(
										[
											$author$project$Elm$Review$Text$inYellow(
											$author$project$Elm$Review$Text$from(
												'I tried applying some fixes but they failed in ways the author(s) didn\'t expect. Please let the author(s) of the following rules know:\n- ' + A2(
													$elm$core$String$join,
													'\n- ',
													$elm$core$Set$toList(rulesWithInvalidFixes))))
										])) : $elm$core$Maybe$Nothing,
									$elm$core$Maybe$Just(
									_List_fromArray(
										[
											$author$project$Elm$Review$Text$from('I found '),
											$author$project$Elm$Review$Text$inRed(
											$author$project$Elm$Review$Text$from(
												A2($author$project$Elm$Review$Reporter$pluralize, numberOfErrors, 'error'))),
											$author$project$Elm$Review$Text$from(' in '),
											$author$project$Elm$Review$Text$inYellow(
											$author$project$Elm$Review$Text$from(
												A2(
													$author$project$Elm$Review$Reporter$pluralize,
													$elm$core$List$length(filesWithErrors),
													'file'))),
											$author$project$Elm$Review$Text$from('.')
										]))
								])))));
		}
	});
var $jfmengels$elm_review$Review$Rule$getConfigurationError = function (_v0) {
	var rule = _v0;
	var _v1 = rule.aM;
	if (!_v1.$) {
		return $elm$core$Maybe$Nothing;
	} else {
		var err = _v1.a;
		return $elm$core$Maybe$Just(err);
	}
};
var $jfmengels$elm_review$Review$Rule$ruleName = function (_v0) {
	var rule = _v0;
	return rule.cH;
};
var $author$project$Elm$Review$Main$getConfigurationError = function (rule) {
	var _v0 = $jfmengels$elm_review$Review$Rule$getConfigurationError(rule);
	if (!_v0.$) {
		var configurationError = _v0.a;
		return $elm$core$Maybe$Just(
			{
				eq: configurationError.eq,
				gW: $elm$core$Maybe$Nothing,
				bx: configurationError.bx,
				hw: false,
				f4: $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				hA: $elm$core$Maybe$Nothing,
				f8: $jfmengels$elm_review$Review$Rule$ruleName(rule),
				hK: false
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review$Review$Exceptions$addFiles = F2(function $jfmengels$elm_review$Review$Exceptions$addFiles$fn(files, exceptions) {
		var cleanedFiles = $elm$core$Set$fromList(
			A2($elm$core$List$map, $jfmengels$elm_review$Path$makeOSAgnostic, files));
		return A2(
			$jfmengels$elm_review$Review$Exceptions$addFilter,
			function (file) {
				return !A2($elm$core$Set$member, file, cleanedFiles);
			},
			exceptions);
	});
var $jfmengels$elm_review$Review$Rule$ignoreErrorsForFiles = F2(function $jfmengels$elm_review$Review$Rule$ignoreErrorsForFiles$fn(files, _v0) {
		var rule = _v0;
		return {
			C: A2($jfmengels$elm_review$Review$Exceptions$addFiles, files, rule.C),
			eI: rule.eI,
			cH: rule.cH,
			v: rule.v,
			i4: rule.i4,
			aM: rule.aM
		};
	});
var $jfmengels$elm_review$Review$Project$Internal$Project = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Project$ProjectCache$empty = {gG: $elm$core$Maybe$Nothing, fX: $elm$core$Dict$empty, aU: $elm$core$Dict$empty};
var $jfmengels$elm_review$Review$Project$new = {
	h8: $jfmengels$elm_review$Review$Project$ProjectCache$empty,
	gF: $elm$core$Dict$empty,
	es: $elm$core$Maybe$Nothing,
	hi: $elm$core$Maybe$Nothing,
	aU: $elm$core$Dict$empty,
	dn: _List_Nil,
	f6: $elm$core$Maybe$Nothing,
	gg: _List_fromArray(
		['src/'])
};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Elm$Review$Vendor$Table$Table = F2(function $author$project$Elm$Review$Vendor$Table$Table$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Array$repeat = F2(function $elm$core$Array$repeat$fn(n, e) {
		return A2(
			$elm$core$Array$initialize,
			n,
			function (_v0) {
				return e;
			});
	});
var $author$project$Elm$Review$Vendor$Table$empty = function (_v0) {
	var sizeA = _v0.a;
	var sizeB = _v0.b;
	var arraySize = ((sizeA + 1) * (sizeB + 1)) - 1;
	return A2(
		$author$project$Elm$Review$Vendor$Table$Table,
		sizeB + 1,
		A2($elm$core$Array$repeat, arraySize, -1));
};
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$setHelp = F4(function $elm$core$Array$setHelp$fn(shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (!_v0.$) {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(function $elm$core$Array$set$fn(index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $author$project$Elm$Review$Vendor$Table$fetch = F3(function $author$project$Elm$Review$Vendor$Table$fetch$fn(key, builder, table) {
		var iKey = key.a;
		var jKey = key.b;
		var dimension = table.a;
		var store = table.b;
		var index = (iKey * dimension) + jKey;
		var _v0 = A2($elm$core$Array$get, index, store);
		if (!_v0.$) {
			var value = _v0.a;
			if (_Utils_eq(value, -1)) {
				var _v1 = A2(builder, table, key);
				var _v2 = _v1.a;
				var newStore = _v2.b;
				var newValue = _v1.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Elm$Review$Vendor$Table$Table,
						dimension,
						A3($elm$core$Array$set, index, newValue, newStore)),
					newValue);
			} else {
				return _Utils_Tuple2(table, value);
			}
		} else {
			return _Utils_Tuple2(table, -1);
		}
	});
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $author$project$Elm$Review$Vendor$Levenshtein$distanceHelper = F2(function $author$project$Elm$Review$Vendor$Levenshtein$distanceHelper$fn(arr1, arr2) {
		var indecesForLastChars = _Utils_Tuple2(
			$elm$core$Array$length(arr1),
			$elm$core$Array$length(arr2));
		var calculateEditDistanceForChars = F2(function calculateEditDistanceForChars$fn(table, _v0) {
				var i = _v0.a;
				var j = _v0.b;
				var _v1 = _Utils_Tuple2(
					A2($elm$core$Array$get, i - 1, arr1),
					A2($elm$core$Array$get, j - 1, arr2));
				if ((!_v1.a.$) && (!_v1.b.$)) {
					var chr1 = _v1.a.a;
					var chr2 = _v1.b.a;
					var _v2 = A3(
						$author$project$Elm$Review$Vendor$Table$fetch,
						_Utils_Tuple2(i - 1, j),
						calculateEditDistanceForChars,
						table);
					var table1 = _v2.a;
					var dist1 = _v2.b;
					var _v3 = A3(
						$author$project$Elm$Review$Vendor$Table$fetch,
						_Utils_Tuple2(i, j - 1),
						calculateEditDistanceForChars,
						table1);
					var table2 = _v3.a;
					var dist2 = _v3.b;
					var _v4 = A3(
						$author$project$Elm$Review$Vendor$Table$fetch,
						_Utils_Tuple2(i - 1, j - 1),
						calculateEditDistanceForChars,
						table2);
					var table3 = _v4.a;
					var dist3 = _v4.b;
					return _Utils_Tuple2(
						table3,
						(_Utils_cmp(dist3, dist1) < 0) ? ((_Utils_cmp(dist3, dist2) < 0) ? ((!_Utils_eq(chr1, chr2)) ? (dist3 + 1) : dist3) : (dist2 + 1)) : ((_Utils_cmp(dist1, dist2) > 0) ? (dist2 + 1) : (dist1 + 1)));
				} else {
					return _Utils_Tuple2(
						table,
						A2($elm$core$Basics$max, i, j));
				}
			});
		return A2(
			calculateEditDistanceForChars,
			$author$project$Elm$Review$Vendor$Table$empty(indecesForLastChars),
			indecesForLastChars).b;
	});
var $author$project$Elm$Review$Vendor$Levenshtein$distance = F2(function $author$project$Elm$Review$Vendor$Levenshtein$distance$fn(str1, str2) {
		return _Utils_eq(str1, str2) ? 0 : A2(
			$author$project$Elm$Review$Vendor$Levenshtein$distanceHelper,
			$elm$core$Array$fromList(
				$elm$core$String$toList(str1)),
			$elm$core$Array$fromList(
				$elm$core$String$toList(str2)));
	});
var $author$project$Elm$Review$Main$closestNames = F2(function $author$project$Elm$Review$Main$closestNames$fn(names, name) {
		return A2(
			$elm$core$List$take,
			3,
			A2(
				$elm$core$List$sortBy,
				$author$project$Elm$Review$Vendor$Levenshtein$distance(name),
				names));
	});
var $author$project$Elm$Review$Main$unknownRulesFilterMessage = function (_v0) {
	var ruleNames = _v0.hB;
	var filterNames = _v0.gV;
	var unknownRulesMessage = A2(
		$elm$core$String$join,
		'\n\n',
		A2(
			$elm$core$List$map,
			function (filterName) {
				return '- ' + (filterName + ('. Did you mean:\n  - ' + A2(
					$elm$core$String$join,
					'\n  - ',
					A2($author$project$Elm$Review$Main$closestNames, ruleNames, filterName))));
			},
			filterNames));
	return {bx: 'You requested to only run several rules, but I could not find some of them.\n\n' + unknownRulesMessage, ej: 'UNKNOWN FILTERED RULE(S)'};
};
var $jfmengels$elm_review$Review$Rule$withRuleId = F2(function $jfmengels$elm_review$Review$Rule$withRuleId$fn(id, _v0) {
		var rule = _v0;
		return _Utils_update(
			rule,
			{eI: id});
	});
var $author$project$Elm$Review$Main$init = function (rawFlags) {
	var rulesWithIds = A2($elm$core$List$indexedMap, $jfmengels$elm_review$Review$Rule$withRuleId, $author$project$ReviewConfig$config);
	var _v0 = function () {
		var _v1 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$Main$decodeFlags, rawFlags);
		if (!_v1.$) {
			var decodedFlags = _v1.a;
			return _Utils_Tuple2(decodedFlags, $elm$core$Platform$Cmd$none);
		} else {
			var error = _v1.a;
			return _Utils_Tuple2(
				{aH: 1, c3: false, cj: $elm$core$Maybe$Nothing, aQ: 0, cr: false, fO: _List_Nil, fP: _List_Nil, fW: $author$project$Elm$Review$CliCommunication$dummy, b0: 0, f9: $elm$core$Maybe$Nothing, aZ: $author$project$Elm$Review$UnsuppressMode$UnsuppressNone, dy: false},
				$author$project$Elm$Review$Main$abort(
					'Problem decoding the flags when running the elm-review runner:\n  ' + $elm$json$Json$Decode$errorToString(error)));
		}
	}();
	var flags = _v0.a;
	var cmd = _v0.b;
	var _v2 = function () {
		var _v3 = flags.f9;
		if (!_v3.$) {
			var rulesToEnable = _v3.a;
			var ruleNames = $elm$core$Set$fromList(
				A2($elm$core$List$map, $jfmengels$elm_review$Review$Rule$ruleName, rulesWithIds));
			return _Utils_Tuple2(
				A2(
					$elm$core$List$filter,
					function (rule) {
						return A2(
							$elm$core$Set$member,
							$jfmengels$elm_review$Review$Rule$ruleName(rule),
							rulesToEnable);
					},
					rulesWithIds),
				$elm$core$Set$toList(
					A2($elm$core$Set$diff, rulesToEnable, ruleNames)));
		} else {
			return _Utils_Tuple2(rulesWithIds, _List_Nil);
		}
	}();
	var rulesFromConfig = _v2.a;
	var filterNames = _v2.b;
	var rules = A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			$jfmengels$elm_review$Review$Rule$ignoreErrorsForDirectories(flags.fO),
			$jfmengels$elm_review$Review$Rule$ignoreErrorsForFiles(flags.fP)),
		rulesFromConfig);
	return _Utils_Tuple2(
		{bp: flags.fW, aH: flags.aH, c3: flags.c3, a3: $author$project$Elm$Review$Main$NotAwaiting, c5: false, dS: $elm$core$Dict$empty, a5: $elm$core$Dict$empty, ci: $jfmengels$elm_review$Review$Project$new, db: rules, cj: flags.cj, aQ: flags.aQ, cr: flags.cr, eO: true, cE: $elm$core$Dict$empty, dq: 0, o: $jfmengels$elm_review$Review$Project$new, ee: $author$project$Elm$Review$RefusedErrorFixes$empty, b0: flags.b0, cM: _List_Nil, bh: _List_Nil, bi: rules, aa: $author$project$Elm$Review$SuppressedErrors$empty, aZ: flags.aZ, dy: flags.dy},
		function () {
			if ($elm$core$List$isEmpty($author$project$ReviewConfig$config)) {
				return $author$project$Elm$Review$Main$abortWithDetails(
					{bx: 'Your configuration contains no rules. You can add rules by editing the ReviewConfig.elm file.\n\nI recommend you take a look at the following documents:\n  - How to configure elm-review: https://github.com/jfmengels/elm-review/#Configuration\n  - When to write or enable a rule: https://github.com/jfmengels/elm-review/#when-to-write-or-enable-a-rule', ej: 'CONFIGURATION IS EMPTY'});
			} else {
				if (!$elm$core$List$isEmpty(filterNames)) {
					return $author$project$Elm$Review$Main$abortWithDetails(
						$author$project$Elm$Review$Main$unknownRulesFilterMessage(
							{
								gV: filterNames,
								hB: $elm$core$Set$toList(
									$elm$core$Set$fromList(
										A2($elm$core$List$map, $jfmengels$elm_review$Review$Rule$ruleName, $author$project$ReviewConfig$config)))
							}));
				} else {
					var _v4 = A2($elm$core$List$filterMap, $author$project$Elm$Review$Main$getConfigurationError, $author$project$ReviewConfig$config);
					if (!_v4.b) {
						return cmd;
					} else {
						var configurationErrors = _v4;
						return $author$project$Elm$Review$Main$abortForConfigurationErrors(
							function () {
								var _v5 = flags.b0;
								if (!_v5) {
									return $author$project$Elm$Review$Main$encodeReport(
										A2(
											$author$project$Elm$Review$Reporter$formatReport,
											{aH: flags.aH, c5: false, hh: 0, dq: 0, aa: $author$project$Elm$Review$SuppressedErrors$empty, aZ: flags.aZ},
											_List_fromArray(
												[
													{bO: configurationErrors, iX: $author$project$Elm$Review$Reporter$ConfigurationError, i8: ''}
												])));
								} else {
									return A2($author$project$Elm$Review$Main$encodeConfigurationErrors, flags.aH, configurationErrors);
								}
							}());
					}
				}
			}
		}());
};
var $author$project$Elm$Review$Main$GotRequestToGenerateSuppressionErrors = {$: 9};
var $author$project$Elm$Review$Main$GotRequestToReview = {$: 8};
var $author$project$Elm$Review$Main$ReceivedDependencies = function (a) {
	return {$: 4, a: a};
};
var $author$project$Elm$Review$Main$ReceivedElmJson = function (a) {
	return {$: 2, a: a};
};
var $author$project$Elm$Review$Main$ReceivedFile = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Main$ReceivedLinks = function (a) {
	return {$: 7, a: a};
};
var $author$project$Elm$Review$Main$ReceivedReadme = function (a) {
	return {$: 3, a: a};
};
var $author$project$Elm$Review$Main$ReceivedSuppressedErrors = function (a) {
	return {$: 5, a: a};
};
var $author$project$Elm$Review$Main$RemovedFile = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Main$RequestedToKnowIfAFixConfirmationIsExpected = {$: 11};
var $author$project$Elm$Review$Main$UpdateSuppressedErrors = function (a) {
	return {$: 6, a: a};
};
var $author$project$Elm$Review$Main$UserConfirmedFix = function (a) {
	return {$: 10, a: a};
};
var $author$project$Elm$Review$Main$askForFixConfirmationStatus = _Platform_incomingPort(
	'askForFixConfirmationStatus',
	$elm$json$Json$Decode$null(0));
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $author$project$Elm$Review$Main$collectDependencies = _Platform_incomingPort('collectDependencies', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectElmJson = _Platform_incomingPort('collectElmJson', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectFile = _Platform_incomingPort('collectFile', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectLinks = _Platform_incomingPort('collectLinks', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectReadme = _Platform_incomingPort('collectReadme', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectSuppressedErrors = _Platform_incomingPort('collectSuppressedErrors', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$removeFile = _Platform_incomingPort('removeFile', $elm$json$Json$Decode$string);
var $author$project$Elm$Review$Main$startGeneratingSuppressions = _Platform_incomingPort(
	'startGeneratingSuppressions',
	$elm$json$Json$Decode$null(0));
var $author$project$Elm$Review$Main$startReview = _Platform_incomingPort(
	'startReview',
	$elm$json$Json$Decode$null(0));
var $author$project$Elm$Review$Main$updateSuppressedErrors = _Platform_incomingPort('updateSuppressedErrors', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$userConfirmedFix = _Platform_incomingPort('userConfirmedFix', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$subscriptions = $elm$core$Platform$Sub$batch(
	_List_fromArray(
		[
			$author$project$Elm$Review$Main$collectFile($author$project$Elm$Review$Main$ReceivedFile),
			$author$project$Elm$Review$Main$removeFile($author$project$Elm$Review$Main$RemovedFile),
			$author$project$Elm$Review$Main$collectElmJson($author$project$Elm$Review$Main$ReceivedElmJson),
			$author$project$Elm$Review$Main$collectReadme($author$project$Elm$Review$Main$ReceivedReadme),
			$author$project$Elm$Review$Main$collectDependencies($author$project$Elm$Review$Main$ReceivedDependencies),
			$author$project$Elm$Review$Main$collectSuppressedErrors($author$project$Elm$Review$Main$ReceivedSuppressedErrors),
			$author$project$Elm$Review$Main$updateSuppressedErrors($author$project$Elm$Review$Main$UpdateSuppressedErrors),
			$author$project$Elm$Review$Main$collectLinks($author$project$Elm$Review$Main$ReceivedLinks),
			$author$project$Elm$Review$Main$startReview(
			$elm$core$Basics$always($author$project$Elm$Review$Main$GotRequestToReview)),
			$author$project$Elm$Review$Main$startGeneratingSuppressions(
			$elm$core$Basics$always($author$project$Elm$Review$Main$GotRequestToGenerateSuppressionErrors)),
			$author$project$Elm$Review$Main$userConfirmedFix($author$project$Elm$Review$Main$UserConfirmedFix),
			$author$project$Elm$Review$Main$askForFixConfirmationStatus(
			$elm$core$Basics$always($author$project$Elm$Review$Main$RequestedToKnowIfAFixConfirmationIsExpected))
		]));
var $author$project$Elm$Review$Main$acknowledgeFileReceipt = _Platform_outgoingPort('acknowledgeFileReceipt', $elm$core$Basics$identity);
var $jfmengels$elm_review$Review$Project$Dependency$name = function (_v0) {
	var dependency = _v0;
	return dependency.cH;
};
var $jfmengels$elm_review$Review$Project$addDependency = F2(function $jfmengels$elm_review$Review$Project$addDependency$fn(dependency, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				gF: A3(
					$elm$core$Dict$insert,
					$jfmengels$elm_review$Review$Project$Dependency$name(dependency),
					dependency,
					project.gF)
			});
	});
var $jfmengels$elm_review$Review$Cache$ContentHash$ContentHash = $elm$core$Basics$identity;
var $jfmengels$elm_review$Vendor$Murmur3$HashData = F4(function $jfmengels$elm_review$Vendor$Murmur3$HashData$fn(shift, seed, hash, charsProcessed) {
		return {cX: charsProcessed, dh: hash, hD: seed, dt: shift};
	});
var $jfmengels$elm_review$Vendor$Murmur3$c1 = 3432918353;
var $jfmengels$elm_review$Vendor$Murmur3$c2 = 461845907;
var $jfmengels$elm_review$Vendor$Murmur3$multiplyBy = F2(function $jfmengels$elm_review$Vendor$Murmur3$multiplyBy$fn(b, a) {
		return ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);
	});
var $jfmengels$elm_review$Vendor$Murmur3$rotlBy = F2(function $jfmengels$elm_review$Vendor$Murmur3$rotlBy$fn(b, a) {
		return (a << b) | (a >>> (32 - b));
	});
var $jfmengels$elm_review$Vendor$Murmur3$finalize = function (data) {
	var acc = (!(!data.dh)) ? (data.hD ^ A2(
		$jfmengels$elm_review$Vendor$Murmur3$multiplyBy,
		$jfmengels$elm_review$Vendor$Murmur3$c2,
		A2(
			$jfmengels$elm_review$Vendor$Murmur3$rotlBy,
			15,
			A2($jfmengels$elm_review$Vendor$Murmur3$multiplyBy, $jfmengels$elm_review$Vendor$Murmur3$c1, data.dh)))) : data.hD;
	var h0 = acc ^ data.cX;
	var h1 = A2($jfmengels$elm_review$Vendor$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));
	var h2 = A2($jfmengels$elm_review$Vendor$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));
	return (h2 ^ (h2 >>> 16)) >>> 0;
};
var $elm$core$String$foldl = _String_foldl;
var $jfmengels$elm_review$Vendor$Murmur3$mix = F2(function $jfmengels$elm_review$Vendor$Murmur3$mix$fn(h1, k1) {
		return A2(
			$jfmengels$elm_review$Vendor$Murmur3$multiplyBy,
			5,
			A2(
				$jfmengels$elm_review$Vendor$Murmur3$rotlBy,
				13,
				h1 ^ A2(
					$jfmengels$elm_review$Vendor$Murmur3$multiplyBy,
					$jfmengels$elm_review$Vendor$Murmur3$c2,
					A2(
						$jfmengels$elm_review$Vendor$Murmur3$rotlBy,
						15,
						A2($jfmengels$elm_review$Vendor$Murmur3$multiplyBy, $jfmengels$elm_review$Vendor$Murmur3$c1, k1))))) + 3864292196;
	});
var $jfmengels$elm_review$Vendor$Murmur3$hashFold = F2(function $jfmengels$elm_review$Vendor$Murmur3$hashFold$fn(c, data) {
		var res = data.dh | ((255 & $elm$core$Char$toCode(c)) << data.dt);
		var _v0 = data.dt;
		if (_v0 === 24) {
			return {
				cX: data.cX + 1,
				dh: 0,
				hD: A2($jfmengels$elm_review$Vendor$Murmur3$mix, data.hD, res),
				dt: 0
			};
		} else {
			return {cX: data.cX + 1, dh: res, hD: data.hD, dt: data.dt + 8};
		}
	});
var $jfmengels$elm_review$Vendor$Murmur3$hashString = F2(function $jfmengels$elm_review$Vendor$Murmur3$hashString$fn(seed, str) {
		return $jfmengels$elm_review$Vendor$Murmur3$finalize(
			A3(
				$elm$core$String$foldl,
				$jfmengels$elm_review$Vendor$Murmur3$hashFold,
				A4($jfmengels$elm_review$Vendor$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});
var $jfmengels$elm_review$Review$Cache$ContentHash$hash = function (source) {
	return A2($jfmengels$elm_review$Vendor$Murmur3$hashString, 0, source);
};
var $jfmengels$elm_review$Review$Project$ProjectModule$OpaqueProjectModule = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Project$ProjectModule$setIsInSourceDirectories = F2(function $jfmengels$elm_review$Review$Project$ProjectModule$setIsInSourceDirectories$fn(isInSourceDirectories_, _v0) {
		var module_ = _v0;
		return _Utils_update(
			module_,
			{g8: isInSourceDirectories_});
	});
var $jfmengels$elm_review$Review$Project$Internal$endWithSlash = function (dir) {
	return A2($elm$core$String$endsWith, '/', dir) ? dir : (dir + '/');
};
var $jfmengels$elm_review$Review$Project$Internal$removeDotSlashAtBeginning = function (dir) {
	return A2($elm$core$String$startsWith, './', dir) ? A2($elm$core$String$dropLeft, 2, dir) : dir;
};
var $jfmengels$elm_review$Review$Project$Internal$sourceDirectoriesForProject = function (elmJson_) {
	if (!elmJson_.$) {
		var dirs = elmJson_.a.gM;
		return A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$jfmengels$elm_review$Review$Project$Internal$removeDotSlashAtBeginning,
				A2($elm$core$Basics$composeR, $jfmengels$elm_review$Path$makeOSAgnostic, $jfmengels$elm_review$Review$Project$Internal$endWithSlash)),
			dirs);
	} else {
		return _List_fromArray(
			['src/']);
	}
};
var $jfmengels$elm_review$Review$Project$addElmJson = F2(function $jfmengels$elm_review$Review$Project$addElmJson$fn(elmJson_, _v0) {
		var project = _v0;
		var sourceDirectories = $jfmengels$elm_review$Review$Project$Internal$sourceDirectoriesForProject(elmJson_.o);
		var modules_ = _Utils_eq(project.gg, sourceDirectories) ? project.aU : A2(
			$elm$core$Dict$map,
			F2(
				function (path, module_) {
					var osAgnosticPath = $jfmengels$elm_review$Path$makeOSAgnostic(path);
					return A2(
						$jfmengels$elm_review$Review$Project$ProjectModule$setIsInSourceDirectories,
						A2(
							$elm$core$List$any,
							function (dir) {
								return A2($elm$core$String$startsWith, dir, osAgnosticPath);
							},
							sourceDirectories),
						module_);
				}),
			project.aU);
		return _Utils_update(
			project,
			{
				es: $elm$core$Maybe$Just(
					_Utils_Tuple2(
						elmJson_,
						$jfmengels$elm_review$Review$Cache$ContentHash$hash(elmJson_.ed))),
				aU: modules_,
				gg: sourceDirectories
			});
	});
var $jfmengels$elm_review$Review$Project$addFileThatFailedToParse = F2(function $jfmengels$elm_review$Review$Project$addFileThatFailedToParse$fn(_v0, _v1) {
		var path = _v0.iX;
		var source = _v0.i8;
		var project = _v1;
		return _Utils_update(
			project,
			{
				dn: A2(
					$elm$core$List$cons,
					{iX: path, i8: source},
					project.dn)
			});
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$path = function (_v0) {
	var module_ = _v0;
	return module_.iX;
};
var $jfmengels$elm_review$Review$Project$addModuleToProject = F2(function $jfmengels$elm_review$Review$Project$addModuleToProject$fn(module_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				aU: A3(
					$elm$core$Dict$insert,
					$jfmengels$elm_review$Review$Project$ProjectModule$path(module_),
					module_,
					project.aU)
			});
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$positionAsInt = function (_v0) {
	var row = _v0.b1;
	var column = _v0.bH;
	return (row * 1000000) + column;
};
var $jfmengels$elm_review$Review$Project$ProjectModule$sanitizeModule = function (ast_) {
	return _Utils_update(
		ast_,
		{
			ie: A2(
				$elm$core$List$sortBy,
				function (_v0) {
					var range = _v0.a;
					return $jfmengels$elm_review$Review$Project$ProjectModule$positionAsInt(range.dv);
				},
				ast_.ie)
		});
};
var $jfmengels$elm_review$Review$Project$ProjectModule$create = function (params) {
	return {
		h2: $jfmengels$elm_review$Review$Project$ProjectModule$sanitizeModule(params.h2),
		fu: $jfmengels$elm_review$Review$Cache$ContentHash$hash(params.i8),
		g8: params.g8,
		eY: $stil4m$elm_syntax$Elm$Syntax$Module$moduleName(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(params.h2.iJ)),
		iX: params.iX,
		i8: params.i8
	};
};
var $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation = function (_v0) {
	var project = _v0;
	return _Utils_update(
		project,
		{hi: $elm$core$Maybe$Nothing});
};
var $stil4m$elm_syntax$Elm$Processing$ProcessContext = $elm$core$Basics$identity;
var $stil4m$elm_syntax$Elm$Processing$addDependency = F2(function $stil4m$elm_syntax$Elm$Processing$addDependency$fn(dep, _v0) {
		var x = _v0;
		return A2($elm$core$Dict$union, dep.fT, x);
	});
var $stil4m$elm_syntax$Elm$Syntax$Infix$Left = 0;
var $stil4m$elm_syntax$Elm$Syntax$Infix$Non = 2;
var $stil4m$elm_syntax$Elm$Interface$Operator = function (a) {
	return {$: 3, a: a};
};
var $jfmengels$elm_review$Review$Dependencies$elmCore = {
	fT: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				_List_fromArray(
					['Basics']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 1),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'apL'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '<|'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'apR'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '|>'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 1),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'or'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '||'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 2)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 1),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'and'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '&&'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 3)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 2),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'eq'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '=='),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 2),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'neq'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '/='),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 2),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'lt'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '<'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 2),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'gt'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '>'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 2),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'le'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '<='),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 2),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'ge'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '>='),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 1),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'append'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '++'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 5)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'add'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '+'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 6)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'sub'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '-'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 6)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'mul'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '*'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 7)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'fdiv'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '/'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 7)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'idiv'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '//'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 7)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 1),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'pow'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '^'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 8)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'composeL'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '<<'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 9)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 1),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'composeR'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '>>'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 9)
						})
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['List']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 1),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'cons'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '::'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 5)
						})
					]))
			])),
	cH: 'elm/core',
	hY: '1.0.0'
};
var $jfmengels$elm_review$Review$Dependencies$elmParser = {
	fT: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				_List_fromArray(
					['Parser']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'keeper'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '|='),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 5)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'ignorer'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '|.'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 6)
						})
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Parser', 'Advanced']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'keeper'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '|='),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 5)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'ignorer'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '|.'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 6)
						})
					]))
			])),
	cH: 'elm/parser',
	hY: '1.0.0'
};
var $jfmengels$elm_review$Review$Dependencies$elmUrl = {
	fT: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				_List_fromArray(
					['Url', 'Parser']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 1),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'slash'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '</>'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 7)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
							ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'questionMark'),
							iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '<?>'),
							iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 8)
						})
					]))
			])),
	cH: 'elm/url',
	hY: '1.0.0'
};
var $stil4m$elm_syntax$Elm$Processing$init = $elm$core$Dict$empty;
var $jfmengels$elm_review$Review$FileParser$elmProcessContext = A2(
	$stil4m$elm_syntax$Elm$Processing$addDependency,
	$jfmengels$elm_review$Review$Dependencies$elmParser,
	A2(
		$stil4m$elm_syntax$Elm$Processing$addDependency,
		$jfmengels$elm_review$Review$Dependencies$elmUrl,
		A2($stil4m$elm_syntax$Elm$Processing$addDependency, $jfmengels$elm_review$Review$Dependencies$elmCore, $stil4m$elm_syntax$Elm$Processing$init)));
var $stil4m$elm_syntax$Elm$Parser$State$State = $elm$core$Basics$identity;
var $stil4m$elm_syntax$Elm$Parser$State$emptyState = {ie: _List_Nil, cw: _List_Nil};
var $stil4m$elm_syntax$Elm$Syntax$File$File = F4(function $stil4m$elm_syntax$Elm$Syntax$File$File$fn(moduleDefinition, imports, declarations, comments) {
		return {ie: comments, gD: declarations, iz: imports, iJ: moduleDefinition};
	});
var $stil4m$elm_syntax$Combine$Parser = $elm$core$Basics$identity;
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $stil4m$elm_syntax$Combine$andMap = F2(function $stil4m$elm_syntax$Combine$andMap$fn(_v0, _v1) {
		var rp = _v0;
		var lp = _v1;
		return function (state) {
			return A2(
				$elm$parser$Parser$andThen,
				function (_v2) {
					var newState = _v2.a;
					var a = _v2.b;
					return A2(
						$elm$parser$Parser$map,
						$elm$core$Tuple$mapSecond(a),
						rp(newState));
				},
				lp(state));
		};
	});
var $stil4m$elm_syntax$Elm$Parser$State$getComments = function (_v0) {
	var s = _v0;
	return $elm$core$List$reverse(s.ie);
};
var $stil4m$elm_syntax$Combine$succeed = function (res) {
	return function (state) {
		return $elm$parser$Parser$succeed(
			_Utils_Tuple2(state, res));
	};
};
var $stil4m$elm_syntax$Combine$withState = function (f) {
	return function (state) {
		return function (_v0) {
			var p = _v0;
			return p(state);
		}(
			f(state));
	};
};
var $stil4m$elm_syntax$Elm$Parser$File$collectComments = $stil4m$elm_syntax$Combine$withState(
	A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Parser$State$getComments, $stil4m$elm_syntax$Combine$succeed));
var $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration = function (a) {
	return {$: 2, a: a};
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $stil4m$elm_syntax$Combine$choice = function (xs) {
	return function (state) {
		return $elm$parser$Parser$oneOf(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var x = _v0;
					return x(state);
				},
				xs));
	};
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$Destructuring = F2(function $stil4m$elm_syntax$Elm$Syntax$Declaration$Destructuring$fn(a, b) {
		return {$: 5, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Node$combine = F3(function $stil4m$elm_syntax$Elm$Syntax$Node$combine$fn(f, a, b) {
		var r1 = a.a;
		var r2 = b.a;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$combine(
				_List_fromArray(
					[r1, r2])),
			A2(f, a, b));
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseBlock = F2(function $stil4m$elm_syntax$Elm$Syntax$Expression$CaseBlock$fn(expression, cases) {
		return {ia: cases, eC: expression};
	});
var $stil4m$elm_syntax$Combine$Done = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Function = F3(function $stil4m$elm_syntax$Elm$Syntax$Expression$Function$fn(documentation, signature, declaration) {
		return {ii: declaration, fB: documentation, i7: signature};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionImplementation = F3(function $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionImplementation$fn(name, _arguments, expression) {
		return {gs: _arguments, eC: expression, cH: name};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$Lambda = F2(function $stil4m$elm_syntax$Elm$Syntax$Expression$Lambda$fn(args, expression) {
		return {h0: args, eC: expression};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetBlock = F2(function $stil4m$elm_syntax$Elm$Syntax$Expression$LetBlock$fn(declarations, expression) {
		return {gD: declarations, eC: expression};
	});
var $stil4m$elm_syntax$Combine$Loop = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Operator = function (a) {
	return {$: 6, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression = function (a) {
	return {$: 14, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator = function (a) {
	return {$: 5, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr = {$: 0};
var $stil4m$elm_syntax$Combine$andThen = F2(function $stil4m$elm_syntax$Combine$andThen$fn(f, _v0) {
		var p = _v0;
		return function (state) {
			return A2(
				$elm$parser$Parser$andThen,
				function (_v1) {
					var s = _v1.a;
					var a = _v1.b;
					return function (_v2) {
						var x = _v2;
						return x(s);
					}(
						f(a));
				},
				p(state));
		};
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0;
	return function (s0) {
		var _v1 = parse(s0);
		if (_v1.$ === 1) {
			var x = _v1.b;
			return A2($elm$parser$Parser$Advanced$Bad, false, x);
		} else {
			var a = _v1.b;
			var s1 = _v1.c;
			return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
		}
	};
};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $stil4m$elm_syntax$Combine$backtrackable = function (_v0) {
	var p = _v0;
	return function (state) {
		return $elm$parser$Parser$backtrackable(
			p(state));
	};
};
var $elm$parser$Parser$Advanced$mapChompedString = F2(function $elm$parser$Parser$Advanced$mapChompedString$fn(func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					A2(
						func,
						A3($elm$core$String$slice, s0.h, s1.h, s0.f),
						a),
					s1);
			}
		};
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$parser$Parser$token = function (str) {
	return $elm$parser$Parser$Advanced$token(
		$elm$parser$Parser$toToken(str));
};
var $stil4m$elm_syntax$Combine$string = function (s) {
	return function (state) {
		return A2(
			$elm$parser$Parser$map,
			function (x) {
				return _Utils_Tuple2(state, x);
			},
			$elm$parser$Parser$getChompedString(
				$elm$parser$Parser$token(s)));
	};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$caseToken = $stil4m$elm_syntax$Combine$string('case');
var $elm$parser$Parser$Problem = function (a) {
	return {$: 12, a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return function (s) {
		return A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $stil4m$elm_syntax$Combine$fail = function (m) {
	return function (state) {
		return A2(
			$elm$parser$Parser$map,
			function (x) {
				return _Utils_Tuple2(state, x);
			},
			$elm$parser$Parser$problem(m));
	};
};
var $elm$parser$Parser$UnexpectedChar = {$: 11};
var $elm$parser$Parser$Advanced$chompIf = F2(function $elm$parser$Parser$Advanced$chompIf$fn(isGood, expecting) {
		return function (s) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.h, s.f);
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{gx: 1, p: s.p, t: s.t, h: s.h + 1, b1: s.b1 + 1, f: s.f}) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{gx: s.gx + 1, p: s.p, t: s.t, h: newOffset, b1: s.b1, f: s.f}));
		};
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $stil4m$elm_syntax$Combine$fromCore = function (p) {
	return function (state) {
		return A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed(
				function (v) {
					return _Utils_Tuple2(state, v);
				}),
			p);
	};
};
var $stil4m$elm_syntax$Combine$Char$satisfy = function (pred) {
	return $stil4m$elm_syntax$Combine$fromCore(
		A2(
			$elm$parser$Parser$andThen,
			function (s) {
				var _v0 = $elm$core$String$toList(s);
				if (!_v0.b) {
					return $elm$parser$Parser$succeed($elm$core$Maybe$Nothing);
				} else {
					var c = _v0.a;
					return $elm$parser$Parser$succeed(
						$elm$core$Maybe$Just(c));
				}
			},
			$elm$parser$Parser$getChompedString(
				$elm$parser$Parser$chompIf(pred))));
};
var $stil4m$elm_syntax$Combine$Char$anyChar = A2(
	$stil4m$elm_syntax$Combine$andThen,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map($stil4m$elm_syntax$Combine$succeed),
		$elm$core$Maybe$withDefault(
			$stil4m$elm_syntax$Combine$fail('expected any character'))),
	$stil4m$elm_syntax$Combine$Char$satisfy(
		$elm$core$Basics$always(true)));
var $stil4m$elm_syntax$Combine$Char$char = function (c) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Maybe$map($stil4m$elm_syntax$Combine$succeed),
			$elm$core$Maybe$withDefault(
				$stil4m$elm_syntax$Combine$fail(
					'expected \'' + ($elm$core$String$fromList(
						_List_fromArray(
							[c])) + '\'')))),
		$stil4m$elm_syntax$Combine$Char$satisfy(
			$elm$core$Basics$eq(c)));
};
var $stil4m$elm_syntax$Combine$map = F2(function $stil4m$elm_syntax$Combine$map$fn(f, _v0) {
		var p = _v0;
		return function (state) {
			return A2(
				$elm$parser$Parser$map,
				function (_v1) {
					var s = _v1.a;
					var a = _v1.b;
					return _Utils_Tuple2(
						s,
						f(a));
				},
				p(state));
		};
	});
var $stil4m$elm_syntax$Combine$continueWith = F2(function $stil4m$elm_syntax$Combine$continueWith$fn(target, dropped) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			target,
			A2(
				$stil4m$elm_syntax$Combine$map,
				F2(
					function (_v0, a) {
						return a;
					}),
				dropped));
	});
var $stil4m$elm_syntax$Combine$ignore = F2(function $stil4m$elm_syntax$Combine$ignore$fn(dropped, target) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			dropped,
			A2($stil4m$elm_syntax$Combine$map, $elm$core$Basics$always, target));
	});
var $stil4m$elm_syntax$Combine$or = F2(function $stil4m$elm_syntax$Combine$or$fn(_v0, _v1) {
		var lp = _v0;
		var rp = _v1;
		return function (state) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						lp(state),
						rp(state)
					]));
		};
	});
var $elm$core$String$any = _String_any;
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$Basics$pow = _Basics_pow;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(function $rtfeldman$elm_hex$Hex$fromStringHelp$fn(position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$Result$mapError = F2(function $elm$core$Result$mapError$fn(f, result) {
		if (!result.$) {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 8, a: a};
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $elm$core$String$toLower = _String_toLower;
var $stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValue = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed('\''),
			$elm$parser$Parser$symbol('\'')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed('\"'),
			$elm$parser$Parser$symbol('\"')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed('\n'),
			$elm$parser$Parser$symbol('n')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed('\t'),
			$elm$parser$Parser$symbol('t')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed('\u000D'),
			$elm$parser$Parser$symbol('r')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed('\\'),
			$elm$parser$Parser$symbol('\\')),
			A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toLower,
							A2(
								$elm$core$Basics$composeR,
								$rtfeldman$elm_hex$Hex$fromString,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Result$withDefault(0),
									$elm$core$Char$fromCode)))),
					$elm$parser$Parser$symbol('u')),
				$elm$parser$Parser$symbol('{')),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompWhile(
						function (c) {
							return A2(
								$elm$core$String$any,
								$elm$core$Basics$eq(c),
								'0123456789ABCDEFabcdef');
						})),
				$elm$parser$Parser$symbol('}')))
		]));
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$quotedSingleQuote = $stil4m$elm_syntax$Combine$fromCore(
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$toList,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$head,
						$elm$core$Maybe$withDefault(' ')))),
			$elm$parser$Parser$symbol('\'')),
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed(
								A2($elm$core$Basics$composeR, $elm$core$List$singleton, $elm$core$String$fromList)),
							$elm$parser$Parser$symbol('\\')),
						$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValue),
						$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$chompIf(
							$elm$core$Basics$always(true)))
					])),
			$elm$parser$Parser$symbol('\''))));
var $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteral = A2(
	$stil4m$elm_syntax$Combine$or,
	$stil4m$elm_syntax$Elm$Parser$Tokens$quotedSingleQuote,
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$Char$char('\''),
		A2(
			$stil4m$elm_syntax$Combine$continueWith,
			$stil4m$elm_syntax$Combine$Char$anyChar,
			$stil4m$elm_syntax$Combine$Char$char('\''))));
var $stil4m$elm_syntax$Elm$Parser$Node$asPointerLocation = function (_v0) {
	var line = _v0.d3;
	var column = _v0.bH;
	return {bH: column, b1: line};
};
var $stil4m$elm_syntax$Combine$app = function (_v0) {
	var inner = _v0;
	return inner;
};
var $elm$parser$Parser$Advanced$getPosition = function (s) {
	return A3(
		$elm$parser$Parser$Advanced$Good,
		false,
		_Utils_Tuple2(s.b1, s.gx),
		s);
};
var $elm$parser$Parser$getPosition = $elm$parser$Parser$Advanced$getPosition;
var $stil4m$elm_syntax$Combine$withLocation = function (f) {
	return function (state) {
		return A2(
			$elm$parser$Parser$andThen,
			function (loc) {
				return A2(
					$stil4m$elm_syntax$Combine$app,
					f(loc),
					state);
			},
			A2(
				$elm$parser$Parser$map,
				function (_v0) {
					var row = _v0.a;
					var col = _v0.b;
					return {bH: col, d3: row};
				},
				$elm$parser$Parser$getPosition));
	};
};
var $stil4m$elm_syntax$Elm$Parser$Node$parser = function (p) {
	return $stil4m$elm_syntax$Combine$withLocation(
		function (start) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Combine$withLocation(
					function (end) {
						return $stil4m$elm_syntax$Combine$succeed(
							{
								c4: $stil4m$elm_syntax$Elm$Parser$Node$asPointerLocation(end),
								dv: $stil4m$elm_syntax$Elm$Parser$Node$asPointerLocation(start)
							});
					}),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					p,
					$stil4m$elm_syntax$Combine$succeed(
						F2(
							function (v, r) {
								return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, v);
							}))));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$charLiteralExpression = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral, $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteral));
var $stil4m$elm_syntax$Elm$Parser$Tokens$elseToken = $stil4m$elm_syntax$Combine$string('else');
var $stil4m$elm_syntax$Elm$Parser$State$currentIndent = function (_v0) {
	var indents = _v0.cw;
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$List$head(indents));
};
var $stil4m$elm_syntax$Elm$Parser$State$expectedColumn = A2(
	$elm$core$Basics$composeR,
	$stil4m$elm_syntax$Elm$Parser$State$currentIndent,
	$elm$core$Basics$add(1));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern = {$: 0};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern = function (a) {
	return {$: 2, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern = function (a) {
	return {$: 14, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$QualifiedNameRef = F2(function $stil4m$elm_syntax$Elm$Syntax$Pattern$QualifiedNameRef$fn(moduleName, name) {
		return {eY: moduleName, cH: name};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern = function (a) {
	return {$: 3, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern = {$: 1};
var $stil4m$elm_syntax$Combine$between = F3(function $stil4m$elm_syntax$Combine$between$fn(lp, rp, p) {
		return A2(
			$stil4m$elm_syntax$Combine$ignore,
			rp,
			A2($stil4m$elm_syntax$Combine$continueWith, p, lp));
	});
var $miniBill$elm_unicode$Unicode$isAlphaNum = function (c) {
	var code = $elm$core$Char$toCode(c);
	var e = function (hex) {
		return _Utils_eq(hex, code);
	};
	var l = function (hex) {
		return _Utils_cmp(code, hex) < 0;
	};
	var r = F2(function r$fn(from, to) {
			return (_Utils_cmp(from, code) < 1) && (_Utils_cmp(code, to) < 1);
		});
	return l(256) ? ((((((((((A2(r, 48, 57) || A2(r, 65, 90)) || A2(r, 97, 122)) || e(170)) || A2(r, 178, 179)) || e(181)) || A2(r, 185, 186)) || A2(r, 188, 190)) || A2(r, 192, 214)) || A2(r, 216, 246)) || A2(r, 248, 255)) : (l(43761) ? (l(4695) ? (l(2876) ? (l(2383) ? (l(1648) ? (l(930) ? (((((((((((A2(r, 256, 705) || A2(r, 710, 721)) || A2(r, 736, 740)) || A2(r, 880, 884)) || A2(r, 886, 887)) || A2(r, 890, 893)) || e(895)) || e(902)) || A2(r, 904, 906)) || e(908)) || A2(r, 910, 929)) || ((!A2($elm$core$Basics$modBy, 2, code)) && A2(r, 748, 750))) : ((((((((((A2(r, 931, 1013) || A2(r, 1015, 1153)) || A2(r, 1162, 1327)) || A2(r, 1329, 1366)) || e(1369)) || A2(r, 1376, 1416)) || A2(r, 1488, 1514)) || A2(r, 1519, 1522)) || A2(r, 1568, 1610)) || A2(r, 1632, 1641)) || A2(r, 1646, 1647))) : (l(2041) ? ((((((((((A2(r, 1649, 1747) || e(1749)) || A2(r, 1765, 1766)) || A2(r, 1774, 1788)) || e(1791)) || e(1808)) || A2(r, 1810, 1839)) || A2(r, 1869, 1957)) || e(1969)) || A2(r, 1984, 2026)) || A2(r, 2036, 2037)) : (((((((((((e(2042) || A2(r, 2048, 2069)) || e(2074)) || e(2084)) || e(2088)) || A2(r, 2112, 2136)) || A2(r, 2144, 2154)) || A2(r, 2160, 2183)) || A2(r, 2185, 2190)) || A2(r, 2208, 2249)) || A2(r, 2308, 2361)) || e(2365)))) : (l(2612) ? (l(2509) ? ((((((((((e(2384) || A2(r, 2392, 2401)) || A2(r, 2406, 2415)) || A2(r, 2417, 2432)) || A2(r, 2437, 2444)) || A2(r, 2447, 2448)) || A2(r, 2451, 2472)) || A2(r, 2474, 2480)) || e(2482)) || A2(r, 2486, 2489)) || e(2493)) : ((((((((((e(2510) || A2(r, 2524, 2525)) || A2(r, 2527, 2529)) || A2(r, 2534, 2545)) || A2(r, 2548, 2553)) || e(2556)) || A2(r, 2565, 2570)) || A2(r, 2575, 2576)) || A2(r, 2579, 2600)) || A2(r, 2602, 2608)) || A2(r, 2610, 2611))) : (l(2740) ? ((((((((((A2(r, 2613, 2614) || A2(r, 2616, 2617)) || A2(r, 2649, 2652)) || e(2654)) || A2(r, 2662, 2671)) || A2(r, 2674, 2676)) || A2(r, 2693, 2701)) || A2(r, 2703, 2705)) || A2(r, 2707, 2728)) || A2(r, 2730, 2736)) || A2(r, 2738, 2739)) : (((((((((((A2(r, 2741, 2745) || e(2749)) || e(2768)) || A2(r, 2784, 2785)) || A2(r, 2790, 2799)) || e(2809)) || A2(r, 2821, 2828)) || A2(r, 2831, 2832)) || A2(r, 2835, 2856)) || A2(r, 2858, 2864)) || A2(r, 2866, 2867)) || A2(r, 2869, 2873))))) : (l(3429) ? (l(3159) ? (l(2973) ? ((((((((((e(2877) || A2(r, 2908, 2909)) || A2(r, 2911, 2913)) || A2(r, 2918, 2927)) || A2(r, 2929, 2935)) || e(2947)) || A2(r, 2949, 2954)) || A2(r, 2958, 2960)) || A2(r, 2962, 2965)) || A2(r, 2969, 2970)) || e(2972)) : ((((((((((A2(r, 2974, 2975) || A2(r, 2979, 2980)) || A2(r, 2984, 2986)) || A2(r, 2990, 3001)) || e(3024)) || A2(r, 3046, 3058)) || A2(r, 3077, 3084)) || A2(r, 3086, 3088)) || A2(r, 3090, 3112)) || A2(r, 3114, 3129)) || e(3133))) : (l(3260) ? ((((((((((A2(r, 3160, 3162) || e(3165)) || A2(r, 3168, 3169)) || A2(r, 3174, 3183)) || A2(r, 3192, 3198)) || e(3200)) || A2(r, 3205, 3212)) || A2(r, 3214, 3216)) || A2(r, 3218, 3240)) || A2(r, 3242, 3251)) || A2(r, 3253, 3257)) : (((((((((((e(3261) || A2(r, 3293, 3294)) || A2(r, 3296, 3297)) || A2(r, 3302, 3311)) || A2(r, 3313, 3314)) || A2(r, 3332, 3340)) || A2(r, 3342, 3344)) || A2(r, 3346, 3386)) || e(3389)) || e(3406)) || A2(r, 3412, 3414)) || A2(r, 3416, 3425)))) : (l(3803) ? (l(3663) ? ((((((((((A2(r, 3430, 3448) || A2(r, 3450, 3455)) || A2(r, 3461, 3478)) || A2(r, 3482, 3505)) || A2(r, 3507, 3515)) || e(3517)) || A2(r, 3520, 3526)) || A2(r, 3558, 3567)) || A2(r, 3585, 3632)) || A2(r, 3634, 3635)) || A2(r, 3648, 3654)) : (((((((((((A2(r, 3664, 3673) || A2(r, 3713, 3714)) || e(3716)) || A2(r, 3718, 3722)) || A2(r, 3724, 3747)) || e(3749)) || A2(r, 3751, 3760)) || A2(r, 3762, 3763)) || e(3773)) || A2(r, 3776, 3780)) || e(3782)) || A2(r, 3792, 3801))) : (l(4196) ? ((((((((((A2(r, 3804, 3807) || e(3840)) || A2(r, 3872, 3891)) || A2(r, 3904, 3911)) || A2(r, 3913, 3948)) || A2(r, 3976, 3980)) || A2(r, 4096, 4138)) || A2(r, 4159, 4169)) || A2(r, 4176, 4181)) || A2(r, 4186, 4189)) || e(4193)) : (((((((((((A2(r, 4197, 4198) || A2(r, 4206, 4208)) || A2(r, 4213, 4225)) || e(4238)) || A2(r, 4240, 4249)) || A2(r, 4256, 4293)) || e(4295)) || e(4301)) || A2(r, 4304, 4346)) || A2(r, 4348, 4680)) || A2(r, 4682, 4685)) || A2(r, 4688, 4694)))))) : (l(8489) ? (l(6687) ? (l(5887) ? (l(4881) ? ((((((((((e(4696) || A2(r, 4698, 4701)) || A2(r, 4704, 4744)) || A2(r, 4746, 4749)) || A2(r, 4752, 4784)) || A2(r, 4786, 4789)) || A2(r, 4792, 4798)) || e(4800)) || A2(r, 4802, 4805)) || A2(r, 4808, 4822)) || A2(r, 4824, 4880)) : ((((((((((A2(r, 4882, 4885) || A2(r, 4888, 4954)) || A2(r, 4969, 4988)) || A2(r, 4992, 5007)) || A2(r, 5024, 5109)) || A2(r, 5112, 5117)) || A2(r, 5121, 5740)) || A2(r, 5743, 5759)) || A2(r, 5761, 5786)) || A2(r, 5792, 5866)) || A2(r, 5870, 5880))) : (l(6175) ? ((((((((((A2(r, 5888, 5905) || A2(r, 5919, 5937)) || A2(r, 5952, 5969)) || A2(r, 5984, 5996)) || A2(r, 5998, 6000)) || A2(r, 6016, 6067)) || e(6103)) || e(6108)) || A2(r, 6112, 6121)) || A2(r, 6128, 6137)) || A2(r, 6160, 6169)) : (((((((((((A2(r, 6176, 6264) || A2(r, 6272, 6276)) || A2(r, 6279, 6312)) || e(6314)) || A2(r, 6320, 6389)) || A2(r, 6400, 6430)) || A2(r, 6470, 6509)) || A2(r, 6512, 6516)) || A2(r, 6528, 6571)) || A2(r, 6576, 6601)) || A2(r, 6608, 6618)) || A2(r, 6656, 6678)))) : (l(7967) ? (l(7244) ? ((((((((((A2(r, 6688, 6740) || A2(r, 6784, 6793)) || A2(r, 6800, 6809)) || e(6823)) || A2(r, 6917, 6963)) || A2(r, 6981, 6988)) || A2(r, 6992, 7001)) || A2(r, 7043, 7072)) || A2(r, 7086, 7141)) || A2(r, 7168, 7203)) || A2(r, 7232, 7241)) : ((((((((((A2(r, 7245, 7293) || A2(r, 7296, 7304)) || A2(r, 7312, 7354)) || A2(r, 7357, 7359)) || A2(r, 7401, 7404)) || A2(r, 7406, 7411)) || A2(r, 7413, 7414)) || e(7418)) || A2(r, 7424, 7615)) || A2(r, 7680, 7957)) || A2(r, 7960, 7965))) : (l(8159) ? (((((((((((A2(r, 7968, 8005) || A2(r, 8008, 8013)) || A2(r, 8016, 8023)) || A2(r, 8032, 8061)) || A2(r, 8064, 8116)) || A2(r, 8118, 8124)) || e(8126)) || A2(r, 8130, 8132)) || A2(r, 8134, 8140)) || A2(r, 8144, 8147)) || A2(r, 8150, 8155)) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && A2(r, 8025, 8031))) : ((((((((((((A2(r, 8160, 8172) || A2(r, 8178, 8180)) || A2(r, 8182, 8188)) || A2(r, 8304, 8305)) || A2(r, 8308, 8313)) || A2(r, 8319, 8329)) || A2(r, 8336, 8348)) || e(8450)) || e(8455)) || A2(r, 8458, 8467)) || e(8469)) || A2(r, 8473, 8477)) || ((!A2($elm$core$Basics$modBy, 2, code)) && A2(r, 8484, 8488)))))) : (l(12976) ? (l(11703) ? (l(11505) ? ((((((((((A2(r, 8490, 8493) || A2(r, 8495, 8505)) || A2(r, 8508, 8511)) || A2(r, 8517, 8521)) || e(8526)) || A2(r, 8528, 8585)) || A2(r, 9312, 9371)) || A2(r, 9450, 9471)) || A2(r, 10102, 10131)) || A2(r, 11264, 11492)) || A2(r, 11499, 11502)) : ((((((((((A2(r, 11506, 11507) || e(11517)) || A2(r, 11520, 11557)) || e(11559)) || e(11565)) || A2(r, 11568, 11623)) || e(11631)) || A2(r, 11648, 11670)) || A2(r, 11680, 11686)) || A2(r, 11688, 11694)) || A2(r, 11696, 11702))) : (l(12444) ? ((((((((((A2(r, 11704, 11710) || A2(r, 11712, 11718)) || A2(r, 11720, 11726)) || A2(r, 11728, 11734)) || A2(r, 11736, 11742)) || e(11823)) || A2(r, 12293, 12295)) || A2(r, 12321, 12329)) || A2(r, 12337, 12341)) || A2(r, 12344, 12348)) || A2(r, 12353, 12438)) : (((((((((((A2(r, 12445, 12447) || A2(r, 12449, 12538)) || A2(r, 12540, 12543)) || A2(r, 12549, 12591)) || A2(r, 12593, 12686)) || A2(r, 12690, 12693)) || A2(r, 12704, 12735)) || A2(r, 12784, 12799)) || A2(r, 12832, 12841)) || A2(r, 12872, 12879)) || A2(r, 12881, 12895)) || A2(r, 12928, 12937)))) : (l(43215) ? (l(42774) ? ((((((((((A2(r, 12977, 12991) || e(13312)) || e(19903)) || e(19968)) || A2(r, 40959, 42124)) || A2(r, 42192, 42237)) || A2(r, 42240, 42508)) || A2(r, 42512, 42539)) || A2(r, 42560, 42606)) || A2(r, 42623, 42653)) || A2(r, 42656, 42735)) : ((((((((((((A2(r, 42775, 42783) || A2(r, 42786, 42888)) || A2(r, 42891, 42954)) || A2(r, 42960, 42961)) || A2(r, 42966, 42969)) || A2(r, 42994, 43009)) || A2(r, 43011, 43013)) || A2(r, 43015, 43018)) || A2(r, 43020, 43042)) || A2(r, 43056, 43061)) || A2(r, 43072, 43123)) || A2(r, 43138, 43187)) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && A2(r, 42963, 42965)))) : (l(43519) ? ((((((((((A2(r, 43216, 43225) || A2(r, 43250, 43255)) || e(43259)) || A2(r, 43261, 43262)) || A2(r, 43264, 43301)) || A2(r, 43312, 43334)) || A2(r, 43360, 43388)) || A2(r, 43396, 43442)) || A2(r, 43471, 43481)) || A2(r, 43488, 43492)) || A2(r, 43494, 43518)) : ((((((((((((A2(r, 43520, 43560) || A2(r, 43584, 43586)) || A2(r, 43588, 43595)) || A2(r, 43600, 43609)) || A2(r, 43616, 43638)) || e(43642)) || A2(r, 43646, 43695)) || e(43697)) || A2(r, 43701, 43702)) || A2(r, 43705, 43709)) || A2(r, 43739, 43741)) || A2(r, 43744, 43754)) || ((!A2($elm$core$Basics$modBy, 2, code)) && A2(r, 43712, 43714)))))))) : (l(71839) ? (l(67827) ? (l(65615) ? (l(64317) ? (l(55202) ? ((((((((((A2(r, 43762, 43764) || A2(r, 43777, 43782)) || A2(r, 43785, 43790)) || A2(r, 43793, 43798)) || A2(r, 43808, 43814)) || A2(r, 43816, 43822)) || A2(r, 43824, 43866)) || A2(r, 43868, 43881)) || A2(r, 43888, 44002)) || A2(r, 44016, 44025)) || e(44032)) : ((((((((((e(55203) || A2(r, 55216, 55238)) || A2(r, 55243, 55291)) || A2(r, 63744, 64109)) || A2(r, 64112, 64217)) || A2(r, 64256, 64262)) || A2(r, 64275, 64279)) || e(64285)) || A2(r, 64287, 64296)) || A2(r, 64298, 64310)) || A2(r, 64312, 64316))) : (l(65312) ? ((((((((((e(64318) || A2(r, 64320, 64321)) || A2(r, 64323, 64324)) || A2(r, 64326, 64433)) || A2(r, 64467, 64829)) || A2(r, 64848, 64911)) || A2(r, 64914, 64967)) || A2(r, 65008, 65019)) || A2(r, 65136, 65140)) || A2(r, 65142, 65276)) || A2(r, 65296, 65305)) : (((((((((((A2(r, 65313, 65338) || A2(r, 65345, 65370)) || A2(r, 65382, 65470)) || A2(r, 65474, 65479)) || A2(r, 65482, 65487)) || A2(r, 65490, 65495)) || A2(r, 65498, 65500)) || A2(r, 65536, 65547)) || A2(r, 65549, 65574)) || A2(r, 65576, 65594)) || A2(r, 65596, 65597)) || A2(r, 65599, 65613)))) : (l(66939) ? (l(66431) ? ((((((((((A2(r, 65616, 65629) || A2(r, 65664, 65786)) || A2(r, 65799, 65843)) || A2(r, 65856, 65912)) || A2(r, 65930, 65931)) || A2(r, 66176, 66204)) || A2(r, 66208, 66256)) || A2(r, 66273, 66299)) || A2(r, 66304, 66339)) || A2(r, 66349, 66378)) || A2(r, 66384, 66421)) : ((((((((((A2(r, 66432, 66461) || A2(r, 66464, 66499)) || A2(r, 66504, 66511)) || A2(r, 66513, 66517)) || A2(r, 66560, 66717)) || A2(r, 66720, 66729)) || A2(r, 66736, 66771)) || A2(r, 66776, 66811)) || A2(r, 66816, 66855)) || A2(r, 66864, 66915)) || A2(r, 66928, 66938))) : (l(67462) ? ((((((((((A2(r, 66940, 66954) || A2(r, 66956, 66962)) || A2(r, 66964, 66965)) || A2(r, 66967, 66977)) || A2(r, 66979, 66993)) || A2(r, 66995, 67001)) || A2(r, 67003, 67004)) || A2(r, 67072, 67382)) || A2(r, 67392, 67413)) || A2(r, 67424, 67431)) || A2(r, 67456, 67461)) : (((((((((((A2(r, 67463, 67504) || A2(r, 67506, 67514)) || A2(r, 67584, 67589)) || e(67592)) || A2(r, 67594, 67637)) || A2(r, 67639, 67640)) || e(67644)) || A2(r, 67647, 67669)) || A2(r, 67672, 67702)) || A2(r, 67705, 67742)) || A2(r, 67751, 67759)) || A2(r, 67808, 67826))))) : (l(69967) ? (l(68799) ? (l(68223) ? ((((((((((A2(r, 67828, 67829) || A2(r, 67835, 67867)) || A2(r, 67872, 67897)) || A2(r, 67968, 68023)) || A2(r, 68028, 68047)) || A2(r, 68050, 68096)) || A2(r, 68112, 68115)) || A2(r, 68117, 68119)) || A2(r, 68121, 68149)) || A2(r, 68160, 68168)) || A2(r, 68192, 68222)) : ((((((((((A2(r, 68224, 68255) || A2(r, 68288, 68295)) || A2(r, 68297, 68324)) || A2(r, 68331, 68335)) || A2(r, 68352, 68405)) || A2(r, 68416, 68437)) || A2(r, 68440, 68466)) || A2(r, 68472, 68497)) || A2(r, 68521, 68527)) || A2(r, 68608, 68680)) || A2(r, 68736, 68786))) : (l(69599) ? ((((((((((A2(r, 68800, 68850) || A2(r, 68858, 68899)) || A2(r, 68912, 68921)) || A2(r, 69216, 69246)) || A2(r, 69248, 69289)) || A2(r, 69296, 69297)) || A2(r, 69376, 69415)) || A2(r, 69424, 69445)) || A2(r, 69457, 69460)) || A2(r, 69488, 69505)) || A2(r, 69552, 69579)) : (((((((((((A2(r, 69600, 69622) || A2(r, 69635, 69687)) || A2(r, 69714, 69743)) || A2(r, 69745, 69746)) || e(69749)) || A2(r, 69763, 69807)) || A2(r, 69840, 69864)) || A2(r, 69872, 69881)) || A2(r, 69891, 69926)) || A2(r, 69942, 69951)) || e(69956)) || e(69959)))) : (l(70460) ? (l(70279) ? ((((((((((A2(r, 69968, 70002) || e(70006)) || A2(r, 70019, 70066)) || A2(r, 70081, 70084)) || A2(r, 70096, 70106)) || e(70108)) || A2(r, 70113, 70132)) || A2(r, 70144, 70161)) || A2(r, 70163, 70187)) || A2(r, 70207, 70208)) || A2(r, 70272, 70278)) : (((((((((((e(70280) || A2(r, 70282, 70285)) || A2(r, 70287, 70301)) || A2(r, 70303, 70312)) || A2(r, 70320, 70366)) || A2(r, 70384, 70393)) || A2(r, 70405, 70412)) || A2(r, 70415, 70416)) || A2(r, 70419, 70440)) || A2(r, 70442, 70448)) || A2(r, 70450, 70451)) || A2(r, 70453, 70457))) : (l(71039) ? ((((((((((e(70461) || e(70480)) || A2(r, 70493, 70497)) || A2(r, 70656, 70708)) || A2(r, 70727, 70730)) || A2(r, 70736, 70745)) || A2(r, 70751, 70753)) || A2(r, 70784, 70831)) || A2(r, 70852, 70853)) || e(70855)) || A2(r, 70864, 70873)) : (((((((((((A2(r, 71040, 71086) || A2(r, 71128, 71131)) || A2(r, 71168, 71215)) || e(71236)) || A2(r, 71248, 71257)) || A2(r, 71296, 71338)) || e(71352)) || A2(r, 71360, 71369)) || A2(r, 71424, 71450)) || A2(r, 71472, 71483)) || A2(r, 71488, 71494)) || A2(r, 71680, 71723)))))) : (l(119981) ? (l(92159) ? (l(72967) ? (l(72249) ? (((((((((((A2(r, 71840, 71922) || A2(r, 71935, 71942)) || e(71945)) || A2(r, 71948, 71955)) || A2(r, 71957, 71958)) || A2(r, 71960, 71983)) || A2(r, 72016, 72025)) || A2(r, 72096, 72103)) || A2(r, 72106, 72144)) || e(72192)) || A2(r, 72203, 72242)) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && (A2(r, 71999, 72001) || A2(r, 72161, 72163)))) : ((((((((((e(72250) || e(72272)) || A2(r, 72284, 72329)) || e(72349)) || A2(r, 72368, 72440)) || A2(r, 72704, 72712)) || A2(r, 72714, 72750)) || e(72768)) || A2(r, 72784, 72812)) || A2(r, 72818, 72847)) || A2(r, 72960, 72966))) : (l(73475) ? ((((((((((A2(r, 72968, 72969) || A2(r, 72971, 73008)) || e(73030)) || A2(r, 73040, 73049)) || A2(r, 73056, 73061)) || A2(r, 73063, 73064)) || A2(r, 73066, 73097)) || e(73112)) || A2(r, 73120, 73129)) || A2(r, 73440, 73458)) || e(73474)) : (((((((((((A2(r, 73476, 73488) || A2(r, 73490, 73523)) || A2(r, 73552, 73561)) || e(73648)) || A2(r, 73664, 73684)) || A2(r, 73728, 74649)) || A2(r, 74752, 74862)) || A2(r, 74880, 75075)) || A2(r, 77712, 77808)) || A2(r, 77824, 78895)) || A2(r, 78913, 78918)) || A2(r, 82944, 83526)))) : (l(101639) ? (l(93052) ? ((((((((((A2(r, 92160, 92728) || A2(r, 92736, 92766)) || A2(r, 92768, 92777)) || A2(r, 92784, 92862)) || A2(r, 92864, 92873)) || A2(r, 92880, 92909)) || A2(r, 92928, 92975)) || A2(r, 92992, 92995)) || A2(r, 93008, 93017)) || A2(r, 93019, 93025)) || A2(r, 93027, 93047)) : ((((((((((A2(r, 93053, 93071) || A2(r, 93760, 93846)) || A2(r, 93952, 94026)) || e(94032)) || A2(r, 94099, 94111)) || A2(r, 94176, 94177)) || e(94179)) || e(94208)) || e(100343)) || A2(r, 100352, 101589)) || e(101632))) : (l(113775) ? ((((((((((e(101640) || A2(r, 110576, 110579)) || A2(r, 110581, 110587)) || A2(r, 110589, 110590)) || A2(r, 110592, 110882)) || e(110898)) || A2(r, 110928, 110930)) || e(110933)) || A2(r, 110948, 110951)) || A2(r, 110960, 111355)) || A2(r, 113664, 113770)) : (((((((((((A2(r, 113776, 113788) || A2(r, 113792, 113800)) || A2(r, 113808, 113817)) || A2(r, 119488, 119507)) || A2(r, 119520, 119539)) || A2(r, 119648, 119672)) || A2(r, 119808, 119892)) || A2(r, 119894, 119964)) || A2(r, 119966, 119967)) || e(119970)) || A2(r, 119973, 119974)) || A2(r, 119977, 119980))))) : (l(125263) ? (l(120745) ? (l(120137) ? ((((((((((A2(r, 119982, 119993) || e(119995)) || A2(r, 119997, 120003)) || A2(r, 120005, 120069)) || A2(r, 120071, 120074)) || A2(r, 120077, 120084)) || A2(r, 120086, 120092)) || A2(r, 120094, 120121)) || A2(r, 120123, 120126)) || A2(r, 120128, 120132)) || e(120134)) : ((((((((((A2(r, 120138, 120144) || A2(r, 120146, 120485)) || A2(r, 120488, 120512)) || A2(r, 120514, 120538)) || A2(r, 120540, 120570)) || A2(r, 120572, 120596)) || A2(r, 120598, 120628)) || A2(r, 120630, 120654)) || A2(r, 120656, 120686)) || A2(r, 120688, 120712)) || A2(r, 120714, 120744))) : (l(123583) ? ((((((((((A2(r, 120746, 120770) || A2(r, 120772, 120779)) || A2(r, 120782, 120831)) || A2(r, 122624, 122654)) || A2(r, 122661, 122666)) || A2(r, 122928, 122989)) || A2(r, 123136, 123180)) || A2(r, 123191, 123197)) || A2(r, 123200, 123209)) || e(123214)) || A2(r, 123536, 123565)) : (((((((((((A2(r, 123584, 123627) || A2(r, 123632, 123641)) || A2(r, 124112, 124139)) || A2(r, 124144, 124153)) || A2(r, 124896, 124902)) || A2(r, 124904, 124907)) || A2(r, 124909, 124910)) || A2(r, 124912, 124926)) || A2(r, 124928, 125124)) || A2(r, 125127, 125135)) || A2(r, 125184, 125251)) || e(125259)))) : (l(126589) ? (l(126504) ? ((((((((((A2(r, 125264, 125273) || A2(r, 126065, 126123)) || A2(r, 126125, 126127)) || A2(r, 126129, 126132)) || A2(r, 126209, 126253)) || A2(r, 126255, 126269)) || A2(r, 126464, 126467)) || A2(r, 126469, 126495)) || A2(r, 126497, 126498)) || e(126500)) || e(126503)) : ((((((((((((A2(r, 126505, 126514) || A2(r, 126516, 126519)) || e(126530)) || A2(r, 126541, 126543)) || A2(r, 126545, 126546)) || e(126548)) || A2(r, 126561, 126562)) || e(126564)) || A2(r, 126567, 126570)) || A2(r, 126572, 126578)) || A2(r, 126580, 126583)) || A2(r, 126585, 126588)) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && ((A2(r, 126521, 126523) || A2(r, 126535, 126539)) || A2(r, 126551, 126559))))) : (l(177976) ? ((((((((((e(126590) || A2(r, 126592, 126601)) || A2(r, 126603, 126619)) || A2(r, 126625, 126627)) || A2(r, 126629, 126633)) || A2(r, 126635, 126651)) || A2(r, 127232, 127244)) || A2(r, 130032, 130041)) || e(131072)) || e(173791)) || e(173824)) : (((((((((((e(177977) || e(177984)) || e(178205)) || e(178208)) || e(183969)) || e(183984)) || e(191456)) || A2(r, 194560, 195101)) || e(196608)) || e(201546)) || e(201552)) || e(205743))))))));
};
var $miniBill$elm_unicode$Unicode$isLower = function (c) {
	var simple = _Utils_eq(
		$elm$core$Char$toLower(c),
		c) && (!_Utils_eq(
		$elm$core$Char$toUpper(c),
		c));
	var code = $elm$core$Char$toCode(c);
	var e = function (hex) {
		return _Utils_eq(hex, code);
	};
	var l = function (hex) {
		return _Utils_cmp(code, hex) < 0;
	};
	var r = F2(function r$fn(from, to) {
			return (_Utils_cmp(from, code) < 1) && (_Utils_cmp(code, to) < 1);
		});
	return (simple && ((((code <= 836) || A2(r, 838, 8559)) || A2(r, 8576, 9423)) || A2(r, 9450, 983040))) || (l(43001) ? (l(8457) ? (l(590) ? (((((((A2(r, 311, 312) || A2(r, 396, 397)) || A2(r, 409, 411)) || A2(r, 426, 427)) || A2(r, 441, 442)) || A2(r, 445, 447)) || e(545)) || A2(r, 563, 569)) : ((((((((A2(r, 591, 659) || A2(r, 661, 687)) || A2(r, 1019, 1020)) || A2(r, 1376, 1416)) || A2(r, 7424, 7467)) || A2(r, 7531, 7543)) || A2(r, 7545, 7578)) || A2(r, 7829, 7837)) || e(7839))) : (l(11376) ? (((((((e(8458) || A2(r, 8462, 8463)) || e(8467)) || e(8495)) || e(8500)) || e(8505)) || A2(r, 8508, 8509)) || A2(r, 8518, 8521)) : (((((((((e(11377) || A2(r, 11379, 11380)) || A2(r, 11382, 11387)) || A2(r, 11491, 11492)) || A2(r, 42799, 42801)) || A2(r, 42865, 42872)) || e(42894)) || A2(r, 42899, 42901)) || e(42927)) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && A2(r, 42963, 42965))))) : (l(120353) ? (l(119994) ? (((((((e(43002) || A2(r, 43824, 43866)) || A2(r, 43872, 43880)) || A2(r, 119834, 119859)) || A2(r, 119886, 119892)) || A2(r, 119894, 119911)) || A2(r, 119938, 119963)) || A2(r, 119990, 119993)) : ((((((((e(119995) || A2(r, 119997, 120003)) || A2(r, 120005, 120015)) || A2(r, 120042, 120067)) || A2(r, 120094, 120119)) || A2(r, 120146, 120171)) || A2(r, 120198, 120223)) || A2(r, 120250, 120275)) || A2(r, 120302, 120327))) : (l(120655) ? (((((((A2(r, 120354, 120379) || A2(r, 120406, 120431)) || A2(r, 120458, 120485)) || A2(r, 120514, 120538)) || A2(r, 120540, 120545)) || A2(r, 120572, 120596)) || A2(r, 120598, 120603)) || A2(r, 120630, 120654)) : ((((((((A2(r, 120656, 120661) || A2(r, 120688, 120712)) || A2(r, 120714, 120719)) || A2(r, 120746, 120770)) || A2(r, 120772, 120777)) || e(120779)) || A2(r, 122624, 122633)) || A2(r, 122635, 122654)) || A2(r, 122661, 122666)))));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$reservedList = _List_fromArray(
	['module', 'exposing', 'import', 'as', 'if', 'then', 'else', 'let', 'in', 'case', 'of', 'port', 'type', 'where']);
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionName = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$variable(
		{
			g6: function (c) {
				return $miniBill$elm_unicode$Unicode$isAlphaNum(c) || (c === '_');
			},
			hz: $elm$core$Set$fromList($stil4m$elm_syntax$Elm$Parser$Tokens$reservedList),
			dv: $miniBill$elm_unicode$Unicode$isLower
		}));
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return function (s) {
		var _v0 = thunk(0);
		var parse = _v0;
		return parse(s);
	};
};
var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
var $stil4m$elm_syntax$Combine$lazy = function (t) {
	return function (state) {
		return $elm$parser$Parser$lazy(
			function (_v0) {
				return function (_v1) {
					var t_ = _v1;
					return t_(state);
				}(
					t(0));
			});
	};
};
var $elm$parser$Parser$Nestable = 1;
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(function $elm$parser$Parser$Advanced$fromInfo$fn(row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.h, s.b1, s.gx, s.f);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.p)) : A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.h, newOffset) < 0,
			0,
			{gx: newCol, p: s.p, t: s.t, h: newOffset, b1: newRow, f: s.f});
	};
};
var $elm$parser$Parser$Advanced$isChar = function (_char) {
	return true;
};
var $elm$parser$Parser$Advanced$nestableHelp = F5(function $elm$parser$Parser$Advanced$nestableHelp$fn(isNotRelevant, open, close, expectingClose, nestLevel) {
		return A2(
			$elm$parser$Parser$Advanced$skip,
			$elm$parser$Parser$Advanced$chompWhile(isNotRelevant),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						(nestLevel === 1) ? close : A2(
						$elm$parser$Parser$Advanced$andThen,
						function (_v0) {
							return A5($elm$parser$Parser$Advanced$nestableHelp, isNotRelevant, open, close, expectingClose, nestLevel - 1);
						},
						close),
						A2(
						$elm$parser$Parser$Advanced$andThen,
						function (_v1) {
							return A5($elm$parser$Parser$Advanced$nestableHelp, isNotRelevant, open, close, expectingClose, nestLevel + 1);
						},
						open),
						A2(
						$elm$parser$Parser$Advanced$andThen,
						function (_v2) {
							return A5($elm$parser$Parser$Advanced$nestableHelp, isNotRelevant, open, close, expectingClose, nestLevel);
						},
						A2($elm$parser$Parser$Advanced$chompIf, $elm$parser$Parser$Advanced$isChar, expectingClose))
					])));
	});
var $elm$parser$Parser$Advanced$nestableComment = F2(function $elm$parser$Parser$Advanced$nestableComment$fn(open, close) {
		var oStr = open.a;
		var oX = open.b;
		var cStr = close.a;
		var cX = close.b;
		var _v0 = $elm$core$String$uncons(oStr);
		if (_v0.$ === 1) {
			return $elm$parser$Parser$Advanced$problem(oX);
		} else {
			var _v1 = _v0.a;
			var openChar = _v1.a;
			var _v2 = $elm$core$String$uncons(cStr);
			if (_v2.$ === 1) {
				return $elm$parser$Parser$Advanced$problem(cX);
			} else {
				var _v3 = _v2.a;
				var closeChar = _v3.a;
				var isNotRelevant = function (_char) {
					return (!_Utils_eq(_char, openChar)) && (!_Utils_eq(_char, closeChar));
				};
				var chompOpen = $elm$parser$Parser$Advanced$token(open);
				return A2(
					$elm$parser$Parser$Advanced$ignorer,
					chompOpen,
					A5(
						$elm$parser$Parser$Advanced$nestableHelp,
						isNotRelevant,
						chompOpen,
						$elm$parser$Parser$Advanced$token(close),
						cX,
						1));
			}
		}
	});
var $elm$parser$Parser$Advanced$multiComment = F3(function $elm$parser$Parser$Advanced$multiComment$fn(open, close, nestable) {
		if (!nestable) {
			return A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$token(open),
				$elm$parser$Parser$Advanced$chompUntil(close));
		} else {
			return A2($elm$parser$Parser$Advanced$nestableComment, open, close);
		}
	});
var $elm$parser$Parser$Advanced$Nestable = 1;
var $elm$parser$Parser$Advanced$NotNestable = 0;
var $elm$parser$Parser$toAdvancedNestable = function (nestable) {
	if (!nestable) {
		return 0;
	} else {
		return 1;
	}
};
var $elm$parser$Parser$multiComment = F3(function $elm$parser$Parser$multiComment$fn(open, close, nestable) {
		return A3(
			$elm$parser$Parser$Advanced$multiComment,
			$elm$parser$Parser$toToken(open),
			$elm$parser$Parser$toToken(close),
			$elm$parser$Parser$toAdvancedNestable(nestable));
	});
var $stil4m$elm_syntax$Elm$Parser$Comments$multilineCommentInner = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$getChompedString(
		A3($elm$parser$Parser$multiComment, '{-', '-}', 1)));
var $stil4m$elm_syntax$Elm$Parser$State$addComment = F2(function $stil4m$elm_syntax$Elm$Parser$State$addComment$fn(pair, _v0) {
		var s = _v0;
		return _Utils_update(
			s,
			{
				ie: A2($elm$core$List$cons, pair, s.ie)
			});
	});
var $stil4m$elm_syntax$Combine$modifyState = function (f) {
	return function (state) {
		return $elm$parser$Parser$succeed(
			_Utils_Tuple2(
				f(state),
				0));
	};
};
var $stil4m$elm_syntax$Elm$Parser$Comments$addCommentToState = function (p) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		function (pair) {
			return A2(
				$stil4m$elm_syntax$Combine$continueWith,
				$stil4m$elm_syntax$Combine$succeed(0),
				$stil4m$elm_syntax$Combine$modifyState(
					$stil4m$elm_syntax$Elm$Parser$State$addComment(pair)));
		},
		p);
};
var $stil4m$elm_syntax$Elm$Parser$Comments$parseComment = function (commentParser) {
	return $stil4m$elm_syntax$Elm$Parser$Comments$addCommentToState(
		$stil4m$elm_syntax$Elm$Parser$Node$parser(commentParser));
};
var $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Comments$parseComment($stil4m$elm_syntax$Elm$Parser$Comments$multilineCommentInner);
	});
var $stil4m$elm_syntax$Elm$Parser$Whitespace$untilNewlineToken = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile(
			function (c) {
				return (c !== '\u000D') && (c !== '\n');
			})));
var $stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment = $stil4m$elm_syntax$Elm$Parser$Comments$parseComment(
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Whitespace$untilNewlineToken,
		A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Combine$string('--'),
			$stil4m$elm_syntax$Combine$succeed($elm$core$Basics$append))));
var $stil4m$elm_syntax$Elm$Parser$Layout$anyComment = A2($stil4m$elm_syntax$Combine$or, $stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment, $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment);
var $elm$parser$Parser$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (!step.$) {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(function $elm$parser$Parser$loop$fn(state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $stil4m$elm_syntax$Combine$many = function (p) {
	var helper = function (_v2) {
		var oldState = _v2.a;
		var items = _v2.b;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (_v0) {
							var newState = _v0.a;
							var item = _v0.b;
							return $elm$parser$Parser$Loop(
								_Utils_Tuple2(
									newState,
									A2($elm$core$List$cons, item, items)));
						}),
					A2($stil4m$elm_syntax$Combine$app, p, oldState)),
					A2(
					$elm$parser$Parser$map,
					function (_v1) {
						return $elm$parser$Parser$Done(
							_Utils_Tuple2(
								oldState,
								$elm$core$List$reverse(items)));
					},
					$elm$parser$Parser$succeed(0))
				]));
	};
	return function (state) {
		return A2(
			$elm$parser$Parser$loop,
			_Utils_Tuple2(state, _List_Nil),
			helper);
	};
};
var $stil4m$elm_syntax$Combine$many1 = function (p) {
	return A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Combine$many(p),
		A2(
			$stil4m$elm_syntax$Combine$andMap,
			p,
			$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons)));
};
var $stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces = $stil4m$elm_syntax$Combine$fromCore(
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$token(' '),
		$elm$parser$Parser$chompWhile(
			function (c) {
				return c === ' ';
			})));
var $stil4m$elm_syntax$Elm$Parser$Whitespace$realNewLine = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(0),
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$elm$parser$Parser$chompIf(
							$elm$core$Basics$eq('\u000D')),
							$elm$parser$Parser$succeed(0)
						]))),
			$elm$parser$Parser$symbol('\n'))));
var $stil4m$elm_syntax$Elm$Parser$Layout$verifyIndent = function (f) {
	return $stil4m$elm_syntax$Combine$withState(
		function (s) {
			return $stil4m$elm_syntax$Combine$withLocation(
				function (l) {
					return A2(
						f,
						$stil4m$elm_syntax$Elm$Parser$State$expectedColumn(s),
						l.bH) ? $stil4m$elm_syntax$Combine$succeed(0) : $stil4m$elm_syntax$Combine$fail(
						'Expected higher indent than ' + $elm$core$String$fromInt(l.bH));
				});
		});
};
var $stil4m$elm_syntax$Elm$Parser$Layout$layout = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Layout$verifyIndent(
		F2(
			function (stateIndent, current) {
				return _Utils_cmp(stateIndent, current) < 0;
			})),
	$stil4m$elm_syntax$Combine$many1(
		$stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					$stil4m$elm_syntax$Elm$Parser$Layout$anyComment,
					A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces, $stil4m$elm_syntax$Elm$Parser$Layout$anyComment])),
					$stil4m$elm_syntax$Combine$many1($stil4m$elm_syntax$Elm$Parser$Whitespace$realNewLine)),
					$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces
				]))));
var $stil4m$elm_syntax$Combine$maybe = function (_v0) {
	var p = _v0;
	return function (state) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v1) {
						var c = _v1.a;
						var v = _v1.b;
						return _Utils_Tuple2(
							c,
							$elm$core$Maybe$Just(v));
					},
					p(state)),
					$elm$parser$Parser$succeed(
					_Utils_Tuple2(state, $elm$core$Maybe$Nothing))
				]));
	};
};
var $stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides = function (x) {
	return A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
		A2(
			$stil4m$elm_syntax$Combine$continueWith,
			x,
			$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout)));
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$FloatPattern = function (a) {
	return {$: 6, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern = function (a) {
	return {$: 5, a: a};
};
var $elm$parser$Parser$ExpectingBinary = {$: 4};
var $elm$parser$Parser$ExpectingFloat = {$: 5};
var $elm$parser$Parser$ExpectingHex = {$: 2};
var $elm$parser$Parser$ExpectingInt = {$: 1};
var $elm$parser$Parser$ExpectingNumber = {$: 6};
var $elm$parser$Parser$ExpectingOctal = {$: 3};
var $elm$core$Result$fromMaybe = F2(function $elm$core$Result$fromMaybe$fn(err, maybe) {
		if (!maybe.$) {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(function $elm$parser$Parser$Advanced$bumpOffset$fn(newOffset, s) {
		return {gx: s.gx + (newOffset - s.h), p: s.p, t: s.t, h: newOffset, b1: s.b1, f: s.f};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(function $elm$parser$Parser$Advanced$consumeExp$fn(offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(function $elm$parser$Parser$Advanced$consumeDotAndExp$fn(offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(function $elm$parser$Parser$Advanced$finalizeInt$fn(invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 1) {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.h, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$core$String$toFloat = _String_toFloat;
var $elm$parser$Parser$Advanced$finalizeFloat = F6(function $elm$parser$Parser$Advanced$finalizeFloat$fn(invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.f);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.b1, s.gx - (floatOffset + s.h), invalid, s.p));
		} else {
			if (_Utils_eq(s.h, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.h, intPair, s);
				} else {
					if (floatSettings.$ === 1) {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.h, floatOffset, s.f));
						if (_v1.$ === 1) {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return function (s) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.h, s.f)) {
			var zeroOffset = s.h + 1;
			var baseOffset = zeroOffset + 1;
			return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.f) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.iD,
				c.g1,
				baseOffset,
				A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.f),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.f) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.iD,
				c.hp,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.f),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.f) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.iD,
				c.gu,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.f),
				s) : A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.iD,
				c.gP,
				c.g7,
				c.gX,
				_Utils_Tuple2(zeroOffset, 0),
				s)));
		} else {
			return A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.iD,
				c.gP,
				c.g7,
				c.gX,
				A3($elm$parser$Parser$Advanced$consumeBase, 10, s.h, s.f),
				s);
		}
	};
};
var $elm$parser$Parser$number = function (i) {
	return $elm$parser$Parser$Advanced$number(
		{
			gu: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingBinary, i.gu),
			gP: $elm$parser$Parser$ExpectingNumber,
			gX: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingFloat, i.gX),
			g1: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingHex, i.g1),
			g7: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingInt, i.g7),
			iD: $elm$parser$Parser$ExpectingNumber,
			hp: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingOctal, i.hp)
		});
};
var $stil4m$elm_syntax$Elm$Parser$Numbers$raw = F3(function $stil4m$elm_syntax$Elm$Parser$Numbers$raw$fn(floatf, intf, hexf) {
		return $elm$parser$Parser$number(
			{
				gu: $elm$core$Maybe$Nothing,
				gX: $elm$core$Maybe$Just(floatf),
				g1: $elm$core$Maybe$Just(hexf),
				g7: $elm$core$Maybe$Just(intf),
				hp: $elm$core$Maybe$Nothing
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Numbers$number = F3(function $stil4m$elm_syntax$Elm$Parser$Numbers$number$fn(floatf, intf, hexf) {
		return $stil4m$elm_syntax$Combine$fromCore(
			A3($stil4m$elm_syntax$Elm$Parser$Numbers$raw, floatf, intf, hexf));
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$numberPart = A3($stil4m$elm_syntax$Elm$Parser$Numbers$number, $stil4m$elm_syntax$Elm$Syntax$Pattern$FloatPattern, $stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern, $stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern);
var $stil4m$elm_syntax$Combine$parens = A2(
	$stil4m$elm_syntax$Combine$between,
	$stil4m$elm_syntax$Combine$string('('),
	$stil4m$elm_syntax$Combine$string(')'));
var $stil4m$elm_syntax$Combine$sepBy1 = F2(function $stil4m$elm_syntax$Combine$sepBy1$fn(sep, p) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Combine$many(
				A2($stil4m$elm_syntax$Combine$continueWith, p, sep)),
			A2(
				$stil4m$elm_syntax$Combine$andMap,
				p,
				$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons)));
	});
var $stil4m$elm_syntax$Combine$sepBy = F2(function $stil4m$elm_syntax$Combine$sepBy$fn(sep, p) {
		return A2(
			$stil4m$elm_syntax$Combine$or,
			A2($stil4m$elm_syntax$Combine$sepBy1, sep, p),
			$stil4m$elm_syntax$Combine$succeed(_List_Nil));
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Node$parser(
			A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern,
				A3(
					$stil4m$elm_syntax$Combine$between,
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Combine$string('{')),
					$stil4m$elm_syntax$Combine$string('}'),
					A2(
						$stil4m$elm_syntax$Combine$sepBy,
						$stil4m$elm_syntax$Combine$string(','),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
							$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName))))));
	});
var $elm$parser$Parser$Advanced$getOffset = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.h, s);
};
var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
var $stil4m$elm_syntax$Elm$Parser$Tokens$stringLiteral = function () {
	var helper = function (s) {
		return s.ac ? A2(
			$elm$parser$Parser$map,
			function (v) {
				return $elm$parser$Parser$Loop(
					{
						ac: false,
						F: A2(
							$elm$core$List$cons,
							$elm$core$String$fromList(
								_List_fromArray(
									[v])),
							s.F)
					});
			},
			$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValue) : $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$String$concat(
								$elm$core$List$reverse(s.F)));
					},
					$elm$parser$Parser$symbol('\"')),
					A2(
					$elm$parser$Parser$map,
					function (_v1) {
						return $elm$parser$Parser$Loop(
							{ac: true, F: s.F});
					},
					$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$symbol('\\'))),
					A2(
					$elm$parser$Parser$andThen,
					function (_v2) {
						var start = _v2.a;
						var value = _v2.b;
						var end = _v2.c;
						return _Utils_eq(start, end) ? $elm$parser$Parser$problem('Expected a string character or a double quote') : $elm$parser$Parser$succeed(
							$elm$parser$Parser$Loop(
								{
									ac: s.ac,
									F: A2($elm$core$List$cons, value, s.F)
								}));
					},
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								$elm$parser$Parser$succeed(
									F3(
										function (start, value, end) {
											return _Utils_Tuple3(start, value, end);
										})),
								$elm$parser$Parser$getOffset),
							$elm$parser$Parser$getChompedString(
								$elm$parser$Parser$chompWhile(
									function (c) {
										return (c !== '\"') && (c !== '\\');
									}))),
						$elm$parser$Parser$getOffset))
				]));
	};
	return $stil4m$elm_syntax$Combine$fromCore(
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$symbol('\"')),
			A2(
				$elm$parser$Parser$loop,
				{ac: false, F: _List_Nil},
				helper)));
}();
var $miniBill$elm_unicode$Unicode$isUpper = function (c) {
	var simple = _Utils_eq(
		$elm$core$Char$toUpper(c),
		c) && (!_Utils_eq(
		$elm$core$Char$toLower(c),
		c));
	var code = $elm$core$Char$toCode(c);
	var e = function (hex) {
		return _Utils_eq(hex, code);
	};
	var l = function (hex) {
		return _Utils_cmp(code, hex) < 0;
	};
	var r = F2(function r$fn(from, to) {
			return (_Utils_cmp(from, code) < 1) && (_Utils_cmp(code, to) < 1);
		});
	return (simple && (((code <= 8543) || A2(r, 8560, 9397)) || A2(r, 9424, 983040))) || (l(120015) ? (l(8509) ? ((((((((((A2(r, 978, 980) || e(8450)) || e(8455)) || A2(r, 8459, 8461)) || A2(r, 8464, 8466)) || e(8469)) || A2(r, 8473, 8477)) || e(8484)) || e(8488)) || A2(r, 8490, 8493)) || A2(r, 8496, 8499)) : ((((((((((A2(r, 8510, 8511) || e(8517)) || A2(r, 119808, 119833)) || A2(r, 119860, 119885)) || A2(r, 119912, 119937)) || e(119964)) || A2(r, 119966, 119967)) || e(119970)) || A2(r, 119973, 119974)) || A2(r, 119977, 119980)) || A2(r, 119982, 119989))) : (l(120223) ? ((((((((((A2(r, 120016, 120041) || A2(r, 120068, 120069)) || A2(r, 120071, 120074)) || A2(r, 120077, 120084)) || A2(r, 120086, 120092)) || A2(r, 120120, 120121)) || A2(r, 120123, 120126)) || A2(r, 120128, 120132)) || e(120134)) || A2(r, 120138, 120144)) || A2(r, 120172, 120197)) : ((((((((((A2(r, 120224, 120249) || A2(r, 120276, 120301)) || A2(r, 120328, 120353)) || A2(r, 120380, 120405)) || A2(r, 120432, 120457)) || A2(r, 120488, 120512)) || A2(r, 120546, 120570)) || A2(r, 120604, 120628)) || A2(r, 120662, 120686)) || A2(r, 120720, 120744)) || e(120778))));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeName = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$variable(
		{
			g6: function (c) {
				return $miniBill$elm_unicode$Unicode$isAlphaNum(c) || (c === '_');
			},
			hz: $elm$core$Set$fromList($stil4m$elm_syntax$Elm$Parser$Tokens$reservedList),
			dv: $miniBill$elm_unicode$Unicode$isUpper
		}));
var $stil4m$elm_syntax$Elm$Parser$Base$typeIndicator = function () {
	var helper = function (_v0) {
		var n = _v0.a;
		var xs = _v0.b;
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$andThen,
					function (t) {
						return helper(
							_Utils_Tuple2(
								t,
								A2($elm$core$List$cons, n, xs)));
					},
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
						$stil4m$elm_syntax$Combine$string('.'))),
					$stil4m$elm_syntax$Combine$succeed(
					_Utils_Tuple2(n, xs))
				]));
	};
	return A2(
		$stil4m$elm_syntax$Combine$map,
		function (_v1) {
			var t = _v1.a;
			var xs = _v1.b;
			return _Utils_Tuple2(
				$elm$core$List$reverse(xs),
				t);
		},
		A2(
			$stil4m$elm_syntax$Combine$andThen,
			function (t) {
				return helper(
					_Utils_Tuple2(t, _List_Nil));
			},
			$stil4m$elm_syntax$Elm$Parser$Tokens$typeName));
}();
var $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern = function (a) {
	return {$: 11, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$variablePart = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$functionName));
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPattern = function (consumeArgs) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		function (_v0) {
			var range = _v0.a;
			var _v1 = _v0.b;
			var mod = _v1.a;
			var name = _v1.b;
			return A2(
				$stil4m$elm_syntax$Combine$map,
				function (args) {
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						$stil4m$elm_syntax$Elm$Syntax$Range$combine(
							A2(
								$elm$core$List$cons,
								range,
								A2(
									$elm$core$List$map,
									function (_v2) {
										var r = _v2.a;
										return r;
									},
									args))),
						A2(
							$stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern,
							A2($stil4m$elm_syntax$Elm$Syntax$Pattern$QualifiedNameRef, mod, name),
							args));
				},
				consumeArgs ? $stil4m$elm_syntax$Combine$many(
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternArg())) : $stil4m$elm_syntax$Combine$succeed(_List_Nil));
		},
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
			$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$typeIndicator)));
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$tryToCompose = function (x) {
	return A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$map,
					function (y) {
						return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern, x, y);
					},
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Elm$Parser$Layout$layout,
							$stil4m$elm_syntax$Combine$fromCore(
								$elm$parser$Parser$keyword('as'))))),
					A2(
					$stil4m$elm_syntax$Combine$map,
					function (y) {
						return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern, x, y);
					},
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$fromCore(
								$elm$parser$Parser$symbol('::'))))),
					$stil4m$elm_syntax$Combine$succeed(x)
				])),
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout));
};
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern() {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		$stil4m$elm_syntax$Elm$Parser$Patterns$tryToCompose,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern());
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern() {
	return $stil4m$elm_syntax$Combine$choice(
		_List_fromArray(
			[
				$stil4m$elm_syntax$Elm$Parser$Patterns$variablePart,
				$stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPattern(true),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$stringLiteral)),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteral)),
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Patterns$numberPart),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('()')))),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('_')))),
				$stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern,
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(),
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern()
			]));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternArg() {
	return $stil4m$elm_syntax$Combine$choice(
		_List_fromArray(
			[
				$stil4m$elm_syntax$Elm$Parser$Patterns$variablePart,
				$stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPattern(false),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$stringLiteral)),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteral)),
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Patterns$numberPart),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('()')))),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('_')))),
				$stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern,
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(),
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern()
			]));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v5) {
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A3(
					$stil4m$elm_syntax$Combine$between,
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Combine$string('[')),
					$stil4m$elm_syntax$Combine$string(']'),
					A2(
						$stil4m$elm_syntax$Combine$map,
						$stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern,
						A2(
							$stil4m$elm_syntax$Combine$sepBy,
							$stil4m$elm_syntax$Combine$string(','),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
								$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())))));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v3) {
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					function (c) {
						if (c.b && (!c.b.b)) {
							var x = c.a;
							return $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern(x);
						} else {
							return $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(c);
						}
					},
					$stil4m$elm_syntax$Combine$parens(
						A2(
							$stil4m$elm_syntax$Combine$sepBy,
							$stil4m$elm_syntax$Combine$string(','),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
								$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())))));
		});
}
var $stil4m$elm_syntax$Elm$Parser$Patterns$pattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$pattern;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternArg = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternArg();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternArg = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternArg;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionArgument = $stil4m$elm_syntax$Elm$Parser$Patterns$pattern;
var $stil4m$elm_syntax$Elm$Syntax$Expression$functionRange = function (_function) {
	return $stil4m$elm_syntax$Elm$Syntax$Range$combine(
		_List_fromArray(
			[
				function () {
				var _v0 = _function.fB;
				if (!_v0.$) {
					var documentation = _v0.a;
					return $stil4m$elm_syntax$Elm$Syntax$Node$range(documentation);
				} else {
					return A2(
						$elm$core$Maybe$withDefault,
						function (_v3) {
							var r = _v3.a;
							return r;
						}(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).cH),
						A2(
							$elm$core$Maybe$map,
							function (_v1) {
								var value = _v1.b;
								var _v2 = value.cH;
								var r = _v2.a;
								return r;
							},
							_function.i7));
				}
			}(),
				function (_v4) {
				var r = _v4.a;
				return r;
			}(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).eC)
			]));
};
var $stil4m$elm_syntax$Elm$Syntax$Signature$Signature = F2(function $stil4m$elm_syntax$Elm$Syntax$Signature$Signature$fn(name, typeAnnotation) {
		return {cH: name, hV: typeAnnotation};
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$Eager = 0;
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation = F2(function $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation$fn(a, b) {
		return {$: 6, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord = F2(function $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord$fn(a, b) {
		return {$: 5, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$Lazy = 1;
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record = function (a) {
	return {$: 4, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed = F2(function $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit = {$: 2};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled = function (a) {
	return {$: 3, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$asTypeAnnotation = F2(function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$asTypeAnnotation$fn(x, xs) {
		var value = x.b;
		if (!xs.b) {
			return value;
		} else {
			return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(
				A2($elm$core$List$cons, x, xs));
		}
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Node$parser(
			A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType, $stil4m$elm_syntax$Elm$Parser$Tokens$functionName));
	});
var $stil4m$elm_syntax$Elm$Parser$Layout$Indented = 1;
var $stil4m$elm_syntax$Elm$Parser$Layout$Strict = 0;
var $stil4m$elm_syntax$Elm$Parser$State$storedColumns = function (_v0) {
	var indents = _v0.cw;
	return A2(
		$elm$core$List$map,
		$elm$core$Basics$add(1),
		indents);
};
var $stil4m$elm_syntax$Elm$Parser$Layout$compute = $stil4m$elm_syntax$Combine$withState(
	function (s) {
		return $stil4m$elm_syntax$Combine$withLocation(
			function (l) {
				var known = A2(
					$elm$core$List$cons,
					1,
					$stil4m$elm_syntax$Elm$Parser$State$storedColumns(s));
				return A2($elm$core$List$member, l.bH, known) ? $stil4m$elm_syntax$Combine$succeed(0) : $stil4m$elm_syntax$Combine$succeed(1);
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Layout$compute,
	$stil4m$elm_syntax$Combine$many(
		$stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					$stil4m$elm_syntax$Elm$Parser$Layout$anyComment,
					A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces,
								$stil4m$elm_syntax$Elm$Parser$Layout$anyComment,
								$stil4m$elm_syntax$Combine$succeed(0)
							])),
					$stil4m$elm_syntax$Combine$many1($stil4m$elm_syntax$Elm$Parser$Whitespace$realNewLine)),
					$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces
				]))));
var $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith = F2(function $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith$fn(onStrict, onIndented) {
		return A2(
			$stil4m$elm_syntax$Combine$andThen,
			function (ind) {
				if (!ind) {
					return onStrict(0);
				} else {
					return onIndented(0);
				}
			},
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout);
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFn = function (mode) {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v7) {
			return $stil4m$elm_syntax$Combine$choice(
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation(),
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotation(mode),
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation,
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation()
					]));
		});
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotation = function (mode) {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v0) {
			var nodeRanges = $elm$core$List$map(
				function (_v6) {
					var r = _v6.a;
					return r;
				});
			var genericHelper = function (items) {
				return A2(
					$stil4m$elm_syntax$Combine$or,
					A2(
						$stil4m$elm_syntax$Combine$andThen,
						function (next) {
							return A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								A2(
									$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
									function (_v1) {
										return $stil4m$elm_syntax$Combine$succeed(
											$elm$core$List$reverse(
												A2($elm$core$List$cons, next, items)));
									},
									function (_v2) {
										return genericHelper(
											A2($elm$core$List$cons, next, items));
									}));
						},
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFn(1)),
					$stil4m$elm_syntax$Combine$succeed(
						$elm$core$List$reverse(items)));
			};
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (original) {
					var tir = original.a;
					return A2(
						$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
						function (_v3) {
							return $stil4m$elm_syntax$Combine$succeed(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									tir,
									A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, original, _List_Nil)));
						},
						function (_v4) {
							if (!mode) {
								return A2(
									$stil4m$elm_syntax$Combine$map,
									function (args) {
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											$stil4m$elm_syntax$Elm$Syntax$Range$combine(
												A2(
													$elm$core$List$cons,
													tir,
													nodeRanges(args))),
											A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, original, args));
									},
									genericHelper(_List_Nil));
							} else {
								return $stil4m$elm_syntax$Combine$succeed(
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										tir,
										A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, original, _List_Nil)));
							}
						});
				},
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$typeIndicator));
		});
};
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v14) {
			var commaSep = $stil4m$elm_syntax$Combine$many(
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$string(',')))));
			var nested = A2(
				$stil4m$elm_syntax$Combine$andMap,
				commaSep,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Parser$TypeAnnotation$asTypeAnnotation)))));
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$map,
								$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit),
								$stil4m$elm_syntax$Combine$string(')')),
								A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$string(')'),
								nested)
							])),
					$stil4m$elm_syntax$Combine$string('(')));
		});
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v13) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Combine$string(':'),
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout)))),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout)),
					$stil4m$elm_syntax$Combine$succeed($elm$core$Tuple$pair)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v12) {
			return A2(
				$stil4m$elm_syntax$Combine$sepBy1,
				$stil4m$elm_syntax$Combine$string(','),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
					$stil4m$elm_syntax$Elm$Parser$Node$parser(
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition())));
		});
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v11) {
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$continueWith,
								$stil4m$elm_syntax$Combine$succeed(
									$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(_List_Nil)),
								$stil4m$elm_syntax$Combine$string('}')),
								A2(
								$stil4m$elm_syntax$Combine$andThen,
								function (fname) {
									return $stil4m$elm_syntax$Combine$choice(
										_List_fromArray(
											[
												A2(
												$stil4m$elm_syntax$Combine$ignore,
												$stil4m$elm_syntax$Combine$string('}'),
												A2(
													$stil4m$elm_syntax$Combine$andMap,
													$stil4m$elm_syntax$Elm$Parser$Node$parser(
														$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation()),
													A2(
														$stil4m$elm_syntax$Combine$ignore,
														$stil4m$elm_syntax$Combine$string('|'),
														$stil4m$elm_syntax$Combine$succeed(
															$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord(fname))))),
												A2(
												$stil4m$elm_syntax$Combine$andThen,
												function (ta) {
													return A2(
														$stil4m$elm_syntax$Combine$map,
														function (rest) {
															return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(
																A2(
																	$elm$core$List$cons,
																	A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $elm$core$Tuple$pair, fname, ta),
																	rest));
														},
														A2(
															$stil4m$elm_syntax$Combine$ignore,
															$stil4m$elm_syntax$Combine$string('}'),
															$stil4m$elm_syntax$Combine$choice(
																_List_fromArray(
																	[
																		A2(
																		$stil4m$elm_syntax$Combine$continueWith,
																		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation(),
																		$stil4m$elm_syntax$Combine$string(',')),
																		$stil4m$elm_syntax$Combine$succeed(_List_Nil)
																	]))));
												},
												A2(
													$stil4m$elm_syntax$Combine$ignore,
													$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
													A2(
														$stil4m$elm_syntax$Combine$continueWith,
														$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
														A2(
															$stil4m$elm_syntax$Combine$ignore,
															$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
															$stil4m$elm_syntax$Combine$string(':')))))
											]));
								},
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName)))
							])),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Combine$string('{'))));
		});
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v8) {
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (typeRef) {
					return A2(
						$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
						function (_v9) {
							return $stil4m$elm_syntax$Combine$succeed(typeRef);
						},
						function (_v10) {
							return A2(
								$stil4m$elm_syntax$Combine$or,
								A2(
									$stil4m$elm_syntax$Combine$map,
									function (ta) {
										return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, typeRef, ta);
									},
									A2(
										$stil4m$elm_syntax$Combine$continueWith,
										$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
											$stil4m$elm_syntax$Combine$string('->')))),
								$stil4m$elm_syntax$Combine$succeed(typeRef));
						});
				},
				$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFn(0));
		});
}
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionSignatureFromVarPointer = function (varPointer) {
	return A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Combine$string(':'),
				$stil4m$elm_syntax$Combine$succeed(
					function (ta) {
						return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Signature$Signature, varPointer, ta);
					}))));
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression = function (a) {
	return {$: 23, a: a};
};
var $elm$parser$Parser$NotNestable = 0;
var $stil4m$elm_syntax$Elm$Parser$Declarations$glslExpression = function () {
	var start = '[glsl|';
	var end = '|]';
	return $stil4m$elm_syntax$Elm$Parser$Node$parser(
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string(end),
			A2(
				$stil4m$elm_syntax$Combine$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$dropLeft(
						$elm$core$String$length(start)),
					$stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression),
				$stil4m$elm_syntax$Combine$fromCore(
					$elm$parser$Parser$getChompedString(
						A3($elm$parser$Parser$multiComment, start, end, 0))))));
}();
var $stil4m$elm_syntax$Elm$Parser$Tokens$ifToken = $stil4m$elm_syntax$Combine$string('if');
var $stil4m$elm_syntax$Elm$Parser$Tokens$allowedOperatorTokens = _List_fromArray(
	['+', '-', ':', '/', '*', '>', '<', '=', '/', '&', '^', '%', '|', '!', '.', '#', '$', '≡', '~', '?', '@']);
var $stil4m$elm_syntax$Elm$Parser$Tokens$excludedOperators = _List_fromArray(
	[':', '->', '--', '=']);
var $stil4m$elm_syntax$Combine$Char$oneOf = function (cs) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Maybe$map($stil4m$elm_syntax$Combine$succeed),
			$elm$core$Maybe$withDefault(
				$stil4m$elm_syntax$Combine$fail(
					'expected one of \'' + ($elm$core$String$fromList(cs) + '\'')))),
		$stil4m$elm_syntax$Combine$Char$satisfy(
			function (a) {
				return A2($elm$core$List$member, a, cs);
			}));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$operatorTokenFromList = function (allowedChars) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		function (m) {
			return A2($elm$core$List$member, m, $stil4m$elm_syntax$Elm$Parser$Tokens$excludedOperators) ? $stil4m$elm_syntax$Combine$fail('operator is not allowed') : $stil4m$elm_syntax$Combine$succeed(m);
		},
		A2(
			$stil4m$elm_syntax$Combine$map,
			$elm$core$String$fromList,
			$stil4m$elm_syntax$Combine$many1(
				$stil4m$elm_syntax$Combine$Char$oneOf(allowedChars))));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$infixOperatorToken = $stil4m$elm_syntax$Elm$Parser$Tokens$operatorTokenFromList($stil4m$elm_syntax$Elm$Parser$Tokens$allowedOperatorTokens);
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Layout$verifyIndent(
		F2(
			function (stateIndent, current) {
				return _Utils_eq(stateIndent, current);
			})),
	$stil4m$elm_syntax$Combine$many1(
		$stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					$stil4m$elm_syntax$Elm$Parser$Layout$anyComment,
					A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$succeed(0),
					$stil4m$elm_syntax$Combine$many1($stil4m$elm_syntax$Elm$Parser$Whitespace$realNewLine)),
					$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces
				]))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$liftRecordAccess = function (e) {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v0) {
			return A2(
				$stil4m$elm_syntax$Combine$or,
				A2(
					$stil4m$elm_syntax$Combine$andThen,
					$stil4m$elm_syntax$Elm$Parser$Declarations$liftRecordAccess,
					A2(
						$stil4m$elm_syntax$Combine$map,
						function (f) {
							return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, e, f);
						},
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
							$stil4m$elm_syntax$Combine$string('.')))),
				$stil4m$elm_syntax$Combine$succeed(e));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$multiLineStringLiteral = function () {
	var helper = function (s) {
		return s.ac ? A2(
			$elm$parser$Parser$map,
			function (v) {
				return $elm$parser$Parser$Loop(
					{
						a0: s.a0,
						ac: false,
						F: A2(
							$elm$core$List$cons,
							$elm$core$String$fromChar(v),
							s.F)
					});
			},
			$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValue) : $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$String$concat(
								$elm$core$List$reverse(s.F)));
					},
					$elm$parser$Parser$symbol('\"\"\"')),
					A2(
					$elm$parser$Parser$map,
					function (v) {
						return $elm$parser$Parser$Loop(
							{
								a0: s.a0 + 1,
								ac: s.ac,
								F: A2($elm$core$List$cons, v, s.F)
							});
					},
					$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$symbol('\"'))),
					A2(
					$elm$parser$Parser$map,
					function (_v1) {
						return $elm$parser$Parser$Loop(
							{a0: s.a0 + 1, ac: true, F: s.F});
					},
					$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$symbol('\\'))),
					A2(
					$elm$parser$Parser$andThen,
					function (_v2) {
						var start = _v2.a;
						var value = _v2.b;
						var end = _v2.c;
						return _Utils_eq(start, end) ? $elm$parser$Parser$problem('Expected a string character or a triple double quote') : $elm$parser$Parser$succeed(
							$elm$parser$Parser$Loop(
								{
									a0: s.a0 + 1,
									ac: s.ac,
									F: A2($elm$core$List$cons, value, s.F)
								}));
					},
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								$elm$parser$Parser$succeed(
									F3(
										function (start, value, end) {
											return _Utils_Tuple3(start, value, end);
										})),
								$elm$parser$Parser$getOffset),
							$elm$parser$Parser$getChompedString(
								$elm$parser$Parser$chompWhile(
									function (c) {
										return (c !== '\"') && (c !== '\\');
									}))),
						$elm$parser$Parser$getOffset))
				]));
	};
	return $stil4m$elm_syntax$Combine$fromCore(
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$symbol('\"\"\"')),
			A2(
				$elm$parser$Parser$loop,
				{a0: 0, ac: false, F: _List_Nil},
				helper)));
}();
var $stil4m$elm_syntax$Elm$Parser$Declarations$literalExpression = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Node$parser(
			A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Expression$Literal,
				A2($stil4m$elm_syntax$Combine$or, $stil4m$elm_syntax$Elm$Parser$Tokens$multiLineStringLiteral, $stil4m$elm_syntax$Elm$Parser$Tokens$stringLiteral)));
	});
var $stil4m$elm_syntax$Combine$loop = F2(function $stil4m$elm_syntax$Combine$loop$fn(init, stepper) {
		var wrapper = function (_v3) {
			var oldState = _v3.a;
			var v = _v3.b;
			var _v0 = stepper(v);
			var p = _v0;
			return A2(
				$elm$parser$Parser$map,
				function (_v1) {
					var newState = _v1.a;
					var r = _v1.b;
					if (!r.$) {
						var l = r.a;
						return $elm$parser$Parser$Loop(
							_Utils_Tuple2(newState, l));
					} else {
						var d = r.a;
						return $elm$parser$Parser$Done(
							_Utils_Tuple2(newState, d));
					}
				},
				p(oldState));
		};
		return function (state) {
			return A2(
				$elm$parser$Parser$loop,
				_Utils_Tuple2(state, init),
				wrapper);
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Whitespace$manySpaces = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$chompWhile(
		function (c) {
			return c === ' ';
		}));
var $stil4m$elm_syntax$Elm$Syntax$Expression$Hex = function (a) {
	return {$: 8, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Numbers$forgivingNumber = F3(function $stil4m$elm_syntax$Elm$Parser$Numbers$forgivingNumber$fn(floatf, intf, hexf) {
		return $stil4m$elm_syntax$Combine$fromCore(
			$elm$parser$Parser$backtrackable(
				A3($stil4m$elm_syntax$Elm$Parser$Numbers$raw, floatf, intf, hexf)));
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$numberExpression = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A3($stil4m$elm_syntax$Elm$Parser$Numbers$forgivingNumber, $stil4m$elm_syntax$Elm$Syntax$Expression$Floatable, $stil4m$elm_syntax$Elm$Syntax$Expression$Integer, $stil4m$elm_syntax$Elm$Syntax$Expression$Hex));
var $stil4m$elm_syntax$Elm$Parser$Tokens$ofToken = $stil4m$elm_syntax$Combine$string('of');
var $stil4m$elm_syntax$Elm$Parser$Tokens$allowedPrefixOperatorTokens = A2($elm$core$List$cons, ',', $stil4m$elm_syntax$Elm$Parser$Tokens$allowedOperatorTokens);
var $stil4m$elm_syntax$Elm$Parser$Tokens$prefixOperatorToken = $stil4m$elm_syntax$Elm$Parser$Tokens$operatorTokenFromList($stil4m$elm_syntax$Elm$Parser$Tokens$allowedPrefixOperatorTokens);
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction = function (a) {
	return {$: 21, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$recordAccessFunctionExpression = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2(
		$stil4m$elm_syntax$Combine$map,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Basics$append('.'),
			$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction),
		A2(
			$stil4m$elm_syntax$Combine$continueWith,
			$stil4m$elm_syntax$Elm$Parser$Tokens$functionName,
			$stil4m$elm_syntax$Combine$string('.'))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$reference = function () {
	var justFunction = A2(
		$stil4m$elm_syntax$Combine$map,
		function (v) {
			return _Utils_Tuple2(_List_Nil, v);
		},
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionName);
	var helper = function (_v0) {
		var n = _v0.a;
		var xs = _v0.b;
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$andThen,
								function (t) {
									return helper(
										_Utils_Tuple2(
											t,
											A2($elm$core$List$cons, n, xs)));
								},
								$stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
								A2(
								$stil4m$elm_syntax$Combine$map,
								function (t) {
									return _Utils_Tuple2(
										t,
										A2($elm$core$List$cons, n, xs));
								},
								$stil4m$elm_syntax$Elm$Parser$Tokens$functionName)
							])),
					$stil4m$elm_syntax$Combine$string('.')),
					$stil4m$elm_syntax$Combine$succeed(
					_Utils_Tuple2(n, xs))
				]));
	};
	var recurring = A2(
		$stil4m$elm_syntax$Combine$map,
		function (_v1) {
			var t = _v1.a;
			var xs = _v1.b;
			return _Utils_Tuple2(
				$elm$core$List$reverse(xs),
				t);
		},
		A2(
			$stil4m$elm_syntax$Combine$andThen,
			function (t) {
				return helper(
					_Utils_Tuple2(t, _List_Nil));
			},
			$stil4m$elm_syntax$Elm$Parser$Tokens$typeName));
	return $stil4m$elm_syntax$Combine$choice(
		_List_fromArray(
			[recurring, justFunction]));
}();
var $stil4m$elm_syntax$Elm$Parser$Declarations$referenceExpression = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2(
		$stil4m$elm_syntax$Combine$map,
		function (_v0) {
			var xs = _v0.a;
			var x = _v0.b;
			return A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, xs, x);
		},
		$stil4m$elm_syntax$Elm$Parser$Declarations$reference));
var $stil4m$elm_syntax$Elm$Parser$Tokens$thenToken = $stil4m$elm_syntax$Combine$string('then');
var $stil4m$elm_syntax$Elm$Parser$Ranges$asPointerLocation = function (_v0) {
	var line = _v0.d3;
	var column = _v0.bH;
	return {bH: column, b1: line};
};
var $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint = function (p) {
	return $stil4m$elm_syntax$Combine$withLocation(
		function (start) {
			var k = $stil4m$elm_syntax$Elm$Parser$Ranges$asPointerLocation(start);
			return p(
				{c4: k, dv: k});
		});
};
var $stil4m$elm_syntax$Elm$Parser$State$popIndent = function (_v0) {
	var s = _v0;
	return _Utils_update(
		s,
		{
			cw: A2($elm$core$List$drop, 1, s.cw)
		});
};
var $stil4m$elm_syntax$Elm$Parser$State$pushIndent = F2(function $stil4m$elm_syntax$Elm$Parser$State$pushIndent$fn(x, _v0) {
		var s = _v0;
		return _Utils_update(
			s,
			{
				cw: A2($elm$core$List$cons, x, s.cw)
			});
	});
var $stil4m$elm_syntax$Elm$Parser$State$pushColumn = F2(function $stil4m$elm_syntax$Elm$Parser$State$pushColumn$fn(col, state) {
		return A2($stil4m$elm_syntax$Elm$Parser$State$pushIndent, col - 1, state);
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$withIndentedState = function (p) {
	return $stil4m$elm_syntax$Combine$withLocation(
		function (location) {
			return A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Combine$modifyState($stil4m$elm_syntax$Elm$Parser$State$popIndent),
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					p,
					$stil4m$elm_syntax$Combine$modifyState(
						$stil4m$elm_syntax$Elm$Parser$State$pushColumn(location.bH))));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionWithNameNode = function (pointer) {
	var functionImplementationFromVarPointer = function (varPointer) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$string('='),
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Combine$many(
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								$stil4m$elm_syntax$Elm$Parser$Declarations$functionArgument)),
						$stil4m$elm_syntax$Combine$succeed(
							F2(
								function (args, expr) {
									return A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										$stil4m$elm_syntax$Elm$Syntax$Range$combine(
											_List_fromArray(
												[
													$stil4m$elm_syntax$Elm$Syntax$Node$range(varPointer),
													$stil4m$elm_syntax$Elm$Syntax$Node$range(expr)
												])),
										A3($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionImplementation, varPointer, args, expr));
								}))))));
	};
	var functionWithoutSignature = function (varPointer) {
		return A2(
			$stil4m$elm_syntax$Combine$map,
			A2($stil4m$elm_syntax$Elm$Syntax$Expression$Function, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
			functionImplementationFromVarPointer(varPointer));
	};
	var fromParts = F2(function fromParts$fn(sig, decl) {
			return {
				ii: decl,
				fB: $elm$core$Maybe$Nothing,
				i7: $elm$core$Maybe$Just(sig)
			};
		});
	var functionWithSignature = function (varPointer) {
		return A2(
			$stil4m$elm_syntax$Combine$andThen,
			function (sig) {
				return A2(
					$stil4m$elm_syntax$Combine$map,
					fromParts(sig),
					A2(
						$stil4m$elm_syntax$Combine$andThen,
						functionImplementationFromVarPointer,
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict)))));
			},
			$stil4m$elm_syntax$Elm$Parser$Declarations$functionSignatureFromVarPointer(varPointer));
	};
	return $stil4m$elm_syntax$Combine$choice(
		_List_fromArray(
			[
				functionWithSignature(pointer),
				functionWithoutSignature(pointer)
			]));
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$letDestructuringDeclarationWithPattern = function (p) {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v7) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$string('='),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$succeed(
								$stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring(p))))));
		});
};
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseBlock() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v28) {
			return A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Elm$Parser$Tokens$ofToken,
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
					A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$caseToken)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v26) {
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (_v27) {
					var start = _v27.a;
					return A2(
						$stil4m$elm_syntax$Combine$map,
						function (cb) {
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									A2(
										$elm$core$List$cons,
										start,
										A2(
											$elm$core$List$map,
											A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $stil4m$elm_syntax$Elm$Syntax$Node$range),
											cb.ia))),
								$stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression(cb));
						},
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								$stil4m$elm_syntax$Elm$Parser$Declarations$withIndentedState(
									$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatements()),
								$stil4m$elm_syntax$Elm$Parser$Layout$layout),
							A2(
								$stil4m$elm_syntax$Combine$andMap,
								$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseBlock(),
								$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Expression$CaseBlock))));
				},
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
					$stil4m$elm_syntax$Combine$succeed(0)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v25) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Combine$string('->'),
							$stil4m$elm_syntax$Combine$maybe(
								A2($stil4m$elm_syntax$Combine$or, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict))))),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Elm$Parser$Patterns$pattern,
					$stil4m$elm_syntax$Combine$succeed($elm$core$Tuple$pair)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatements() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v24) {
			var helper = function (last) {
				return $stil4m$elm_syntax$Combine$withState(
					function (s) {
						return $stil4m$elm_syntax$Combine$withLocation(
							function (l) {
								return _Utils_eq(
									$stil4m$elm_syntax$Elm$Parser$State$expectedColumn(s),
									l.bH) ? $stil4m$elm_syntax$Combine$choice(
									_List_fromArray(
										[
											A2(
											$stil4m$elm_syntax$Combine$map,
											function (c) {
												return $stil4m$elm_syntax$Combine$Loop(
													A2($elm$core$List$cons, c, last));
											},
											$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement()),
											$stil4m$elm_syntax$Combine$succeed(
											$stil4m$elm_syntax$Combine$Done(
												$elm$core$List$reverse(last)))
										])) : $stil4m$elm_syntax$Combine$succeed(
									$stil4m$elm_syntax$Combine$Done(
										$elm$core$List$reverse(last)));
							});
					});
			};
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (v) {
					return A2($stil4m$elm_syntax$Combine$loop, v, helper);
				},
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$List$singleton,
					$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement()));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v18) {
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (first) {
					var complete = function (rest) {
						if (!rest.b) {
							return $stil4m$elm_syntax$Combine$succeed(first);
						} else {
							if (rest.a.b.$ === 6) {
								var _v23 = rest.a;
								return $stil4m$elm_syntax$Combine$fail('Expression should not end with an operator');
							} else {
								return $stil4m$elm_syntax$Combine$succeed(
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										$stil4m$elm_syntax$Elm$Syntax$Range$combine(
											A2(
												$elm$core$List$cons,
												$stil4m$elm_syntax$Elm$Syntax$Node$range(first),
												A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, rest))),
										$stil4m$elm_syntax$Elm$Syntax$Expression$Application(
											A2(
												$elm$core$List$cons,
												first,
												$elm$core$List$reverse(rest)))));
							}
						}
					};
					var promoter = function (rest) {
						return A2(
							$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
							function (_v19) {
								return complete(rest);
							},
							function (_v20) {
								return A2(
									$stil4m$elm_syntax$Combine$or,
									A2(
										$stil4m$elm_syntax$Combine$andThen,
										function (next) {
											return promoter(
												A2($elm$core$List$cons, next, rest));
										},
										$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication()),
									complete(rest));
							});
					};
					if (first.b.$ === 6) {
						return $stil4m$elm_syntax$Combine$fail('Expression should not start with an operator');
					} else {
						return promoter(_List_Nil);
					}
				},
				$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication());
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v17) {
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				$stil4m$elm_syntax$Elm$Parser$Declarations$liftRecordAccess,
				$stil4m$elm_syntax$Combine$choice(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Parser$Declarations$numberExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$referenceExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$ifBlockExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$recordAccessFunctionExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$operatorExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$lambdaExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$literalExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$charLiteralExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$recordExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$glslExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$listExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseExpression()
						])));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$ifBlockExpression() {
	return $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
		function (current) {
			return A2(
				$stil4m$elm_syntax$Combine$continueWith,
				$stil4m$elm_syntax$Combine$lazy(
					function (_v16) {
						return A2(
							$stil4m$elm_syntax$Combine$andMap,
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
								A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$elseToken)),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								A2(
									$stil4m$elm_syntax$Combine$andMap,
									$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
									A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Elm$Parser$Tokens$thenToken,
											A2(
												$stil4m$elm_syntax$Combine$ignore,
												$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
												A2(
													$stil4m$elm_syntax$Combine$andMap,
													$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
													A2(
														$stil4m$elm_syntax$Combine$ignore,
														$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
														$stil4m$elm_syntax$Combine$succeed(
															F3(
																function (condition, ifTrue, ifFalse) {
																	return A2(
																		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
																		{
																			c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(ifFalse).c4,
																			dv: current.dv
																		},
																		A3($stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock, condition, ifTrue, ifFalse));
																}))))))))));
					}),
				$stil4m$elm_syntax$Elm$Parser$Tokens$ifToken);
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$lambdaExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v15) {
			return $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
				function (current) {
					return A2(
						$stil4m$elm_syntax$Combine$andMap,
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
								$stil4m$elm_syntax$Combine$string('->'))),
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							A2(
								$stil4m$elm_syntax$Combine$sepBy1,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								$stil4m$elm_syntax$Elm$Parser$Declarations$functionArgument),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$string('\\'),
									$stil4m$elm_syntax$Combine$succeed(
										F2(
											function (args, expr) {
												return A2(
													$stil4m$elm_syntax$Elm$Syntax$Node$Node,
													{
														c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(expr).c4,
														dv: current.dv
													},
													$stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression(
														A2($stil4m$elm_syntax$Elm$Syntax$Expression$Lambda, args, expr)));
											}))))));
				});
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBlock() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v14) {
			return A2(
				$stil4m$elm_syntax$Combine$ignore,
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$string('in'),
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[$stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Whitespace$manySpaces]))),
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Elm$Parser$Declarations$withIndentedState(
						$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBody()),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Layout$layout,
						$stil4m$elm_syntax$Combine$string('let'))));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBody() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v8) {
			var blockElement = A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (_v12) {
					var r = _v12.a;
					var p = _v12.b;
					if (p.$ === 11) {
						var v = p.a;
						return A2(
							$stil4m$elm_syntax$Combine$map,
							$stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction,
							$stil4m$elm_syntax$Elm$Parser$Declarations$functionWithNameNode(
								A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, v)));
					} else {
						return $stil4m$elm_syntax$Elm$Parser$Declarations$letDestructuringDeclarationWithPattern(
							A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, p));
					}
				},
				$stil4m$elm_syntax$Elm$Parser$Patterns$pattern);
			var addRange = function (letDeclaration) {
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					function () {
						if (!letDeclaration.$) {
							var letFunction = letDeclaration.a;
							return $stil4m$elm_syntax$Elm$Syntax$Expression$functionRange(letFunction);
						} else {
							var _v10 = letDeclaration.a;
							var patternRange = _v10.a;
							var _v11 = letDeclaration.b;
							var expressionRange = _v11.a;
							return $stil4m$elm_syntax$Elm$Syntax$Range$combine(
								_List_fromArray(
									[patternRange, expressionRange]));
						}
					}(),
					letDeclaration);
			};
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Combine$many(
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2($stil4m$elm_syntax$Combine$map, addRange, blockElement))),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					A2($stil4m$elm_syntax$Combine$map, addRange, blockElement),
					$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v6) {
			return $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
				function (current) {
					return A2(
						$stil4m$elm_syntax$Combine$andMap,
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
							$stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBlock(),
							$stil4m$elm_syntax$Combine$succeed(
								F2(
									function (decls, expr) {
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{
												c4: $stil4m$elm_syntax$Elm$Syntax$Node$range(expr).c4,
												dv: current.dv
											},
											$stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression(
												A2($stil4m$elm_syntax$Elm$Syntax$Expression$LetBlock, decls, expr)));
									}))));
				});
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$listExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v5) {
			var innerExpressions = A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr,
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Combine$many(
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								$stil4m$elm_syntax$Combine$string(',')))),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
							$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons)))));
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$map,
								$elm$core$Basics$always(
									$stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(_List_Nil)),
								$stil4m$elm_syntax$Combine$string(']')),
								A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$string(']'),
								innerExpressions)
							])),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Combine$string('['))));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$operatorExpression() {
	var negationExpression = $stil4m$elm_syntax$Combine$lazy(
		function (_v4) {
			return A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Expression$Negation,
				A2(
					$stil4m$elm_syntax$Combine$andThen,
					$stil4m$elm_syntax$Elm$Parser$Declarations$liftRecordAccess,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Parser$Declarations$referenceExpression,
								$stil4m$elm_syntax$Elm$Parser$Declarations$numberExpression,
								$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression()
							]))));
		});
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v3) {
			return $stil4m$elm_syntax$Combine$choice(
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Parser$Node$parser(
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Combine$choice(
								_List_fromArray(
									[
										negationExpression,
										A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Elm$Parser$Layout$layout,
										$stil4m$elm_syntax$Combine$succeed(
											$stil4m$elm_syntax$Elm$Syntax$Expression$Operator('-')))
									])),
							$stil4m$elm_syntax$Combine$string('-'))),
						$stil4m$elm_syntax$Elm$Parser$Node$parser(
						A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Expression$Operator, $stil4m$elm_syntax$Elm$Parser$Tokens$infixOperatorToken))
					]));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$recordExpression() {
	return $stil4m$elm_syntax$Elm$Parser$Node$parser(
		$stil4m$elm_syntax$Combine$lazy(
			function (_v2) {
				var recordField = $stil4m$elm_syntax$Elm$Parser$Node$parser(
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$string('='),
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									A2(
										$stil4m$elm_syntax$Combine$andMap,
										$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
										$stil4m$elm_syntax$Combine$succeed($elm$core$Tuple$pair)))))));
				var recordFields = A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Combine$many(
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								recordField,
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									$stil4m$elm_syntax$Combine$string(','))))),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							recordField,
							$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons))));
				var recordUpdateSyntaxParser = function (fname) {
					return A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$string('}'),
						A2(
							$stil4m$elm_syntax$Combine$map,
							function (e) {
								return A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression, fname, e);
							},
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								recordFields,
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									$stil4m$elm_syntax$Combine$string('|')))));
				};
				var recordContents = A2(
					$stil4m$elm_syntax$Combine$andThen,
					function (fname) {
						return $stil4m$elm_syntax$Combine$choice(
							_List_fromArray(
								[
									recordUpdateSyntaxParser(fname),
									A2(
									$stil4m$elm_syntax$Combine$andThen,
									function (fieldUpdate) {
										return $stil4m$elm_syntax$Combine$choice(
											_List_fromArray(
												[
													A2(
													$stil4m$elm_syntax$Combine$map,
													$elm$core$Basics$always(
														$stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(
															_List_fromArray(
																[fieldUpdate]))),
													$stil4m$elm_syntax$Combine$string('}')),
													A2(
													$stil4m$elm_syntax$Combine$ignore,
													$stil4m$elm_syntax$Combine$string('}'),
													A2(
														$stil4m$elm_syntax$Combine$map,
														function (fieldUpdates) {
															return $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(
																A2($elm$core$List$cons, fieldUpdate, fieldUpdates));
														},
														A2(
															$stil4m$elm_syntax$Combine$continueWith,
															recordFields,
															A2(
																$stil4m$elm_syntax$Combine$ignore,
																$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
																$stil4m$elm_syntax$Combine$string(',')))))
												]));
									},
									A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
										A2(
											$stil4m$elm_syntax$Combine$continueWith,
											A2(
												$stil4m$elm_syntax$Combine$map,
												function (e) {
													return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $elm$core$Tuple$pair, fname, e);
												},
												$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression()),
											A2(
												$stil4m$elm_syntax$Combine$ignore,
												$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
												$stil4m$elm_syntax$Combine$string('=')))))
								]));
					},
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName)));
				return A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$map,
								$elm$core$Basics$always(
									$stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(_List_Nil)),
								$stil4m$elm_syntax$Combine$string('}')),
								recordContents
							])),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Combine$string('{')));
			}));
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v0) {
			var commaSep = $stil4m$elm_syntax$Combine$many(
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$string(',')))));
			var closingParen = $stil4m$elm_syntax$Combine$fromCore(
				$elm$parser$Parser$symbol(')'));
			var asExpression = F2(function asExpression$fn(x, xs) {
					if (!xs.b) {
						return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(x);
					} else {
						return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(
							A2($elm$core$List$cons, x, xs));
					}
				});
			var nested = A2(
				$stil4m$elm_syntax$Combine$andMap,
				commaSep,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$succeed(asExpression)))));
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$map,
								$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr),
								closingParen),
								$stil4m$elm_syntax$Combine$backtrackable(
								A2(
									$stil4m$elm_syntax$Combine$map,
									$stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator,
									A2($stil4m$elm_syntax$Combine$ignore, closingParen, $stil4m$elm_syntax$Elm$Parser$Tokens$prefixOperatorToken))),
								A2($stil4m$elm_syntax$Combine$ignore, closingParen, nested)
							])),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('('))));
		});
}
var $stil4m$elm_syntax$Elm$Parser$Declarations$caseBlock = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseBlock();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseBlock = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$caseBlock;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$caseExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseExpression();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$caseExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$caseStatement = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$caseStatement;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$caseStatements = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatements();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatements = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$caseStatements;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$expression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$expression;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$expressionNotApplication = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$expressionNotApplication;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$ifBlockExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$ifBlockExpression();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$ifBlockExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$ifBlockExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$lambdaExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$lambdaExpression();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$lambdaExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$lambdaExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$letBlock = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBlock();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBlock = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$letBlock;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$letBody = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBody();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBody = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$letBody;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$letExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letExpression();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$letExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$listExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$listExpression();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$listExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$listExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$operatorExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$operatorExpression();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$operatorExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$operatorExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$recordExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$recordExpression();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$recordExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$recordExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$tupledExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression();
$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Declarations$tupledExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$destructuringDeclaration = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Elm$Parser$Declarations$expression,
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Elm$Parser$Layout$layout,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$string('='),
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$Patterns$pattern,
						$stil4m$elm_syntax$Combine$succeed(
							F2(
								function (x, y) {
									return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Declaration$Destructuring, x, y);
								}))))));
	});
var $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$function = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return A2(
			$stil4m$elm_syntax$Combine$map,
			function (f) {
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					$stil4m$elm_syntax$Elm$Syntax$Expression$functionRange(f),
					$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(f));
			},
			A2(
				$stil4m$elm_syntax$Combine$andThen,
				$stil4m$elm_syntax$Elm$Parser$Declarations$functionWithNameNode,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName))));
	});
var $stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration = function (a) {
	return {$: 4, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Infix = F4(function $stil4m$elm_syntax$Elm$Syntax$Infix$Infix$fn(direction, precedence, operator, _function) {
		return {ij: direction, ix: _function, iV: operator, iZ: precedence};
	});
var $stil4m$elm_syntax$Elm$Parser$Infix$infixDirection = $stil4m$elm_syntax$Combine$choice(
	_List_fromArray(
		[
			A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string('right'),
			$stil4m$elm_syntax$Combine$succeed(1)),
			A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string('left'),
			$stil4m$elm_syntax$Combine$succeed(0)),
			A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string('non'),
			$stil4m$elm_syntax$Combine$succeed(2))
		]));
var $elm$parser$Parser$Advanced$int = F2(function $elm$parser$Parser$Advanced$int$fn(expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				gu: $elm$core$Result$Err(invalid),
				gP: expecting,
				gX: $elm$core$Result$Err(invalid),
				g1: $elm$core$Result$Err(invalid),
				g7: $elm$core$Result$Ok($elm$core$Basics$identity),
				iD: invalid,
				hp: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$int = A2($elm$parser$Parser$Advanced$int, $elm$parser$Parser$ExpectingInt, $elm$parser$Parser$ExpectingInt);
var $stil4m$elm_syntax$Combine$Num$int = $stil4m$elm_syntax$Combine$fromCore($elm$parser$Parser$int);
var $stil4m$elm_syntax$Elm$Parser$Infix$infixDefinition = A2(
	$stil4m$elm_syntax$Combine$andMap,
	$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Elm$Parser$Layout$layout,
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string('='),
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Elm$Parser$Layout$layout,
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Elm$Parser$Node$parser(
						$stil4m$elm_syntax$Combine$parens($stil4m$elm_syntax$Elm$Parser$Tokens$prefixOperatorToken)),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Elm$Parser$Layout$layout,
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Combine$Num$int),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Elm$Parser$Layout$layout,
								A2(
									$stil4m$elm_syntax$Combine$andMap,
									$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Infix$infixDirection),
									A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Elm$Parser$Layout$layout,
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Combine$fromCore(
												$elm$parser$Parser$keyword('infix')),
											$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Infix$Infix))))))))))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration = $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
	function (current) {
		return A2(
			$stil4m$elm_syntax$Combine$map,
			function (inf) {
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					$stil4m$elm_syntax$Elm$Syntax$Range$combine(
						_List_fromArray(
							[
								current,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(inf.ix)
							])),
					$stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration(inf));
			},
			$stil4m$elm_syntax$Elm$Parser$Infix$infixDefinition);
	});
var $stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration = function (a) {
	return {$: 3, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$portToken = $stil4m$elm_syntax$Combine$string('port');
var $stil4m$elm_syntax$Elm$Parser$Declarations$signature = A2(
	$stil4m$elm_syntax$Combine$andMap,
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
		A2(
			$stil4m$elm_syntax$Combine$continueWith,
			$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
				$stil4m$elm_syntax$Combine$string(':')))),
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
		$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Signature$Signature)));
var $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclaration = $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
	function (current) {
		return A2(
			$stil4m$elm_syntax$Combine$map,
			function (sig) {
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					$stil4m$elm_syntax$Elm$Syntax$Range$combine(
						_List_fromArray(
							[
								current,
								function (_v0) {
								var r = _v0.a;
								return r;
							}(sig.hV)
							])),
					$stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration(sig));
			},
			A2(
				$stil4m$elm_syntax$Combine$continueWith,
				$stil4m$elm_syntax$Elm$Parser$Declarations$signature,
				A2($stil4m$elm_syntax$Combine$ignore, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$portToken)));
	});
var $stil4m$elm_syntax$Elm$Parser$Typings$DefinedAlias = F2(function $stil4m$elm_syntax$Elm$Parser$Typings$DefinedAlias$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Parser$Typings$DefinedType = F2(function $stil4m$elm_syntax$Elm$Parser$Typings$DefinedType$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Type$Type = F4(function $stil4m$elm_syntax$Elm$Syntax$Type$Type$fn(documentation, name, generics, constructors) {
		return {ig: constructors, fB: documentation, gZ: generics, cH: name};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAlias$TypeAlias = F4(function $stil4m$elm_syntax$Elm$Syntax$TypeAlias$TypeAlias$fn(documentation, name, generics, typeAnnotation) {
		return {fB: documentation, gZ: generics, cH: name, hV: typeAnnotation};
	});
var $stil4m$elm_syntax$Elm$Parser$Typings$genericList = $stil4m$elm_syntax$Combine$many(
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName)));
var $stil4m$elm_syntax$Elm$Parser$Typings$typePrefix = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Layout$layout,
	$stil4m$elm_syntax$Combine$string('type'));
var $stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor = F2(function $stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor$fn(name, _arguments) {
		return {gs: _arguments, cH: name};
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNonGreedy = $stil4m$elm_syntax$Combine$choice(
	_List_fromArray(
		[
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation,
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotation(1),
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation,
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation
		]));
var $stil4m$elm_syntax$Elm$Parser$Typings$valueConstructor = A2(
	$stil4m$elm_syntax$Combine$andThen,
	function (tnn) {
		var range = tnn.a;
		var complete = function (args) {
			return $stil4m$elm_syntax$Combine$succeed(
				A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					$stil4m$elm_syntax$Elm$Syntax$Range$combine(
						A2(
							$elm$core$List$cons,
							range,
							A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, args))),
					A2($stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor, tnn, args)));
		};
		var argHelper = function (xs) {
			return A2(
				$stil4m$elm_syntax$Combine$continueWith,
				$stil4m$elm_syntax$Combine$choice(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Combine$andThen,
							function (ta) {
								return A2(
									$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
									function (_v0) {
										return $stil4m$elm_syntax$Combine$succeed(
											$elm$core$List$reverse(
												A2($elm$core$List$cons, ta, xs)));
									},
									function (_v1) {
										return argHelper(
											A2($elm$core$List$cons, ta, xs));
									});
							},
							$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNonGreedy),
							$stil4m$elm_syntax$Combine$succeed(
							$elm$core$List$reverse(xs))
						])),
				$stil4m$elm_syntax$Combine$succeed(0));
		};
		return A2(
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
			function (_v2) {
				return complete(_List_Nil);
			},
			function (_v3) {
				return A2(
					$stil4m$elm_syntax$Combine$andThen,
					complete,
					argHelper(_List_Nil));
			});
	},
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor)));
var $stil4m$elm_syntax$Elm$Parser$Typings$valueConstructors = A2(
	$stil4m$elm_syntax$Combine$sepBy1,
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
		$stil4m$elm_syntax$Combine$string('|')),
	$stil4m$elm_syntax$Elm$Parser$Typings$valueConstructor);
var $stil4m$elm_syntax$Elm$Parser$Typings$typeDefinition = $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
	function (start) {
		return A2(
			$stil4m$elm_syntax$Combine$continueWith,
			$stil4m$elm_syntax$Combine$choice(
				_List_fromArray(
					[
						A2(
						$stil4m$elm_syntax$Combine$map,
						function (typeAlias) {
							return A2(
								$stil4m$elm_syntax$Elm$Parser$Typings$DefinedAlias,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									_List_fromArray(
										[
											start,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(typeAlias.hV)
										])),
								typeAlias);
						},
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$string('='),
									A2(
										$stil4m$elm_syntax$Combine$andMap,
										$stil4m$elm_syntax$Elm$Parser$Typings$genericList,
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
											A2(
												$stil4m$elm_syntax$Combine$andMap,
												A2(
													$stil4m$elm_syntax$Combine$ignore,
													$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
													$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName)),
												A2(
													$stil4m$elm_syntax$Combine$ignore,
													A2(
														$stil4m$elm_syntax$Combine$continueWith,
														$stil4m$elm_syntax$Elm$Parser$Layout$layout,
														$stil4m$elm_syntax$Combine$string('alias')),
													$stil4m$elm_syntax$Combine$succeed(
														$stil4m$elm_syntax$Elm$Syntax$TypeAlias$TypeAlias($elm$core$Maybe$Nothing)))))))))),
						A2(
						$stil4m$elm_syntax$Combine$map,
						function (tipe) {
							return A2(
								$stil4m$elm_syntax$Elm$Parser$Typings$DefinedType,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									A2(
										$elm$core$List$cons,
										start,
										A2(
											$elm$core$List$map,
											function (_v0) {
												var r = _v0.a;
												return r;
											},
											tipe.ig))),
								tipe);
						},
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Typings$valueConstructors,
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									$stil4m$elm_syntax$Combine$string('=')),
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									A2(
										$stil4m$elm_syntax$Combine$andMap,
										$stil4m$elm_syntax$Elm$Parser$Typings$genericList,
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
											A2(
												$stil4m$elm_syntax$Combine$andMap,
												$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
												$stil4m$elm_syntax$Combine$succeed(
													$stil4m$elm_syntax$Elm$Syntax$Type$Type($elm$core$Maybe$Nothing)))))))))
					])),
			$stil4m$elm_syntax$Elm$Parser$Typings$typePrefix);
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$declaration = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					$stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration,
					$stil4m$elm_syntax$Elm$Parser$Declarations$function,
					A2(
					$stil4m$elm_syntax$Combine$map,
					function (v) {
						if (!v.$) {
							var r = v.a;
							var t = v.b;
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								r,
								$stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(t));
						} else {
							var r = v.a;
							var a = v.b;
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								r,
								$stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(a));
						}
					},
					$stil4m$elm_syntax$Elm$Parser$Typings$typeDefinition),
					$stil4m$elm_syntax$Elm$Parser$Declarations$portDeclaration,
					$stil4m$elm_syntax$Elm$Parser$Declarations$destructuringDeclaration
				]));
	});
var $stil4m$elm_syntax$Elm$Parser$File$fileDeclarations = $stil4m$elm_syntax$Combine$many(
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict),
		$stil4m$elm_syntax$Elm$Parser$Declarations$declaration));
var $stil4m$elm_syntax$Elm$Syntax$Import$Import = F3(function $stil4m$elm_syntax$Elm$Syntax$Import$Import$fn(moduleName, moduleAlias, exposingList) {
		return {fE: exposingList, iI: moduleAlias, eY: moduleName};
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$asToken = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$keyword('as'));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expose$functionExpose = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose, $stil4m$elm_syntax$Elm$Parser$Tokens$functionName));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Combine$while = function (pred) {
	return function (state) {
		return A2(
			$elm$parser$Parser$map,
			function (x) {
				return _Utils_Tuple2(state, x);
			},
			$elm$parser$Parser$getChompedString(
				$elm$parser$Parser$chompWhile(pred)));
	};
};
var $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Node$parser(
			A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose,
				$stil4m$elm_syntax$Combine$parens(
					$stil4m$elm_syntax$Combine$while(
						$elm$core$Basics$neq(')')))));
	});
var $stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType = F2(function $stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType$fn(name, open) {
		return {cH: name, iU: open};
	});
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose = function (a) {
	return {$: 3, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose = function (a) {
	return {$: 2, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expose$typeExpose = A2(
	$stil4m$elm_syntax$Combine$andThen,
	function (tipe) {
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$map,
					function (openRange) {
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$combine(
								_List_fromArray(
									[
										$stil4m$elm_syntax$Elm$Syntax$Node$range(tipe),
										openRange
									])),
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(tipe),
									$elm$core$Maybe$Just(openRange))));
					},
					A2(
						$stil4m$elm_syntax$Combine$map,
						$stil4m$elm_syntax$Elm$Syntax$Node$range,
						$stil4m$elm_syntax$Elm$Parser$Node$parser(
							$stil4m$elm_syntax$Combine$parens(
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
									$stil4m$elm_syntax$Combine$string('..')))))),
					$stil4m$elm_syntax$Combine$succeed(
					A2($stil4m$elm_syntax$Elm$Syntax$Node$map, $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose, tipe))
				]));
	},
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName)));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposable = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[$stil4m$elm_syntax$Elm$Parser$Expose$typeExpose, $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose, $stil4m$elm_syntax$Elm$Parser$Expose$functionExpose]));
	});
var $stil4m$elm_syntax$Elm$Parser$Ranges$withRange = function (p) {
	return $stil4m$elm_syntax$Combine$withLocation(
		function (start) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Combine$withLocation(
					function (end) {
						return $stil4m$elm_syntax$Combine$succeed(
							{
								c4: $stil4m$elm_syntax$Elm$Parser$Ranges$asPointerLocation(end),
								dv: $stil4m$elm_syntax$Elm$Parser$Ranges$asPointerLocation(start)
							});
					}),
				p);
		});
};
var $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner = A2(
	$stil4m$elm_syntax$Combine$or,
	$stil4m$elm_syntax$Elm$Parser$Ranges$withRange(
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
				$stil4m$elm_syntax$Combine$string('..')),
			$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Exposing$All))),
	A2(
		$stil4m$elm_syntax$Combine$map,
		$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit,
		A2(
			$stil4m$elm_syntax$Combine$sepBy,
			$stil4m$elm_syntax$Combine$Char$char(','),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Expose$exposable))));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposeListWith = $stil4m$elm_syntax$Combine$parens(
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout)));
var $stil4m$elm_syntax$Elm$Parser$Tokens$exposingToken = $stil4m$elm_syntax$Combine$string('exposing');
var $stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Expose$exposeListWith,
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
		$stil4m$elm_syntax$Elm$Parser$Tokens$exposingToken));
var $stil4m$elm_syntax$Elm$Parser$Tokens$importToken = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$keyword('import'));
var $stil4m$elm_syntax$Elm$Parser$Base$moduleName = A2(
	$stil4m$elm_syntax$Combine$sepBy1,
	$stil4m$elm_syntax$Combine$string('.'),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName);
var $stil4m$elm_syntax$Elm$Parser$Imports$setupNode = F2(function $stil4m$elm_syntax$Elm$Parser$Imports$setupNode$fn(start, imp) {
		var allRanges = _List_fromArray(
			[
				$elm$core$Maybe$Just(start),
				$elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$range(imp.eY)),
				A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, imp.fE),
				A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, imp.iI)
			]);
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$combine(
				A2($elm$core$List$filterMap, $elm$core$Basics$identity, allRanges)),
			imp);
	});
var $stil4m$elm_syntax$Elm$Parser$Imports$importDefinition = function () {
	var parseExposingDefinition = F2(function parseExposingDefinition$fn(mod, asDef) {
			return $stil4m$elm_syntax$Combine$choice(
				_List_fromArray(
					[
						A2(
						$stil4m$elm_syntax$Combine$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$Just,
							A2($stil4m$elm_syntax$Elm$Syntax$Import$Import, mod, asDef)),
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition)),
						$stil4m$elm_syntax$Combine$succeed(
						A3($stil4m$elm_syntax$Elm$Syntax$Import$Import, mod, asDef, $elm$core$Maybe$Nothing))
					]));
		});
	var importAndModuleName = A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
		A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$importToken));
	var asDefinition = A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
		A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$asToken));
	var parseAsDefinition = function (mod) {
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$andThen,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$Just,
						parseExposingDefinition(mod)),
					A2($stil4m$elm_syntax$Combine$ignore, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, asDefinition)),
					A2(parseExposingDefinition, mod, $elm$core$Maybe$Nothing)
				]));
	};
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		function (_v0) {
			var start = _v0.a;
			return A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Parser$Imports$setupNode(start),
				A2(
					$stil4m$elm_syntax$Combine$andThen,
					parseAsDefinition,
					A2($stil4m$elm_syntax$Combine$ignore, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, importAndModuleName)));
		},
		$stil4m$elm_syntax$Elm$Parser$Node$parser(
			$stil4m$elm_syntax$Combine$succeed(0)));
}();
var $stil4m$elm_syntax$Elm$Syntax$Module$EffectModule = function (a) {
	return {$: 2, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause = A2(
	$stil4m$elm_syntax$Combine$andMap,
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
			$stil4m$elm_syntax$Combine$string('='))),
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionName,
		$stil4m$elm_syntax$Combine$succeed($elm$core$Tuple$pair)));
var $stil4m$elm_syntax$Elm$Parser$Modules$whereBlock = A2(
	$stil4m$elm_syntax$Combine$map,
	function (pairs) {
		return {
			id: A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$second,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$first,
							$elm$core$Basics$eq('command')),
						pairs))),
			je: A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$second,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$first,
							$elm$core$Basics$eq('subscription')),
						pairs)))
		};
	},
	A3(
		$stil4m$elm_syntax$Combine$between,
		$stil4m$elm_syntax$Combine$string('{'),
		$stil4m$elm_syntax$Combine$string('}'),
		A2(
			$stil4m$elm_syntax$Combine$sepBy1,
			$stil4m$elm_syntax$Combine$string(','),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause))));
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Modules$whereBlock,
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Layout$layout,
		$stil4m$elm_syntax$Combine$string('where')));
var $stil4m$elm_syntax$Elm$Parser$Tokens$moduleToken = $stil4m$elm_syntax$Combine$string('module');
var $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition = function () {
	var createEffectModule = F3(function createEffectModule$fn(name, whereClauses, exp) {
			return $stil4m$elm_syntax$Elm$Syntax$Module$EffectModule(
				{id: whereClauses.id, fE: exp, eY: name, je: whereClauses.je});
		});
	return A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition),
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Elm$Parser$Layout$layout,
			A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Elm$Parser$Layout$layout,
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Elm$Parser$Layout$layout,
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Elm$Parser$Tokens$moduleToken,
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Elm$Parser$Layout$layout,
									A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Combine$string('effect'),
										$stil4m$elm_syntax$Combine$succeed(createEffectModule))))))))));
}();
var $stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData = F2(function $stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData$fn(moduleName, exposingList) {
		return {fE: exposingList, eY: moduleName};
	});
var $stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition = A2(
	$stil4m$elm_syntax$Combine$map,
	$stil4m$elm_syntax$Elm$Syntax$Module$NormalModule,
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition),
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Elm$Parser$Layout$layout,
			A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Elm$Parser$Layout$layout,
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Elm$Parser$Tokens$moduleToken,
						$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData)))))));
var $stil4m$elm_syntax$Elm$Syntax$Module$PortModule = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition = A2(
	$stil4m$elm_syntax$Combine$map,
	$stil4m$elm_syntax$Elm$Syntax$Module$PortModule,
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition),
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Elm$Parser$Layout$layout,
			A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Elm$Parser$Layout$layout,
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Elm$Parser$Tokens$moduleToken,
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Elm$Parser$Layout$layout,
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Elm$Parser$Tokens$portToken,
								$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData)))))))));
var $stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition = $stil4m$elm_syntax$Combine$choice(
	_List_fromArray(
		[$stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition]));
var $stil4m$elm_syntax$Elm$Parser$File$file = A2(
	$stil4m$elm_syntax$Combine$ignore,
	$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$File$collectComments,
		A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Elm$Parser$File$fileDeclarations,
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Combine$many(
						A2($stil4m$elm_syntax$Combine$ignore, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$Elm$Parser$Imports$importDefinition)),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict),
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict),
								$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$File$File)))))))));
var $stil4m$elm_syntax$Elm$Internal$RawFile$Raw = $elm$core$Basics$identity;
var $stil4m$elm_syntax$Elm$Internal$RawFile$fromFile = $elm$core$Basics$identity;
var $stil4m$elm_syntax$Combine$runParser = F3(function $stil4m$elm_syntax$Combine$runParser$fn(_v0, st, s) {
		var p = _v0;
		return A2(
			$elm$parser$Parser$run,
			p(st),
			s);
	});
var $elm$parser$Parser$ExpectingEnd = {$: 10};
var $elm$parser$Parser$Advanced$end = function (x) {
	return function (s) {
		return _Utils_eq(
			$elm$core$String$length(s.f),
			s.h) ? A3($elm$parser$Parser$Advanced$Good, false, 0, s) : A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $stil4m$elm_syntax$Combine$end = function (state) {
	return A2(
		$elm$parser$Parser$map,
		function (x) {
			return _Utils_Tuple2(state, x);
		},
		$elm$parser$Parser$end);
};
var $stil4m$elm_syntax$Elm$Parser$withEnd = function (p) {
	return A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$withLocation(
			function (_v0) {
				return $stil4m$elm_syntax$Combine$end;
			}),
		p);
};
var $stil4m$elm_syntax$Elm$Parser$parse = function (input) {
	var _v0 = A3(
		$stil4m$elm_syntax$Combine$runParser,
		$stil4m$elm_syntax$Elm$Parser$withEnd($stil4m$elm_syntax$Elm$Parser$File$file),
		$stil4m$elm_syntax$Elm$Parser$State$emptyState,
		input + '\n');
	if (!_v0.$) {
		var _v1 = _v0.a;
		var r = _v1.b;
		return $elm$core$Result$Ok(
			$stil4m$elm_syntax$Elm$Internal$RawFile$fromFile(r));
	} else {
		var s = _v0.a;
		return $elm$core$Result$Err(s);
	}
};
var $stil4m$elm_syntax$Elm$Processing$findDocumentationForRange = F3(function $stil4m$elm_syntax$Elm$Processing$findDocumentationForRange$fn(range, comments, previousComments) {
		findDocumentationForRange:
		while (true) {
			if (!comments.b) {
				return _Utils_Tuple3(previousComments, $elm$core$Maybe$Nothing, _List_Nil);
			} else {
				var comment = comments.a;
				var commentRange = comment.a;
				var commentText = comment.b;
				var restOfComments = comments.b;
				var _v1 = A2($elm$core$Basics$compare, commentRange.c4.b1 + 1, range.dv.b1);
				switch (_v1) {
					case 1:
						return A2($elm$core$String$startsWith, '{-|', commentText) ? _Utils_Tuple3(
							previousComments,
							$elm$core$Maybe$Just(comment),
							restOfComments) : _Utils_Tuple3(
							previousComments,
							$elm$core$Maybe$Nothing,
							A2($elm$core$List$cons, comment, restOfComments));
					case 0:
						var $temp$range = range,
							$temp$comments = restOfComments,
							$temp$previousComments = A2($elm$core$List$cons, comment, previousComments);
						range = $temp$range;
						comments = $temp$comments;
						previousComments = $temp$previousComments;
						continue findDocumentationForRange;
					default:
						return _Utils_Tuple3(
							previousComments,
							$elm$core$Maybe$Nothing,
							A2($elm$core$List$cons, comment, restOfComments));
				}
			}
		}
	});
var $stil4m$elm_syntax$Elm$Processing$addDocumentation = F3(function $stil4m$elm_syntax$Elm$Processing$addDocumentation$fn(howToUpdate, declaration, file) {
		var _v0 = A3(
			$stil4m$elm_syntax$Elm$Processing$findDocumentationForRange,
			$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration),
			file.aL,
			_List_Nil);
		var previous = _v0.a;
		var maybeDoc = _v0.b;
		var remaining = _v0.c;
		if (!maybeDoc.$) {
			var doc = maybeDoc.a;
			return {
				gD: A2(
					$elm$core$List$cons,
					A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						$stil4m$elm_syntax$Elm$Syntax$Range$combine(
							_List_fromArray(
								[
									$stil4m$elm_syntax$Elm$Syntax$Node$range(doc),
									$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration)
								])),
						howToUpdate(doc)),
					file.gD),
				aC: A2($elm$core$List$cons, previous, file.aC),
				aL: remaining
			};
		} else {
			return {
				gD: A2($elm$core$List$cons, declaration, file.gD),
				aC: A2($elm$core$List$cons, previous, file.aC),
				aL: remaining
			};
		}
	});
var $stil4m$elm_syntax$Elm$Processing$expressionOperators = function (_v0) {
	var expression = _v0.b;
	if (expression.$ === 6) {
		var s = expression.a;
		return $elm$core$Maybe$Just(s);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$list_extra$List$Extra$dropWhile = F2(function $elm_community$list_extra$List$Extra$dropWhile$fn(predicate, list) {
		dropWhile:
		while (true) {
			if (!list.b) {
				return _List_Nil;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					var $temp$predicate = predicate,
						$temp$list = xs;
					predicate = $temp$predicate;
					list = $temp$list;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(function takeWhileMemo$fn(memo, list) {
			takeWhileMemo:
			while (true) {
				if (!list.b) {
					return $elm$core$List$reverse(memo);
				} else {
					var x = list.a;
					var xs = list.b;
					if (predicate(x)) {
						var $temp$memo = A2($elm$core$List$cons, x, memo),
							$temp$list = xs;
						memo = $temp$memo;
						list = $temp$list;
						continue takeWhileMemo;
					} else {
						return $elm$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(_List_Nil);
};
var $stil4m$elm_syntax$Elm$Processing$findNextSplit = F2(function $stil4m$elm_syntax$Elm$Processing$findNextSplit$fn(dict, exps) {
		var assocDirection = A2(
			$elm$core$Maybe$withDefault,
			1,
			A2(
				$elm$core$Maybe$map,
				$stil4m$elm_syntax$Elm$Syntax$Node$value,
				$elm$core$List$head(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$second,
							function ($) {
								return $.ij;
							}),
						$elm$core$Dict$toList(dict)))));
		var prefix = function () {
			if (!assocDirection) {
				return $elm$core$List$reverse(
					A2(
						$elm$core$List$drop,
						1,
						A2(
							$elm_community$list_extra$List$Extra$dropWhile,
							function (x) {
								return _Utils_eq(
									$elm$core$Maybe$Nothing,
									A2(
										$elm$core$Maybe$andThen,
										function (key) {
											return A2($elm$core$Dict$get, key, dict);
										},
										$stil4m$elm_syntax$Elm$Processing$expressionOperators(x)));
							},
							$elm$core$List$reverse(exps))));
			} else {
				return A2(
					$elm_community$list_extra$List$Extra$takeWhile,
					function (x) {
						return _Utils_eq(
							$elm$core$Maybe$Nothing,
							A2(
								$elm$core$Maybe$andThen,
								function (key) {
									return A2($elm$core$Dict$get, key, dict);
								},
								$stil4m$elm_syntax$Elm$Processing$expressionOperators(x)));
					},
					exps);
			}
		}();
		var suffix = A2(
			$elm$core$List$drop,
			$elm$core$List$length(prefix) + 1,
			exps);
		return A2(
			$elm$core$Maybe$map,
			function (x) {
				return _Utils_Tuple3(prefix, x, suffix);
			},
			A2(
				$elm$core$Maybe$andThen,
				function (x) {
					return A2($elm$core$Dict$get, x, dict);
				},
				A2(
					$elm$core$Maybe$andThen,
					$stil4m$elm_syntax$Elm$Processing$expressionOperators,
					$elm$core$List$head(
						A2(
							$elm$core$List$drop,
							$elm$core$List$length(prefix),
							exps)))));
	});
var $elm$core$Basics$min = F2(function $elm$core$Basics$min$fn(x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $stil4m$elm_syntax$Elm$Processing$lowestPrecedence = function (input) {
	return $elm$core$Dict$fromList(
		A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				function (m) {
					return A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$second,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.iZ;
								},
								A2(
									$elm$core$Basics$composeR,
									$stil4m$elm_syntax$Elm$Syntax$Node$value,
									$elm$core$Basics$eq(m)))),
						input);
				},
				$elm$core$List$minimum(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$second,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.iZ;
								},
								$stil4m$elm_syntax$Elm$Syntax$Node$value)),
						input)))));
};
var $stil4m$elm_syntax$Elm$Processing$fixApplication = F2(function $stil4m$elm_syntax$Elm$Processing$fixApplication$fn(operators, expressions) {
		var ops = $stil4m$elm_syntax$Elm$Processing$lowestPrecedence(
			A2(
				$elm$core$List$map,
				function (x) {
					return _Utils_Tuple2(
						x,
						A2(
							$elm$core$Maybe$withDefault,
							{
								ij: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0),
								ix: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'todo'),
								iV: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, x),
								iZ: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 5)
							},
							A2($elm$core$Dict$get, x, operators)));
				},
				A2($elm$core$List$filterMap, $stil4m$elm_syntax$Elm$Processing$expressionOperators, expressions)));
		var fixExprs = function (exps) {
			if (exps.b && (!exps.b.b)) {
				var _v2 = exps.a;
				var x = _v2.b;
				return x;
			} else {
				return $stil4m$elm_syntax$Elm$Syntax$Expression$Application(exps);
			}
		};
		var divideAndConquer = function (exps) {
			return $elm$core$Dict$isEmpty(ops) ? fixExprs(exps) : A2(
				$elm$core$Maybe$withDefault,
				fixExprs(exps),
				A2(
					$elm$core$Maybe$map,
					function (_v0) {
						var p = _v0.a;
						var infix_ = _v0.b;
						var s = _v0.c;
						return A4(
							$stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(infix_.iV),
							$stil4m$elm_syntax$Elm$Syntax$Node$value(infix_.ij),
							A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, p)),
								divideAndConquer(p)),
							A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, s)),
								divideAndConquer(s)));
					},
					A2($stil4m$elm_syntax$Elm$Processing$findNextSplit, ops, exps)));
		};
		return divideAndConquer(expressions);
	});
var $stil4m$elm_syntax$Elm$Processing$visitExpression = F2(function $stil4m$elm_syntax$Elm$Processing$visitExpression$fn(table, expression) {
		return A2(
			$stil4m$elm_syntax$Elm$Processing$visitExpressionInner,
			table,
			function () {
				if (expression.b.$ === 1) {
					var r = expression.a;
					var args = expression.b.a;
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						r,
						A2($stil4m$elm_syntax$Elm$Processing$fixApplication, table, args));
				} else {
					return expression;
				}
			}());
	});
var $stil4m$elm_syntax$Elm$Processing$visitExpressionInner = F2(function $stil4m$elm_syntax$Elm$Processing$visitExpressionInner$fn(table, _v2) {
		var range = _v2.a;
		var expression = _v2.b;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			range,
			function () {
				switch (expression.$) {
					case 1:
						var expressionList = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$Application(
							A2(
								$elm$core$List$map,
								$stil4m$elm_syntax$Elm$Processing$visitExpression(table),
								expressionList));
					case 2:
						var op = expression.a;
						var dir = expression.b;
						var left = expression.c;
						var right = expression.d;
						return A4(
							$stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication,
							op,
							dir,
							A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, left),
							A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, right));
					case 4:
						var e1 = expression.a;
						var e2 = expression.b;
						var e3 = expression.c;
						return A3(
							$stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock,
							A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, e1),
							A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, e2),
							A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, e3));
					case 13:
						var expressionList = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(
							A2(
								$elm$core$List$map,
								$stil4m$elm_syntax$Elm$Processing$visitExpression(table),
								expressionList));
					case 14:
						var expr1 = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(
							A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, expr1));
					case 15:
						var letBlock = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression(
							{
								gD: A2($stil4m$elm_syntax$Elm$Processing$visitLetDeclarations, table, letBlock.gD),
								eC: A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, letBlock.eC)
							});
					case 16:
						var caseBlock = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression(
							{
								ia: A2(
									$elm$core$List$map,
									$elm$core$Tuple$mapSecond(
										$stil4m$elm_syntax$Elm$Processing$visitExpression(table)),
									caseBlock.ia),
								eC: A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, caseBlock.eC)
							});
					case 17:
						var lambda = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression(
							_Utils_update(
								lambda,
								{
									eC: A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, lambda.eC)
								}));
					case 18:
						var expressionStringList = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(
							A2(
								$elm$core$List$map,
								$stil4m$elm_syntax$Elm$Syntax$Node$map(
									$elm$core$Tuple$mapSecond(
										$stil4m$elm_syntax$Elm$Processing$visitExpression(table))),
								expressionStringList));
					case 19:
						var expressionList = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(
							A2(
								$elm$core$List$map,
								$stil4m$elm_syntax$Elm$Processing$visitExpression(table),
								expressionList));
					case 22:
						var name = expression.a;
						var updates = expression.b;
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression,
							name,
							A2(
								$elm$core$List$map,
								$stil4m$elm_syntax$Elm$Syntax$Node$map(
									$elm$core$Tuple$mapSecond(
										$stil4m$elm_syntax$Elm$Processing$visitExpression(table))),
								updates));
					case 10:
						var expr = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$Negation(
							A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, expr));
					case 20:
						var expr = expression.a;
						var name = expression.b;
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess,
							A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, expr),
							name);
					default:
						return expression;
				}
			}());
	});
var $stil4m$elm_syntax$Elm$Processing$visitFunctionDecl = F2(function $stil4m$elm_syntax$Elm$Processing$visitFunctionDecl$fn(table, _function) {
		var newFunctionDeclaration = A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$map,
			$stil4m$elm_syntax$Elm$Processing$visitFunctionDeclaration(table),
			_function.ii);
		return _Utils_update(
			_function,
			{ii: newFunctionDeclaration});
	});
var $stil4m$elm_syntax$Elm$Processing$visitFunctionDeclaration = F2(function $stil4m$elm_syntax$Elm$Processing$visitFunctionDeclaration$fn(table, functionDeclaration) {
		var newExpression = A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, functionDeclaration.eC);
		return _Utils_update(
			functionDeclaration,
			{eC: newExpression});
	});
var $stil4m$elm_syntax$Elm$Processing$visitLetDeclaration = F2(function $stil4m$elm_syntax$Elm$Processing$visitLetDeclaration$fn(table, _v0) {
		var range = _v0.a;
		var declaration = _v0.b;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			range,
			function () {
				if (!declaration.$) {
					var _function = declaration.a;
					return $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction(
						A2($stil4m$elm_syntax$Elm$Processing$visitFunctionDecl, table, _function));
				} else {
					var pattern = declaration.a;
					var expression = declaration.b;
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring,
						pattern,
						A2($stil4m$elm_syntax$Elm$Processing$visitExpression, table, expression));
				}
			}());
	});
var $stil4m$elm_syntax$Elm$Processing$visitLetDeclarations = F2(function $stil4m$elm_syntax$Elm$Processing$visitLetDeclarations$fn(table, declarations) {
		return A2(
			$elm$core$List$map,
			$stil4m$elm_syntax$Elm$Processing$visitLetDeclaration(table),
			declarations);
	});
var $stil4m$elm_syntax$Elm$Processing$attachDocumentationAndFixOperators = F3(function $stil4m$elm_syntax$Elm$Processing$attachDocumentationAndFixOperators$fn(table, declaration, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
		switch (_v0.$) {
			case 0:
				var functionBeforeOperatorFix = _v0.a;
				var _function = A2($stil4m$elm_syntax$Elm$Processing$visitFunctionDecl, table, functionBeforeOperatorFix);
				return A3(
					$stil4m$elm_syntax$Elm$Processing$addDocumentation,
					function (doc) {
						return $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
							_Utils_update(
								_function,
								{
									fB: $elm$core$Maybe$Just(doc)
								}));
					},
					A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration),
						$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(_function)),
					context);
			case 1:
				var typeAlias = _v0.a;
				return A3(
					$stil4m$elm_syntax$Elm$Processing$addDocumentation,
					function (doc) {
						return $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(
							_Utils_update(
								typeAlias,
								{
									fB: $elm$core$Maybe$Just(doc)
								}));
					},
					declaration,
					context);
			case 2:
				var typeDecl = _v0.a;
				return A3(
					$stil4m$elm_syntax$Elm$Processing$addDocumentation,
					function (doc) {
						return $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(
							_Utils_update(
								typeDecl,
								{
									fB: $elm$core$Maybe$Just(doc)
								}));
					},
					declaration,
					context);
			case 3:
				return {
					gD: A2($elm$core$List$cons, declaration, context.gD),
					aC: context.aC,
					aL: context.aL
				};
			case 4:
				return {
					gD: A2($elm$core$List$cons, declaration, context.gD),
					aC: context.aC,
					aL: context.aL
				};
			default:
				return {
					gD: A2($elm$core$List$cons, declaration, context.gD),
					aC: context.aC,
					aL: context.aL
				};
		}
	});
var $stil4m$elm_syntax$Elm$Interface$operators = $elm$core$List$filterMap(
	function (_interface) {
		if (_interface.$ === 3) {
			var operator = _interface.a;
			return $elm$core$Maybe$Just(operator);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $stil4m$elm_syntax$Elm$Syntax$Exposing$operator = function (t) {
	if (!t.$) {
		var s = t.a;
		return $elm$core$Maybe$Just(s);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$operators = function (l) {
	return A2($elm$core$List$filterMap, $stil4m$elm_syntax$Elm$Syntax$Exposing$operator, l);
};
var $stil4m$elm_syntax$Elm$Processing$buildSingle = F2(function $stil4m$elm_syntax$Elm$Processing$buildSingle$fn(moduleIndex, imp) {
		var _v0 = A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, imp.fE);
		if (_v0.$ === 1) {
			return _List_Nil;
		} else {
			if (!_v0.a.$) {
				var _v1 = A2(
					$elm$core$Dict$get,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(imp.eY),
					moduleIndex);
				if (!_v1.$) {
					var module_ = _v1.a;
					return $stil4m$elm_syntax$Elm$Interface$operators(module_);
				} else {
					return _List_Nil;
				}
			} else {
				var l = _v0.a.a;
				var _v2 = A2(
					$elm$core$Dict$get,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(imp.eY),
					moduleIndex);
				if (!_v2.$) {
					var module_ = _v2.a;
					var importedOperators = $stil4m$elm_syntax$Elm$Syntax$Exposing$operators(
						A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, l));
					return A2(
						$elm$core$List$filter,
						function (elem) {
							return A2(
								$elm$core$List$member,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(elem.iV),
								importedOperators);
						},
						$stil4m$elm_syntax$Elm$Interface$operators(module_));
				} else {
					return _List_Nil;
				}
			}
		}
	});
var $stil4m$elm_syntax$Elm$DefaultImports$defaults = _List_fromArray(
	[
		{
		fE: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$All($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange))),
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Basics']))
	},
		{
		fE: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType, 'List', $elm$core$Maybe$Nothing))),
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose('::'))
						])))),
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['List']))
	},
		{
		fE: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType,
									'Maybe',
									$elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange))))
						])))),
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Maybe']))
	},
		{
		fE: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType,
									'Result',
									$elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange))))
						])))),
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Result']))
	},
		{
		fE: $elm$core$Maybe$Nothing,
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['String']))
	},
		{
		fE: $elm$core$Maybe$Nothing,
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Tuple']))
	},
		{
		fE: $elm$core$Maybe$Nothing,
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Debug']))
	},
		{
		fE: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType, 'Program', $elm$core$Maybe$Nothing)))
						])))),
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Platform']))
	},
		{
		fE: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType, 'Cmd', $elm$core$Maybe$Nothing))),
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose('!'))
						])))),
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Platform', 'Cmd']))
	},
		{
		fE: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType, 'Sub', $elm$core$Maybe$Nothing)))
						])))),
		iI: $elm$core$Maybe$Nothing,
		eY: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Platform', 'Sub']))
	}
	]);
var $stil4m$elm_syntax$Elm$RawFile$imports = function (_v0) {
	var file = _v0;
	return A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, file.iz);
};
var $stil4m$elm_syntax$Elm$Processing$tableForFile = F2(function $stil4m$elm_syntax$Elm$Processing$tableForFile$fn(rawFile, _v0) {
		var moduleIndex = _v0;
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (x) {
					return _Utils_Tuple2(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(x.iV),
						x);
				},
				A2(
					$elm$core$List$concatMap,
					$stil4m$elm_syntax$Elm$Processing$buildSingle(moduleIndex),
					_Utils_ap(
						$stil4m$elm_syntax$Elm$DefaultImports$defaults,
						$stil4m$elm_syntax$Elm$RawFile$imports(rawFile)))));
	});
var $stil4m$elm_syntax$Elm$Processing$process = F2(function $stil4m$elm_syntax$Elm$Processing$process$fn(processContext, rawFile) {
		var file = rawFile;
		var table = A2($stil4m$elm_syntax$Elm$Processing$tableForFile, rawFile, processContext);
		var changes = A3(
			$elm$core$List$foldl,
			$stil4m$elm_syntax$Elm$Processing$attachDocumentationAndFixOperators(table),
			{gD: _List_Nil, aC: _List_Nil, aL: file.ie},
			file.gD);
		return {
			ie: $elm$core$List$concat(
				$elm$core$List$reverse(
					A2($elm$core$List$cons, changes.aL, changes.aC))),
			gD: $elm$core$List$reverse(changes.gD),
			iz: file.iz,
			iJ: file.iJ
		};
	});
var $jfmengels$elm_review$Review$FileParser$parse = function (source) {
	var _v0 = $stil4m$elm_syntax$Elm$Parser$parse(source);
	if (!_v0.$) {
		var file = _v0.a;
		return $elm$core$Result$Ok(
			A2($stil4m$elm_syntax$Elm$Processing$process, $jfmengels$elm_review$Review$FileParser$elmProcessContext, file));
	} else {
		return $elm$core$Result$Err(0);
	}
};
var $jfmengels$elm_review$Review$Project$removeFileFromFilesThatFailedToParse = F2(function $jfmengels$elm_review$Review$Project$removeFileFromFilesThatFailedToParse$fn(path, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				dn: A2(
					$elm$core$List$filter,
					function (file) {
						return !_Utils_eq(file.iX, path);
					},
					project.dn)
			});
	});
var $jfmengels$elm_review$Review$Project$removeFileFromProject = F2(function $jfmengels$elm_review$Review$Project$removeFileFromProject$fn(path, _v0) {
		var project = _v0;
		return A2(
			$jfmengels$elm_review$Review$Project$removeFileFromFilesThatFailedToParse,
			path,
			_Utils_update(
				project,
				{
					aU: A2($elm$core$Dict$remove, path, project.aU)
				}));
	});
var $jfmengels$elm_review$Review$Project$Internal$sourceDirectories = function (_v0) {
	var project = _v0;
	return project.gg;
};
var $jfmengels$elm_review$Review$Project$addModule = F2(function $jfmengels$elm_review$Review$Project$addModule$fn(_v0, project) {
		var path = _v0.iX;
		var source = _v0.i8;
		var _v1 = $jfmengels$elm_review$Review$FileParser$parse(source);
		if (!_v1.$) {
			var ast = _v1.a;
			var osAgnosticPath = $jfmengels$elm_review$Path$makeOSAgnostic(path);
			return $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation(
				A2(
					$jfmengels$elm_review$Review$Project$removeFileFromFilesThatFailedToParse,
					path,
					A2(
						$jfmengels$elm_review$Review$Project$addModuleToProject,
						$jfmengels$elm_review$Review$Project$ProjectModule$create(
							{
								h2: ast,
								g8: A2(
									$elm$core$List$any,
									function (dir) {
										return A2(
											$elm$core$String$startsWith,
											$jfmengels$elm_review$Path$makeOSAgnostic(dir),
											osAgnosticPath);
									},
									$jfmengels$elm_review$Review$Project$Internal$sourceDirectories(project)),
								iX: path,
								i8: source
							}),
						project)));
		} else {
			return $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation(
				A2(
					$jfmengels$elm_review$Review$Project$addFileThatFailedToParse,
					{iX: path, i8: source},
					A2($jfmengels$elm_review$Review$Project$removeFileFromProject, path, project)));
		}
	});
var $jfmengels$elm_review$Review$Project$addParsedModule = F2(function $jfmengels$elm_review$Review$Project$addParsedModule$fn(_v0, project) {
		var path = _v0.iX;
		var source = _v0.i8;
		var ast = _v0.h2;
		var osAgnosticPath = $jfmengels$elm_review$Path$makeOSAgnostic(path);
		return $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation(
			A2(
				$jfmengels$elm_review$Review$Project$addModuleToProject,
				$jfmengels$elm_review$Review$Project$ProjectModule$create(
					{
						h2: ast,
						g8: A2(
							$elm$core$List$any,
							function (dir) {
								return A2(
									$elm$core$String$startsWith,
									$jfmengels$elm_review$Path$makeOSAgnostic(dir),
									osAgnosticPath);
							},
							$jfmengels$elm_review$Review$Project$Internal$sourceDirectories(project)),
						iX: path,
						i8: source
					}),
				A2($jfmengels$elm_review$Review$Project$removeFileFromFilesThatFailedToParse, path, project)));
	});
var $jfmengels$elm_review$Review$Project$addReadme = F2(function $jfmengels$elm_review$Review$Project$addReadme$fn(readme_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				f6: $elm$core$Maybe$Just(
					_Utils_Tuple2(
						readme_,
						$jfmengels$elm_review$Review$Cache$ContentHash$hash(readme_.dD)))
			});
	});
var $author$project$Elm$Review$Main$addElmFile = F2(function $author$project$Elm$Review$Main$addElmFile$fn(file, project) {
		return A2(
			$jfmengels$elm_review$Review$Project$addModule,
			{iX: file.iX, i8: file.i8},
			project);
	});
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$project_metadata_utils$Elm$Project$ApplicationInfo = F6(function $elm$project_metadata_utils$Elm$Project$ApplicationInfo$fn(elm, dirs, depsDirect, depsIndirect, testDepsDirect, testDepsIndirect) {
		return {gI: depsDirect, gJ: depsIndirect, gM: dirs, er: elm, hQ: testDepsDirect, hR: testDepsIndirect};
	});
var $elm$json$Json$Decode$at = F2(function $elm$json$Json$Decode$at$fn(fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$project_metadata_utils$Elm$Version$Version = F3(function $elm$project_metadata_utils$Elm$Version$Version$fn(a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$project_metadata_utils$Elm$Version$checkNumbers = F3(function $elm$project_metadata_utils$Elm$Version$checkNumbers$fn(major, minor, patch) {
		return ((major >= 0) && ((minor >= 0) && (patch >= 0))) ? $elm$core$Maybe$Just(
			A3($elm$project_metadata_utils$Elm$Version$Version, major, minor, patch)) : $elm$core$Maybe$Nothing;
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$project_metadata_utils$Elm$Version$fromString = function (string) {
	var _v0 = A2(
		$elm$core$List$map,
		$elm$core$String$toInt,
		A2($elm$core$String$split, '.', string));
	if ((((((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && (!_v0.b.b.a.$)) && (!_v0.b.b.b.b)) {
		var major = _v0.a.a;
		var _v1 = _v0.b;
		var minor = _v1.a.a;
		var _v2 = _v1.b;
		var patch = _v2.a.a;
		return A3($elm$project_metadata_utils$Elm$Version$checkNumbers, major, minor, patch);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Version$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Version$fromString(string);
	if (!_v0.$) {
		var version = _v0.a;
		return $elm$json$Json$Decode$succeed(version);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid version like \"2.0.1\"');
	}
};
var $elm$project_metadata_utils$Elm$Version$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Version$decoderHelp, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$project_metadata_utils$Elm$Package$Name = F2(function $elm$project_metadata_utils$Elm$Package$Name$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$Package$isBadChar = function (_char) {
	return $elm$core$Char$isUpper(_char) || ((_char === '.') || (_char === '_'));
};
var $elm$project_metadata_utils$Elm$Package$isBadProjectName = function (project) {
	var _v0 = $elm$core$String$uncons(project);
	if (_v0.$ === 1) {
		return true;
	} else {
		var _v1 = _v0.a;
		var c = _v1.a;
		return A2($elm$core$String$contains, '--', project) || (A2($elm$core$String$any, $elm$project_metadata_utils$Elm$Package$isBadChar, project) || (A2($elm$core$String$startsWith, '-', project) || (!$elm$core$Char$isLower(c))));
	}
};
var $elm$project_metadata_utils$Elm$Package$fromString = function (string) {
	var _v0 = A2($elm$core$String$split, '/', string);
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var author = _v0.a;
		var _v1 = _v0.b;
		var project = _v1.a;
		return $elm$project_metadata_utils$Elm$Package$isBadProjectName(project) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			A2($elm$project_metadata_utils$Elm$Package$Name, author, project));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Project$verifyDepNames = F2(function $elm$project_metadata_utils$Elm$Project$verifyDepNames$fn(revDeps, pairs) {
		verifyDepNames:
		while (true) {
			if (!pairs.b) {
				return $elm$json$Json$Decode$succeed(
					$elm$core$List$reverse(revDeps));
			} else {
				var _v1 = pairs.a;
				var key = _v1.a;
				var con = _v1.b;
				var otherPairs = pairs.b;
				var _v2 = $elm$project_metadata_utils$Elm$Package$fromString(key);
				if (!_v2.$) {
					var pkg = _v2.a;
					var $temp$revDeps = A2(
						$elm$core$List$cons,
						_Utils_Tuple2(pkg, con),
						revDeps),
						$temp$pairs = otherPairs;
					revDeps = $temp$revDeps;
					pairs = $temp$pairs;
					continue verifyDepNames;
				} else {
					return $elm$json$Json$Decode$fail('\"' + (key + '\" is not a valid package name.'));
				}
			}
		}
	});
var $elm$project_metadata_utils$Elm$Project$depsDecoder = function (constraintDecoder) {
	return A2(
		$elm$json$Json$Decode$andThen,
		$elm$project_metadata_utils$Elm$Project$verifyDepNames(_List_Nil),
		$elm$json$Json$Decode$keyValuePairs(constraintDecoder));
};
var $elm$json$Json$Decode$map6 = _Json_map6;
var $elm$project_metadata_utils$Elm$Project$applicationDecoder = A7(
	$elm$json$Json$Decode$map6,
	$elm$project_metadata_utils$Elm$Project$ApplicationInfo,
	A2($elm$json$Json$Decode$field, 'elm-version', $elm$project_metadata_utils$Elm$Version$decoder),
	A2(
		$elm$json$Json$Decode$field,
		'source-directories',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['dependencies', 'direct']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['dependencies', 'indirect']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['test-dependencies', 'direct']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['test-dependencies', 'indirect']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)));
var $elm$project_metadata_utils$Elm$Project$PackageInfo = F8(function $elm$project_metadata_utils$Elm$Project$PackageInfo$fn(name, summary, license, version, exposed, deps, testDeps, elm) {
		return {gH: deps, er: elm, gQ: exposed, hf: license, cH: name, hJ: summary, hP: testDeps, hY: version};
	});
var $elm$project_metadata_utils$Elm$Constraint$Constraint = F4(function $elm$project_metadata_utils$Elm$Constraint$Constraint$fn(a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$project_metadata_utils$Elm$Version$compare = F2(function $elm$project_metadata_utils$Elm$Version$compare$fn(_v0, _v1) {
		var major1 = _v0.a;
		var minor1 = _v0.b;
		var patch1 = _v0.c;
		var major2 = _v1.a;
		var minor2 = _v1.b;
		var patch2 = _v1.c;
		var _v2 = A2($elm$core$Basics$compare, major1, major2);
		switch (_v2) {
			case 0:
				return 0;
			case 2:
				return 2;
			default:
				var _v3 = A2($elm$core$Basics$compare, minor1, minor2);
				switch (_v3) {
					case 0:
						return 0;
					case 1:
						return A2($elm$core$Basics$compare, patch1, patch2);
					default:
						return 2;
				}
		}
	});
var $elm$project_metadata_utils$Elm$Constraint$checkConstraint = function (constraint) {
	var lower = constraint.a;
	var upper = constraint.d;
	var _v0 = A2($elm$project_metadata_utils$Elm$Version$compare, lower, upper);
	switch (_v0) {
		case 0:
			return $elm$core$Maybe$Just(constraint);
		case 1:
			return $elm$core$Maybe$Just(constraint);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map4 = F5(function $elm$core$Maybe$map4$fn(func, ma, mb, mc, md) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 1) {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					if (md.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var d = md.a;
						return $elm$core$Maybe$Just(
							A4(func, a, b, c, d));
					}
				}
			}
		}
	});
var $elm$project_metadata_utils$Elm$Constraint$LessOrEq = 1;
var $elm$project_metadata_utils$Elm$Constraint$LessThan = 0;
var $elm$project_metadata_utils$Elm$Constraint$opFromString = function (op) {
	switch (op) {
		case '<':
			return $elm$core$Maybe$Just(0);
		case '<=':
			return $elm$core$Maybe$Just(1);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Constraint$fromString = function (string) {
	var _v0 = A2($elm$core$String$split, ' ', string);
	if ((((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a === 'v')) && _v0.b.b.b.b) && _v0.b.b.b.b.b) && (!_v0.b.b.b.b.b.b)) {
		var lower = _v0.a;
		var _v1 = _v0.b;
		var lop = _v1.a;
		var _v2 = _v1.b;
		var _v3 = _v2.b;
		var uop = _v3.a;
		var _v4 = _v3.b;
		var upper = _v4.a;
		return A2(
			$elm$core$Maybe$andThen,
			$elm$project_metadata_utils$Elm$Constraint$checkConstraint,
			A5(
				$elm$core$Maybe$map4,
				$elm$project_metadata_utils$Elm$Constraint$Constraint,
				$elm$project_metadata_utils$Elm$Version$fromString(lower),
				$elm$project_metadata_utils$Elm$Constraint$opFromString(lop),
				$elm$project_metadata_utils$Elm$Constraint$opFromString(uop),
				$elm$project_metadata_utils$Elm$Version$fromString(upper)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Constraint$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Constraint$fromString(string);
	if (!_v0.$) {
		var constraint = _v0.a;
		return $elm$json$Json$Decode$succeed(constraint);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid constraint like \"1.0.0 <= v < 2.0.0\"');
	}
};
var $elm$project_metadata_utils$Elm$Constraint$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Constraint$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$License$License = F2(function $elm$project_metadata_utils$Elm$License$License$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses = _List_fromArray(
	[
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-1.1', 'Academic Free License v1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-1.2', 'Academic Free License v1.2'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-2.0', 'Academic Free License v2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-2.1', 'Academic Free License v2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-3.0', 'Academic Free License v3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APL-1.0', 'Adaptive Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Apache-1.1', 'Apache License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Apache-2.0', 'Apache License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-1.0', 'Apple Public Source License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-1.1', 'Apple Public Source License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-1.2', 'Apple Public Source License 1.2'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-2.0', 'Apple Public Source License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-1.0', 'Artistic License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-1.0-Perl', 'Artistic License 1.0 (Perl)'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-1.0-cl8', 'Artistic License 1.0 w/clause 8'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-2.0', 'Artistic License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AAL', 'Attribution Assurance License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'BSL-1.0', 'Boost Software License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'BSD-2-Clause', 'BSD 2-clause \"Simplified\" License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'BSD-3-Clause', 'BSD 3-clause \"New\" or \"Revised\" License'),
		A2($elm$project_metadata_utils$Elm$License$License, '0BSD', 'BSD Zero Clause License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CECILL-2.1', 'CeCILL Free Software License Agreement v2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CNRI-Python', 'CNRI Python License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CDDL-1.0', 'Common Development and Distribution License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CPAL-1.0', 'Common Public Attribution License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CPL-1.0', 'Common Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CATOSL-1.1', 'Computer Associates Trusted Open Source License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CUA-OPL-1.0', 'CUA Office Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EPL-1.0', 'Eclipse Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ECL-1.0', 'Educational Community License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ECL-2.0', 'Educational Community License v2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EFL-1.0', 'Eiffel Forum License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EFL-2.0', 'Eiffel Forum License v2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Entessa', 'Entessa Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EUDatagrid', 'EU DataGrid Software License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EUPL-1.1', 'European Union Public License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Fair', 'Fair License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Frameworx-1.0', 'Frameworx Open License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AGPL-3.0', 'GNU Affero General Public License v3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'GPL-2.0', 'GNU General Public License v2.0 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'GPL-3.0', 'GNU General Public License v3.0 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LGPL-2.1', 'GNU Lesser General Public License v2.1 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LGPL-3.0', 'GNU Lesser General Public License v3.0 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LGPL-2.0', 'GNU Library General Public License v2 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'HPND', 'Historic Permission Notice and Disclaimer'),
		A2($elm$project_metadata_utils$Elm$License$License, 'IPL-1.0', 'IBM Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Intel', 'Intel Open Source License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'IPA', 'IPA Font License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ISC', 'ISC License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LPPL-1.3c', 'LaTeX Project Public License v1.3c'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LiLiQ-P-1.1', 'Licence Libre du Québec – Permissive version 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LiLiQ-Rplus-1.1', 'Licence Libre du Québec – Réciprocité forte version 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LiLiQ-R-1.1', 'Licence Libre du Québec – Réciprocité version 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LPL-1.02', 'Lucent Public License v1.02'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LPL-1.0', 'Lucent Public License Version 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MS-PL', 'Microsoft Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MS-RL', 'Microsoft Reciprocal License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MirOS', 'MirOS Licence'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MIT', 'MIT License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Motosoto', 'Motosoto License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-1.0', 'Mozilla Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-1.1', 'Mozilla Public License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-2.0', 'Mozilla Public License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-2.0-no-copyleft-exception', 'Mozilla Public License 2.0 (no copyleft exception)'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Multics', 'Multics License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NASA-1.3', 'NASA Open Source Agreement 1.3'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Naumen', 'Naumen Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NGPL', 'Nethack General Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Nokia', 'Nokia Open Source License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NPOSL-3.0', 'Non-Profit Open Software License 3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NTP', 'NTP License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OCLC-2.0', 'OCLC Research Public License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OGTSL', 'Open Group Test Suite License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-1.0', 'Open Software License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-2.0', 'Open Software License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-2.1', 'Open Software License 2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-3.0', 'Open Software License 3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSET-PL-2.1', 'OSET Public License version 2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'PHP-3.0', 'PHP License v3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'PostgreSQL', 'PostgreSQL License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Python-2.0', 'Python License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'QPL-1.0', 'Q Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RPSL-1.0', 'RealNetworks Public Source License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RPL-1.1', 'Reciprocal Public License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RPL-1.5', 'Reciprocal Public License 1.5'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RSCPL', 'Ricoh Source Code Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OFL-1.1', 'SIL Open Font License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'SimPL-2.0', 'Simple Public License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Sleepycat', 'Sleepycat License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'SISSL', 'Sun Industry Standards Source License v1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'SPL-1.0', 'Sun Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Watcom-1.0', 'Sybase Open Watcom Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'UPL-1.0', 'Universal Permissive License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NCSA', 'University of Illinois/NCSA Open Source License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'VSL-1.0', 'Vovida Software License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'W3C', 'W3C Software Notice and License (2002-12-31)'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Xnet', 'X.Net License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Zlib', 'zlib License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ZPL-2.0', 'Zope Public License 2.0')
	]);
var $elm$project_metadata_utils$Elm$License$spdxDict = $elm$core$Dict$fromList(
	A2(
		$elm$core$List$map,
		function (license) {
			var abbr = license.a;
			return _Utils_Tuple2(abbr, license);
		},
		$elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses));
var $elm$project_metadata_utils$Elm$License$fromString = function (string) {
	return A2($elm$core$Dict$get, string, $elm$project_metadata_utils$Elm$License$spdxDict);
};
var $elm$project_metadata_utils$Elm$License$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$License$fromString(string);
	if (!_v0.$) {
		var license = _v0.a;
		return $elm$json$Json$Decode$succeed(license);
	} else {
		return $elm$json$Json$Decode$fail('I need an OSI approved license in SPDX format <https://spdx.org/licenses/>');
	}
};
var $elm$project_metadata_utils$Elm$License$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$License$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Package$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Package$fromString(string);
	if (!_v0.$) {
		var name = _v0.a;
		return $elm$json$Json$Decode$succeed(name);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid package name like \"elm/core\"');
	}
};
var $elm$project_metadata_utils$Elm$Package$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Package$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$ExposedDict = function (a) {
	return {$: 1, a: a};
};
var $elm$project_metadata_utils$Elm$Project$ExposedList = function (a) {
	return {$: 0, a: a};
};
var $elm$project_metadata_utils$Elm$Project$checkHeaders = function (dict) {
	checkHeaders:
	while (true) {
		if (!dict.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v1 = dict.a;
			var header = _v1.a;
			var others = dict.b;
			if ($elm$core$String$length(header) < 20) {
				var $temp$dict = others;
				dict = $temp$dict;
				continue checkHeaders;
			} else {
				return $elm$core$Maybe$Just(header);
			}
		}
	}
};
var $elm$project_metadata_utils$Elm$Project$checkExposedDict = function (dict) {
	var _v0 = $elm$project_metadata_utils$Elm$Project$checkHeaders(dict);
	if (_v0.$ === 1) {
		return $elm$json$Json$Decode$succeed(dict);
	} else {
		var badHeader = _v0.a;
		return $elm$json$Json$Decode$fail('The \"' + (badHeader + '\" header is too long. Twenty characters max!'));
	}
};
var $elm$project_metadata_utils$Elm$Module$Name = $elm$core$Basics$identity;
var $elm$project_metadata_utils$Elm$Module$isInner = function (_char) {
	return $elm$core$Char$isAlphaNum(_char) || (_char === '_');
};
var $elm$project_metadata_utils$Elm$Module$isGoodChunk = function (chunk) {
	var _v0 = $elm$core$String$uncons(chunk);
	if (_v0.$ === 1) {
		return false;
	} else {
		var _v1 = _v0.a;
		var _char = _v1.a;
		var rest = _v1.b;
		return $elm$core$Char$isUpper(_char) && A2($elm$core$String$all, $elm$project_metadata_utils$Elm$Module$isInner, rest);
	}
};
var $elm$project_metadata_utils$Elm$Module$fromString = function (string) {
	return A2(
		$elm$core$List$all,
		$elm$project_metadata_utils$Elm$Module$isGoodChunk,
		A2($elm$core$String$split, '.', string)) ? $elm$core$Maybe$Just(string) : $elm$core$Maybe$Nothing;
};
var $elm$project_metadata_utils$Elm$Module$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Module$fromString(string);
	if (!_v0.$) {
		var name = _v0.a;
		return $elm$json$Json$Decode$succeed(name);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid module name like \"Json.Decode\"');
	}
};
var $elm$project_metadata_utils$Elm$Module$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Module$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$exposedDecoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			$elm$project_metadata_utils$Elm$Project$ExposedList,
			$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder)),
			A2(
			$elm$json$Json$Decode$map,
			$elm$project_metadata_utils$Elm$Project$ExposedDict,
			A2(
				$elm$json$Json$Decode$andThen,
				$elm$project_metadata_utils$Elm$Project$checkExposedDict,
				$elm$json$Json$Decode$keyValuePairs(
					$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder))))
		]));
var $elm$json$Json$Decode$map8 = _Json_map8;
var $elm$project_metadata_utils$Elm$Project$summaryCheck = function (summary) {
	return ($elm$core$String$length(summary) < 80) ? $elm$json$Json$Decode$succeed(summary) : $elm$json$Json$Decode$fail('The \"summary\" field must have fewer than 80 characters.');
};
var $elm$project_metadata_utils$Elm$Project$summaryDecoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Project$summaryCheck, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$packageDecoder = A9(
	$elm$json$Json$Decode$map8,
	$elm$project_metadata_utils$Elm$Project$PackageInfo,
	A2($elm$json$Json$Decode$field, 'name', $elm$project_metadata_utils$Elm$Package$decoder),
	A2($elm$json$Json$Decode$field, 'summary', $elm$project_metadata_utils$Elm$Project$summaryDecoder),
	A2($elm$json$Json$Decode$field, 'license', $elm$project_metadata_utils$Elm$License$decoder),
	A2($elm$json$Json$Decode$field, 'version', $elm$project_metadata_utils$Elm$Version$decoder),
	A2($elm$json$Json$Decode$field, 'exposed-modules', $elm$project_metadata_utils$Elm$Project$exposedDecoder),
	A2(
		$elm$json$Json$Decode$field,
		'dependencies',
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)),
	A2(
		$elm$json$Json$Decode$field,
		'test-dependencies',
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)),
	A2($elm$json$Json$Decode$field, 'elm-version', $elm$project_metadata_utils$Elm$Constraint$decoder));
var $elm$project_metadata_utils$Elm$Project$decoderHelp = function (tipe) {
	switch (tipe) {
		case 'application':
			return A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$Application, $elm$project_metadata_utils$Elm$Project$applicationDecoder);
		case 'package':
			return A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$Package, $elm$project_metadata_utils$Elm$Project$packageDecoder);
		default:
			var other = tipe;
			return $elm$json$Json$Decode$fail('The "type" field must be either "application" or "package", so ' + ('\"' + (other + '\" is not acceptable.')));
	}
};
var $elm$project_metadata_utils$Elm$Project$decoder = A2(
	$elm$json$Json$Decode$andThen,
	$elm$project_metadata_utils$Elm$Project$decoderHelp,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $jfmengels$elm_review$Review$Project$elmJson = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$first, project.es);
};
var $jfmengels$elm_review$Review$Project$readme = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$first, project.f6);
};
var $jfmengels$elm_review$Review$Project$removeDependencies = function (_v0) {
	var project = _v0;
	return _Utils_update(
		project,
		{gF: $elm$core$Dict$empty});
};
var $author$project$Elm$Review$Main$addUpdatedFileToProject = F3(function $author$project$Elm$Review$Main$addUpdatedFileToProject$fn(dependencies, file, project) {
		if (_Utils_eq(
			$elm$core$Maybe$Just(file.iX),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.iX;
				},
				$jfmengels$elm_review$Review$Project$readme(project)))) {
			return A2(
				$jfmengels$elm_review$Review$Project$addReadme,
				{dD: file.i8, iX: file.iX},
				project);
		} else {
			var _v0 = $jfmengels$elm_review$Review$Project$elmJson(project);
			if (!_v0.$) {
				var oldElmJson = _v0.a;
				if (_Utils_eq(file.iX, oldElmJson.iX)) {
					var _v1 = A2($elm$json$Json$Decode$decodeString, $elm$project_metadata_utils$Elm$Project$decoder, file.i8);
					if (!_v1.$) {
						var newElmJson = _v1.a;
						var withUpdatedElmJson = A2(
							$jfmengels$elm_review$Review$Project$addElmJson,
							{iX: file.iX, o: newElmJson, ed: file.i8},
							project);
						if (!dependencies.$) {
							var deps = dependencies.a;
							return A3(
								$elm$core$List$foldl,
								$jfmengels$elm_review$Review$Project$addDependency,
								$jfmengels$elm_review$Review$Project$removeDependencies(withUpdatedElmJson),
								deps);
						} else {
							return withUpdatedElmJson;
						}
					} else {
						return project;
					}
				} else {
					return A2($author$project$Elm$Review$Main$addElmFile, file, project);
				}
			} else {
				return A2($author$project$Elm$Review$Main$addElmFile, file, project);
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$errorFilePath = function (_v0) {
	var err = _v0;
	return err.iu;
};
var $jfmengels$elm_review$Review$Rule$errorRuleName = function (_v0) {
	var err = _v0;
	return err.f8;
};
var $author$project$Elm$Review$Vendor$List$Extra$gatherWith = F2(function $author$project$Elm$Review$Vendor$List$Extra$gatherWith$fn(testFn, list) {
		var helper = F2(function helper$fn(scattered, gathered) {
				helper:
				while (true) {
					if (!scattered.b) {
						return $elm$core$List$reverse(gathered);
					} else {
						var toGather = scattered.a;
						var population = scattered.b;
						var _v1 = A2(
							$elm$core$List$partition,
							testFn(toGather),
							population);
						var gathering = _v1.a;
						var remaining = _v1.b;
						var $temp$scattered = remaining,
							$temp$gathered = A2(
							$elm$core$List$cons,
							_Utils_Tuple2(toGather, gathering),
							gathered);
						scattered = $temp$scattered;
						gathered = $temp$gathered;
						continue helper;
					}
				}
			});
		return A2(helper, list, _List_Nil);
	});
var $author$project$Elm$Review$SuppressedErrors$applyHelp = F2(function $author$project$Elm$Review$SuppressedErrors$applyHelp$fn(suppressedErrors, errors) {
		return A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var head = _v0.a;
				var tail = _v0.b;
				var _v1 = A2(
					$elm$core$Dict$get,
					_Utils_Tuple2(
						$jfmengels$elm_review$Review$Rule$errorRuleName(head),
						$jfmengels$elm_review$Review$Rule$errorFilePath(head)),
					suppressedErrors);
				if (!_v1.$) {
					var nbSuppressedErrors = _v1.a;
					return (_Utils_cmp(
						$elm$core$List$length(tail),
						nbSuppressedErrors - 1) < 1) ? _List_Nil : A2($elm$core$List$cons, head, tail);
				} else {
					return A2($elm$core$List$cons, head, tail);
				}
			},
			A2(
				$author$project$Elm$Review$Vendor$List$Extra$gatherWith,
				F2(
					function (a, b) {
						return _Utils_eq(
							$jfmengels$elm_review$Review$Rule$errorFilePath(a),
							$jfmengels$elm_review$Review$Rule$errorFilePath(b)) && _Utils_eq(
							$jfmengels$elm_review$Review$Rule$errorRuleName(a),
							$jfmengels$elm_review$Review$Rule$errorRuleName(b));
					}),
				errors));
	});
var $author$project$Elm$Review$SuppressedErrors$filterSuppressed = F2(function $author$project$Elm$Review$SuppressedErrors$filterSuppressed$fn(ruleNames, suppressedErrors) {
		return A2(
			$elm$core$Dict$filter,
			F2(
				function (_v0, _v1) {
					var ruleName = _v0.a;
					return !A2($elm$core$Set$member, ruleName, ruleNames);
				}),
			suppressedErrors);
	});
var $author$project$Elm$Review$SuppressedErrors$apply = F3(function $author$project$Elm$Review$SuppressedErrors$apply$fn(unsuppressMode, _v0, errors) {
		var suppressedErrors = _v0;
		if ($elm$core$Dict$isEmpty(suppressedErrors)) {
			return errors;
		} else {
			switch (unsuppressMode.$) {
				case 0:
					return errors;
				case 1:
					var ruleNames = unsuppressMode.a;
					return A2(
						$author$project$Elm$Review$SuppressedErrors$applyHelp,
						A2($author$project$Elm$Review$SuppressedErrors$filterSuppressed, ruleNames, suppressedErrors),
						errors);
				default:
					return A2($author$project$Elm$Review$SuppressedErrors$applyHelp, suppressedErrors, errors);
			}
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$getJsonEncoder = function (_v0) {
	var m = _v0;
	return m.cA;
};
var $author$project$Elm$Review$Vendor$Serialize$version = 1;
var $author$project$Elm$Review$Vendor$Serialize$encodeToJson = F2(function $author$project$Elm$Review$Vendor$Serialize$encodeToJson$fn(codec, value) {
		return A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$json$Json$Encode$int($author$project$Elm$Review$Vendor$Serialize$version),
					A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, codec, value)
				]));
	});
var $author$project$Elm$Review$Vendor$Serialize$CustomTypeCodec = $elm$core$Basics$identity;
var $author$project$Elm$Review$Vendor$Serialize$customType = function (match) {
	return {
		dY: 0,
		aT: function (_v0) {
			return $elm$core$Basics$identity;
		},
		eP: match
	};
};
var $author$project$Elm$Review$AstCodec$InvalidChar = 0;
var $author$project$Elm$Review$Vendor$Serialize$CustomError = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Vendor$Serialize$Codec = $elm$core$Basics$identity;
var $author$project$Elm$Review$Vendor$Serialize$build = F2(function $author$project$Elm$Review$Vendor$Serialize$build$fn(jsonEncoder, jsonDecoder) {
		return {aT: jsonDecoder, cA: jsonEncoder};
	});
var $author$project$Elm$Review$Vendor$Serialize$getJsonDecoder = function (_v0) {
	var m = _v0;
	return m.aT;
};
var $author$project$Elm$Review$Vendor$Serialize$mapValid = F3(function $author$project$Elm$Review$Vendor$Serialize$mapValid$fn(fromBytes_, toBytes_, codec) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$build,
			function (v) {
				return A2(
					$author$project$Elm$Review$Vendor$Serialize$getJsonEncoder,
					codec,
					toBytes_(v));
			},
			A2(
				$elm$json$Json$Decode$map,
				function (value) {
					if (!value.$) {
						var ok = value.a;
						return A2(
							$elm$core$Result$mapError,
							$author$project$Elm$Review$Vendor$Serialize$CustomError,
							fromBytes_(ok));
					} else {
						var err = value.a;
						return $elm$core$Result$Err(err);
					}
				},
				$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(codec)));
	});
var $author$project$Elm$Review$Vendor$Serialize$string = A2(
	$author$project$Elm$Review$Vendor$Serialize$build,
	$elm$json$Json$Encode$string,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$string));
var $author$project$Elm$Review$AstCodec$char = A3(
	$author$project$Elm$Review$Vendor$Serialize$mapValid,
	function (string) {
		var _v0 = $elm$core$String$toList(string);
		if (_v0.b) {
			var head = _v0.a;
			return $elm$core$Result$Ok(head);
		} else {
			return $elm$core$Result$Err(0);
		}
	},
	$elm$core$String$fromChar,
	$author$project$Elm$Review$Vendor$Serialize$string);
var $author$project$Elm$Review$Vendor$Serialize$RecordCodec = $elm$core$Basics$identity;
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $author$project$Elm$Review$Vendor$Serialize$field = F3(function $author$project$Elm$Review$Vendor$Serialize$field$fn(getter, codec, _v0) {
		var recordCodec = _v0;
		return {
			eF: recordCodec.eF + 1,
			aT: A3(
				$elm$json$Json$Decode$map2,
				F2(
					function (f, x) {
						var _v1 = _Utils_Tuple2(f, x);
						if (!_v1.a.$) {
							if (!_v1.b.$) {
								var fOk = _v1.a.a;
								var xOk = _v1.b.a;
								return $elm$core$Result$Ok(
									fOk(xOk));
							} else {
								var err = _v1.b.a;
								return $elm$core$Result$Err(err);
							}
						} else {
							var err = _v1.a.a;
							return $elm$core$Result$Err(err);
						}
					}),
				recordCodec.aT,
				A2(
					$elm$json$Json$Decode$index,
					recordCodec.eF,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(codec))),
			cA: function (v) {
				return A2(
					$elm$core$List$cons,
					A2(
						$author$project$Elm$Review$Vendor$Serialize$getJsonEncoder,
						codec,
						getter(v)),
					recordCodec.cA(v));
			}
		};
	});
var $author$project$Elm$Review$Vendor$Serialize$DataCorrupted = {$: 1};
var $author$project$Elm$Review$Vendor$Serialize$finishCustomType = function (_v0) {
	var am = _v0;
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$build,
		A2(
			$elm$core$Basics$composeR,
			am.eP,
			function (_v1) {
				var _v2 = _v1;
				var a = _v2.b;
				return a;
			}),
		A2(
			$elm$json$Json$Decode$andThen,
			function (tag) {
				return A2(
					am.aT,
					tag,
					$elm$json$Json$Decode$succeed(
						$elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted)));
			},
			A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int)));
};
var $author$project$Elm$Review$Vendor$Serialize$finishRecord = function (_v0) {
	var codec = _v0;
	return {
		aT: codec.aT,
		cA: A2(
			$elm$core$Basics$composeR,
			codec.cA,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$reverse,
				$elm$json$Json$Encode$list($elm$core$Basics$identity)))
	};
};
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$Elm$Review$Vendor$Serialize$float = A2(
	$author$project$Elm$Review$Vendor$Serialize$build,
	$elm$json$Json$Encode$float,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$float));
var $author$project$Elm$Review$Vendor$Serialize$findIndexHelp = F3(function $author$project$Elm$Review$Vendor$Serialize$findIndexHelp$fn(index, predicate, list_) {
		findIndexHelp:
		while (true) {
			if (!list_.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list_.a;
				var xs = list_.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list_ = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list_ = $temp$list_;
					continue findIndexHelp;
				}
			}
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$findIndex = $author$project$Elm$Review$Vendor$Serialize$findIndexHelp(0);
var $author$project$Elm$Review$Vendor$Serialize$getAt = F2(function $author$project$Elm$Review$Vendor$Serialize$getAt$fn(idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$Elm$Review$Vendor$Serialize$enum = F2(function $author$project$Elm$Review$Vendor$Serialize$enum$fn(defaultItem, items) {
		var getItem = function (index) {
			return (index < 0) ? $elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted) : ((_Utils_cmp(
				index,
				$elm$core$List$length(items)) > 0) ? $elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted) : $elm$core$Result$Ok(
				A2(
					$elm$core$Maybe$withDefault,
					defaultItem,
					A2($author$project$Elm$Review$Vendor$Serialize$getAt, index - 1, items))));
		};
		var getIndex = function (value) {
			return 1 + A2(
				$elm$core$Maybe$withDefault,
				-1,
				A2(
					$author$project$Elm$Review$Vendor$Serialize$findIndex,
					$elm$core$Basics$eq(value),
					items));
		};
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$build,
			A2($elm$core$Basics$composeR, getIndex, $elm$json$Json$Encode$int),
			A2($elm$json$Json$Decode$map, getItem, $elm$json$Json$Decode$int));
	});
var $author$project$Elm$Review$AstCodec$infixDirection = A2(
	$author$project$Elm$Review$Vendor$Serialize$enum,
	0,
	_List_fromArray(
		[1, 2]));
var $author$project$Elm$Review$Vendor$Serialize$int = A2(
	$author$project$Elm$Review$Vendor$Serialize$build,
	$elm$json$Json$Encode$int,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$int));
var $author$project$Elm$Review$Vendor$Serialize$lazy = function (f) {
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$build,
		function (value) {
			return A2(
				$author$project$Elm$Review$Vendor$Serialize$getJsonEncoder,
				f(0),
				value);
		},
		A2(
			$elm$json$Json$Decode$andThen,
			function (_v0) {
				return $author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(
					f(0));
			},
			$elm$json$Json$Decode$succeed(0)));
};
var $author$project$Elm$Review$Vendor$Serialize$list = function (codec) {
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$build,
		$elm$json$Json$Encode$list(
			$author$project$Elm$Review$Vendor$Serialize$getJsonEncoder(codec)),
		A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$List$foldr,
				F2(
					function (value, state) {
						var _v0 = _Utils_Tuple2(value, state);
						if (_v0.b.$ === 1) {
							return state;
						} else {
							if (!_v0.a.$) {
								var ok = _v0.a.a;
								var okState = _v0.b.a;
								return $elm$core$Result$Ok(
									A2($elm$core$List$cons, ok, okState));
							} else {
								var error = _v0.a.a;
								return $elm$core$Result$Err(error);
							}
						}
					}),
				$elm$core$Result$Ok(_List_Nil)),
			$elm$json$Json$Decode$list(
				$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(codec))));
};
var $author$project$Elm$Review$Vendor$Serialize$VariantEncoder = $elm$core$Basics$identity;
var $author$project$Elm$Review$Vendor$Serialize$variant = F3(function $author$project$Elm$Review$Vendor$Serialize$variant$fn(matchJsonPiece, jsonDecoderPiece, _v0) {
		var am = _v0;
		var jsonEnc = function (v) {
			return _Utils_Tuple2(
				0,
				A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					A2(
						$elm$core$List$cons,
						$elm$json$Json$Encode$int(am.dY),
						v)));
		};
		var jsonDecoder_ = F2(function jsonDecoder_$fn(tag, orElse) {
				return _Utils_eq(tag, am.dY) ? jsonDecoderPiece : A2(am.aT, tag, orElse);
			});
		return {
			dY: am.dY + 1,
			aT: jsonDecoder_,
			eP: am.eP(
				matchJsonPiece(jsonEnc))
		};
	});
var $author$project$Elm$Review$Vendor$Serialize$variant0 = function (ctor) {
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$variant,
		function (c) {
			return c(_List_Nil);
		},
		$elm$json$Json$Decode$succeed(
			$elm$core$Result$Ok(ctor)));
};
var $author$project$Elm$Review$Vendor$Serialize$result1 = F2(function $author$project$Elm$Review$Vendor$Serialize$result1$fn(ctor, value) {
		if (!value.$) {
			var ok = value.a;
			return $elm$core$Result$Ok(
				ctor(ok));
		} else {
			var err = value.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$variant1 = F2(function $author$project$Elm$Review$Vendor$Serialize$variant1$fn(ctor, m1) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$variant,
			F2(
				function (c, v) {
					return c(
						_List_fromArray(
							[
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m1, v)
							]));
				}),
			A2(
				$elm$json$Json$Decode$map,
				$author$project$Elm$Review$Vendor$Serialize$result1(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m1))));
	});
var $author$project$Elm$Review$Vendor$Serialize$maybe = function (justCodec) {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$elm$core$Maybe$Just,
			justCodec,
			A2(
				$author$project$Elm$Review$Vendor$Serialize$variant0,
				$elm$core$Maybe$Nothing,
				$author$project$Elm$Review$Vendor$Serialize$customType(
					F3(
						function (nothingEncoder, justEncoder, value) {
							if (value.$ === 1) {
								return nothingEncoder;
							} else {
								var value_ = value.a;
								return justEncoder(value_);
							}
						})))));
};
var $author$project$Elm$Review$Vendor$Serialize$record = function (ctor) {
	return {
		eF: 0,
		aT: $elm$json$Json$Decode$succeed(
			$elm$core$Result$Ok(ctor)),
		cA: function (_v0) {
			return _List_Nil;
		}
	};
};
var $author$project$Elm$Review$AstCodec$node = function (codec) {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function (_v4) {
				var a = _v4.b;
				return a;
			},
			codec,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function (_v3) {
					var range_ = _v3.a;
					return range_.c4.bH;
				},
				$author$project$Elm$Review$Vendor$Serialize$int,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function (_v2) {
						var range_ = _v2.a;
						return range_.c4.b1;
					},
					$author$project$Elm$Review$Vendor$Serialize$int,
					A3(
						$author$project$Elm$Review$Vendor$Serialize$field,
						function (_v1) {
							var range_ = _v1.a;
							return range_.dv.bH;
						},
						$author$project$Elm$Review$Vendor$Serialize$int,
						A3(
							$author$project$Elm$Review$Vendor$Serialize$field,
							function (_v0) {
								var range_ = _v0.a;
								return range_.dv.b1;
							},
							$author$project$Elm$Review$Vendor$Serialize$int,
							$author$project$Elm$Review$Vendor$Serialize$record(
								F5(
									function (a, b, c, d, e) {
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{
												c4: {bH: d, b1: c},
												dv: {bH: b, b1: a}
											},
											e);
									}))))))));
};
var $author$project$Elm$Review$AstCodec$qualifiedNameRef = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.cH;
		},
		$author$project$Elm$Review$Vendor$Serialize$string,
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.eY;
			},
			$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string),
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Pattern$QualifiedNameRef))));
var $author$project$Elm$Review$Vendor$Serialize$result2 = F3(function $author$project$Elm$Review$Vendor$Serialize$result2$fn(ctor, v1, v2) {
		var _v0 = _Utils_Tuple2(v1, v2);
		if (!_v0.a.$) {
			if (!_v0.b.$) {
				var ok1 = _v0.a.a;
				var ok2 = _v0.b.a;
				return $elm$core$Result$Ok(
					A2(ctor, ok1, ok2));
			} else {
				var err = _v0.b.a;
				return $elm$core$Result$Err(err);
			}
		} else {
			var err = _v0.a.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$variant2 = F3(function $author$project$Elm$Review$Vendor$Serialize$variant2$fn(ctor, m1, m2) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$variant,
			F3(
				function (c, v1, v2) {
					return c(
						_List_fromArray(
							[
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m1, v1),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m2, v2)
							]));
				}),
			A3(
				$elm$json$Json$Decode$map2,
				$author$project$Elm$Review$Vendor$Serialize$result2(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m1)),
				A2(
					$elm$json$Json$Decode$index,
					2,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m2))));
	});
function $author$project$Elm$Review$AstCodec$cyclic$pattern() {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern,
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyPattern()),
			A4(
				$author$project$Elm$Review$Vendor$Serialize$variant2,
				$stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern,
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$AstCodec$cyclic$lazyPattern()),
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				A4(
					$author$project$Elm$Review$Vendor$Serialize$variant2,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern,
					$author$project$Elm$Review$AstCodec$qualifiedNameRef,
					$author$project$Elm$Review$Vendor$Serialize$list(
						$author$project$Elm$Review$AstCodec$node(
							$author$project$Elm$Review$AstCodec$cyclic$lazyPattern())),
					A3(
						$author$project$Elm$Review$Vendor$Serialize$variant1,
						$stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern,
						$author$project$Elm$Review$Vendor$Serialize$string,
						A3(
							$author$project$Elm$Review$Vendor$Serialize$variant1,
							$stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern,
							$author$project$Elm$Review$Vendor$Serialize$list(
								$author$project$Elm$Review$AstCodec$node(
									$author$project$Elm$Review$AstCodec$cyclic$lazyPattern())),
							A4(
								$author$project$Elm$Review$Vendor$Serialize$variant2,
								$stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern,
								$author$project$Elm$Review$AstCodec$node(
									$author$project$Elm$Review$AstCodec$cyclic$lazyPattern()),
								$author$project$Elm$Review$AstCodec$node(
									$author$project$Elm$Review$AstCodec$cyclic$lazyPattern()),
								A3(
									$author$project$Elm$Review$Vendor$Serialize$variant1,
									$stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern,
									$author$project$Elm$Review$Vendor$Serialize$list(
										$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
									A3(
										$author$project$Elm$Review$Vendor$Serialize$variant1,
										$stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern,
										$author$project$Elm$Review$Vendor$Serialize$list(
											$author$project$Elm$Review$AstCodec$node(
												$author$project$Elm$Review$AstCodec$cyclic$lazyPattern())),
										A3(
											$author$project$Elm$Review$Vendor$Serialize$variant1,
											$stil4m$elm_syntax$Elm$Syntax$Pattern$FloatPattern,
											$author$project$Elm$Review$Vendor$Serialize$float,
											A3(
												$author$project$Elm$Review$Vendor$Serialize$variant1,
												$stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern,
												$author$project$Elm$Review$Vendor$Serialize$int,
												A3(
													$author$project$Elm$Review$Vendor$Serialize$variant1,
													$stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern,
													$author$project$Elm$Review$Vendor$Serialize$int,
													A3(
														$author$project$Elm$Review$Vendor$Serialize$variant1,
														$stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern,
														$author$project$Elm$Review$Vendor$Serialize$string,
														A3(
															$author$project$Elm$Review$Vendor$Serialize$variant1,
															$stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern,
															$author$project$Elm$Review$AstCodec$char,
															A2(
																$author$project$Elm$Review$Vendor$Serialize$variant0,
																$stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern,
																A2(
																	$author$project$Elm$Review$Vendor$Serialize$variant0,
																	$stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern,
																	$author$project$Elm$Review$Vendor$Serialize$customType(
																		function (e0) {
																			return function (e1) {
																				return function (e2) {
																					return function (e3) {
																						return function (e4) {
																							return function (e5) {
																								return function (e6) {
																									return function (e7) {
																										return function (e8) {
																											return function (e9) {
																												return function (e10) {
																													return function (e11) {
																														return function (e12) {
																															return function (e13) {
																																return function (e14) {
																																	return function (value) {
																																		switch (value.$) {
																																			case 0:
																																				return e0;
																																			case 1:
																																				return e1;
																																			case 2:
																																				var a = value.a;
																																				return e2(a);
																																			case 3:
																																				var a = value.a;
																																				return e3(a);
																																			case 4:
																																				var a = value.a;
																																				return e4(a);
																																			case 5:
																																				var a = value.a;
																																				return e5(a);
																																			case 6:
																																				var a = value.a;
																																				return e6(a);
																																			case 7:
																																				var a = value.a;
																																				return e7(a);
																																			case 8:
																																				var a = value.a;
																																				return e8(a);
																																			case 9:
																																				var a = value.a;
																																				var b = value.b;
																																				return A2(e9, a, b);
																																			case 10:
																																				var a = value.a;
																																				return e10(a);
																																			case 11:
																																				var a = value.a;
																																				return e11(a);
																																			case 12:
																																				var a = value.a;
																																				var b = value.b;
																																				return A2(e12, a, b);
																																			case 13:
																																				var a = value.a;
																																				var b = value.b;
																																				return A2(e13, a, b);
																																			default:
																																				var a = value.a;
																																				return e14(a);
																																		}
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		})))))))))))))))));
}
function $author$project$Elm$Review$AstCodec$cyclic$lazyPattern() {
	return $author$project$Elm$Review$Vendor$Serialize$lazy(
		function (_v0) {
			return $author$project$Elm$Review$AstCodec$cyclic$pattern();
		});
}
var $author$project$Elm$Review$AstCodec$pattern = $author$project$Elm$Review$AstCodec$cyclic$pattern();
$author$project$Elm$Review$AstCodec$cyclic$pattern = function () {
	return $author$project$Elm$Review$AstCodec$pattern;
};
var $author$project$Elm$Review$AstCodec$lazyPattern = $author$project$Elm$Review$AstCodec$cyclic$lazyPattern();
$author$project$Elm$Review$AstCodec$cyclic$lazyPattern = function () {
	return $author$project$Elm$Review$AstCodec$lazyPattern;
};
var $author$project$Elm$Review$Vendor$Serialize$tuple = F2(function $author$project$Elm$Review$Vendor$Serialize$tuple$fn(codecFirst, codecSecond) {
		return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				$elm$core$Tuple$second,
				codecSecond,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					$elm$core$Tuple$first,
					codecFirst,
					$author$project$Elm$Review$Vendor$Serialize$record($elm$core$Tuple$pair))));
	});
function $author$project$Elm$Review$AstCodec$cyclic$typeAnnotation() {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A4(
			$author$project$Elm$Review$Vendor$Serialize$variant2,
			$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation,
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation()),
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation()),
			A4(
				$author$project$Elm$Review$Vendor$Serialize$variant2,
				$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord,
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$AstCodec$cyclic$recordDefinition()),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$variant1,
					$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record,
					$author$project$Elm$Review$AstCodec$cyclic$recordDefinition(),
					A3(
						$author$project$Elm$Review$Vendor$Serialize$variant1,
						$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled,
						$author$project$Elm$Review$Vendor$Serialize$list(
							$author$project$Elm$Review$AstCodec$node(
								$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation())),
						A2(
							$author$project$Elm$Review$Vendor$Serialize$variant0,
							$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit,
							A4(
								$author$project$Elm$Review$Vendor$Serialize$variant2,
								$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed,
								$author$project$Elm$Review$AstCodec$node(
									A2(
										$author$project$Elm$Review$Vendor$Serialize$tuple,
										$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string),
										$author$project$Elm$Review$Vendor$Serialize$string)),
								$author$project$Elm$Review$Vendor$Serialize$list(
									$author$project$Elm$Review$AstCodec$node(
										$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation())),
								A3(
									$author$project$Elm$Review$Vendor$Serialize$variant1,
									$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType,
									$author$project$Elm$Review$Vendor$Serialize$string,
									$author$project$Elm$Review$Vendor$Serialize$customType(
										F8(
											function (e0, e1, e2, e3, e4, e5, e6, value) {
												switch (value.$) {
													case 0:
														var a = value.a;
														return e0(a);
													case 1:
														var a = value.a;
														var b = value.b;
														return A2(e1, a, b);
													case 2:
														return e2;
													case 3:
														var a = value.a;
														return e3(a);
													case 4:
														var a = value.a;
														return e4(a);
													case 5:
														var a = value.a;
														var b = value.b;
														return A2(e5, a, b);
													default:
														var a = value.a;
														var b = value.b;
														return A2(e6, a, b);
												}
											}))))))))));
}
function $author$project$Elm$Review$AstCodec$cyclic$recordDefinition() {
	return $author$project$Elm$Review$Vendor$Serialize$list(
		$author$project$Elm$Review$AstCodec$node(
			A2(
				$author$project$Elm$Review$Vendor$Serialize$tuple,
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation()))));
}
function $author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation() {
	return $author$project$Elm$Review$Vendor$Serialize$lazy(
		function (_v0) {
			return $author$project$Elm$Review$AstCodec$cyclic$typeAnnotation();
		});
}
var $author$project$Elm$Review$AstCodec$typeAnnotation = $author$project$Elm$Review$AstCodec$cyclic$typeAnnotation();
$author$project$Elm$Review$AstCodec$cyclic$typeAnnotation = function () {
	return $author$project$Elm$Review$AstCodec$typeAnnotation;
};
var $author$project$Elm$Review$AstCodec$recordDefinition = $author$project$Elm$Review$AstCodec$cyclic$recordDefinition();
$author$project$Elm$Review$AstCodec$cyclic$recordDefinition = function () {
	return $author$project$Elm$Review$AstCodec$recordDefinition;
};
var $author$project$Elm$Review$AstCodec$lazyTypeAnnotation = $author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation();
$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation = function () {
	return $author$project$Elm$Review$AstCodec$lazyTypeAnnotation;
};
var $author$project$Elm$Review$AstCodec$signature = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.hV;
		},
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$typeAnnotation),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.cH;
			},
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Signature$Signature))));
var $elm$json$Json$Decode$map3 = _Json_map3;
var $author$project$Elm$Review$Vendor$Serialize$result3 = F4(function $author$project$Elm$Review$Vendor$Serialize$result3$fn(ctor, v1, v2, v3) {
		var _v0 = _Utils_Tuple3(v1, v2, v3);
		if (!_v0.a.$) {
			if (!_v0.b.$) {
				if (!_v0.c.$) {
					var ok1 = _v0.a.a;
					var ok2 = _v0.b.a;
					var ok3 = _v0.c.a;
					return $elm$core$Result$Ok(
						A3(ctor, ok1, ok2, ok3));
				} else {
					var err = _v0.c.a;
					return $elm$core$Result$Err(err);
				}
			} else {
				var err = _v0.b.a;
				return $elm$core$Result$Err(err);
			}
		} else {
			var err = _v0.a.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$variant3 = F4(function $author$project$Elm$Review$Vendor$Serialize$variant3$fn(ctor, m1, m2, m3) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$variant,
			F4(
				function (c, v1, v2, v3) {
					return c(
						_List_fromArray(
							[
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m1, v1),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m2, v2),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m3, v3)
							]));
				}),
			A4(
				$elm$json$Json$Decode$map3,
				$author$project$Elm$Review$Vendor$Serialize$result3(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m1)),
				A2(
					$elm$json$Json$Decode$index,
					2,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m2)),
				A2(
					$elm$json$Json$Decode$index,
					3,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m3))));
	});
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$Elm$Review$Vendor$Serialize$T4 = F4(function $author$project$Elm$Review$Vendor$Serialize$T4$fn(a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $author$project$Elm$Review$Vendor$Serialize$result4 = F5(function $author$project$Elm$Review$Vendor$Serialize$result4$fn(ctor, v1, v2, v3, v4) {
		var _v0 = A4($author$project$Elm$Review$Vendor$Serialize$T4, v1, v2, v3, v4);
		if (!_v0.a.$) {
			if (!_v0.b.$) {
				if (!_v0.c.$) {
					if (!_v0.d.$) {
						var ok1 = _v0.a.a;
						var ok2 = _v0.b.a;
						var ok3 = _v0.c.a;
						var ok4 = _v0.d.a;
						return $elm$core$Result$Ok(
							A4(ctor, ok1, ok2, ok3, ok4));
					} else {
						var err = _v0.d.a;
						return $elm$core$Result$Err(err);
					}
				} else {
					var err = _v0.c.a;
					return $elm$core$Result$Err(err);
				}
			} else {
				var err = _v0.b.a;
				return $elm$core$Result$Err(err);
			}
		} else {
			var err = _v0.a.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$variant4 = F5(function $author$project$Elm$Review$Vendor$Serialize$variant4$fn(ctor, m1, m2, m3, m4) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$variant,
			F5(
				function (c, v1, v2, v3, v4) {
					return c(
						_List_fromArray(
							[
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m1, v1),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m2, v2),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m3, v3),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m4, v4)
							]));
				}),
			A5(
				$elm$json$Json$Decode$map4,
				$author$project$Elm$Review$Vendor$Serialize$result4(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m1)),
				A2(
					$elm$json$Json$Decode$index,
					2,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m2)),
				A2(
					$elm$json$Json$Decode$index,
					3,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m3)),
				A2(
					$elm$json$Json$Decode$index,
					4,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m4))));
	});
function $author$project$Elm$Review$AstCodec$cyclic$expression() {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Expression$Operator,
			$author$project$Elm$Review$Vendor$Serialize$string,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression,
				$author$project$Elm$Review$Vendor$Serialize$string,
				A4(
					$author$project$Elm$Review$Vendor$Serialize$variant2,
					$stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression,
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
					$author$project$Elm$Review$Vendor$Serialize$list(
						$author$project$Elm$Review$AstCodec$node(
							$author$project$Elm$Review$AstCodec$cyclic$recordSetter())),
					A3(
						$author$project$Elm$Review$Vendor$Serialize$variant1,
						$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction,
						$author$project$Elm$Review$Vendor$Serialize$string,
						A4(
							$author$project$Elm$Review$Vendor$Serialize$variant2,
							$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess,
							$author$project$Elm$Review$AstCodec$node(
								$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
							$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
							A3(
								$author$project$Elm$Review$Vendor$Serialize$variant1,
								$stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression,
								$author$project$Elm$Review$AstCodec$cyclic$lambda(),
								A3(
									$author$project$Elm$Review$Vendor$Serialize$variant1,
									$stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression,
									$author$project$Elm$Review$AstCodec$cyclic$caseBlock(),
									A3(
										$author$project$Elm$Review$Vendor$Serialize$variant1,
										$stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression,
										$author$project$Elm$Review$AstCodec$cyclic$letBlock(),
										A3(
											$author$project$Elm$Review$Vendor$Serialize$variant1,
											$stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral,
											$author$project$Elm$Review$AstCodec$char,
											A3(
												$author$project$Elm$Review$Vendor$Serialize$variant1,
												$stil4m$elm_syntax$Elm$Syntax$Expression$Negation,
												$author$project$Elm$Review$AstCodec$node(
													$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
												A3(
													$author$project$Elm$Review$Vendor$Serialize$variant1,
													$stil4m$elm_syntax$Elm$Syntax$Expression$Hex,
													$author$project$Elm$Review$Vendor$Serialize$int,
													A3(
														$author$project$Elm$Review$Vendor$Serialize$variant1,
														$stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator,
														$author$project$Elm$Review$Vendor$Serialize$string,
														A5(
															$author$project$Elm$Review$Vendor$Serialize$variant3,
															$stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock,
															$author$project$Elm$Review$AstCodec$node(
																$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
															$author$project$Elm$Review$AstCodec$node(
																$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
															$author$project$Elm$Review$AstCodec$node(
																$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
															A2(
																$author$project$Elm$Review$Vendor$Serialize$variant0,
																$stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr,
																A3(
																	$author$project$Elm$Review$Vendor$Serialize$variant1,
																	$stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr,
																	$author$project$Elm$Review$Vendor$Serialize$list(
																		$author$project$Elm$Review$AstCodec$node(
																			$author$project$Elm$Review$AstCodec$cyclic$lazyExpression())),
																	A3(
																		$author$project$Elm$Review$Vendor$Serialize$variant1,
																		$stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr,
																		$author$project$Elm$Review$Vendor$Serialize$list(
																			$author$project$Elm$Review$AstCodec$node(
																				$author$project$Elm$Review$AstCodec$cyclic$recordSetter())),
																		A3(
																			$author$project$Elm$Review$Vendor$Serialize$variant1,
																			$stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression,
																			$author$project$Elm$Review$AstCodec$node(
																				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
																			A3(
																				$author$project$Elm$Review$Vendor$Serialize$variant1,
																				$stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression,
																				$author$project$Elm$Review$Vendor$Serialize$list(
																					$author$project$Elm$Review$AstCodec$node(
																						$author$project$Elm$Review$AstCodec$cyclic$lazyExpression())),
																				A3(
																					$author$project$Elm$Review$Vendor$Serialize$variant1,
																					$stil4m$elm_syntax$Elm$Syntax$Expression$Literal,
																					$author$project$Elm$Review$Vendor$Serialize$string,
																					A3(
																						$author$project$Elm$Review$Vendor$Serialize$variant1,
																						$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable,
																						$author$project$Elm$Review$Vendor$Serialize$float,
																						A3(
																							$author$project$Elm$Review$Vendor$Serialize$variant1,
																							$stil4m$elm_syntax$Elm$Syntax$Expression$Integer,
																							$author$project$Elm$Review$Vendor$Serialize$int,
																							A4(
																								$author$project$Elm$Review$Vendor$Serialize$variant2,
																								$stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue,
																								$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string),
																								$author$project$Elm$Review$Vendor$Serialize$string,
																								A6(
																									$author$project$Elm$Review$Vendor$Serialize$variant4,
																									$stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication,
																									$author$project$Elm$Review$Vendor$Serialize$string,
																									$author$project$Elm$Review$AstCodec$infixDirection,
																									$author$project$Elm$Review$AstCodec$node(
																										$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
																									$author$project$Elm$Review$AstCodec$node(
																										$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
																									A3(
																										$author$project$Elm$Review$Vendor$Serialize$variant1,
																										$stil4m$elm_syntax$Elm$Syntax$Expression$Application,
																										$author$project$Elm$Review$Vendor$Serialize$list(
																											$author$project$Elm$Review$AstCodec$node(
																												$author$project$Elm$Review$AstCodec$cyclic$lazyExpression())),
																										$author$project$Elm$Review$Vendor$Serialize$customType(
																											function (application) {
																												return function (operatorApplication) {
																													return function (functionOrValue) {
																														return function (integer) {
																															return function (floatable) {
																																return function (literal) {
																																	return function (tuple) {
																																		return function (parenthesized) {
																																			return function (record) {
																																				return function (listExpr) {
																																					return function (unit) {
																																						return function (ifBlock) {
																																							return function (prefixOperator) {
																																								return function (hex) {
																																									return function (negation) {
																																										return function (charExpr) {
																																											return function (letExpr) {
																																												return function (caseExpr) {
																																													return function (lambdaExpr) {
																																														return function (recordAccess) {
																																															return function (recordAccessFunction) {
																																																return function (recordUpdateExpr) {
																																																	return function (glsl) {
																																																		return function (operator) {
																																																			return function (value) {
																																																				switch (value.$) {
																																																					case 1:
																																																						var a = value.a;
																																																						return application(a);
																																																					case 2:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						var c = value.c;
																																																						var d = value.d;
																																																						return A4(operatorApplication, a, b, c, d);
																																																					case 3:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						return A2(functionOrValue, a, b);
																																																					case 7:
																																																						var a = value.a;
																																																						return integer(a);
																																																					case 9:
																																																						var a = value.a;
																																																						return floatable(a);
																																																					case 11:
																																																						var a = value.a;
																																																						return literal(a);
																																																					case 13:
																																																						var a = value.a;
																																																						return tuple(a);
																																																					case 14:
																																																						var a = value.a;
																																																						return parenthesized(a);
																																																					case 18:
																																																						var a = value.a;
																																																						return record(a);
																																																					case 19:
																																																						var a = value.a;
																																																						return listExpr(a);
																																																					case 0:
																																																						return unit;
																																																					case 5:
																																																						var a = value.a;
																																																						return prefixOperator(a);
																																																					case 8:
																																																						var a = value.a;
																																																						return hex(a);
																																																					case 10:
																																																						var a = value.a;
																																																						return negation(a);
																																																					case 12:
																																																						var a = value.a;
																																																						return charExpr(a);
																																																					case 15:
																																																						var a = value.a;
																																																						return letExpr(a);
																																																					case 16:
																																																						var a = value.a;
																																																						return caseExpr(a);
																																																					case 17:
																																																						var a = value.a;
																																																						return lambdaExpr(a);
																																																					case 4:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						var c = value.c;
																																																						return A3(ifBlock, a, b, c);
																																																					case 20:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						return A2(recordAccess, a, b);
																																																					case 21:
																																																						var a = value.a;
																																																						return recordAccessFunction(a);
																																																					case 22:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						return A2(recordUpdateExpr, a, b);
																																																					case 23:
																																																						var a = value.a;
																																																						return glsl(a);
																																																					default:
																																																						var a = value.a;
																																																						return operator(a);
																																																				}
																																																			};
																																																		};
																																																	};
																																																};
																																															};
																																														};
																																													};
																																												};
																																											};
																																										};
																																									};
																																								};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											}))))))))))))))))))))))))));
}
function $author$project$Elm$Review$AstCodec$cyclic$caseBlock() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.ia;
			},
			$author$project$Elm$Review$Vendor$Serialize$list(
				A2(
					$author$project$Elm$Review$Vendor$Serialize$tuple,
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern),
					$author$project$Elm$Review$AstCodec$node(
						$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()))),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.eC;
				},
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
				$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$CaseBlock))));
}
function $author$project$Elm$Review$AstCodec$cyclic$letBlock() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.eC;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.gD;
				},
				$author$project$Elm$Review$Vendor$Serialize$list(
					$author$project$Elm$Review$AstCodec$node(
						$author$project$Elm$Review$AstCodec$cyclic$letDeclaration())),
				$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$LetBlock))));
}
function $author$project$Elm$Review$AstCodec$cyclic$letDeclaration() {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A4(
			$author$project$Elm$Review$Vendor$Serialize$variant2,
			$stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring,
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern),
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction,
				$author$project$Elm$Review$AstCodec$cyclic$function(),
				$author$project$Elm$Review$Vendor$Serialize$customType(
					F3(
						function (e0, e1, value) {
							if (!value.$) {
								var a = value.a;
								return e0(a);
							} else {
								var a = value.a;
								var b = value.b;
								return A2(e1, a, b);
							}
						})))));
}
function $author$project$Elm$Review$AstCodec$cyclic$function() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.ii;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$functionImplementation()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.i7;
				},
				$author$project$Elm$Review$Vendor$Serialize$maybe(
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$signature)),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.fB;
					},
					$author$project$Elm$Review$Vendor$Serialize$maybe(
						$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$Function)))));
}
function $author$project$Elm$Review$AstCodec$cyclic$functionImplementation() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.eC;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.gs;
				},
				$author$project$Elm$Review$Vendor$Serialize$list(
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern)),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.cH;
					},
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionImplementation)))));
}
function $author$project$Elm$Review$AstCodec$cyclic$lambda() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.eC;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.h0;
				},
				$author$project$Elm$Review$Vendor$Serialize$list(
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern)),
				$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$Lambda))));
}
function $author$project$Elm$Review$AstCodec$cyclic$recordSetter() {
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$tuple,
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
		$author$project$Elm$Review$AstCodec$node(
			$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()));
}
function $author$project$Elm$Review$AstCodec$cyclic$lazyExpression() {
	return $author$project$Elm$Review$Vendor$Serialize$lazy(
		function (_v0) {
			return $author$project$Elm$Review$AstCodec$cyclic$expression();
		});
}
var $author$project$Elm$Review$AstCodec$expression = $author$project$Elm$Review$AstCodec$cyclic$expression();
$author$project$Elm$Review$AstCodec$cyclic$expression = function () {
	return $author$project$Elm$Review$AstCodec$expression;
};
var $author$project$Elm$Review$AstCodec$caseBlock = $author$project$Elm$Review$AstCodec$cyclic$caseBlock();
$author$project$Elm$Review$AstCodec$cyclic$caseBlock = function () {
	return $author$project$Elm$Review$AstCodec$caseBlock;
};
var $author$project$Elm$Review$AstCodec$letBlock = $author$project$Elm$Review$AstCodec$cyclic$letBlock();
$author$project$Elm$Review$AstCodec$cyclic$letBlock = function () {
	return $author$project$Elm$Review$AstCodec$letBlock;
};
var $author$project$Elm$Review$AstCodec$letDeclaration = $author$project$Elm$Review$AstCodec$cyclic$letDeclaration();
$author$project$Elm$Review$AstCodec$cyclic$letDeclaration = function () {
	return $author$project$Elm$Review$AstCodec$letDeclaration;
};
var $author$project$Elm$Review$AstCodec$function = $author$project$Elm$Review$AstCodec$cyclic$function();
$author$project$Elm$Review$AstCodec$cyclic$function = function () {
	return $author$project$Elm$Review$AstCodec$function;
};
var $author$project$Elm$Review$AstCodec$functionImplementation = $author$project$Elm$Review$AstCodec$cyclic$functionImplementation();
$author$project$Elm$Review$AstCodec$cyclic$functionImplementation = function () {
	return $author$project$Elm$Review$AstCodec$functionImplementation;
};
var $author$project$Elm$Review$AstCodec$lambda = $author$project$Elm$Review$AstCodec$cyclic$lambda();
$author$project$Elm$Review$AstCodec$cyclic$lambda = function () {
	return $author$project$Elm$Review$AstCodec$lambda;
};
var $author$project$Elm$Review$AstCodec$recordSetter = $author$project$Elm$Review$AstCodec$cyclic$recordSetter();
$author$project$Elm$Review$AstCodec$cyclic$recordSetter = function () {
	return $author$project$Elm$Review$AstCodec$recordSetter;
};
var $author$project$Elm$Review$AstCodec$lazyExpression = $author$project$Elm$Review$AstCodec$cyclic$lazyExpression();
$author$project$Elm$Review$AstCodec$cyclic$lazyExpression = function () {
	return $author$project$Elm$Review$AstCodec$lazyExpression;
};
var $author$project$Elm$Review$AstCodec$infix_ = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.ix;
		},
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.iV;
			},
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.iZ;
				},
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$int),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.ij;
					},
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$infixDirection),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Infix$Infix))))));
var $author$project$Elm$Review$AstCodec$typeAlias = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.hV;
		},
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$typeAnnotation),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.gZ;
			},
			$author$project$Elm$Review$Vendor$Serialize$list(
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.cH;
				},
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.fB;
					},
					$author$project$Elm$Review$Vendor$Serialize$maybe(
						$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$TypeAlias$TypeAlias))))));
var $author$project$Elm$Review$AstCodec$valueConstructor = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.gs;
		},
		$author$project$Elm$Review$Vendor$Serialize$list(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$typeAnnotation)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.cH;
			},
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor))));
var $author$project$Elm$Review$AstCodec$type_ = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.ig;
		},
		$author$project$Elm$Review$Vendor$Serialize$list(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$valueConstructor)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.gZ;
			},
			$author$project$Elm$Review$Vendor$Serialize$list(
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.cH;
				},
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.fB;
					},
					$author$project$Elm$Review$Vendor$Serialize$maybe(
						$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Type$Type))))));
var $author$project$Elm$Review$AstCodec$declaration = $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
	A4(
		$author$project$Elm$Review$Vendor$Serialize$variant2,
		$stil4m$elm_syntax$Elm$Syntax$Declaration$Destructuring,
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern),
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$expression),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration,
			$author$project$Elm$Review$AstCodec$infix_,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration,
				$author$project$Elm$Review$AstCodec$signature,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$variant1,
					$stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration,
					$author$project$Elm$Review$AstCodec$type_,
					A3(
						$author$project$Elm$Review$Vendor$Serialize$variant1,
						$stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration,
						$author$project$Elm$Review$AstCodec$typeAlias,
						A3(
							$author$project$Elm$Review$Vendor$Serialize$variant1,
							$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration,
							$author$project$Elm$Review$AstCodec$function,
							$author$project$Elm$Review$Vendor$Serialize$customType(
								F7(
									function (e0, e1, e2, e3, e4, e5, value) {
										switch (value.$) {
											case 0:
												var a = value.a;
												return e0(a);
											case 1:
												var a = value.a;
												return e1(a);
											case 2:
												var a = value.a;
												return e2(a);
											case 3:
												var a = value.a;
												return e3(a);
											case 4:
												var a = value.a;
												return e4(a);
											default:
												var a = value.a;
												var b = value.b;
												return A2(e5, a, b);
										}
									})))))))));
var $author$project$Elm$Review$AstCodec$range = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.c4;
			},
			function ($) {
				return $.bH;
			}),
		$author$project$Elm$Review$Vendor$Serialize$int,
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.c4;
				},
				function ($) {
					return $.b1;
				}),
			$author$project$Elm$Review$Vendor$Serialize$int,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.dv;
					},
					function ($) {
						return $.bH;
					}),
				$author$project$Elm$Review$Vendor$Serialize$int,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.dv;
						},
						function ($) {
							return $.b1;
						}),
					$author$project$Elm$Review$Vendor$Serialize$int,
					$author$project$Elm$Review$Vendor$Serialize$record(
						F4(
							function (startRow, startColumn, endRow, endColumn) {
								return {
									c4: {bH: endColumn, b1: endRow},
									dv: {bH: startColumn, b1: startRow}
								};
							})))))));
var $author$project$Elm$Review$AstCodec$exposedType = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.iU;
		},
		$author$project$Elm$Review$Vendor$Serialize$maybe($author$project$Elm$Review$AstCodec$range),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.cH;
			},
			$author$project$Elm$Review$Vendor$Serialize$string,
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType))));
var $author$project$Elm$Review$AstCodec$topLevelExpose = $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$variant1,
		$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose,
		$author$project$Elm$Review$AstCodec$exposedType,
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose,
			$author$project$Elm$Review$Vendor$Serialize$string,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose,
				$author$project$Elm$Review$Vendor$Serialize$string,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$variant1,
					$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose,
					$author$project$Elm$Review$Vendor$Serialize$string,
					$author$project$Elm$Review$Vendor$Serialize$customType(
						F5(
							function (e0, e1, e2, e3, value) {
								switch (value.$) {
									case 0:
										var a = value.a;
										return e0(a);
									case 1:
										var a = value.a;
										return e1(a);
									case 2:
										var a = value.a;
										return e2(a);
									default:
										var a = value.a;
										return e3(a);
								}
							})))))));
var $author$project$Elm$Review$AstCodec$exposing_ = $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$variant1,
		$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit,
		$author$project$Elm$Review$Vendor$Serialize$list(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$topLevelExpose)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Exposing$All,
			$author$project$Elm$Review$AstCodec$range,
			$author$project$Elm$Review$Vendor$Serialize$customType(
				F3(
					function (e0, e1, value) {
						if (!value.$) {
							var a = value.a;
							return e0(a);
						} else {
							var a = value.a;
							return e1(a);
						}
					})))));
var $author$project$Elm$Review$AstCodec$import_ = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.fE;
		},
		$author$project$Elm$Review$Vendor$Serialize$maybe(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$exposing_)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.iI;
			},
			$author$project$Elm$Review$Vendor$Serialize$maybe(
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string))),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.eY;
				},
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string)),
				$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Import$Import)))));
var $author$project$Elm$Review$AstCodec$defaultModuleData = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.fE;
		},
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$exposing_),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.eY;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string)),
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData))));
var $stil4m$elm_syntax$Elm$Syntax$Module$EffectModuleData = F4(function $stil4m$elm_syntax$Elm$Syntax$Module$EffectModuleData$fn(moduleName, exposingList, command, subscription) {
		return {id: command, fE: exposingList, eY: moduleName, je: subscription};
	});
var $author$project$Elm$Review$AstCodec$effectModuleData = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.je;
		},
		$author$project$Elm$Review$Vendor$Serialize$maybe(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.id;
			},
			$author$project$Elm$Review$Vendor$Serialize$maybe(
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.fE;
				},
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$exposing_),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.eY;
					},
					$author$project$Elm$Review$AstCodec$node(
						$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string)),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Module$EffectModuleData))))));
var $author$project$Elm$Review$AstCodec$module_ = $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$variant1,
		$stil4m$elm_syntax$Elm$Syntax$Module$EffectModule,
		$author$project$Elm$Review$AstCodec$effectModuleData,
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Module$PortModule,
			$author$project$Elm$Review$AstCodec$defaultModuleData,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Module$NormalModule,
				$author$project$Elm$Review$AstCodec$defaultModuleData,
				$author$project$Elm$Review$Vendor$Serialize$customType(
					F4(
						function (e0, e1, e2, value) {
							switch (value.$) {
								case 0:
									var a = value.a;
									return e0(a);
								case 1:
									var a = value.a;
									return e1(a);
								default:
									var a = value.a;
									return e2(a);
							}
						}))))));
var $author$project$Elm$Review$AstCodec$file = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.ie;
		},
		$author$project$Elm$Review$Vendor$Serialize$list(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.gD;
			},
			$author$project$Elm$Review$Vendor$Serialize$list(
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$declaration)),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.iz;
				},
				$author$project$Elm$Review$Vendor$Serialize$list(
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$import_)),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.iJ;
					},
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$module_),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$File$File))))));
var $author$project$Elm$Review$AstCodec$encode = function (file_) {
	return A2($author$project$Elm$Review$Vendor$Serialize$encodeToJson, $author$project$Elm$Review$AstCodec$file, file_);
};
var $author$project$Elm$Review$Main$find = F2(function $author$project$Elm$Review$Main$find$fn(predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$toRecord = function (_v0) {
	var module_ = _v0;
	return module_;
};
var $jfmengels$elm_review$Review$Project$modules = function (_v0) {
	var project = _v0;
	return A2(
		$elm$core$List$map,
		$jfmengels$elm_review$Review$Project$ProjectModule$toRecord,
		$elm$core$Dict$values(project.aU));
};
var $author$project$Elm$Review$Main$cacheFileRequest = F2(function $author$project$Elm$Review$Main$cacheFileRequest$fn(project, source) {
		var _v0 = A2(
			$author$project$Elm$Review$Main$find,
			function (module_) {
				return _Utils_eq(module_.i8, source);
			},
			$jfmengels$elm_review$Review$Project$modules(project));
		if (!_v0.$) {
			var ast = _v0.a.h2;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'source',
						$elm$json$Json$Encode$string(source)),
						_Utils_Tuple2(
						'ast',
						$author$project$Elm$Review$AstCodec$encode(ast))
					]));
		} else {
			return $elm$json$Json$Encode$null;
		}
	});
var $author$project$Elm$Review$Main$Accepted = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Main$Refused = {$: 1};
var $author$project$Elm$Review$Vendor$Serialize$SerializerOutOfDate = {$: 2};
var $author$project$Elm$Review$Vendor$Serialize$decodeFromJson = F2(function $author$project$Elm$Review$Vendor$Serialize$decodeFromJson$fn(codec, json) {
		var decoder = A2(
			$elm$json$Json$Decode$andThen,
			function (value) {
				return (value <= 0) ? $elm$json$Json$Decode$succeed(
					$elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted)) : (_Utils_eq(value, $author$project$Elm$Review$Vendor$Serialize$version) ? A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(codec)) : $elm$json$Json$Decode$succeed(
					$elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$SerializerOutOfDate)));
			},
			A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int));
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, json);
		if (!_v0.$) {
			var value = _v0.a;
			return value;
		} else {
			return $elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted);
		}
	});
var $author$project$Elm$Review$AstCodec$decode = A2(
	$elm$json$Json$Decode$andThen,
	function (data) {
		var _v0 = A2($author$project$Elm$Review$Vendor$Serialize$decodeFromJson, $author$project$Elm$Review$AstCodec$file, data);
		if (!_v0.$) {
			var res = _v0.a;
			return $elm$json$Json$Decode$succeed(res);
		} else {
			return $elm$json$Json$Decode$fail('Not a valid file');
		}
	},
	$elm$json$Json$Decode$value);
var $author$project$Elm$Review$File$decode = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (path, source, ast) {
			return {h2: ast, iX: path, i8: source};
		}),
	A2($elm$json$Json$Decode$field, 'path', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'source', $elm$json$Json$Decode$string),
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$field,
				'ast',
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $author$project$Elm$Review$AstCodec$decode)),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			])));
var $jfmengels$elm_review$Review$Project$Dependency$Dependency = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Project$Dependency$create = F3(function $jfmengels$elm_review$Review$Project$Dependency$create$fn(name_, elmJson_, modules_) {
		return {es: elmJson_, aU: modules_, cH: name_};
	});
var $elm$project_metadata_utils$Elm$Docs$Module = F6(function $elm$project_metadata_utils$Elm$Docs$Module$fn(name, comment, unions, aliases, values, binops) {
		return {gp: aliases, gv: binops, cY: comment, cH: name, hW: unions, hX: values};
	});
var $elm$project_metadata_utils$Elm$Docs$Alias = F4(function $elm$project_metadata_utils$Elm$Docs$Alias$fn(name, comment, args, tipe) {
		return {h0: args, cY: comment, cH: name, gl: tipe};
	});
var $elm$project_metadata_utils$Elm$Type$Lambda = F2(function $elm$project_metadata_utils$Elm$Type$Lambda$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$Type$Record = F2(function $elm$project_metadata_utils$Elm$Type$Record$fn(a, b) {
		return {$: 4, a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$Type$Type = F2(function $elm$project_metadata_utils$Elm$Type$Type$fn(a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$Type$Var = function (a) {
	return {$: 0, a: a};
};
var $elm$project_metadata_utils$Elm$Type$arrow = $elm$parser$Parser$symbol('->');
var $elm$project_metadata_utils$Elm$Type$comma = $elm$parser$Parser$symbol(',');
var $elm$project_metadata_utils$Elm$Type$isInnerVarChar = function (_char) {
	return $elm$core$Char$isAlphaNum(_char) || (_char === '_');
};
var $elm$project_metadata_utils$Elm$Type$var = function (isFirst) {
	return $elm$parser$Parser$variable(
		{g6: $elm$project_metadata_utils$Elm$Type$isInnerVarChar, hz: $elm$core$Set$empty, dv: isFirst});
};
var $elm$project_metadata_utils$Elm$Type$lowVar = $elm$project_metadata_utils$Elm$Type$var($elm$core$Char$isLower);
var $elm$project_metadata_utils$Elm$Type$spaces = $elm$parser$Parser$chompWhile(
	function (_char) {
		return _char === ' ';
	});
var $elm$project_metadata_utils$Elm$Type$extension = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Maybe$Just),
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$lowVar),
						$elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$spaces)),
					$elm$parser$Parser$symbol('|')),
				$elm$project_metadata_utils$Elm$Type$spaces)),
			$elm$parser$Parser$succeed($elm$core$Maybe$Nothing)
		]));
var $elm$project_metadata_utils$Elm$Type$capVar = $elm$project_metadata_utils$Elm$Type$var($elm$core$Char$isUpper);
var $elm$project_metadata_utils$Elm$Type$qualifiedCapVarHelp = function (_v0) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						$elm$parser$Parser$Loop(0)),
					$elm$parser$Parser$symbol('.')),
				$elm$project_metadata_utils$Elm$Type$capVar),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(0))
			]));
};
var $elm$project_metadata_utils$Elm$Type$qualifiedCapVar = $elm$parser$Parser$getChompedString(
	A2(
		$elm$parser$Parser$ignorer,
		$elm$project_metadata_utils$Elm$Type$capVar,
		A2($elm$parser$Parser$loop, 0, $elm$project_metadata_utils$Elm$Type$qualifiedCapVarHelp)));
var $elm$project_metadata_utils$Elm$Type$Tuple = function (a) {
	return {$: 2, a: a};
};
var $elm$project_metadata_utils$Elm$Type$tuplize = function (args) {
	if (args.b && (!args.b.b)) {
		var arg = args.a;
		return arg;
	} else {
		return $elm$project_metadata_utils$Elm$Type$Tuple(args);
	}
};
var $elm$project_metadata_utils$Elm$Type$chompArgs = function (revArgs) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (arg) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, arg, revArgs));
				},
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$spaces)),
					$elm$project_metadata_utils$Elm$Type$cyclic$term())),
				A2(
				$elm$parser$Parser$map,
				function (_v2) {
					return $elm$parser$Parser$Done(
						$elm$core$List$reverse(revArgs));
				},
				$elm$parser$Parser$succeed(0))
			]));
};
var $elm$project_metadata_utils$Elm$Type$recordEndHelp = function (revFields) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							function (f) {
								return $elm$parser$Parser$Loop(
									A2($elm$core$List$cons, f, revFields));
							}),
						$elm$project_metadata_utils$Elm$Type$comma),
					$elm$project_metadata_utils$Elm$Type$spaces),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$project_metadata_utils$Elm$Type$cyclic$field(),
					$elm$project_metadata_utils$Elm$Type$spaces)),
				A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					function (_v1) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(revFields));
					}),
				$elm$parser$Parser$symbol('}'))
			]));
};
var $elm$project_metadata_utils$Elm$Type$tipeHelp = function (t) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				$elm$project_metadata_utils$Elm$Type$Lambda(t),
				$elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType()),
				$elm$parser$Parser$succeed(t)
			]));
};
function $elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$spaces)),
				$elm$project_metadata_utils$Elm$Type$arrow),
			$elm$project_metadata_utils$Elm$Type$spaces),
		$elm$project_metadata_utils$Elm$Type$cyclic$tipe());
}
function $elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$map, $elm$project_metadata_utils$Elm$Type$Var, $elm$project_metadata_utils$Elm$Type$lowVar),
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed($elm$project_metadata_utils$Elm$Type$Type),
					$elm$project_metadata_utils$Elm$Type$qualifiedCapVar),
				A2($elm$parser$Parser$loop, _List_Nil, $elm$project_metadata_utils$Elm$Type$chompArgs)),
				$elm$project_metadata_utils$Elm$Type$cyclic$record(),
				$elm$project_metadata_utils$Elm$Type$cyclic$tuple()
			]));
}
function $elm$project_metadata_utils$Elm$Type$cyclic$term() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$map, $elm$project_metadata_utils$Elm$Type$Var, $elm$project_metadata_utils$Elm$Type$lowVar),
				A2(
				$elm$parser$Parser$map,
				function (name) {
					return A2($elm$project_metadata_utils$Elm$Type$Type, name, _List_Nil);
				},
				$elm$project_metadata_utils$Elm$Type$qualifiedCapVar),
				$elm$project_metadata_utils$Elm$Type$cyclic$record(),
				$elm$project_metadata_utils$Elm$Type$cyclic$tuple()
			]));
}
function $elm$project_metadata_utils$Elm$Type$cyclic$record() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						F2(
							function (ext, fs) {
								return A2($elm$project_metadata_utils$Elm$Type$Record, fs, ext);
							})),
					$elm$parser$Parser$symbol('{')),
				$elm$project_metadata_utils$Elm$Type$spaces),
			$elm$project_metadata_utils$Elm$Type$extension),
		$elm$project_metadata_utils$Elm$Type$cyclic$recordEnd());
}
function $elm$project_metadata_utils$Elm$Type$cyclic$recordEnd() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$andThen,
				function (f) {
					return A2(
						$elm$parser$Parser$loop,
						_List_fromArray(
							[f]),
						$elm$project_metadata_utils$Elm$Type$recordEndHelp);
				},
				A2(
					$elm$parser$Parser$ignorer,
					$elm$project_metadata_utils$Elm$Type$cyclic$field(),
					$elm$project_metadata_utils$Elm$Type$spaces)),
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_List_Nil),
				$elm$parser$Parser$symbol('}'))
			]));
}
function $elm$project_metadata_utils$Elm$Type$cyclic$field() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Tuple$pair),
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2($elm$parser$Parser$ignorer, $elm$project_metadata_utils$Elm$Type$lowVar, $elm$project_metadata_utils$Elm$Type$spaces),
					$elm$parser$Parser$symbol(':')),
				$elm$project_metadata_utils$Elm$Type$spaces)),
		$elm$project_metadata_utils$Elm$Type$cyclic$tipe());
}
function $elm$project_metadata_utils$Elm$Type$cyclic$tuple() {
	return A2(
		$elm$parser$Parser$map,
		$elm$project_metadata_utils$Elm$Type$tuplize,
		$elm$parser$Parser$sequence(
			{
				c4: ')',
				hc: $elm$project_metadata_utils$Elm$Type$cyclic$tipe(),
				hE: ',',
				hG: $elm$project_metadata_utils$Elm$Type$spaces,
				dv: '(',
				hT: 0
			}));
}
function $elm$project_metadata_utils$Elm$Type$cyclic$tipe() {
	return $elm$parser$Parser$lazy(
		function (_v0) {
			return A2(
				$elm$parser$Parser$andThen,
				$elm$project_metadata_utils$Elm$Type$tipeHelp,
				$elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm());
		});
}
var $elm$project_metadata_utils$Elm$Type$arrowAndType = $elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType();
$elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType = function () {
	return $elm$project_metadata_utils$Elm$Type$arrowAndType;
};
var $elm$project_metadata_utils$Elm$Type$tipeTerm = $elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm();
$elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm = function () {
	return $elm$project_metadata_utils$Elm$Type$tipeTerm;
};
var $elm$project_metadata_utils$Elm$Type$term = $elm$project_metadata_utils$Elm$Type$cyclic$term();
$elm$project_metadata_utils$Elm$Type$cyclic$term = function () {
	return $elm$project_metadata_utils$Elm$Type$term;
};
var $elm$project_metadata_utils$Elm$Type$record = $elm$project_metadata_utils$Elm$Type$cyclic$record();
$elm$project_metadata_utils$Elm$Type$cyclic$record = function () {
	return $elm$project_metadata_utils$Elm$Type$record;
};
var $elm$project_metadata_utils$Elm$Type$recordEnd = $elm$project_metadata_utils$Elm$Type$cyclic$recordEnd();
$elm$project_metadata_utils$Elm$Type$cyclic$recordEnd = function () {
	return $elm$project_metadata_utils$Elm$Type$recordEnd;
};
var $elm$project_metadata_utils$Elm$Type$field = $elm$project_metadata_utils$Elm$Type$cyclic$field();
$elm$project_metadata_utils$Elm$Type$cyclic$field = function () {
	return $elm$project_metadata_utils$Elm$Type$field;
};
var $elm$project_metadata_utils$Elm$Type$tuple = $elm$project_metadata_utils$Elm$Type$cyclic$tuple();
$elm$project_metadata_utils$Elm$Type$cyclic$tuple = function () {
	return $elm$project_metadata_utils$Elm$Type$tuple;
};
var $elm$project_metadata_utils$Elm$Type$tipe = $elm$project_metadata_utils$Elm$Type$cyclic$tipe();
$elm$project_metadata_utils$Elm$Type$cyclic$tipe = function () {
	return $elm$project_metadata_utils$Elm$Type$tipe;
};
var $elm$project_metadata_utils$Elm$Type$parse = function (source) {
	return A2($elm$parser$Parser$run, $elm$project_metadata_utils$Elm$Type$tipe, source);
};
var $elm$project_metadata_utils$Elm$Type$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Type$parse(string);
	if (_v0.$ === 1) {
		var error = _v0.a;
		return $elm$json$Json$Decode$fail('TODO');
	} else {
		var actualType = _v0.a;
		return $elm$json$Json$Decode$succeed(actualType);
	}
};
var $elm$project_metadata_utils$Elm$Type$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Type$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Docs$aliasDecoder = A5(
	$elm$json$Json$Decode$map4,
	$elm$project_metadata_utils$Elm$Docs$Alias,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'type', $elm$project_metadata_utils$Elm$Type$decoder));
var $elm$project_metadata_utils$Elm$Docs$Binop = F5(function $elm$project_metadata_utils$Elm$Docs$Binop$fn(name, comment, tipe, associativity, precedence) {
		return {h1: associativity, cY: comment, cH: name, iZ: precedence, gl: tipe};
	});
var $elm$project_metadata_utils$Elm$Docs$Left = 0;
var $elm$project_metadata_utils$Elm$Docs$None = 1;
var $elm$project_metadata_utils$Elm$Docs$Right = 2;
var $elm$project_metadata_utils$Elm$Docs$toAssoc = function (str) {
	switch (str) {
		case 'left':
			return $elm$json$Json$Decode$succeed(0);
		case 'non':
			return $elm$json$Json$Decode$succeed(1);
		case 'right':
			return $elm$json$Json$Decode$succeed(2);
		default:
			return $elm$json$Json$Decode$fail('expecting one of the following values: left, non, right');
	}
};
var $elm$project_metadata_utils$Elm$Docs$assocDecoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Docs$toAssoc, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$project_metadata_utils$Elm$Docs$binopDecoder = A6(
	$elm$json$Json$Decode$map5,
	$elm$project_metadata_utils$Elm$Docs$Binop,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'type', $elm$project_metadata_utils$Elm$Type$decoder),
	A2($elm$json$Json$Decode$field, 'associativity', $elm$project_metadata_utils$Elm$Docs$assocDecoder),
	A2($elm$json$Json$Decode$field, 'precedence', $elm$json$Json$Decode$int));
var $elm$project_metadata_utils$Elm$Docs$Union = F4(function $elm$project_metadata_utils$Elm$Docs$Union$fn(name, comment, args, tags) {
		return {h0: args, cY: comment, cH: name, ji: tags};
	});
var $elm$project_metadata_utils$Elm$Docs$tagDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$index,
		1,
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Type$decoder)));
var $elm$project_metadata_utils$Elm$Docs$unionDecoder = A5(
	$elm$json$Json$Decode$map4,
	$elm$project_metadata_utils$Elm$Docs$Union,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$field,
		'cases',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$tagDecoder)));
var $elm$project_metadata_utils$Elm$Docs$Value = F3(function $elm$project_metadata_utils$Elm$Docs$Value$fn(name, comment, tipe) {
		return {cY: comment, cH: name, gl: tipe};
	});
var $elm$project_metadata_utils$Elm$Docs$valueDecoder = A4(
	$elm$json$Json$Decode$map3,
	$elm$project_metadata_utils$Elm$Docs$Value,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'type', $elm$project_metadata_utils$Elm$Type$decoder));
var $elm$project_metadata_utils$Elm$Docs$decoder = A7(
	$elm$json$Json$Decode$map6,
	$elm$project_metadata_utils$Elm$Docs$Module,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'unions',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$unionDecoder)),
	A2(
		$elm$json$Json$Decode$field,
		'aliases',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$aliasDecoder)),
	A2(
		$elm$json$Json$Decode$field,
		'values',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$valueDecoder)),
	A2(
		$elm$json$Json$Decode$field,
		'binops',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$binopDecoder)));
var $author$project$Elm$Review$Main$dependencyDecoder = A4(
	$elm$json$Json$Decode$map3,
	$jfmengels$elm_review$Review$Project$Dependency$create,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'elmJson', $elm$project_metadata_utils$Elm$Project$decoder),
	A2(
		$elm$json$Json$Decode$field,
		'docsJson',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$decoder)));
var $author$project$Elm$Review$Main$dependenciesDecoder = function (ignoreProblematicDependencies) {
	return ignoreProblematicDependencies ? A2(
		$elm$json$Json$Decode$map,
		$elm$core$List$filterMap($elm$core$Basics$identity),
		$elm$json$Json$Decode$list(
			$elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $author$project$Elm$Review$Main$dependencyDecoder),
						$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
					])))) : $elm$json$Json$Decode$list($author$project$Elm$Review$Main$dependencyDecoder);
};
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$Elm$Review$Main$confirmationDecoder = function (ignoreProblematicDependencies) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (accepted) {
			return accepted ? A3(
				$elm$json$Json$Decode$map2,
				F2(
					function (rawFiles, dependencies) {
						return $author$project$Elm$Review$Main$Accepted(
							{gF: dependencies, hx: rawFiles});
					}),
				A2(
					$elm$json$Json$Decode$field,
					'files',
					$elm$json$Json$Decode$list($author$project$Elm$Review$File$decode)),
				$elm$json$Json$Decode$maybe(
					A2(
						$elm$json$Json$Decode$field,
						'dependencies',
						$author$project$Elm$Review$Main$dependenciesDecoder(ignoreProblematicDependencies)))) : $elm$json$Json$Decode$succeed($author$project$Elm$Review$Main$Refused);
		},
		A2($elm$json$Json$Decode$field, 'answer', $elm$json$Json$Decode$bool));
};
var $author$project$Elm$Review$SuppressedErrors$fileEntryDecoder = A3(
	$elm$json$Json$Decode$map2,
	$elm$core$Tuple$pair,
	A2($elm$json$Json$Decode$field, 'filePath', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'count', $elm$json$Json$Decode$int));
var $author$project$Elm$Review$SuppressedErrors$suppressedErrorEntryDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (rule, suppressions) {
			return A2(
				$elm$core$List$map,
				function (_v0) {
					var filePath = _v0.a;
					var nbSuppressedErrors = _v0.b;
					return _Utils_Tuple2(
						_Utils_Tuple2(rule, filePath),
						nbSuppressedErrors);
				},
				suppressions);
		}),
	A2($elm$json$Json$Decode$field, 'rule', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'suppressions',
		$elm$json$Json$Decode$list($author$project$Elm$Review$SuppressedErrors$fileEntryDecoder)));
var $author$project$Elm$Review$SuppressedErrors$decoder = A2(
	$elm$json$Json$Decode$map,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$concat,
		A2($elm$core$Basics$composeR, $elm$core$Dict$fromList, $elm$core$Basics$identity)),
	$elm$json$Json$Decode$list($author$project$Elm$Review$SuppressedErrors$suppressedErrorEntryDecoder));
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $author$project$Elm$Review$Main$elmJsonDecoder = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (path, raw, project) {
			return {iX: path, o: project, ed: raw};
		}),
	A2($elm$json$Json$Decode$field, 'path', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'raw', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'project', $elm$project_metadata_utils$Elm$Project$decoder));
var $author$project$Elm$Review$SuppressedErrors$encodeFileSuppression = function (_v0) {
	var nbSuppressedErrors = _v0.a;
	var path = _v0.b;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'count',
				$elm$json$Json$Encode$int(nbSuppressedErrors)),
				_Utils_Tuple2(
				'filePath',
				$elm$json$Json$Encode$string(path))
			]));
};
var $author$project$Elm$Review$SuppressedErrors$encodeFileSuppressions = function (countPerFile) {
	return A2($elm$json$Json$Encode$list, $author$project$Elm$Review$SuppressedErrors$encodeFileSuppression, countPerFile);
};
var $author$project$Elm$Review$SuppressedErrors$encodeRuleSuppression = F2(function $author$project$Elm$Review$SuppressedErrors$encodeRuleSuppression$fn(ruleName, fileSuppressions) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'rule',
					$elm$json$Json$Encode$string(ruleName)),
					_Utils_Tuple2('suppressions', fileSuppressions)
				]));
	});
var $author$project$Elm$Review$SuppressedErrors$encode = F2(function $author$project$Elm$Review$SuppressedErrors$encode$fn(ruleNames, _v0) {
		var suppressedErrors = _v0;
		var suppressedErrorsList = $elm$core$Dict$toList(suppressedErrors);
		var suppressionsPerRule = $elm$core$Dict$toList(
			A3(
				$elm$core$List$foldl,
				F2(
					function (_v2, acc) {
						var _v3 = _v2.a;
						var ruleName = _v3.a;
						var path = _v3.b;
						var nbSuppressedErrors = _v2.b;
						return A3(
							$elm$core$Dict$update,
							ruleName,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Maybe$withDefault(_List_Nil),
								A2(
									$elm$core$Basics$composeR,
									$elm$core$List$cons(
										_Utils_Tuple2(nbSuppressedErrors, path)),
									$elm$core$Maybe$Just)),
							acc);
					}),
				$elm$core$Dict$empty,
				suppressedErrorsList));
		var rulesWithSuppressions = $elm$core$Set$fromList(
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$core$Tuple$first),
				suppressedErrorsList));
		var rulesWithoutSuppressions = A2(
			$elm$core$List$map,
			function (ruleName) {
				return _Utils_Tuple2(ruleName, _List_Nil);
			},
			A2(
				$elm$core$List$filter,
				function (ruleName) {
					return !A2($elm$core$Set$member, ruleName, rulesWithSuppressions);
				},
				ruleNames));
		return A2(
			$elm$json$Json$Encode$list,
			function (_v1) {
				var ruleName = _v1.a;
				var fileSuppressions = _v1.b;
				return A2(
					$author$project$Elm$Review$SuppressedErrors$encodeRuleSuppression,
					ruleName,
					$author$project$Elm$Review$SuppressedErrors$encodeFileSuppressions(fileSuppressions));
			},
			_Utils_ap(suppressionsPerRule, rulesWithoutSuppressions));
	});
var $author$project$Elm$Review$Main$fixConfirmationStatus = _Platform_outgoingPort('fixConfirmationStatus', $elm$json$Json$Encode$bool);
var $author$project$Elm$Review$SuppressedErrors$fromReviewErrors = function (reviewErrors) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (error, acc) {
				return A3(
					$elm$core$Dict$update,
					_Utils_Tuple2(
						$jfmengels$elm_review$Review$Rule$errorRuleName(error),
						$jfmengels$elm_review$Review$Rule$errorFilePath(error)),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$withDefault(0),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$add(1),
							$elm$core$Maybe$Just)),
					acc);
			}),
		$elm$core$Dict$empty,
		reviewErrors);
};
var $elm$json$Json$Encode$dict = F3(function $elm$json$Json$Encode$dict$fn(toKey, toValue, dictionary) {
		return _Json_wrap(
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, value, obj) {
						return A3(
							_Json_addField,
							toKey(key),
							toValue(value),
							obj);
					}),
				_Json_emptyObject(0),
				dictionary));
	});
var $author$project$Elm$Review$Main$encodeFix = function (_v0) {
	var range = _v0.f4;
	var replacement = _v0.i3;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'range',
				$author$project$Elm$Review$Main$encodeRange(range)),
				_Utils_Tuple2(
				'string',
				$elm$json$Json$Encode$string(replacement))
			]));
};
var $jfmengels$elm_review$Review$Fix$toRecord = function (fix_) {
	switch (fix_.$) {
		case 1:
			var range = fix_.a;
			var replacement = fix_.b;
			return {f4: range, i3: replacement};
		case 0:
			var range = fix_.a;
			return {f4: range, i3: ''};
		default:
			var position = fix_.a;
			var replacement = fix_.b;
			return {
				f4: {c4: position, dv: position},
				i3: replacement
			};
	}
};
var $author$project$Elm$Review$Main$encodeFixes = function (fixes) {
	return A2(
		$elm$json$Json$Encode$list,
		A2($elm$core$Basics$composeR, $jfmengels$elm_review$Review$Fix$toRecord, $author$project$Elm$Review$Main$encodeFix),
		fixes);
};
var $jfmengels$elm_review$Review$Rule$errorDetails = function (_v0) {
	var err = _v0;
	return err.eq;
};
var $jfmengels$elm_review$Review$Rule$errorFixes = function (_v0) {
	var err = _v0;
	var _v1 = err.dV;
	switch (_v1.$) {
		case 1:
			var fixes = _v1.a;
			return $elm$core$Maybe$Just(fixes);
		case 0:
			return $elm$core$Maybe$Nothing;
		default:
			var fixes = _v1.a;
			return $elm$core$Maybe$Just(fixes);
	}
};
var $jfmengels$elm_review$Review$Rule$errorMessage = function (_v0) {
	var err = _v0;
	return err.bx;
};
var $jfmengels$elm_review$Review$Rule$errorRange = function (_v0) {
	var err = _v0;
	return err.f4;
};
var $jfmengels$elm_review$Review$Fix$HasCollisionsInFixRanges = {$: 2};
var $jfmengels$elm_review$Review$Fix$SourceCodeIsNotValid = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Fix$Unchanged = {$: 0};
var $jfmengels$elm_review$Review$Rule$errorFixFailure = function (_v0) {
	var err = _v0;
	var _v1 = err.dV;
	switch (_v1.$) {
		case 1:
			return $elm$core$Maybe$Nothing;
		case 0:
			return $elm$core$Maybe$Nothing;
		default:
			var problem = _v1.b;
			return $elm$core$Maybe$Just(
				function () {
					switch (problem.$) {
						case 0:
							return $jfmengels$elm_review$Review$Fix$Unchanged;
						case 1:
							var string = problem.a;
							return $jfmengels$elm_review$Review$Fix$SourceCodeIsNotValid(string);
						default:
							return $jfmengels$elm_review$Review$Fix$HasCollisionsInFixRanges;
					}
				}());
	}
};
var $author$project$Elm$Review$Main$linkToRule = F2(function $author$project$Elm$Review$Main$linkToRule$fn(links, error) {
		return A2(
			$elm$core$Dict$get,
			$jfmengels$elm_review$Review$Rule$errorRuleName(error),
			links);
	});
var $author$project$Elm$Review$SuppressedErrors$member = F2(function $author$project$Elm$Review$SuppressedErrors$member$fn(error, _v0) {
		var suppressedErrors = _v0;
		return A2(
			$elm$core$Dict$member,
			_Utils_Tuple2(
				$jfmengels$elm_review$Review$Rule$errorRuleName(error),
				$jfmengels$elm_review$Review$Rule$errorFilePath(error)),
			suppressedErrors);
	});
var $author$project$Elm$Review$Main$fromReviewError = F3(function $author$project$Elm$Review$Main$fromReviewError$fn(suppressedErrors, links, error) {
		return {
			eq: $jfmengels$elm_review$Review$Rule$errorDetails(error),
			gW: $jfmengels$elm_review$Review$Rule$errorFixFailure(error),
			bx: $jfmengels$elm_review$Review$Rule$errorMessage(error),
			hw: !_Utils_eq(
				$jfmengels$elm_review$Review$Rule$errorFixes(error),
				$elm$core$Maybe$Nothing),
			f4: $jfmengels$elm_review$Review$Rule$errorRange(error),
			hA: A2($author$project$Elm$Review$Main$linkToRule, links, error),
			f8: $jfmengels$elm_review$Review$Rule$errorRuleName(error),
			hK: A2($author$project$Elm$Review$SuppressedErrors$member, error, suppressedErrors)
		};
	});
var $author$project$Elm$Review$Main$encodeError = F5(function $author$project$Elm$Review$Main$encodeError$fn(_v0, links, detailsMode, source, error) {
		var suppressedErrors = _v0.aa;
		var reviewErrorsAfterSuppression = _v0.bh;
		var originallySuppressed = A2($author$project$Elm$Review$SuppressedErrors$member, error, suppressedErrors);
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'rule',
							$elm$json$Json$Encode$string(
								$jfmengels$elm_review$Review$Rule$errorRuleName(error)))),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'message',
							$elm$json$Json$Encode$string(
								$jfmengels$elm_review$Review$Rule$errorMessage(error)))),
						A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$json$Json$Encode$string,
							$elm$core$Tuple$pair('ruleLink')),
						A2($author$project$Elm$Review$Main$linkToRule, links, error)),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'details',
							A2(
								$elm$json$Json$Encode$list,
								$elm$json$Json$Encode$string,
								$jfmengels$elm_review$Review$Rule$errorDetails(error)))),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'region',
							$author$project$Elm$Review$Main$encodeRange(
								$jfmengels$elm_review$Review$Rule$errorRange(error)))),
						A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Elm$Review$Main$encodeFixes,
							$elm$core$Tuple$pair('fix')),
						$jfmengels$elm_review$Review$Rule$errorFixes(error)),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'formatted',
							$author$project$Elm$Review$Main$encodeReport(
								A3(
									$author$project$Elm$Review$Reporter$formatIndividualError,
									detailsMode,
									source,
									A3($author$project$Elm$Review$Main$fromReviewError, suppressedErrors, links, error))))),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'suppressed',
							$elm$json$Json$Encode$bool(
								originallySuppressed && (!A2($elm$core$List$member, error, reviewErrorsAfterSuppression))))),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'originallySuppressed',
							$elm$json$Json$Encode$bool(originallySuppressed)))
					])));
	});
var $author$project$Elm$Review$Main$encodeErrorByFile = F4(function $author$project$Elm$Review$Main$encodeErrorByFile$fn(suppressedErrorsData, links, detailsMode, file) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'path',
					$author$project$Elm$Review$Main$encodeFilePath(file.iX)),
					_Utils_Tuple2(
					'errors',
					A2(
						$elm$json$Json$Encode$list,
						A4($author$project$Elm$Review$Main$encodeError, suppressedErrorsData, links, detailsMode, file.i8),
						file.bO))
				]));
	});
var $author$project$Elm$Review$Main$fixModeToReportFixMode = function (fixMode) {
	switch (fixMode) {
		case 0:
			return 0;
		case 1:
			return 1;
		default:
			return 1;
	}
};
var $author$project$Elm$Review$Reporter$FilePath = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Reporter$Global = {$: 1};
var $jfmengels$elm_review$Review$Project$modulesThatFailedToParse = function (_v0) {
	var project = _v0;
	return project.dn;
};
var $author$project$Elm$Review$Main$groupErrorsByFile = F2(function $author$project$Elm$Review$Main$groupErrorsByFile$fn(project, errors) {
		var files = $elm$core$List$concat(
			_List_fromArray(
				[
					A2(
					$elm$core$List$map,
					function (file) {
						return {iX: file.iX, i8: file.i8};
					},
					$jfmengels$elm_review$Review$Project$modules(project)),
					_List_fromArray(
					[
						{iX: 'GLOBAL ERROR', i8: ''},
						{iX: 'CONFIGURATION ERROR', i8: ''}
					]),
					function () {
					var _v0 = $jfmengels$elm_review$Review$Project$elmJson(project);
					if (!_v0.$) {
						var path = _v0.a.iX;
						var raw = _v0.a.ed;
						return _List_fromArray(
							[
								{iX: path, i8: raw}
							]);
					} else {
						return _List_Nil;
					}
				}(),
					function () {
					var _v1 = $jfmengels$elm_review$Review$Project$readme(project);
					if (!_v1.$) {
						var path = _v1.a.iX;
						var content = _v1.a.dD;
						return _List_fromArray(
							[
								{iX: path, i8: content}
							]);
					} else {
						return _List_Nil;
					}
				}(),
					$jfmengels$elm_review$Review$Project$modulesThatFailedToParse(project)
				]));
		return A2(
			$elm$core$List$filter,
			function (file) {
				return !$elm$core$List$isEmpty(file.bO);
			},
			A2(
				$elm$core$List$map,
				function (file) {
					return {
						bO: A2(
							$elm$core$List$filter,
							function (error) {
								return _Utils_eq(
									file.iX,
									$jfmengels$elm_review$Review$Rule$errorFilePath(error));
							},
							errors),
						iX: (file.iX === 'GLOBAL ERROR') ? $author$project$Elm$Review$Reporter$Global : ((file.iX === 'CONFIGURATION ERROR') ? $author$project$Elm$Review$Reporter$ConfigurationError : $author$project$Elm$Review$Reporter$FilePath(file.iX)),
						i8: file.i8
					};
				},
				files));
	});
var $author$project$Elm$Review$Main$reviewReport = _Platform_outgoingPort('reviewReport', $elm$core$Basics$identity);
var $author$project$Elm$Review$Main$makeReport = function (model) {
	var _v0 = function () {
		if ($elm$core$List$isEmpty(model.bh) && model.dy) {
			var suppressedErrors = $author$project$Elm$Review$SuppressedErrors$fromReviewErrors(model.cM);
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{bi: model.db, aa: suppressedErrors}),
				A2(
					$author$project$Elm$Review$SuppressedErrors$encode,
					A2($elm$core$List$map, $jfmengels$elm_review$Review$Rule$ruleName, model.bi),
					suppressedErrors));
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{bi: model.db}),
				$elm$json$Json$Encode$null);
		}
	}();
	var newModel = _v0.a;
	var suppressedErrorsForJson = _v0.b;
	return _Utils_Tuple2(
		newModel,
		$author$project$Elm$Review$Main$reviewReport(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'success',
						$elm$json$Json$Encode$bool(
							$elm$core$List$isEmpty(model.bh))),
						_Utils_Tuple2(
						'errors',
						function () {
							var _v1 = newModel.b0;
							if (!_v1) {
								var errorsByFile = A2($author$project$Elm$Review$Main$groupErrorsByFile, model.o, model.bh);
								var filesWithError = A2(
									$elm$core$List$map,
									function (file) {
										return {
											bO: A2(
												$elm$core$List$map,
												A2($author$project$Elm$Review$Main$fromReviewError, newModel.aa, newModel.cE),
												file.bO),
											iX: file.iX,
											i8: file.i8
										};
									},
									errorsByFile);
								return $author$project$Elm$Review$Main$encodeReport(
									A2(
										$author$project$Elm$Review$Reporter$formatReport,
										{
											aH: newModel.aH,
											c5: newModel.c5,
											hh: $author$project$Elm$Review$Main$fixModeToReportFixMode(model.aQ),
											dq: newModel.dq,
											aa: newModel.aa,
											aZ: newModel.aZ
										},
										filesWithError));
							} else {
								var errorsByFile = A2($author$project$Elm$Review$Main$groupErrorsByFile, model.o, model.cM);
								return A2(
									$elm$json$Json$Encode$list,
									A3(
										$author$project$Elm$Review$Main$encodeErrorByFile,
										{bh: model.bh, aa: newModel.aa},
										newModel.cE,
										newModel.aH),
									errorsByFile);
							}
						}()),
						_Utils_Tuple2(
						'extracts',
						A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$core$Basics$identity, newModel.dS)),
						_Utils_Tuple2('suppressedErrors', suppressedErrorsForJson)
					]))));
};
var $jfmengels$elm_review$Review$Project$precomputeModuleGraph = function (project) {
	return project;
};
var $author$project$Elm$Review$RefusedErrorFixes$errorKey = function (error) {
	var range = $jfmengels$elm_review$Review$Rule$errorRange(error);
	return A2(
		$elm$core$String$join,
		'###',
		_List_fromArray(
			[
				$jfmengels$elm_review$Review$Rule$errorRuleName(error),
				$jfmengels$elm_review$Review$Rule$errorFilePath(error),
				$jfmengels$elm_review$Review$Rule$errorMessage(error),
				A2(
				$elm$core$String$join,
				'\n',
				$jfmengels$elm_review$Review$Rule$errorDetails(error)),
				A2(
				$elm$core$String$join,
				'-',
				A2(
					$elm$core$List$map,
					$elm$core$String$fromInt,
					_List_fromArray(
						[range.dv.b1, range.dv.bH, range.c4.b1, range.c4.bH])))
			]));
};
var $author$project$Elm$Review$RefusedErrorFixes$insert = F2(function $author$project$Elm$Review$RefusedErrorFixes$insert$fn(error, _v0) {
		var refusedErrorFixes = _v0;
		return A2(
			$elm$core$Set$insert,
			$author$project$Elm$Review$RefusedErrorFixes$errorKey(error),
			refusedErrorFixes);
	});
var $author$project$Elm$Review$Main$refuseError = F2(function $author$project$Elm$Review$Main$refuseError$fn(error, model) {
		return _Utils_update(
			model,
			{
				ee: A2($author$project$Elm$Review$RefusedErrorFixes$insert, error, model.ee)
			});
	});
var $jfmengels$elm_review$Review$Project$removeModule = F2(function $jfmengels$elm_review$Review$Project$removeModule$fn(path, project) {
		return $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation(
			A2($jfmengels$elm_review$Review$Project$removeFileFromProject, path, project));
	});
var $author$project$Elm$Review$Main$AwaitingFixAll = {$: 2};
var $author$project$Elm$Review$Main$countErrors = function (dict) {
	return A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v0, errors, count) {
				return $elm$core$List$length(errors) + count;
			}),
		0,
		dict);
};
var $author$project$Elm$Review$Main$diff = F2(function $author$project$Elm$Review$Main$diff$fn(before, after) {
		var beforeReadme = function () {
			var _v8 = $jfmengels$elm_review$Review$Project$readme(before);
			if (!_v8.$) {
				var readme = _v8.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						readme.iX,
						{iX: readme.iX, i8: readme.dD})
					]);
			} else {
				return _List_Nil;
			}
		}();
		var beforeElmJson = function () {
			var _v7 = $jfmengels$elm_review$Review$Project$elmJson(before);
			if (!_v7.$) {
				var readme = _v7.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						readme.iX,
						{iX: readme.iX, i8: readme.ed})
					]);
			} else {
				return _List_Nil;
			}
		}();
		var beforeModules = $elm$core$Dict$fromList(
			$elm$core$List$concat(
				_List_fromArray(
					[
						beforeReadme,
						beforeElmJson,
						A2(
						$elm$core$List$map,
						function (mod) {
							return _Utils_Tuple2(
								mod.iX,
								{iX: mod.iX, i8: mod.i8});
						},
						$jfmengels$elm_review$Review$Project$modules(before))
					])));
		var afterReadme = function () {
			var _v6 = $jfmengels$elm_review$Review$Project$readme(after);
			if (!_v6.$) {
				var readme = _v6.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(readme.iX, readme.dD)
					]);
			} else {
				return _List_Nil;
			}
		}();
		var afterElmJson = function () {
			var _v5 = $jfmengels$elm_review$Review$Project$elmJson(after);
			if (!_v5.$) {
				var elmJson = _v5.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(elmJson.iX, elmJson.ed)
					]);
			} else {
				return _List_Nil;
			}
		}();
		var fixedSources = $elm$core$Dict$fromList(
			$elm$core$List$concat(
				_List_fromArray(
					[
						afterReadme,
						afterElmJson,
						A2(
						$elm$core$List$map,
						function (mod) {
							return _Utils_Tuple2(mod.iX, mod.i8);
						},
						$jfmengels$elm_review$Review$Project$modules(after))
					])));
		return A6(
			$elm$core$Dict$merge,
			F3(
				function (_v0, _v1, acc) {
					return acc;
				}),
			F4(
				function (_v2, beforeModule, fixedSource, acc) {
					return (!_Utils_eq(beforeModule.i8, fixedSource)) ? A2(
						$elm$core$List$cons,
						{dc: fixedSource, iX: beforeModule.iX, i8: beforeModule.i8},
						acc) : acc;
				}),
			F3(
				function (_v3, _v4, acc) {
					return acc;
				}),
			beforeModules,
			fixedSources,
			_List_Nil);
	});
var $author$project$Elm$Review$Main$AwaitingError = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Main$askConfirmationToFix = _Platform_outgoingPort('askConfirmationToFix', $elm$core$Basics$identity);
var $author$project$Elm$Review$Main$encodeChangedFile = function (changedFile) {
	var _v0 = changedFile.i8;
	var source = _v0;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'path',
				$author$project$Elm$Review$Main$encodeFilePath(changedFile.iX)),
				_Utils_Tuple2(
				'source',
				$elm$json$Json$Encode$string(source))
			]));
};
var $author$project$Elm$Review$Vendor$Diff$Added = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$NoChange = function (a) {
	return {$: 2, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$Removed = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Reporter$findIndexInternal = F3(function $author$project$Elm$Review$Reporter$findIndexInternal$fn(predicate, index, list) {
		findIndexInternal:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var item = list.a;
				var rest = list.b;
				if (predicate(item)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$predicate = predicate,
						$temp$index = index + 1,
						$temp$list = rest;
					predicate = $temp$predicate;
					index = $temp$index;
					list = $temp$list;
					continue findIndexInternal;
				}
			}
		}
	});
var $author$project$Elm$Review$Reporter$findIndex = F2(function $author$project$Elm$Review$Reporter$findIndex$fn(predicate, list) {
		return A3($author$project$Elm$Review$Reporter$findIndexInternal, predicate, 0, list);
	});
var $author$project$Elm$Review$Reporter$isNoChange = function (change) {
	switch (change.$) {
		case 2:
			return true;
		case 1:
			return false;
		default:
			return false;
	}
};
var $author$project$Elm$Review$Reporter$dropNonInterestingUnchangedLines = function (changes) {
	var _v0 = A2(
		$author$project$Elm$Review$Reporter$findIndex,
		A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$Elm$Review$Reporter$isNoChange),
		changes);
	if (_v0.$ === 1) {
		return changes;
	} else {
		var index = _v0.a;
		return A2($elm$core$List$drop, index - 1, changes);
	}
};
var $author$project$Elm$Review$Reporter$removeUnchangedLines = F2(function $author$project$Elm$Review$Reporter$removeUnchangedLines$fn(maxLineNumberLength, list) {
		return ($elm$core$List$length(list) >= 4) ? _Utils_ap(
			A2($elm$core$List$take, 1, list),
			A2(
				$elm$core$List$cons,
				$author$project$Elm$Review$Vendor$Diff$NoChange(
					$author$project$Elm$Review$Text$from(
						A2($elm$core$String$repeat, maxLineNumberLength + 1, '·'))),
				A2(
					$elm$core$List$take,
					1,
					$elm$core$List$reverse(list)))) : list;
	});
var $author$project$Elm$Review$Reporter$addLineNumbers = function (changes) {
	var maxLineNumberLength = $author$project$Elm$Review$Reporter$lengthOfLineNumber(
		A3(
			$elm$core$List$foldl,
			F2(
				function (change, _v3) {
					var currentMax = _v3.a;
					var lineNumber = _v3.b;
					switch (change.$) {
						case 2:
							return _Utils_Tuple2(currentMax, lineNumber + 1);
						case 1:
							return _Utils_Tuple2(lineNumber + 1, lineNumber + 1);
						default:
							return _Utils_Tuple2(lineNumber, lineNumber);
					}
				}),
			_Utils_Tuple2(0, 0),
			changes).a);
	var _v0 = A3(
		$elm$core$List$foldl,
		F2(
			function (change, _v1) {
				var lineNumber = _v1.a;
				var previousUnchangedLines = _v1.b;
				var accDiffLines = _v1.c;
				switch (change.$) {
					case 2:
						var str = change.a;
						return _Utils_Tuple3(
							lineNumber + 1,
							A2(
								$elm$core$List$cons,
								$author$project$Elm$Review$Vendor$Diff$NoChange(
									$author$project$Elm$Review$Text$from(
										_Utils_ap(
											A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, lineNumber),
											str))),
								previousUnchangedLines),
							accDiffLines);
					case 1:
						var str = change.a;
						var line = $author$project$Elm$Review$Text$inRed(
							$author$project$Elm$Review$Text$from(
								_Utils_ap(
									A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, lineNumber),
									str)));
						return _Utils_Tuple3(
							lineNumber + 1,
							_List_Nil,
							A2(
								$elm$core$List$cons,
								$author$project$Elm$Review$Vendor$Diff$Removed(line),
								_Utils_ap(
									A2($author$project$Elm$Review$Reporter$removeUnchangedLines, maxLineNumberLength, previousUnchangedLines),
									accDiffLines)));
					default:
						var str = change.a;
						var line = $author$project$Elm$Review$Text$inGreen(
							$author$project$Elm$Review$Text$from(
								_Utils_ap(
									A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, lineNumber),
									str)));
						return _Utils_Tuple3(
							lineNumber,
							_List_Nil,
							A2(
								$elm$core$List$cons,
								$author$project$Elm$Review$Vendor$Diff$Added(line),
								_Utils_ap(
									A2($author$project$Elm$Review$Reporter$removeUnchangedLines, maxLineNumberLength, previousUnchangedLines),
									accDiffLines)));
				}
			}),
		_Utils_Tuple3(0, _List_Nil, _List_Nil),
		changes);
	var unchangedLines = _v0.b;
	var diffLines = _v0.c;
	return $author$project$Elm$Review$Reporter$dropNonInterestingUnchangedLines(
		$elm$core$List$reverse(
			$author$project$Elm$Review$Reporter$dropNonInterestingUnchangedLines(
				_Utils_ap(unchangedLines, diffLines))));
};
var $author$project$Elm$Review$Vendor$Diff$CannotGetA = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$CannotGetB = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$UnexpectedPath = F2(function $author$project$Elm$Review$Vendor$Diff$UnexpectedPath$fn(a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Elm$Review$Vendor$Diff$makeChangesHelp = F5(function $author$project$Elm$Review$Vendor$Diff$makeChangesHelp$fn(changes, getA, getB, _v0, path) {
		makeChangesHelp:
		while (true) {
			var x = _v0.a;
			var y = _v0.b;
			if (!path.b) {
				return $elm$core$Result$Ok(changes);
			} else {
				var _v2 = path.a;
				var prevX = _v2.a;
				var prevY = _v2.b;
				var tail = path.b;
				var change = function () {
					if (_Utils_eq(x - 1, prevX) && _Utils_eq(y - 1, prevY)) {
						var _v4 = getA(x);
						if (!_v4.$) {
							var a = _v4.a;
							return $elm$core$Result$Ok(
								$author$project$Elm$Review$Vendor$Diff$NoChange(a));
						} else {
							return $elm$core$Result$Err(
								$author$project$Elm$Review$Vendor$Diff$CannotGetA(x));
						}
					} else {
						if (_Utils_eq(x, prevX)) {
							var _v5 = getB(y);
							if (!_v5.$) {
								var b = _v5.a;
								return $elm$core$Result$Ok(
									$author$project$Elm$Review$Vendor$Diff$Added(b));
							} else {
								return $elm$core$Result$Err(
									$author$project$Elm$Review$Vendor$Diff$CannotGetB(y));
							}
						} else {
							if (_Utils_eq(y, prevY)) {
								var _v6 = getA(x);
								if (!_v6.$) {
									var a = _v6.a;
									return $elm$core$Result$Ok(
										$author$project$Elm$Review$Vendor$Diff$Removed(a));
								} else {
									return $elm$core$Result$Err(
										$author$project$Elm$Review$Vendor$Diff$CannotGetA(x));
								}
							} else {
								return $elm$core$Result$Err(
									A2(
										$author$project$Elm$Review$Vendor$Diff$UnexpectedPath,
										_Utils_Tuple2(x, y),
										path));
							}
						}
					}
				}();
				if (!change.$) {
					var c = change.a;
					var $temp$changes = A2($elm$core$List$cons, c, changes),
						$temp$getA = getA,
						$temp$getB = getB,
						$temp$_v0 = _Utils_Tuple2(prevX, prevY),
						$temp$path = tail;
					changes = $temp$changes;
					getA = $temp$getA;
					getB = $temp$getB;
					_v0 = $temp$_v0;
					path = $temp$path;
					continue makeChangesHelp;
				} else {
					var e = change.a;
					return $elm$core$Result$Err(e);
				}
			}
		}
	});
var $author$project$Elm$Review$Vendor$Diff$makeChanges = F3(function $author$project$Elm$Review$Vendor$Diff$makeChanges$fn(getA, getB, path) {
		if (!path.b) {
			return $elm$core$Result$Ok(_List_Nil);
		} else {
			var latest = path.a;
			var tail = path.b;
			return A5($author$project$Elm$Review$Vendor$Diff$makeChangesHelp, _List_Nil, getA, getB, latest, tail);
		}
	});
var $author$project$Elm$Review$Vendor$Diff$Continue = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$Found = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$step = F4(function $author$project$Elm$Review$Vendor$Diff$step$fn(snake_, offset, k, v) {
		var fromTop = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($elm$core$Array$get, (k + 1) + offset, v));
		var fromLeft = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($elm$core$Array$get, (k - 1) + offset, v));
		var _v0 = function () {
			var _v2 = _Utils_Tuple2(fromLeft, fromTop);
			if (!_v2.a.b) {
				if (!_v2.b.b) {
					return _Utils_Tuple2(
						_List_Nil,
						_Utils_Tuple2(0, 0));
				} else {
					var _v3 = _v2.b;
					var _v4 = _v3.a;
					var topX = _v4.a;
					var topY = _v4.b;
					return _Utils_Tuple2(
						fromTop,
						_Utils_Tuple2(topX + 1, topY));
				}
			} else {
				if (!_v2.b.b) {
					var _v5 = _v2.a;
					var _v6 = _v5.a;
					var leftX = _v6.a;
					var leftY = _v6.b;
					return _Utils_Tuple2(
						fromLeft,
						_Utils_Tuple2(leftX, leftY + 1));
				} else {
					var _v7 = _v2.a;
					var _v8 = _v7.a;
					var leftX = _v8.a;
					var leftY = _v8.b;
					var _v9 = _v2.b;
					var _v10 = _v9.a;
					var topX = _v10.a;
					var topY = _v10.b;
					return (_Utils_cmp(leftY + 1, topY) > -1) ? _Utils_Tuple2(
						fromLeft,
						_Utils_Tuple2(leftX, leftY + 1)) : _Utils_Tuple2(
						fromTop,
						_Utils_Tuple2(topX + 1, topY));
				}
			}
		}();
		var path = _v0.a;
		var _v1 = _v0.b;
		var x = _v1.a;
		var y = _v1.b;
		var _v11 = A3(
			snake_,
			x + 1,
			y + 1,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(x, y),
				path));
		var newPath = _v11.a;
		var goal = _v11.b;
		return goal ? $author$project$Elm$Review$Vendor$Diff$Found(newPath) : $author$project$Elm$Review$Vendor$Diff$Continue(
			A3($elm$core$Array$set, k + offset, newPath, v));
	});
var $author$project$Elm$Review$Vendor$Diff$onpLoopK = F4(function $author$project$Elm$Review$Vendor$Diff$onpLoopK$fn(snake_, offset, ks, v) {
		onpLoopK:
		while (true) {
			if (!ks.b) {
				return $author$project$Elm$Review$Vendor$Diff$Continue(v);
			} else {
				var k = ks.a;
				var ks_ = ks.b;
				var _v1 = A4($author$project$Elm$Review$Vendor$Diff$step, snake_, offset, k, v);
				if (_v1.$ === 1) {
					var path = _v1.a;
					return $author$project$Elm$Review$Vendor$Diff$Found(path);
				} else {
					var v_ = _v1.a;
					var $temp$snake_ = snake_,
						$temp$offset = offset,
						$temp$ks = ks_,
						$temp$v = v_;
					snake_ = $temp$snake_;
					offset = $temp$offset;
					ks = $temp$ks;
					v = $temp$v;
					continue onpLoopK;
				}
			}
		}
	});
var $author$project$Elm$Review$Vendor$Diff$onpLoopP = F5(function $author$project$Elm$Review$Vendor$Diff$onpLoopP$fn(snake_, delta, offset, p, v) {
		onpLoopP:
		while (true) {
			var ks = (delta > 0) ? _Utils_ap(
				$elm$core$List$reverse(
					A2($elm$core$List$range, delta + 1, delta + p)),
				A2($elm$core$List$range, -p, delta)) : _Utils_ap(
				$elm$core$List$reverse(
					A2($elm$core$List$range, delta + 1, p)),
				A2($elm$core$List$range, (-p) + delta, delta));
			var _v0 = A4($author$project$Elm$Review$Vendor$Diff$onpLoopK, snake_, offset, ks, v);
			if (_v0.$ === 1) {
				var path = _v0.a;
				return path;
			} else {
				var v_ = _v0.a;
				var $temp$snake_ = snake_,
					$temp$delta = delta,
					$temp$offset = offset,
					$temp$p = p + 1,
					$temp$v = v_;
				snake_ = $temp$snake_;
				delta = $temp$delta;
				offset = $temp$offset;
				p = $temp$p;
				v = $temp$v;
				continue onpLoopP;
			}
		}
	});
var $author$project$Elm$Review$Vendor$Diff$snake = F5(function $author$project$Elm$Review$Vendor$Diff$snake$fn(getA, getB, nextX, nextY, path) {
		snake:
		while (true) {
			var _v0 = _Utils_Tuple2(
				getA(nextX),
				getB(nextY));
			_v0$2:
			while (true) {
				if (!_v0.a.$) {
					if (!_v0.b.$) {
						var a = _v0.a.a;
						var b = _v0.b.a;
						if (_Utils_eq(a, b)) {
							var $temp$getA = getA,
								$temp$getB = getB,
								$temp$nextX = nextX + 1,
								$temp$nextY = nextY + 1,
								$temp$path = A2(
								$elm$core$List$cons,
								_Utils_Tuple2(nextX, nextY),
								path);
							getA = $temp$getA;
							getB = $temp$getB;
							nextX = $temp$nextX;
							nextY = $temp$nextY;
							path = $temp$path;
							continue snake;
						} else {
							return _Utils_Tuple2(path, false);
						}
					} else {
						break _v0$2;
					}
				} else {
					if (_v0.b.$ === 1) {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return _Utils_Tuple2(path, true);
					} else {
						break _v0$2;
					}
				}
			}
			return _Utils_Tuple2(path, false);
		}
	});
var $author$project$Elm$Review$Vendor$Diff$onp = F4(function $author$project$Elm$Review$Vendor$Diff$onp$fn(getA, getB, m, n) {
		var v = A2(
			$elm$core$Array$initialize,
			(m + n) + 1,
			$elm$core$Basics$always(_List_Nil));
		var delta = n - m;
		return A5(
			$author$project$Elm$Review$Vendor$Diff$onpLoopP,
			A2($author$project$Elm$Review$Vendor$Diff$snake, getA, getB),
			delta,
			m,
			0,
			v);
	});
var $author$project$Elm$Review$Vendor$Diff$testDiff = F2(function $author$project$Elm$Review$Vendor$Diff$testDiff$fn(a, b) {
		var arrB = $elm$core$Array$fromList(b);
		var getB = function (y) {
			return A2($elm$core$Array$get, y - 1, arrB);
		};
		var n = $elm$core$Array$length(arrB);
		var arrA = $elm$core$Array$fromList(a);
		var getA = function (x) {
			return A2($elm$core$Array$get, x - 1, arrA);
		};
		var m = $elm$core$Array$length(arrA);
		var path = A4($author$project$Elm$Review$Vendor$Diff$onp, getA, getB, m, n);
		return A3($author$project$Elm$Review$Vendor$Diff$makeChanges, getA, getB, path);
	});
var $author$project$Elm$Review$Vendor$Diff$diff = F2(function $author$project$Elm$Review$Vendor$Diff$diff$fn(a, b) {
		var _v0 = A2($author$project$Elm$Review$Vendor$Diff$testDiff, a, b);
		if (!_v0.$) {
			var changes = _v0.a;
			return changes;
		} else {
			return _List_Nil;
		}
	});
var $author$project$Elm$Review$Vendor$Diff$diffLines = F2(function $author$project$Elm$Review$Vendor$Diff$diffLines$fn(a, b) {
		return A2(
			$author$project$Elm$Review$Vendor$Diff$diff,
			$elm$core$String$lines(a),
			$elm$core$String$lines(b));
	});
var $author$project$Elm$Review$Reporter$extractValueFromChange = function (change) {
	switch (change.$) {
		case 2:
			var value = change.a;
			return value;
		case 1:
			var value = change.a;
			return value;
		default:
			var value = change.a;
			return value;
	}
};
var $author$project$Elm$Review$Reporter$diff = F2(function $author$project$Elm$Review$Reporter$diff$fn(_v0, _v1) {
		var before = _v0;
		var after = _v1;
		return A2(
			$elm$core$List$intersperse,
			$author$project$Elm$Review$Text$from('\n'),
			A2(
				$elm$core$List$map,
				$author$project$Elm$Review$Reporter$extractValueFromChange,
				$author$project$Elm$Review$Reporter$addLineNumbers(
					A2($author$project$Elm$Review$Vendor$Diff$diffLines, before, after))));
	});
var $author$project$Elm$Review$Reporter$formatFixProposal = F4(function $author$project$Elm$Review$Reporter$formatFixProposal$fn(detailsMode, file, error, fixedSource) {
		return A2(
			$elm$core$List$map,
			$author$project$Elm$Review$Text$toRecord,
			$elm$core$List$concat(
				_List_fromArray(
					[
						A2(
						$author$project$Elm$Review$Text$join,
						'\n\n',
						_List_fromArray(
							[
								A3(
								$author$project$Elm$Review$Reporter$formatReportForFileWithExtract,
								detailsMode,
								1,
								{
									bO: _List_fromArray(
										[error]),
									iX: file.iX,
									i8: file.i8
								}),
								_List_fromArray(
								[
									$author$project$Elm$Review$Text$inBlue(
									$author$project$Elm$Review$Text$from('I think I can fix this. Here is my proposal:'))
								]),
								A2($author$project$Elm$Review$Reporter$diff, file.i8, fixedSource)
							])),
						_List_fromArray(
						[
							$author$project$Elm$Review$Text$from('\n')
						])
					])));
	});
var $author$project$Elm$Review$Main$MultipleErrors = function (a) {
	return {$: 2, a: a};
};
var $author$project$Elm$Review$Main$NoErrors = {$: 0};
var $author$project$Elm$Review$Main$OneError = F2(function $author$project$Elm$Review$Main$OneError$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Elm$Review$Main$numberOfErrors = function (dict) {
	var _v0 = $elm$core$Dict$toList(dict);
	if (!_v0.b) {
		return $author$project$Elm$Review$Main$NoErrors;
	} else {
		if ((_v0.a.b.b && (!_v0.a.b.b.b)) && (!_v0.b.b)) {
			var _v1 = _v0.a;
			var filePath = _v1.a;
			var _v2 = _v1.b;
			var singleError = _v2.a;
			return A2($author$project$Elm$Review$Main$OneError, filePath, singleError);
		} else {
			var list = _v0;
			return $author$project$Elm$Review$Main$MultipleErrors(
				$elm$core$List$length(list));
		}
	}
};
var $author$project$Elm$Review$Reporter$formatFileDiff = function (file) {
	return A2(
		$author$project$Elm$Review$Text$join,
		'\n\n',
		_List_fromArray(
			[
				_List_fromArray(
				[
					$author$project$Elm$Review$Text$inBlue(
					$author$project$Elm$Review$Text$from(
						A3(
							$elm$core$String$padLeft,
							80,
							'-',
							' ' + $author$project$Elm$Review$Reporter$filePath(file.iX))))
				]),
				A2(
				$elm$core$List$cons,
				$author$project$Elm$Review$Text$from('Applied from the fixes for the following errors:'),
				A2(
					$elm$core$List$concatMap,
					function (error) {
						return A2(
							$elm$core$List$cons,
							$author$project$Elm$Review$Text$from('\n  '),
							A2($author$project$Elm$Review$Reporter$formatErrorTitle, 1, error));
					},
					$elm$core$List$reverse(file.bO))),
				A2($author$project$Elm$Review$Reporter$diff, file.i8, file.dc)
			]));
};
var $author$project$Elm$Review$Reporter$formatFileDiffs = function (changedFiles) {
	if (!changedFiles.b) {
		return _List_Nil;
	} else {
		if (!changedFiles.b.b) {
			var file = changedFiles.a;
			return $author$project$Elm$Review$Reporter$formatFileDiff(file);
		} else {
			var firstFile = changedFiles.a;
			var _v1 = changedFiles.b;
			var secondFile = _v1.a;
			var restOfFiles = _v1.b;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						$author$project$Elm$Review$Reporter$formatFileDiff(firstFile),
						_List_fromArray(
						[
							$author$project$Elm$Review$Text$from('\n')
						]),
						A2($author$project$Elm$Review$Reporter$fileSeparator, firstFile.iX, secondFile.iX),
						$author$project$Elm$Review$Reporter$formatFileDiffs(
						A2($elm$core$List$cons, secondFile, restOfFiles))
					]));
		}
	}
};
var $elm$core$String$padRight = F3(function $elm$core$String$padRight$fn(n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $author$project$Elm$Review$Reporter$formatFixProposals = function (changedFiles) {
	var headerText = '-- ELM-REVIEW FIX-ALL PROPOSAL ';
	var fixAllHeader = $author$project$Elm$Review$Text$inBlue(
		$author$project$Elm$Review$Text$from(
			A3($elm$core$String$padRight, 80, '-', headerText)));
	var filesListing = A2(
		$elm$core$List$cons,
		$author$project$Elm$Review$Text$from('I found fixable errors for the following files:'),
		A2(
			$elm$core$List$concatMap,
			function (file) {
				return _List_fromArray(
					[
						$author$project$Elm$Review$Text$from('\n  '),
						$author$project$Elm$Review$Text$inYellow(
						$author$project$Elm$Review$Text$from(
							'- ' + $author$project$Elm$Review$Reporter$filePath(file.iX)))
					]);
			},
			changedFiles));
	var body = A2(
		$author$project$Elm$Review$Text$join,
		'\n\n',
		_List_fromArray(
			[
				_List_fromArray(
				[fixAllHeader]),
				filesListing,
				_List_fromArray(
				[
					$author$project$Elm$Review$Text$from('Here is how the code would change if you applied each fix.')
				]),
				$author$project$Elm$Review$Reporter$formatFileDiffs(changedFiles)
			]));
	return A2(
		$elm$core$List$map,
		$author$project$Elm$Review$Text$toRecord,
		_Utils_ap(
			body,
			_List_fromArray(
				[
					$author$project$Elm$Review$Text$from('\n')
				])));
};
var $author$project$Elm$Review$Main$sendFixPromptForMultipleFixes = F3(function $author$project$Elm$Review$Main$sendFixPromptForMultipleFixes$fn(model, diffs, numberOfFixedErrors) {
		var changedFiles = A2(
			$elm$core$List$map,
			function (_v0) {
				var path = _v0.iX;
				var source = _v0.i8;
				var fixedSource = _v0.dc;
				return {
					bO: A2(
						$elm$core$List$map,
						A2($author$project$Elm$Review$Main$fromReviewError, model.aa, model.cE),
						A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							A2($elm$core$Dict$get, path, model.a5))),
					dc: fixedSource,
					iX: (path === 'GLOBAL ERROR') ? $author$project$Elm$Review$Reporter$Global : $author$project$Elm$Review$Reporter$FilePath(path),
					i8: source
				};
			},
			diffs);
		var confirmationMessage = $author$project$Elm$Review$Main$encodeReport(
			$author$project$Elm$Review$Reporter$formatFixProposals(changedFiles));
		return $author$project$Elm$Review$Main$askConfirmationToFix(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2('confirmationMessage', confirmationMessage),
						_Utils_Tuple2(
						'changedFiles',
						A2(
							$elm$json$Json$Encode$list,
							$author$project$Elm$Review$Main$encodeChangedFile,
							A2(
								$elm$core$List$map,
								function (file) {
									return {iX: file.iX, i8: file.dc};
								},
								changedFiles))),
						_Utils_Tuple2(
						'count',
						$elm$json$Json$Encode$int(numberOfFixedErrors)),
						_Utils_Tuple2(
						'clearFixLine',
						$elm$json$Json$Encode$bool(model.aQ === 2))
					])));
	});
var $author$project$Elm$Review$Main$sendFixPrompt = F2(function $author$project$Elm$Review$Main$sendFixPrompt$fn(model, diffs) {
		var _v0 = $author$project$Elm$Review$Main$numberOfErrors(model.a5);
		switch (_v0.$) {
			case 0:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 1:
				var filePath = _v0.a;
				var error = _v0.b;
				var _v1 = A2(
					$author$project$Elm$Review$Main$find,
					function (diff_) {
						return _Utils_eq(diff_.iX, filePath);
					},
					diffs);
				if (!_v1.$) {
					var source = _v1.a.i8;
					var fixedSource = _v1.a.dc;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								a3: $author$project$Elm$Review$Main$AwaitingError(error)
							}),
						$author$project$Elm$Review$Main$askConfirmationToFix(
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'confirmationMessage',
										$author$project$Elm$Review$Main$encodeReport(
											A4(
												$author$project$Elm$Review$Reporter$formatFixProposal,
												model.aH,
												{
													iX: $author$project$Elm$Review$Reporter$FilePath(filePath),
													i8: source
												},
												A3($author$project$Elm$Review$Main$fromReviewError, model.aa, model.cE, error),
												fixedSource))),
										_Utils_Tuple2(
										'changedFiles',
										A2(
											$elm$json$Json$Encode$list,
											$author$project$Elm$Review$Main$encodeChangedFile,
											_List_fromArray(
												[
													{
													iX: $author$project$Elm$Review$Reporter$FilePath(filePath),
													i8: fixedSource
												}
												]))),
										_Utils_Tuple2(
										'count',
										$elm$json$Json$Encode$int(1))
									]))));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			default:
				var numberOfFixedErrors = _v0.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{a3: $author$project$Elm$Review$Main$AwaitingFixAll}),
					A3($author$project$Elm$Review$Main$sendFixPromptForMultipleFixes, model, diffs, numberOfFixedErrors));
		}
	});
var $author$project$Elm$Review$Main$applyFixesAfterReview = F2(function $author$project$Elm$Review$Main$applyFixesAfterReview$fn(model, allowPrintingSingleFix) {
		if ($elm$core$Dict$isEmpty(model.a5)) {
			return $author$project$Elm$Review$Main$makeReport(model);
		} else {
			var _v0 = A2($author$project$Elm$Review$Main$diff, model.o, model.ci);
			if (!_v0.b) {
				return $author$project$Elm$Review$Main$makeReport(model);
			} else {
				var diffs = _v0;
				return allowPrintingSingleFix ? A2($author$project$Elm$Review$Main$sendFixPrompt, model, diffs) : _Utils_Tuple2(
					_Utils_update(
						model,
						{a3: $author$project$Elm$Review$Main$AwaitingFixAll}),
					A3(
						$author$project$Elm$Review$Main$sendFixPromptForMultipleFixes,
						model,
						diffs,
						$author$project$Elm$Review$Main$countErrors(model.a5)));
			}
		}
	});
var $author$project$Elm$Review$CliCommunication$sendLoggerMessage = F2(function $author$project$Elm$Review$CliCommunication$sendLoggerMessage$fn(_v0, message) {
		var hackyJson = _v0;
		return A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$field,
				message,
				$elm$json$Json$Decode$null(0)),
			hackyJson);
	});
var $author$project$Elm$Review$CliCommunication$logInPipe = F3(function $author$project$Elm$Review$CliCommunication$logInPipe$fn(key, fields, a) {
		return A2(
			$elm$core$Basics$always,
			a,
			A2(
				$author$project$Elm$Review$CliCommunication$sendLoggerMessage,
				key,
				A2(
					$elm$json$Json$Encode$encode,
					0,
					$elm$json$Json$Encode$object(fields))));
	});
var $author$project$Elm$Review$CliCommunication$timerEnd = F3(function $author$project$Elm$Review$CliCommunication$timerEnd$fn(key, metric, a) {
		return A3(
			$author$project$Elm$Review$CliCommunication$logInPipe,
			key,
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('timer-end')),
					_Utils_Tuple2(
					'metric',
					$elm$json$Json$Encode$string(metric))
				]),
			a);
	});
var $author$project$Elm$Review$CliCommunication$timerStart = F3(function $author$project$Elm$Review$CliCommunication$timerStart$fn(key, metric, a) {
		return A3(
			$author$project$Elm$Review$CliCommunication$logInPipe,
			key,
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('timer-start')),
					_Utils_Tuple2(
					'metric',
					$elm$json$Json$Encode$string(metric))
				]),
			a);
	});
var $author$project$Elm$Review$Main$reportOrFix = function (model) {
	var _v0 = model.aQ;
	switch (_v0) {
		case 0:
			return A3(
				$author$project$Elm$Review$CliCommunication$timerEnd,
				model.bp,
				'process-errors',
				$author$project$Elm$Review$Main$makeReport(
					A3($author$project$Elm$Review$CliCommunication$timerStart, model.bp, 'process-errors', model)));
		case 1:
			return A2($author$project$Elm$Review$Main$applyFixesAfterReview, model, true);
		default:
			return A2($author$project$Elm$Review$Main$applyFixesAfterReview, model, false);
	}
};
var $jfmengels$elm_review$Review$Options$Internal$ReviewOptionsInternal = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Options$withSuppressedErrors = F2(function $jfmengels$elm_review$Review$Options$withSuppressedErrors$fn(suppressions, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{hL: suppressions});
	});
var $author$project$Elm$Review$SuppressedErrors$addToReviewOptions = F2(function $author$project$Elm$Review$SuppressedErrors$addToReviewOptions$fn(_v0, reviewOptions) {
		var suppressedErrors = _v0;
		return A2($jfmengels$elm_review$Review$Options$withSuppressedErrors, suppressedErrors, reviewOptions);
	});
var $jfmengels$elm_review$Review$Options$Internal$Disabled = {$: 0};
var $jfmengels$elm_review$Review$Logger$Logger = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Logger$none = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Options$defaults = {
	gT: false,
	aQ: $jfmengels$elm_review$Review$Options$Internal$Disabled,
	g2: $elm$core$Basics$always(false),
	fW: $jfmengels$elm_review$Review$Logger$none,
	hL: $elm$core$Dict$empty
};
var $author$project$Elm$Review$RefusedErrorFixes$errorKeyUsingRecord = function (error) {
	return A2(
		$elm$core$String$join,
		'###',
		_List_fromArray(
			[
				error.f8,
				error.iu,
				error.bx,
				A2($elm$core$String$join, '\n', error.eq),
				A2(
				$elm$core$String$join,
				'-',
				A2(
					$elm$core$List$map,
					$elm$core$String$fromInt,
					_List_fromArray(
						[error.f4.dv.b1, error.f4.dv.bH, error.f4.c4.b1, error.f4.c4.bH])))
			]));
};
var $author$project$Elm$Review$RefusedErrorFixes$memberUsingRecord = F2(function $author$project$Elm$Review$RefusedErrorFixes$memberUsingRecord$fn(error, _v0) {
		var refusedErrorFixes = _v0;
		return A2(
			$elm$core$Set$member,
			$author$project$Elm$Review$RefusedErrorFixes$errorKeyUsingRecord(error),
			refusedErrorFixes);
	});
var $elm$core$Result$andThen = F2(function $elm$core$Result$andThen$fn(callback, result) {
		if (!result.$) {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $jfmengels$elm_review$Review$Error$Global = 3;
var $jfmengels$elm_review$Review$Error$ReviewError = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$collectConfigurationErrors = function (rules) {
	return A2(
		$elm$core$List$filterMap,
		function (_v0) {
			var rule = _v0;
			var _v1 = rule.aM;
			if (_v1.$ === 1) {
				var message = _v1.a.bx;
				var details = _v1.a.eq;
				return $elm$core$Maybe$Just(
					{eq: details, iu: 'CONFIGURATION ERROR', dV: $jfmengels$elm_review$Review$Error$NoFixes, bx: message, e4: false, f4: $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, f8: rule.cH, hO: 3});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		},
		rules);
};
var $jfmengels$elm_review$Review$Rule$checkForConfigurationErrors = F3(function $jfmengels$elm_review$Review$Rule$checkForConfigurationErrors$fn(project, rules, rulesToRunAcc) {
		checkForConfigurationErrors:
		while (true) {
			if (!rules.b) {
				return $elm$core$Result$Ok(rulesToRunAcc);
			} else {
				var rule = rules.a;
				var remainingRules = rules.b;
				var _v1 = rule.aM;
				if (!_v1.$) {
					var ruleProjectVisitor = _v1.a;
					var $temp$project = project,
						$temp$rules = remainingRules,
						$temp$rulesToRunAcc = A2(
						$elm$core$List$cons,
						A2(
							ruleProjectVisitor,
							project,
							{C: rule.C, i4: rule.i4, eg: rule.eI}),
						rulesToRunAcc);
					project = $temp$project;
					rules = $temp$rules;
					rulesToRunAcc = $temp$rulesToRunAcc;
					continue checkForConfigurationErrors;
				} else {
					return $elm$core$Result$Err(
						$jfmengels$elm_review$Review$Rule$collectConfigurationErrors(rules));
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$elmReviewGlobalError = function (_v0) {
	var message = _v0.bx;
	var details = _v0.eq;
	return {eq: details, iu: 'GLOBAL ERROR', dV: $jfmengels$elm_review$Review$Error$NoFixes, bx: message, e4: false, f4: $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, f8: '', hO: 3};
};
var $jfmengels$elm_review$Review$Rule$errorToReviewError = function (_v0) {
	var err = _v0;
	return err;
};
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $jfmengels$elm_review$Review$Rule$duplicateModulesGlobalError = function (duplicate) {
	var paths = $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function (s) {
				return '\n  - ' + s;
			},
			$elm$core$List$sort(duplicate.iY)));
	return $jfmengels$elm_review$Review$Rule$errorToReviewError(
		$jfmengels$elm_review$Review$Rule$elmReviewGlobalError(
			{
				eq: _List_fromArray(
					[
						'I found several modules with the name `' + (A2($elm$core$String$join, '.', duplicate.eY) + '`. Depending on how I choose to resolve this, I might give you different reports. Since this is a compiler error anyway, I require this problem to be solved. Please fix this then try running `elm-review` again.'),
						'Here are the paths to some of the files that share a module name:' + paths,
						'It is possible that you requested me to look at several projects, and that modules from each project share the same name. I don\'t recommend reviewing several projects at the same time, as I can only handle one `elm.json`. I instead suggest running `elm-review` twice, once for each project.'
					]),
				bx: 'Found several modules named `' + (A2($elm$core$String$join, '.', duplicate.eY) + '`')
			}));
};
var $jfmengels$elm_review$Review$ImportCycle$wrapInCycle = function (string) {
	return '    ┌─────┐\n    │    ' + (string + '\n    └─────┘');
};
var $jfmengels$elm_review$Ansi$noColor = '\u001B[39m';
var $jfmengels$elm_review$Ansi$applyColor = F2(function $jfmengels$elm_review$Ansi$applyColor$fn(color, string) {
		return $elm$core$String$concat(
			_List_fromArray(
				['\u001B[' + (color + 'm'), string, $jfmengels$elm_review$Ansi$noColor]));
	});
var $jfmengels$elm_review$Ansi$yellow = $jfmengels$elm_review$Ansi$applyColor('33');
var $jfmengels$elm_review$Review$ImportCycle$printCycle = function (moduleNames) {
	return $jfmengels$elm_review$Review$ImportCycle$wrapInCycle(
		A2(
			$elm$core$String$join,
			'\n    │     ↓\n    │    ',
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$join('.'),
					$jfmengels$elm_review$Ansi$yellow),
				moduleNames)));
};
var $jfmengels$elm_review$Review$ImportCycle$error = function (cycle) {
	return {
		eq: _List_fromArray(
			[
				$jfmengels$elm_review$Review$ImportCycle$printCycle(cycle),
				'Learn more about why this is disallowed and how to break cycles here:<https://elm-lang.org/0.19.1/import-cycles>'
			]),
		bx: 'Your module imports form a cycle'
	};
};
var $jfmengels$elm_review$Review$Rule$importCycleError = function (cycle) {
	return $jfmengels$elm_review$Review$Rule$errorToReviewError(
		A2(
			$jfmengels$elm_review$Review$Rule$setRuleName,
			'Incorrect project',
			$jfmengels$elm_review$Review$Rule$elmReviewGlobalError(
				$jfmengels$elm_review$Review$ImportCycle$error(cycle))));
};
var $jfmengels$elm_review$Review$Project$InvalidProjectError$DuplicateModuleNames = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Project$InvalidProjectError$ImportCycleError = function (a) {
	return {$: 2, a: a};
};
var $jfmengels$elm_review$Review$Project$InvalidProjectError$NoModulesError = {$: 3};
var $jfmengels$elm_review$Review$Project$InvalidProjectError$SomeModulesFailedToParse = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Vendor$Graph$Graph = $elm$core$Basics$identity;
var $jfmengels$elm_review$Vendor$Graph$NodeContext = F3(function $jfmengels$elm_review$Vendor$Graph$NodeContext$fn(node, incoming, outgoing) {
		return {iA: incoming, ho: node, r: outgoing};
	});
var $jfmengels$elm_review$Vendor$IntDict$Empty = {$: 0};
var $jfmengels$elm_review$Vendor$IntDict$empty = $jfmengels$elm_review$Vendor$IntDict$Empty;
var $jfmengels$elm_review$Vendor$IntDict$Inner = function (a) {
	return {$: 2, a: a};
};
var $jfmengels$elm_review$Vendor$IntDict$size = function (dict) {
	switch (dict.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		default:
			var i = dict.a;
			return i.cN;
	}
};
var $jfmengels$elm_review$Vendor$IntDict$inner = F3(function $jfmengels$elm_review$Vendor$IntDict$inner$fn(p, l, r) {
		var _v0 = _Utils_Tuple2(l, r);
		if (!_v0.a.$) {
			var _v1 = _v0.a;
			return r;
		} else {
			if (!_v0.b.$) {
				var _v2 = _v0.b;
				return l;
			} else {
				return $jfmengels$elm_review$Vendor$IntDict$Inner(
					{
						k: l,
						q: p,
						l: r,
						cN: $jfmengels$elm_review$Vendor$IntDict$size(l) + $jfmengels$elm_review$Vendor$IntDict$size(r)
					});
			}
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$lcp = F2(function $jfmengels$elm_review$Vendor$IntDict$lcp$fn(x, y) {
		var branchingBit = $jfmengels$elm_review$Vendor$IntDict$highestBitSet(x ^ y);
		var mask = $jfmengels$elm_review$Vendor$IntDict$higherBitMask(branchingBit);
		var prefixBits = x & mask;
		return {cW: branchingBit, bf: prefixBits};
	});
var $jfmengels$elm_review$Vendor$IntDict$Leaf = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Vendor$IntDict$leaf = F2(function $jfmengels$elm_review$Vendor$IntDict$leaf$fn(k, v) {
		return $jfmengels$elm_review$Vendor$IntDict$Leaf(
			{d_: k, e: v});
	});
var $jfmengels$elm_review$Vendor$IntDict$update = F3(function $jfmengels$elm_review$Vendor$IntDict$update$fn(key, alter, dict) {
		var join = F2(function join$fn(_v2, _v3) {
				var k1 = _v2.a;
				var l = _v2.b;
				var k2 = _v3.a;
				var r = _v3.b;
				var prefix = A2($jfmengels$elm_review$Vendor$IntDict$lcp, k1, k2);
				return A2($jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet, prefix, k2) ? A3($jfmengels$elm_review$Vendor$IntDict$inner, prefix, l, r) : A3($jfmengels$elm_review$Vendor$IntDict$inner, prefix, r, l);
			});
		var alteredNode = function (mv) {
			var _v1 = alter(mv);
			if (!_v1.$) {
				var v = _v1.a;
				return A2($jfmengels$elm_review$Vendor$IntDict$leaf, key, v);
			} else {
				return $jfmengels$elm_review$Vendor$IntDict$empty;
			}
		};
		switch (dict.$) {
			case 0:
				return alteredNode($elm$core$Maybe$Nothing);
			case 1:
				var l = dict.a;
				return _Utils_eq(l.d_, key) ? alteredNode(
					$elm$core$Maybe$Just(l.e)) : A2(
					join,
					_Utils_Tuple2(
						key,
						alteredNode($elm$core$Maybe$Nothing)),
					_Utils_Tuple2(l.d_, dict));
			default:
				var i = dict.a;
				return A2($jfmengels$elm_review$Vendor$IntDict$prefixMatches, i.q, key) ? (A2($jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet, i.q, key) ? A3(
					$jfmengels$elm_review$Vendor$IntDict$inner,
					i.q,
					i.k,
					A3($jfmengels$elm_review$Vendor$IntDict$update, key, alter, i.l)) : A3(
					$jfmengels$elm_review$Vendor$IntDict$inner,
					i.q,
					A3($jfmengels$elm_review$Vendor$IntDict$update, key, alter, i.k),
					i.l)) : A2(
					join,
					_Utils_Tuple2(
						key,
						alteredNode($elm$core$Maybe$Nothing)),
					_Utils_Tuple2(i.q.bf, dict));
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$insert = F3(function $jfmengels$elm_review$Vendor$IntDict$insert$fn(key, value, dict) {
		return A3(
			$jfmengels$elm_review$Vendor$IntDict$update,
			key,
			$elm$core$Basics$always(
				$elm$core$Maybe$Just(value)),
			dict);
	});
var $jfmengels$elm_review$Vendor$IntDict$member = F2(function $jfmengels$elm_review$Vendor$IntDict$member$fn(key, dict) {
		var _v0 = A2($jfmengels$elm_review$Vendor$IntDict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $jfmengels$elm_review$Vendor$Graph$fromNodesAndEdges = F2(function $jfmengels$elm_review$Vendor$Graph$fromNodesAndEdges$fn(nodes_, edges_) {
		var nodeRep = A3(
			$elm$core$List$foldl,
			function (n) {
				return A2(
					$jfmengels$elm_review$Vendor$IntDict$insert,
					n.eI,
					A3($jfmengels$elm_review$Vendor$Graph$NodeContext, n, $jfmengels$elm_review$Vendor$IntDict$empty, $jfmengels$elm_review$Vendor$IntDict$empty));
			},
			$jfmengels$elm_review$Vendor$IntDict$empty,
			nodes_);
		var addEdge = F2(function addEdge$fn(edge, rep) {
				var updateOutgoing = function (ctx) {
					return _Utils_update(
						ctx,
						{
							r: A3($jfmengels$elm_review$Vendor$IntDict$insert, edge.jj, edge.d$, ctx.r)
						});
				};
				var updateIncoming = function (ctx) {
					return _Utils_update(
						ctx,
						{
							iA: A3($jfmengels$elm_review$Vendor$IntDict$insert, edge.iw, edge.d$, ctx.iA)
						});
				};
				return A3(
					$jfmengels$elm_review$Vendor$IntDict$update,
					edge.jj,
					$elm$core$Maybe$map(updateIncoming),
					A3(
						$jfmengels$elm_review$Vendor$IntDict$update,
						edge.iw,
						$elm$core$Maybe$map(updateOutgoing),
						rep));
			});
		var addEdgeIfValid = F2(function addEdgeIfValid$fn(edge, rep) {
				return (A2($jfmengels$elm_review$Vendor$IntDict$member, edge.iw, rep) && A2($jfmengels$elm_review$Vendor$IntDict$member, edge.jj, rep)) ? A2(addEdge, edge, rep) : rep;
			});
		return A3($elm$core$List$foldl, addEdgeIfValid, nodeRep, edges_);
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$moduleName = function (_v0) {
	var module_ = _v0;
	return module_.eY;
};
var $jfmengels$elm_review$Vendor$Graph$Edge = F3(function $jfmengels$elm_review$Vendor$Graph$Edge$fn(from, to, label) {
		return {iw: from, d$: label, jj: to};
	});
var $jfmengels$elm_review$Vendor$Graph$Node = F2(function $jfmengels$elm_review$Vendor$Graph$Node$fn(id, label) {
		return {eI: id, d$: label};
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$ast = function (_v0) {
	var module_ = _v0;
	return module_.h2;
};
var $jfmengels$elm_review$Review$Project$Valid$importedModules = function (module_) {
	return A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			$stil4m$elm_syntax$Elm$Syntax$Node$value,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.eY;
				},
				$stil4m$elm_syntax$Elm$Syntax$Node$value)),
		$jfmengels$elm_review$Review$Project$ProjectModule$ast(module_).iz);
};
var $jfmengels$elm_review$Review$Project$Valid$nodesAndEdges = F3(function $jfmengels$elm_review$Review$Project$Valid$nodesAndEdges$fn(getModuleId, module_, moduleId) {
		return _Utils_Tuple2(
			A2(
				$jfmengels$elm_review$Vendor$Graph$Node,
				moduleId,
				$jfmengels$elm_review$Review$Project$ProjectModule$path(module_)),
			A2(
				$elm$core$List$map,
				function (importedModuleId) {
					return A3($jfmengels$elm_review$Vendor$Graph$Edge, importedModuleId, moduleId, 0);
				},
				A2(
					$elm$core$List$filterMap,
					getModuleId,
					$jfmengels$elm_review$Review$Project$Valid$importedModules(module_))));
	});
var $jfmengels$elm_review$Review$Project$Valid$buildModuleGraph = function (mods) {
	var moduleIds = A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v5, module_, _v6) {
				var index = _v6.a;
				var dict = _v6.b;
				return _Utils_Tuple2(
					index + 1,
					A3(
						$elm$core$Dict$insert,
						$jfmengels$elm_review$Review$Project$ProjectModule$moduleName(module_),
						index,
						dict));
			}),
		_Utils_Tuple2(0, $elm$core$Dict$empty),
		mods).b;
	var getModuleId = function (moduleName) {
		getModuleId:
		while (true) {
			var _v0 = A2($elm$core$Dict$get, moduleName, moduleIds);
			if (!_v0.$) {
				var moduleId = _v0.a;
				return moduleId;
			} else {
				var $temp$moduleName = moduleName;
				moduleName = $temp$moduleName;
				continue getModuleId;
			}
		}
	};
	var _v1 = A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v2, module_, _v3) {
				var resNodes = _v3.a;
				var resEdges = _v3.b;
				var _v4 = A3(
					$jfmengels$elm_review$Review$Project$Valid$nodesAndEdges,
					function (moduleName) {
						return A2($elm$core$Dict$get, moduleName, moduleIds);
					},
					module_,
					getModuleId(
						$jfmengels$elm_review$Review$Project$ProjectModule$moduleName(module_)));
				var moduleNode = _v4.a;
				var modulesEdges = _v4.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, moduleNode, resNodes),
					_Utils_ap(modulesEdges, resEdges));
			}),
		_Utils_Tuple2(_List_Nil, _List_Nil),
		mods);
	var nodes = _v1.a;
	var edges = _v1.b;
	return A2($jfmengels$elm_review$Vendor$Graph$fromNodesAndEdges, nodes, edges);
};
var $jfmengels$elm_review$Vendor$Graph$AcyclicGraph = F2(function $jfmengels$elm_review$Vendor$Graph$AcyclicGraph$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Vendor$IntDict$findMin = function (dict) {
	findMin:
	while (true) {
		switch (dict.$) {
			case 0:
				return $elm$core$Maybe$Nothing;
			case 1:
				var l = dict.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(l.d_, l.e));
			default:
				var i = dict.a;
				var $temp$dict = i.k;
				dict = $temp$dict;
				continue findMin;
		}
	}
};
var $jfmengels$elm_review$Vendor$IntDict$Disjunct = F2(function $jfmengels$elm_review$Vendor$IntDict$Disjunct$fn(a, b) {
		return {$: 2, a: a, b: b};
	});
var $jfmengels$elm_review$Vendor$IntDict$Left = 0;
var $jfmengels$elm_review$Vendor$IntDict$Parent = F2(function $jfmengels$elm_review$Vendor$IntDict$Parent$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $jfmengels$elm_review$Vendor$IntDict$Right = 1;
var $jfmengels$elm_review$Vendor$IntDict$SamePrefix = {$: 0};
var $jfmengels$elm_review$Vendor$IntDict$combineBits = F3(function $jfmengels$elm_review$Vendor$IntDict$combineBits$fn(a, b, mask) {
		return (a & (~mask)) | (b & mask);
	});
var $jfmengels$elm_review$Vendor$IntDict$mostSignificantBranchingBit = F2(function $jfmengels$elm_review$Vendor$IntDict$mostSignificantBranchingBit$fn(a, b) {
		return (_Utils_eq(a, $jfmengels$elm_review$Vendor$IntDict$signBit) || _Utils_eq(b, $jfmengels$elm_review$Vendor$IntDict$signBit)) ? $jfmengels$elm_review$Vendor$IntDict$signBit : A2($elm$core$Basics$max, a, b);
	});
var $jfmengels$elm_review$Vendor$IntDict$determineBranchRelation = F2(function $jfmengels$elm_review$Vendor$IntDict$determineBranchRelation$fn(l, r) {
		var rp = r.q;
		var lp = l.q;
		var mask = $jfmengels$elm_review$Vendor$IntDict$highestBitSet(
			A2($jfmengels$elm_review$Vendor$IntDict$mostSignificantBranchingBit, lp.cW, rp.cW));
		var modifiedRightPrefix = A3($jfmengels$elm_review$Vendor$IntDict$combineBits, rp.bf, ~lp.bf, mask);
		var prefix = A2($jfmengels$elm_review$Vendor$IntDict$lcp, lp.bf, modifiedRightPrefix);
		var childEdge = F2(function childEdge$fn(branchPrefix, c) {
				return A2($jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet, branchPrefix, c.q.bf) ? 1 : 0;
			});
		return _Utils_eq(lp, rp) ? $jfmengels$elm_review$Vendor$IntDict$SamePrefix : (_Utils_eq(prefix, lp) ? A2(
			$jfmengels$elm_review$Vendor$IntDict$Parent,
			0,
			A2(childEdge, l.q, r)) : (_Utils_eq(prefix, rp) ? A2(
			$jfmengels$elm_review$Vendor$IntDict$Parent,
			1,
			A2(childEdge, r.q, l)) : A2(
			$jfmengels$elm_review$Vendor$IntDict$Disjunct,
			prefix,
			A2(childEdge, prefix, l))));
	});
var $jfmengels$elm_review$Vendor$IntDict$intersect = F2(function $jfmengels$elm_review$Vendor$IntDict$intersect$fn(l, r) {
		intersect:
		while (true) {
			var _v0 = _Utils_Tuple2(l, r);
			_v0$1:
			while (true) {
				_v0$2:
				while (true) {
					switch (_v0.a.$) {
						case 0:
							var _v1 = _v0.a;
							return $jfmengels$elm_review$Vendor$IntDict$Empty;
						case 1:
							switch (_v0.b.$) {
								case 0:
									break _v0$1;
								case 1:
									break _v0$2;
								default:
									break _v0$2;
							}
						default:
							switch (_v0.b.$) {
								case 0:
									break _v0$1;
								case 1:
									var lr = _v0.b.a;
									var _v3 = A2($jfmengels$elm_review$Vendor$IntDict$get, lr.d_, l);
									if (!_v3.$) {
										var v = _v3.a;
										return A2($jfmengels$elm_review$Vendor$IntDict$leaf, lr.d_, v);
									} else {
										return $jfmengels$elm_review$Vendor$IntDict$Empty;
									}
								default:
									var il = _v0.a.a;
									var ir = _v0.b.a;
									var _v4 = A2($jfmengels$elm_review$Vendor$IntDict$determineBranchRelation, il, ir);
									switch (_v4.$) {
										case 0:
											return A3(
												$jfmengels$elm_review$Vendor$IntDict$inner,
												il.q,
												A2($jfmengels$elm_review$Vendor$IntDict$intersect, il.k, ir.k),
												A2($jfmengels$elm_review$Vendor$IntDict$intersect, il.l, ir.l));
										case 1:
											if (!_v4.a) {
												if (_v4.b === 1) {
													var _v5 = _v4.a;
													var _v6 = _v4.b;
													var $temp$l = il.l,
														$temp$r = r;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												} else {
													var _v9 = _v4.a;
													var _v10 = _v4.b;
													var $temp$l = il.k,
														$temp$r = r;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												}
											} else {
												if (_v4.b === 1) {
													var _v7 = _v4.a;
													var _v8 = _v4.b;
													var $temp$l = l,
														$temp$r = ir.l;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												} else {
													var _v11 = _v4.a;
													var _v12 = _v4.b;
													var $temp$l = l,
														$temp$r = ir.k;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												}
											}
										default:
											return $jfmengels$elm_review$Vendor$IntDict$Empty;
									}
							}
					}
				}
				var ll = _v0.a.a;
				return A2($jfmengels$elm_review$Vendor$IntDict$member, ll.d_, r) ? l : $jfmengels$elm_review$Vendor$IntDict$Empty;
			}
			var _v2 = _v0.b;
			return $jfmengels$elm_review$Vendor$IntDict$Empty;
		}
	});
var $jfmengels$elm_review$Vendor$Graph$crashHack = function (msg) {
	crashHack:
	while (true) {
		var $temp$msg = msg;
		msg = $temp$msg;
		continue crashHack;
	}
};
var $jfmengels$elm_review$Vendor$Graph$unsafeGet = F3(function $jfmengels$elm_review$Vendor$Graph$unsafeGet$fn(msg, id, graph) {
		var _v0 = A2($jfmengels$elm_review$Vendor$Graph$get, id, graph);
		if (_v0.$ === 1) {
			return $jfmengels$elm_review$Vendor$Graph$crashHack(msg);
		} else {
			var ctx = _v0.a;
			return ctx;
		}
	});
var $jfmengels$elm_review$Vendor$Graph$checkForBackEdges = F2(function $jfmengels$elm_review$Vendor$Graph$checkForBackEdges$fn(ordering, graph) {
		var success = function (_v3) {
			return A2($jfmengels$elm_review$Vendor$Graph$AcyclicGraph, graph, ordering);
		};
		var check = F2(function check$fn(id, _v2) {
				var backSet = _v2.a;
				var error = 'Graph.checkForBackEdges: `ordering` didn\'t contain `id`';
				var ctx = A3($jfmengels$elm_review$Vendor$Graph$unsafeGet, error, id, graph);
				var backSetWithId = A3($jfmengels$elm_review$Vendor$IntDict$insert, id, 0, backSet);
				var backEdges = A2($jfmengels$elm_review$Vendor$IntDict$intersect, ctx.r, backSetWithId);
				var _v0 = $jfmengels$elm_review$Vendor$IntDict$findMin(backEdges);
				if (_v0.$ === 1) {
					return $elm$core$Result$Ok(
						_Utils_Tuple2(backSetWithId, 0));
				} else {
					var _v1 = _v0.a;
					var to = _v1.a;
					var label = _v1.b;
					return $elm$core$Result$Err(
						A3($jfmengels$elm_review$Vendor$Graph$Edge, id, to, label));
				}
			});
		return A2(
			$elm$core$Result$map,
			success,
			A3(
				$elm$core$List$foldl,
				F2(
					function (id, res) {
						return A2(
							$elm$core$Result$andThen,
							check(id),
							res);
					}),
				$elm$core$Result$Ok(
					_Utils_Tuple2($jfmengels$elm_review$Vendor$IntDict$empty, 0)),
				ordering));
	});
var $jfmengels$elm_review$Vendor$IntDict$foldr = F3(function $jfmengels$elm_review$Vendor$IntDict$foldr$fn(f, acc, dict) {
		foldr:
		while (true) {
			switch (dict.$) {
				case 0:
					return acc;
				case 1:
					var l = dict.a;
					return A3(f, l.d_, l.e, acc);
				default:
					var i = dict.a;
					var $temp$f = f,
						$temp$acc = A3($jfmengels$elm_review$Vendor$IntDict$foldr, f, acc, i.l),
						$temp$dict = i.k;
					f = $temp$f;
					acc = $temp$acc;
					dict = $temp$dict;
					continue foldr;
			}
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$keys = function (dict) {
	return A3(
		$jfmengels$elm_review$Vendor$IntDict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $jfmengels$elm_review$Vendor$Graph$alongOutgoingEdges = function (ctx) {
	return $jfmengels$elm_review$Vendor$IntDict$keys(ctx.r);
};
var $jfmengels$elm_review$Vendor$Graph$applyEdgeDiff = F3(function $jfmengels$elm_review$Vendor$Graph$applyEdgeDiff$fn(nodeId, diff, graphRep) {
		var updateOutgoingEdge = F2(function updateOutgoingEdge$fn(upd, node) {
				return _Utils_update(
					node,
					{
						r: A3($jfmengels$elm_review$Vendor$IntDict$update, nodeId, upd, node.r)
					});
			});
		var updateIncomingEdge = F2(function updateIncomingEdge$fn(upd, node) {
				return _Utils_update(
					node,
					{
						iA: A3($jfmengels$elm_review$Vendor$IntDict$update, nodeId, upd, node.iA)
					});
			});
		var flippedFoldl = F3(function flippedFoldl$fn(f, dict, acc) {
				return A3($jfmengels$elm_review$Vendor$IntDict$foldl, f, acc, dict);
			});
		var edgeUpdateToMaybe = function (edgeUpdate) {
			if (!edgeUpdate.$) {
				var lbl = edgeUpdate.a;
				return $elm$core$Maybe$Just(lbl);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var updateAdjacency = F3(function updateAdjacency$fn(updateEdge, updatedId, edgeUpdate) {
				var updateLbl = updateEdge(
					$elm$core$Basics$always(
						edgeUpdateToMaybe(edgeUpdate)));
				return A2(
					$jfmengels$elm_review$Vendor$IntDict$update,
					updatedId,
					$elm$core$Maybe$map(updateLbl));
			});
		return A3(
			flippedFoldl,
			updateAdjacency(updateOutgoingEdge),
			diff.r,
			A3(
				flippedFoldl,
				updateAdjacency(updateIncomingEdge),
				diff.iA,
				graphRep));
	});
var $jfmengels$elm_review$Vendor$Graph$Insert = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Vendor$Graph$Remove = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Vendor$Graph$emptyDiff = {iA: $jfmengels$elm_review$Vendor$IntDict$empty, r: $jfmengels$elm_review$Vendor$IntDict$empty};
var $jfmengels$elm_review$Vendor$Graph$computeEdgeDiff = F2(function $jfmengels$elm_review$Vendor$Graph$computeEdgeDiff$fn(old, _new) {
		var collectUpdates = F3(function collectUpdates$fn(edgeUpdate, updatedId, label) {
				var replaceUpdate = function (old_) {
					var _v5 = _Utils_Tuple2(
						old_,
						edgeUpdate(label));
					if (!_v5.a.$) {
						if (_v5.a.a.$ === 1) {
							if (!_v5.b.$) {
								var oldLbl = _v5.a.a.a;
								var newLbl = _v5.b.a;
								return _Utils_eq(oldLbl, newLbl) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									$jfmengels$elm_review$Vendor$Graph$Insert(newLbl));
							} else {
								return $jfmengels$elm_review$Vendor$Graph$crashHack('Graph.computeEdgeDiff: Collected two removals for the same edge. This is an error in the implementation of Graph and you should file a bug report!');
							}
						} else {
							return $jfmengels$elm_review$Vendor$Graph$crashHack('Graph.computeEdgeDiff: Collected inserts before removals. This is an error in the implementation of Graph and you should file a bug report!');
						}
					} else {
						var _v6 = _v5.a;
						var eu = _v5.b;
						return $elm$core$Maybe$Just(eu);
					}
				};
				return A2($jfmengels$elm_review$Vendor$IntDict$update, updatedId, replaceUpdate);
			});
		var collect = F3(function collect$fn(edgeUpdate, adj, updates) {
				return A3(
					$jfmengels$elm_review$Vendor$IntDict$foldl,
					collectUpdates(edgeUpdate),
					updates,
					adj);
			});
		var _v0 = _Utils_Tuple2(old, _new);
		if (_v0.a.$ === 1) {
			if (_v0.b.$ === 1) {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $jfmengels$elm_review$Vendor$Graph$emptyDiff;
			} else {
				var _v4 = _v0.a;
				var ins = _v0.b.a;
				return {
					iA: A3(collect, $jfmengels$elm_review$Vendor$Graph$Insert, ins.r, $jfmengels$elm_review$Vendor$IntDict$empty),
					r: A3(collect, $jfmengels$elm_review$Vendor$Graph$Insert, ins.iA, $jfmengels$elm_review$Vendor$IntDict$empty)
				};
			}
		} else {
			if (_v0.b.$ === 1) {
				var rem = _v0.a.a;
				var _v3 = _v0.b;
				return {
					iA: A3(collect, $jfmengels$elm_review$Vendor$Graph$Remove, rem.r, $jfmengels$elm_review$Vendor$IntDict$empty),
					r: A3(collect, $jfmengels$elm_review$Vendor$Graph$Remove, rem.iA, $jfmengels$elm_review$Vendor$IntDict$empty)
				};
			} else {
				var rem = _v0.a.a;
				var ins = _v0.b.a;
				return _Utils_eq(rem, ins) ? $jfmengels$elm_review$Vendor$Graph$emptyDiff : {
					iA: A3(
						collect,
						$jfmengels$elm_review$Vendor$Graph$Insert,
						ins.r,
						A3(collect, $jfmengels$elm_review$Vendor$Graph$Remove, rem.r, $jfmengels$elm_review$Vendor$IntDict$empty)),
					r: A3(
						collect,
						$jfmengels$elm_review$Vendor$Graph$Insert,
						ins.iA,
						A3(collect, $jfmengels$elm_review$Vendor$Graph$Remove, rem.iA, $jfmengels$elm_review$Vendor$IntDict$empty))
				};
			}
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$filter = F2(function $jfmengels$elm_review$Vendor$IntDict$filter$fn(predicate, dict) {
		var add = F3(function add$fn(k, v, d) {
				return A2(predicate, k, v) ? A3($jfmengels$elm_review$Vendor$IntDict$insert, k, v, d) : d;
			});
		return A3($jfmengels$elm_review$Vendor$IntDict$foldl, add, $jfmengels$elm_review$Vendor$IntDict$empty, dict);
	});
var $jfmengels$elm_review$Vendor$Graph$update = F2(function $jfmengels$elm_review$Vendor$Graph$update$fn(nodeId, updater) {
		var wrappedUpdater = function (rep) {
			var old = A2($jfmengels$elm_review$Vendor$IntDict$get, nodeId, rep);
			var filterInvalidEdges = function (ctx) {
				return $jfmengels$elm_review$Vendor$IntDict$filter(
					F2(
						function (id, _v0) {
							return _Utils_eq(id, ctx.ho.eI) || A2($jfmengels$elm_review$Vendor$IntDict$member, id, rep);
						}));
			};
			var cleanUpEdges = function (ctx) {
				return _Utils_update(
					ctx,
					{
						iA: A2(filterInvalidEdges, ctx, ctx.iA),
						r: A2(filterInvalidEdges, ctx, ctx.r)
					});
			};
			var _new = A2(
				$elm$core$Maybe$map,
				cleanUpEdges,
				updater(old));
			var diff = A2($jfmengels$elm_review$Vendor$Graph$computeEdgeDiff, old, _new);
			return A3(
				$jfmengels$elm_review$Vendor$IntDict$update,
				nodeId,
				$elm$core$Basics$always(_new),
				A3($jfmengels$elm_review$Vendor$Graph$applyEdgeDiff, nodeId, diff, rep));
		};
		return A2(
			$elm$core$Basics$composeR,
			$jfmengels$elm_review$Vendor$Graph$unGraph,
			A2($elm$core$Basics$composeR, wrappedUpdater, $elm$core$Basics$identity));
	});
var $jfmengels$elm_review$Vendor$Graph$remove = F2(function $jfmengels$elm_review$Vendor$Graph$remove$fn(nodeId, graph) {
		return A3(
			$jfmengels$elm_review$Vendor$Graph$update,
			nodeId,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			graph);
	});
var $jfmengels$elm_review$Vendor$Graph$guidedDfs = F5(function $jfmengels$elm_review$Vendor$Graph$guidedDfs$fn(selectNeighbors, visitNode, startingSeeds, startingAcc, startingGraph) {
		var go = F3(function go$fn(seeds, acc, graph) {
				go:
				while (true) {
					if (!seeds.b) {
						return _Utils_Tuple2(acc, graph);
					} else {
						var next = seeds.a;
						var seeds1 = seeds.b;
						var _v1 = A2($jfmengels$elm_review$Vendor$Graph$get, next, graph);
						if (_v1.$ === 1) {
							var $temp$seeds = seeds1,
								$temp$acc = acc,
								$temp$graph = graph;
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						} else {
							var ctx = _v1.a;
							var _v2 = A2(visitNode, ctx, acc);
							var accAfterDiscovery = _v2.a;
							var finishNode = _v2.b;
							var _v3 = A3(
								go,
								selectNeighbors(ctx),
								accAfterDiscovery,
								A2($jfmengels$elm_review$Vendor$Graph$remove, next, graph));
							var accBeforeFinish = _v3.a;
							var graph1 = _v3.b;
							var accAfterFinish = finishNode(accBeforeFinish);
							var $temp$seeds = seeds1,
								$temp$acc = accAfterFinish,
								$temp$graph = graph1;
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						}
					}
				}
			});
		return A3(go, startingSeeds, startingAcc, startingGraph);
	});
var $jfmengels$elm_review$Vendor$Graph$nodeIds = A2($elm$core$Basics$composeR, $jfmengels$elm_review$Vendor$Graph$unGraph, $jfmengels$elm_review$Vendor$IntDict$keys);
var $jfmengels$elm_review$Vendor$Graph$dfs = F3(function $jfmengels$elm_review$Vendor$Graph$dfs$fn(visitNode, acc, graph) {
		return A5(
			$jfmengels$elm_review$Vendor$Graph$guidedDfs,
			$jfmengels$elm_review$Vendor$Graph$alongOutgoingEdges,
			visitNode,
			$jfmengels$elm_review$Vendor$Graph$nodeIds(graph),
			acc,
			graph).a;
	});
var $jfmengels$elm_review$Vendor$Graph$onFinish = F3(function $jfmengels$elm_review$Vendor$Graph$onFinish$fn(visitor, ctx, acc) {
		return _Utils_Tuple2(
			acc,
			visitor(ctx));
	});
var $jfmengels$elm_review$Vendor$Graph$checkAcyclic = function (graph) {
	var reversePostOrder = A3(
		$jfmengels$elm_review$Vendor$Graph$dfs,
		$jfmengels$elm_review$Vendor$Graph$onFinish(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.ho;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.eI;
					},
					$elm$core$List$cons))),
		_List_Nil,
		graph);
	return A2($jfmengels$elm_review$Vendor$Graph$checkForBackEdges, reversePostOrder, graph);
};
var $jfmengels$elm_review$Review$Project$Valid$duplicateModuleNames = F2(function $jfmengels$elm_review$Review$Project$Valid$duplicateModuleNames$fn(visitedModules, projectModules) {
		duplicateModuleNames:
		while (true) {
			if (!projectModules.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var projectModule = projectModules.a;
				var restOfModules = projectModules.b;
				var projectModulePath = $jfmengels$elm_review$Review$Project$ProjectModule$path(projectModule);
				var moduleName = $jfmengels$elm_review$Review$Project$ProjectModule$moduleName(projectModule);
				var _v1 = A2($elm$core$Dict$get, moduleName, visitedModules);
				if (_v1.$ === 1) {
					var $temp$visitedModules = A3($elm$core$Dict$insert, moduleName, projectModulePath, visitedModules),
						$temp$projectModules = restOfModules;
					visitedModules = $temp$visitedModules;
					projectModules = $temp$projectModules;
					continue duplicateModuleNames;
				} else {
					var path = _v1.a;
					return $elm$core$Maybe$Just(
						{
							eY: moduleName,
							iY: A2(
								$elm$core$List$cons,
								path,
								A2(
									$elm$core$List$cons,
									projectModulePath,
									A2(
										$elm$core$List$map,
										$jfmengels$elm_review$Review$Project$ProjectModule$path,
										A2(
											$elm$core$List$filter,
											function (p) {
												return _Utils_eq(
													$jfmengels$elm_review$Review$Project$ProjectModule$moduleName(p),
													moduleName);
											},
											restOfModules))))
						});
				}
			}
		}
	});
var $jfmengels$elm_review$Vendor$Graph$alongIncomingEdges = function (ctx) {
	return $jfmengels$elm_review$Vendor$IntDict$keys(ctx.iA);
};
var $jfmengels$elm_review$Vendor$Fifo$Fifo = F2(function $jfmengels$elm_review$Vendor$Fifo$Fifo$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Vendor$Fifo$empty = A2($jfmengels$elm_review$Vendor$Fifo$Fifo, _List_Nil, _List_Nil);
var $jfmengels$elm_review$Vendor$Fifo$insert = F2(function $jfmengels$elm_review$Vendor$Fifo$insert$fn(a, _v0) {
		var front = _v0.a;
		var back = _v0.b;
		return A2(
			$jfmengels$elm_review$Vendor$Fifo$Fifo,
			front,
			A2($elm$core$List$cons, a, back));
	});
var $jfmengels$elm_review$Vendor$Fifo$remove = function (fifo) {
	if (!fifo.a.b) {
		if (!fifo.b.b) {
			return _Utils_Tuple2($elm$core$Maybe$Nothing, $jfmengels$elm_review$Vendor$Fifo$empty);
		} else {
			var back = fifo.b;
			return $jfmengels$elm_review$Vendor$Fifo$remove(
				A2(
					$jfmengels$elm_review$Vendor$Fifo$Fifo,
					$elm$core$List$reverse(back),
					_List_Nil));
		}
	} else {
		var _v1 = fifo.a;
		var next = _v1.a;
		var rest = _v1.b;
		var back = fifo.b;
		return _Utils_Tuple2(
			$elm$core$Maybe$Just(next),
			A2($jfmengels$elm_review$Vendor$Fifo$Fifo, rest, back));
	}
};
var $jfmengels$elm_review$Vendor$Graph$guidedBfs = F5(function $jfmengels$elm_review$Vendor$Graph$guidedBfs$fn(selectNeighbors, visitNode, startingSeeds, startingAcc, startingGraph) {
		var enqueueMany = F4(function enqueueMany$fn(distance, parentPath, nodeIds_, queue) {
				return A3(
					$elm$core$List$foldl,
					$jfmengels$elm_review$Vendor$Fifo$insert,
					queue,
					A2(
						$elm$core$List$map,
						function (id) {
							return _Utils_Tuple3(id, parentPath, distance);
						},
						nodeIds_));
			});
		var go = F3(function go$fn(seeds, acc, graph) {
				go:
				while (true) {
					var _v0 = $jfmengels$elm_review$Vendor$Fifo$remove(seeds);
					if (_v0.a.$ === 1) {
						var _v1 = _v0.a;
						return _Utils_Tuple2(acc, graph);
					} else {
						var _v2 = _v0.a.a;
						var next = _v2.a;
						var parentPath = _v2.b;
						var distance = _v2.c;
						var seeds1 = _v0.b;
						var _v3 = A2($jfmengels$elm_review$Vendor$Graph$get, next, graph);
						if (_v3.$ === 1) {
							var $temp$seeds = seeds1,
								$temp$acc = acc,
								$temp$graph = graph;
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						} else {
							var ctx = _v3.a;
							var path = A2($elm$core$List$cons, ctx, parentPath);
							var seeds2 = A4(
								enqueueMany,
								distance + 1,
								path,
								selectNeighbors(ctx),
								seeds1);
							var accAfterVisit = A3(visitNode, path, distance, acc);
							var $temp$seeds = seeds2,
								$temp$acc = accAfterVisit,
								$temp$graph = A2($jfmengels$elm_review$Vendor$Graph$remove, next, graph);
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						}
					}
				}
			});
		return A3(
			go,
			A4(enqueueMany, 0, _List_Nil, startingSeeds, $jfmengels$elm_review$Vendor$Fifo$empty),
			startingAcc,
			startingGraph);
	});
var $jfmengels$elm_review$Review$ImportCycle$reachedTarget = F2(function $jfmengels$elm_review$Review$ImportCycle$reachedTarget$fn(targetNode, path) {
		var _v0 = $elm$core$List$head(path);
		if (!_v0.$) {
			var node = _v0.a;
			return _Utils_eq(node.ho.eI, targetNode);
		} else {
			return false;
		}
	});
var $jfmengels$elm_review$Review$ImportCycle$visitorDiscoverCycle = F4(function $jfmengels$elm_review$Review$ImportCycle$visitorDiscoverCycle$fn(targetNode, path, distance, acc) {
		if ($elm$core$List$isEmpty(acc)) {
			if (!distance) {
				var _v0 = $elm$core$List$head(path);
				if (!_v0.$) {
					var head = _v0.a;
					return A2($jfmengels$elm_review$Vendor$IntDict$member, head.ho.eI, head.iA) ? _List_fromArray(
						[head.ho]) : acc;
				} else {
					return acc;
				}
			} else {
				if (A2($jfmengels$elm_review$Review$ImportCycle$reachedTarget, targetNode, path)) {
					return A2(
						$elm$core$List$map,
						function ($) {
							return $.ho;
						},
						path);
				} else {
					return _List_Nil;
				}
			}
		} else {
			return acc;
		}
	});
var $jfmengels$elm_review$Review$ImportCycle$findSmallerCycle = F3(function $jfmengels$elm_review$Review$ImportCycle$findSmallerCycle$fn(graph, currentBest, nodesToVisit) {
		findSmallerCycle:
		while (true) {
			if (!nodesToVisit.b) {
				return currentBest;
			} else {
				var startingNode = nodesToVisit.a;
				var restOfNodes = nodesToVisit.b;
				var cycle = A5(
					$jfmengels$elm_review$Vendor$Graph$guidedBfs,
					$jfmengels$elm_review$Vendor$Graph$alongIncomingEdges,
					$jfmengels$elm_review$Review$ImportCycle$visitorDiscoverCycle(startingNode.eI),
					_List_fromArray(
						[startingNode.eI]),
					_List_Nil,
					graph).a;
				var newBest = (($elm$core$List$length(cycle) > 0) && (_Utils_cmp(
					$elm$core$List$length(cycle),
					$elm$core$List$length(currentBest)) < 0)) ? cycle : currentBest;
				if ($elm$core$List$length(newBest) === 1) {
					return newBest;
				} else {
					var $temp$graph = graph,
						$temp$currentBest = newBest,
						$temp$nodesToVisit = restOfNodes;
					graph = $temp$graph;
					currentBest = $temp$currentBest;
					nodesToVisit = $temp$nodesToVisit;
					continue findSmallerCycle;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$ImportCycle$findCycle = F2(function $jfmengels$elm_review$Review$ImportCycle$findCycle$fn(graph, edge) {
		var initialCycle = A5(
			$jfmengels$elm_review$Vendor$Graph$guidedBfs,
			$jfmengels$elm_review$Vendor$Graph$alongIncomingEdges,
			$jfmengels$elm_review$Review$ImportCycle$visitorDiscoverCycle(edge.jj),
			_List_fromArray(
				[edge.iw]),
			_List_Nil,
			graph).a;
		return A2(
			$elm$core$List$map,
			function ($) {
				return $.d$;
			},
			A3($jfmengels$elm_review$Review$ImportCycle$findSmallerCycle, graph, initialCycle, initialCycle));
	});
var $jfmengels$elm_review$Review$Project$Valid$ValidProject = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Project$Valid$computeDependencyModules = function (directDependencies_) {
	return A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v0, v, acc) {
				return A3(
					$elm$core$List$foldl,
					F2(
						function (mod, subAcc) {
							return A2(
								$elm$core$Set$insert,
								A2($elm$core$String$split, '.', mod.cH),
								subAcc);
						}),
					acc,
					$jfmengels$elm_review$Review$Project$Dependency$modules(v));
			}),
		$elm$core$Set$empty,
		directDependencies_);
};
var $jfmengels$elm_review$Review$Project$Valid$computeDirectDependencies = function (project) {
	var _v0 = A2(
		$elm$core$Maybe$map,
		function (_v1) {
			var elmJson_ = _v1.a;
			return elmJson_.o;
		},
		project.es);
	if (!_v0.$) {
		if (!_v0.a.$) {
			var depsDirect = _v0.a.a.gI;
			var testDepsDirect = _v0.a.a.hQ;
			var allDeps = A2(
				$elm$core$List$map,
				function (_v3) {
					var name = _v3.a;
					return $elm$project_metadata_utils$Elm$Package$toString(name);
				},
				_Utils_ap(depsDirect, testDepsDirect));
			return A2(
				$elm$core$Dict$filter,
				F2(
					function (depName, _v2) {
						return A2($elm$core$List$member, depName, allDeps);
					}),
				project.gF);
		} else {
			var deps = _v0.a.a.gH;
			var testDeps = _v0.a.a.hP;
			var allDeps = A2(
				$elm$core$List$map,
				function (_v5) {
					var name = _v5.a;
					return $elm$project_metadata_utils$Elm$Package$toString(name);
				},
				_Utils_ap(deps, testDeps));
			return A2(
				$elm$core$Dict$filter,
				F2(
					function (depName, _v4) {
						return A2($elm$core$List$member, depName, allDeps);
					}),
				project.gF);
		}
	} else {
		return project.gF;
	}
};
var $jfmengels$elm_review$Review$Project$Valid$computeModulesByModuleName = function (modules) {
	return A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v0, module_, acc) {
				return A3(
					$elm$core$Dict$insert,
					$jfmengels$elm_review$Review$Project$ProjectModule$moduleName(module_),
					module_,
					acc);
			}),
		$elm$core$Dict$empty,
		modules);
};
var $jfmengels$elm_review$Vendor$Graph$topologicalSort = function (_v0) {
	var graph = _v0.a;
	var ordering = _v0.b;
	var error = 'Graph.topologicalSort: Invalid `AcyclicGraph`, where the ordering contained nodes not present in the graph';
	return A2(
		$elm$core$List$map,
		function (id) {
			return A3($jfmengels$elm_review$Vendor$Graph$unsafeGet, error, id, graph);
		},
		ordering);
};
var $jfmengels$elm_review$Review$Project$Valid$fromProjectAndGraph = F3(function $jfmengels$elm_review$Review$Project$Valid$fromProjectAndGraph$fn(moduleGraph_, acyclicGraph, _v0) {
		var project = _v0;
		var directDependencies_ = $jfmengels$elm_review$Review$Project$Valid$computeDirectDependencies(project);
		return {
			gF: project.gF,
			ep: $jfmengels$elm_review$Review$Project$Valid$computeDependencyModules(directDependencies_),
			fA: directDependencies_,
			es: project.es,
			hi: moduleGraph_,
			f_: $jfmengels$elm_review$Review$Project$Valid$computeModulesByModuleName(project.aU),
			bz: project.aU,
			eb: project.h8,
			f6: project.f6,
			ei: $jfmengels$elm_review$Vendor$Graph$topologicalSort(acyclicGraph),
			gg: project.gg
		};
	});
var $jfmengels$elm_review$Review$Project$Valid$parse = function (project) {
	var p = project;
	if (!$elm$core$List$isEmpty(p.dn)) {
		return $elm$core$Result$Err(
			$jfmengels$elm_review$Review$Project$InvalidProjectError$SomeModulesFailedToParse(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.iX;
					},
					p.dn)));
	} else {
		if ($elm$core$Dict$isEmpty(p.aU)) {
			return $elm$core$Result$Err($jfmengels$elm_review$Review$Project$InvalidProjectError$NoModulesError);
		} else {
			var projectModules = $elm$core$Dict$values(p.aU);
			var _v0 = A2($jfmengels$elm_review$Review$Project$Valid$duplicateModuleNames, $elm$core$Dict$empty, projectModules);
			if (!_v0.$) {
				var duplicate = _v0.a;
				return $elm$core$Result$Err(
					$jfmengels$elm_review$Review$Project$InvalidProjectError$DuplicateModuleNames(duplicate));
			} else {
				var graph = $jfmengels$elm_review$Review$Project$Valid$buildModuleGraph(p.aU);
				var _v1 = $jfmengels$elm_review$Vendor$Graph$checkAcyclic(graph);
				if (_v1.$ === 1) {
					var edge = _v1.a;
					return $elm$core$Result$Err(
						$jfmengels$elm_review$Review$Project$InvalidProjectError$ImportCycleError(
							A2(
								$elm$core$List$filterMap,
								function (path) {
									return A2(
										$elm$core$Maybe$map,
										$jfmengels$elm_review$Review$Project$ProjectModule$moduleName,
										A2($elm$core$Dict$get, path, p.aU));
								},
								A2($jfmengels$elm_review$Review$ImportCycle$findCycle, graph, edge))));
				} else {
					var acyclicGraph = _v1.a;
					return $elm$core$Result$Ok(
						A3($jfmengels$elm_review$Review$Project$Valid$fromProjectAndGraph, graph, acyclicGraph, project));
				}
			}
		}
	}
};
var $jfmengels$elm_review$Review$Rule$parsingError = function (path) {
	return {
		eq: _List_fromArray(
			['I could not understand the content of this file, and this prevents me from analyzing it. It is highly likely that the contents of the file is not correct Elm code.', 'I need this file to be fixed before analyzing the rest of the project. If I didn\'t, I would potentially report incorrect things.', 'Hint: Try running `elm make`. The compiler should give you better hints on how to resolve the problem.']),
		iu: path,
		dV: $jfmengels$elm_review$Review$Error$NoFixes,
		bx: path + ' is not a correct Elm module',
		e4: false,
		f4: $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
		f8: 'ParsingError',
		hO: 0
	};
};
var $jfmengels$elm_review$Review$Rule$getModulesSortedByImport = function (project) {
	var _v0 = $jfmengels$elm_review$Review$Project$Valid$parse(project);
	if (_v0.$ === 1) {
		switch (_v0.a.$) {
			case 0:
				var pathsThatFailedToParse = _v0.a.a;
				return $elm$core$Result$Err(
					A2($elm$core$List$map, $jfmengels$elm_review$Review$Rule$parsingError, pathsThatFailedToParse));
			case 1:
				var duplicate = _v0.a.a;
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Rule$duplicateModulesGlobalError(duplicate)
						]));
			case 2:
				var cycle = _v0.a.a;
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Rule$importCycleError(cycle)
						]));
			default:
				var _v1 = _v0.a;
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Rule$errorToReviewError(
							A2(
								$jfmengels$elm_review$Review$Rule$setRuleName,
								'Incorrect project',
								$jfmengels$elm_review$Review$Rule$elmReviewGlobalError(
									{
										eq: _List_fromArray(
											['I need to look at some Elm modules. Maybe you have specified folders that do not exist?']),
										bx: 'This project does not contain any Elm modules'
									})))
						]));
		}
	} else {
		var result = _v0.a;
		return $elm$core$Result$Ok(result);
	}
};
var $jfmengels$elm_review$Review$Rule$getValidProjectAndRules = F2(function $jfmengels$elm_review$Review$Rule$getValidProjectAndRules$fn(project, rules) {
		return A2(
			$elm$core$Result$andThen,
			function (validProject) {
				return A2(
					$elm$core$Result$map,
					$elm$core$Tuple$pair(validProject),
					A3($jfmengels$elm_review$Review$Rule$checkForConfigurationErrors, validProject, rules, _List_Nil));
			},
			$jfmengels$elm_review$Review$Rule$getModulesSortedByImport(project));
	});
var $jfmengels$elm_review$Review$Error$doesPreventExtract = function (error_) {
	return error_.e4;
};
var $jfmengels$elm_review$Review$Rule$computeErrorsAndRulesAndExtracts = F2(function $jfmengels$elm_review$Review$Rule$computeErrorsAndRulesAndExtracts$fn(reviewOptions, ruleProjectVisitors) {
		return reviewOptions.gT ? A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, _v1) {
					var rule = _v0;
					var errors = _v1.bO;
					var rules = _v1.bi;
					var extracts = _v1.dS;
					var _v2 = A3(
						$elm$core$List$foldl,
						F2(
							function (_v3, _v4) {
								var err = _v3;
								var accErrors = _v4.a;
								var canComputeExtract_ = _v4.b;
								return _Utils_Tuple2(
									A2($elm$core$List$cons, err, accErrors),
									canComputeExtract_ && (!$jfmengels$elm_review$Review$Error$doesPreventExtract(err)));
							}),
						_Utils_Tuple2(errors, true),
						rule.eG(0));
					var newErrors = _v2.a;
					var canComputeExtract = _v2.b;
					var _v5 = canComputeExtract ? A2(rule.fx, reviewOptions, extracts) : _Utils_Tuple2(extracts, rule);
					var newExtracts = _v5.a;
					var newRule = _v5.b;
					return {
						bO: newErrors,
						dS: newExtracts,
						bi: A2(
							$elm$core$List$cons,
							newRule.em(0),
							rules)
					};
				}),
			{bO: _List_Nil, dS: $elm$core$Dict$empty, bi: _List_Nil},
			ruleProjectVisitors) : {
			bO: A2(
				$elm$core$List$concatMap,
				function (_v6) {
					var rule = _v6;
					return A2(
						$elm$core$List$map,
						$jfmengels$elm_review$Review$Rule$errorToReviewError,
						rule.eG(0));
				},
				ruleProjectVisitors),
			dS: $elm$core$Dict$empty,
			bi: A2(
				$elm$core$List$map,
				function (_v7) {
					var rule = _v7;
					return rule.em(0);
				},
				ruleProjectVisitors)
		};
	});
var $jfmengels$elm_review$Review$Fix$FixedErrors$FixedErrors = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Fix$FixedErrors$empty = {gB: 0, bO: $elm$core$Dict$empty, ff: false};
var $jfmengels$elm_review$Review$Rule$ElmJson = {$: 0};
var $jfmengels$elm_review$Review$Rule$ElmJsonKey = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$ReadmeKey = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$Modules = function (a) {
	return {$: 3, a: a};
};
var $jfmengels$elm_review$Vendor$NonEmpty$fromList = function (xs) {
	if (xs.b) {
		var h = xs.a;
		var t = xs.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(h, t));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review$Vendor$Zipper$Zipper = F3(function $jfmengels$elm_review$Vendor$Zipper$Zipper$fn(a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $jfmengels$elm_review$Vendor$Zipper$fromNonEmpty = function (_v0) {
	var h = _v0.a;
	var t = _v0.b;
	return A3($jfmengels$elm_review$Vendor$Zipper$Zipper, _List_Nil, h, t);
};
var $jfmengels$elm_review$Vendor$Zipper$fromList = A2(
	$elm$core$Basics$composeL,
	$elm$core$Maybe$map($jfmengels$elm_review$Vendor$Zipper$fromNonEmpty),
	$jfmengels$elm_review$Vendor$NonEmpty$fromList);
var $jfmengels$elm_review$Review$Project$Valid$unsafeCreateZipper = function (sortedModules) {
	unsafeCreateZipper:
	while (true) {
		var _v0 = $jfmengels$elm_review$Vendor$Zipper$fromList(sortedModules);
		if (!_v0.$) {
			var zipper = _v0.a;
			return zipper;
		} else {
			var $temp$sortedModules = sortedModules;
			sortedModules = $temp$sortedModules;
			continue unsafeCreateZipper;
		}
	}
};
var $jfmengels$elm_review$Review$Project$Valid$moduleZipper = function (_v0) {
	var project = _v0;
	return $jfmengels$elm_review$Review$Project$Valid$unsafeCreateZipper(project.ei);
};
var $jfmengels$elm_review$Review$Rule$EndAnalysis = {$: 5};
var $jfmengels$elm_review$Review$Rule$FoundFixStandard = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Rule$FoundNoFixesStandard = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$Readme = {$: 1};
var $jfmengels$elm_review$Review$Rule$FoundFix = F2(function $jfmengels$elm_review$Review$Rule$FoundFix$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Rule$FoundNoFixes = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$ShouldAbort = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$ShouldContinue = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Rule$FixedElmJson = {$: 1};
var $jfmengels$elm_review$Review$Rule$FixedElmModule = F2(function $jfmengels$elm_review$Review$Rule$FixedElmModule$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Rule$FixedReadme = {$: 2};
var $jfmengels$elm_review$Review$Rule$FoundFixHelp = F2(function $jfmengels$elm_review$Review$Rule$FoundFixHelp$fn(a, b) {
		return {$: 1, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Rule$FoundNoFixesHelp = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Fix$FixProblem$Unchanged = {$: 0};
var $jfmengels$elm_review$Review$Project$Valid$addElmJson = F2(function $jfmengels$elm_review$Review$Project$Valid$addElmJson$fn(elmJson_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				es: $elm$core$Maybe$Just(
					_Utils_Tuple2(
						elmJson_,
						$jfmengels$elm_review$Review$Cache$ContentHash$hash(elmJson_.ed)))
			});
	});
var $jfmengels$elm_review$Vendor$Zipper$current = function (_v0) {
	var f = _v0.b;
	return f;
};
var $jfmengels$elm_review$Vendor$Zipper$next = function (_v0) {
	var p = _v0.a;
	var f = _v0.b;
	var n = _v0.c;
	if (!n.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var h = n.a;
		var t = n.b;
		return $elm$core$Maybe$Just(
			A3(
				$jfmengels$elm_review$Vendor$Zipper$Zipper,
				A2($elm$core$List$cons, f, p),
				h,
				t));
	}
};
var $jfmengels$elm_review$Review$Project$Valid$advanceZipper = F3(function $jfmengels$elm_review$Review$Project$Valid$advanceZipper$fn(path, oldZipper, newZipper) {
		advanceZipper:
		while (true) {
			var current = $jfmengels$elm_review$Vendor$Zipper$current(newZipper).ho.d$;
			if (_Utils_eq(current, path) || (!_Utils_eq(
				current,
				$jfmengels$elm_review$Vendor$Zipper$current(oldZipper).ho.d$))) {
				return newZipper;
			} else {
				var _v0 = A3(
					$elm$core$Maybe$map2,
					$elm$core$Tuple$pair,
					$jfmengels$elm_review$Vendor$Zipper$next(oldZipper),
					$jfmengels$elm_review$Vendor$Zipper$next(newZipper));
				if (!_v0.$) {
					var _v1 = _v0.a;
					var old = _v1.a;
					var _new = _v1.b;
					var $temp$path = path,
						$temp$oldZipper = old,
						$temp$newZipper = _new;
					path = $temp$path;
					oldZipper = $temp$oldZipper;
					newZipper = $temp$newZipper;
					continue advanceZipper;
				} else {
					return newZipper;
				}
			}
		}
	});
var $jfmengels$elm_review$Vendor$Zipper$focusr = F2(function $jfmengels$elm_review$Vendor$Zipper$focusr$fn(fc, zipper) {
		focusr:
		while (true) {
			if (fc(
				$jfmengels$elm_review$Vendor$Zipper$current(zipper))) {
				return $elm$core$Maybe$Just(zipper);
			} else {
				var _v0 = $jfmengels$elm_review$Vendor$Zipper$next(zipper);
				if (!_v0.$) {
					var z = _v0.a;
					var $temp$fc = fc,
						$temp$zipper = z;
					fc = $temp$fc;
					zipper = $temp$zipper;
					continue focusr;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$importedModulesSet = F2(function $jfmengels$elm_review$Review$Project$Valid$importedModulesSet$fn(ast, dependencyModules) {
		return A2(
			$elm$core$Set$diff,
			A3(
				$elm$core$List$foldl,
				F2(
					function (import_, set) {
						return A2(
							$elm$core$Set$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(import_).eY),
							set);
					}),
				$elm$core$Set$empty,
				ast.iz),
			dependencyModules);
	});
var $jfmengels$elm_review$Vendor$Zipper$prev = function (_v0) {
	var p = _v0.a;
	var f = _v0.b;
	var n = _v0.c;
	if (!p.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var h = p.a;
		var t = p.b;
		return $elm$core$Maybe$Just(
			A3(
				$jfmengels$elm_review$Vendor$Zipper$Zipper,
				t,
				h,
				A2($elm$core$List$cons, f, n)));
	}
};
var $jfmengels$elm_review$Vendor$Zipper$toEndHelper = F2(function $jfmengels$elm_review$Vendor$Zipper$toEndHelper$fn(f, acc) {
		toEndHelper:
		while (true) {
			var _v0 = f(acc);
			if (!_v0.$) {
				var val = _v0.a;
				var $temp$f = f,
					$temp$acc = val;
				f = $temp$f;
				acc = $temp$acc;
				continue toEndHelper;
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review$Vendor$Zipper$start = $jfmengels$elm_review$Vendor$Zipper$toEndHelper($jfmengels$elm_review$Vendor$Zipper$prev);
var $jfmengels$elm_review$Review$Project$Valid$addParsedModule = F3(function $jfmengels$elm_review$Review$Project$Valid$addParsedModule$fn(_v0, maybeModuleZipper, _v1) {
		var path = _v0.iX;
		var source = _v0.i8;
		var ast = _v0.h2;
		var project = _v1;
		var _v2 = A2($elm$core$Dict$get, path, project.bz);
		if (!_v2.$) {
			var existingModule = _v2.a;
			var osAgnosticPath = $jfmengels$elm_review$Path$makeOSAgnostic(path);
			var module_ = $jfmengels$elm_review$Review$Project$ProjectModule$create(
				{
					h2: ast,
					g8: A2(
						$elm$core$List$any,
						function (dir) {
							return A2(
								$elm$core$String$startsWith,
								$jfmengels$elm_review$Path$makeOSAgnostic(dir),
								osAgnosticPath);
						},
						project.gg),
					iX: path,
					i8: source
				});
			var newProject = _Utils_update(
				project,
				{
					bz: A3($elm$core$Dict$insert, path, module_, project.bz)
				});
			if (_Utils_eq(
				A2(
					$jfmengels$elm_review$Review$Project$Valid$importedModulesSet,
					$jfmengels$elm_review$Review$Project$ProjectModule$ast(existingModule),
					project.ep),
				A2($jfmengels$elm_review$Review$Project$Valid$importedModulesSet, ast, project.ep))) {
				var newModuleZipper = function () {
					if (!maybeModuleZipper.$) {
						var moduleZipper_ = maybeModuleZipper.a;
						return moduleZipper_;
					} else {
						var moduleZipper_ = $jfmengels$elm_review$Review$Project$Valid$unsafeCreateZipper(newProject.ei);
						return A2(
							$elm$core$Maybe$withDefault,
							moduleZipper_,
							A2(
								$jfmengels$elm_review$Vendor$Zipper$focusr,
								function (mod) {
									return _Utils_eq(mod.ho.d$, path);
								},
								moduleZipper_));
					}
				}();
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(newProject, newModuleZipper));
			} else {
				var graph = $jfmengels$elm_review$Review$Project$Valid$buildModuleGraph(newProject.bz);
				var _v4 = $jfmengels$elm_review$Vendor$Graph$checkAcyclic(graph);
				if (_v4.$ === 1) {
					return $elm$core$Maybe$Nothing;
				} else {
					var acyclicGraph = _v4.a;
					var sortedModules = $jfmengels$elm_review$Vendor$Graph$topologicalSort(acyclicGraph);
					var moduleZipper_ = $jfmengels$elm_review$Review$Project$Valid$unsafeCreateZipper(sortedModules);
					var newModuleZipper = function () {
						if (!maybeModuleZipper.$) {
							var prevModuleZipper = maybeModuleZipper.a;
							return A3(
								$jfmengels$elm_review$Review$Project$Valid$advanceZipper,
								path,
								$jfmengels$elm_review$Vendor$Zipper$start(prevModuleZipper),
								moduleZipper_);
						} else {
							return A2(
								$elm$core$Maybe$withDefault,
								moduleZipper_,
								A2(
									$jfmengels$elm_review$Vendor$Zipper$focusr,
									function (mod) {
										return _Utils_eq(mod.ho.d$, path);
									},
									moduleZipper_));
						}
					}();
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							_Utils_update(
								newProject,
								{hi: graph, ei: sortedModules}),
							newModuleZipper));
				}
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$addReadme = F2(function $jfmengels$elm_review$Review$Project$Valid$addReadme$fn(readme_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				f6: $elm$core$Maybe$Just(
					_Utils_Tuple2(
						readme_,
						$jfmengels$elm_review$Review$Cache$ContentHash$hash(readme_.dD)))
			});
	});
var $jfmengels$elm_review$Review$Project$Valid$elmJson = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$first, project.es);
};
var $jfmengels$elm_review$Review$Fix$FixProblem$SourceCodeIsNotValid = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Fix$FixProblem$HasCollisionsInFixRanges = {$: 2};
var $jfmengels$elm_review$Unicode$dropLeft = F2(function $jfmengels$elm_review$Unicode$dropLeft$fn(n, string) {
		return $elm$core$String$fromList(
			A2(
				$elm$core$List$drop,
				n,
				$elm$core$String$toList(string)));
	});
var $jfmengels$elm_review$Review$Fix$Internal$getRowAtLine = F2(function $jfmengels$elm_review$Review$Fix$Internal$getRowAtLine$fn(lines, rowIndex) {
		var _v0 = A2(
			$elm$core$Array$get,
			rowIndex,
			$elm$core$Array$fromList(lines));
		if (!_v0.$) {
			var line = _v0.a;
			return ($elm$core$String$trim(line) !== '') ? line : '';
		} else {
			return '';
		}
	});
var $jfmengels$elm_review$Unicode$left = F2(function $jfmengels$elm_review$Unicode$left$fn(n, string) {
		return $elm$core$String$fromList(
			A2(
				$elm$core$List$take,
				n,
				$elm$core$String$toList(string)));
	});
var $jfmengels$elm_review$Review$Fix$Internal$applyReplace = F3(function $jfmengels$elm_review$Review$Fix$Internal$applyReplace$fn(range, replacement, lines) {
		var startLine = A2(
			$jfmengels$elm_review$Unicode$left,
			range.dv.bH - 1,
			A2($jfmengels$elm_review$Review$Fix$Internal$getRowAtLine, lines, range.dv.b1 - 1));
		var linesBefore = A2($elm$core$List$take, range.dv.b1 - 1, lines);
		var linesAfter = A2($elm$core$List$drop, range.c4.b1, lines);
		var endLine = A2(
			$jfmengels$elm_review$Unicode$dropLeft,
			range.c4.bH - 1,
			A2($jfmengels$elm_review$Review$Fix$Internal$getRowAtLine, lines, range.c4.b1 - 1));
		return $elm$core$List$concat(
			_List_fromArray(
				[
					linesBefore,
					$elm$core$String$lines(
					_Utils_ap(
						startLine,
						_Utils_ap(replacement, endLine))),
					linesAfter
				]));
	});
var $jfmengels$elm_review$Review$Fix$Internal$applyFix = F2(function $jfmengels$elm_review$Review$Fix$Internal$applyFix$fn(fix_, lines) {
		switch (fix_.$) {
			case 1:
				var range = fix_.a;
				var replacement = fix_.b;
				return A3($jfmengels$elm_review$Review$Fix$Internal$applyReplace, range, replacement, lines);
			case 0:
				var range = fix_.a;
				return A3($jfmengels$elm_review$Review$Fix$Internal$applyReplace, range, '', lines);
			default:
				var position = fix_.a;
				var insertion = fix_.b;
				return A3(
					$jfmengels$elm_review$Review$Fix$Internal$applyReplace,
					{c4: position, dv: position},
					insertion,
					lines);
		}
	});
var $jfmengels$elm_review$Vendor$ListExtra$anyCombination = F2(function $jfmengels$elm_review$Vendor$ListExtra$anyCombination$fn(predicate, xs) {
		anyCombination:
		while (true) {
			if (!xs.b) {
				return false;
			} else {
				var x = xs.a;
				var xs_ = xs.b;
				if (A2(
					$elm$core$List$any,
					function (y) {
						return A2(predicate, x, y);
					},
					xs_)) {
					return true;
				} else {
					var $temp$predicate = predicate,
						$temp$xs = xs_;
					predicate = $temp$predicate;
					xs = $temp$xs;
					continue anyCombination;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$comparePosition = F2(function $jfmengels$elm_review$Review$Fix$Internal$comparePosition$fn(a, b) {
		var _v0 = A2($elm$core$Basics$compare, a.b1, b.b1);
		if (_v0 === 1) {
			return A2($elm$core$Basics$compare, a.bH, b.bH);
		} else {
			var order = _v0;
			return order;
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$collide = F2(function $jfmengels$elm_review$Review$Fix$Internal$collide$fn(a, b) {
		var _v0 = A2($jfmengels$elm_review$Review$Fix$Internal$comparePosition, a.c4, b.dv);
		switch (_v0) {
			case 0:
				return false;
			case 1:
				return false;
			default:
				var _v1 = A2($jfmengels$elm_review$Review$Fix$Internal$comparePosition, b.c4, a.dv);
				switch (_v1) {
					case 0:
						return false;
					case 1:
						return false;
					default:
						return true;
				}
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$getFixRange = function (fix_) {
	switch (fix_.$) {
		case 1:
			var range = fix_.a;
			return range;
		case 0:
			var range = fix_.a;
			return range;
		default:
			var position = fix_.a;
			return {c4: position, dv: position};
	}
};
var $jfmengels$elm_review$Review$Fix$Internal$containRangeCollisions = function (fixes) {
	return A2(
		$jfmengels$elm_review$Vendor$ListExtra$anyCombination,
		$jfmengels$elm_review$Review$Fix$Internal$collide,
		A2($elm$core$List$map, $jfmengels$elm_review$Review$Fix$Internal$getFixRange, fixes));
};
var $jfmengels$elm_review$Review$Fix$Internal$positionAsInt = function (_v0) {
	var row = _v0.b1;
	var column = _v0.bH;
	return (row * 1000000) + column;
};
var $jfmengels$elm_review$Review$Fix$Internal$rangePosition = function (fix_) {
	return $jfmengels$elm_review$Review$Fix$Internal$positionAsInt(
		function () {
			switch (fix_.$) {
				case 1:
					var range = fix_.a;
					return range.dv;
				case 0:
					var range = fix_.a;
					return range.dv;
				default:
					var position = fix_.a;
					return position;
			}
		}());
};
var $jfmengels$elm_review$Review$Fix$Internal$tryToApplyFix = F2(function $jfmengels$elm_review$Review$Fix$Internal$tryToApplyFix$fn(fixes, sourceCode) {
		if ($jfmengels$elm_review$Review$Fix$Internal$containRangeCollisions(fixes)) {
			return $elm$core$Result$Err($jfmengels$elm_review$Review$Fix$FixProblem$HasCollisionsInFixRanges);
		} else {
			var resultAfterFix = A2(
				$elm$core$String$join,
				'\n',
				A3(
					$elm$core$List$foldl,
					$jfmengels$elm_review$Review$Fix$Internal$applyFix,
					$elm$core$String$lines(sourceCode),
					A2(
						$elm$core$List$sortBy,
						A2($elm$core$Basics$composeR, $jfmengels$elm_review$Review$Fix$Internal$rangePosition, $elm$core$Basics$negate),
						fixes)));
			return _Utils_eq(sourceCode, resultAfterFix) ? $elm$core$Result$Err($jfmengels$elm_review$Review$Fix$FixProblem$Unchanged) : $elm$core$Result$Ok(resultAfterFix);
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$fixElmJson = F2(function $jfmengels$elm_review$Review$Fix$Internal$fixElmJson$fn(fixes, originalSourceCode) {
		var _v0 = A2($jfmengels$elm_review$Review$Fix$Internal$tryToApplyFix, fixes, originalSourceCode);
		if (!_v0.$) {
			var resultAfterFix = _v0.a;
			var _v1 = A2($elm$json$Json$Decode$decodeString, $elm$project_metadata_utils$Elm$Project$decoder, resultAfterFix);
			if (!_v1.$) {
				var project = _v1.a;
				return $elm$core$Result$Ok(
					{o: project, ed: resultAfterFix});
			} else {
				return $elm$core$Result$Err(
					$jfmengels$elm_review$Review$Fix$FixProblem$SourceCodeIsNotValid(resultAfterFix));
			}
		} else {
			var err = _v0.a;
			return $elm$core$Result$Err(err);
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$fixModule = F2(function $jfmengels$elm_review$Review$Fix$Internal$fixModule$fn(fixes, originalSourceCode) {
		var _v0 = A2($jfmengels$elm_review$Review$Fix$Internal$tryToApplyFix, fixes, originalSourceCode);
		if (!_v0.$) {
			var fixedSourceCode = _v0.a;
			var _v1 = $jfmengels$elm_review$Review$FileParser$parse(fixedSourceCode);
			if (!_v1.$) {
				var ast = _v1.a;
				return $elm$core$Result$Ok(
					{h2: ast, i8: fixedSourceCode});
			} else {
				return $elm$core$Result$Err(
					$jfmengels$elm_review$Review$Fix$FixProblem$SourceCodeIsNotValid(fixedSourceCode));
			}
		} else {
			var err = _v0.a;
			return $elm$core$Result$Err(err);
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$fixReadme = F2(function $jfmengels$elm_review$Review$Fix$Internal$fixReadme$fn(fixes, originalSourceCode) {
		return A2($jfmengels$elm_review$Review$Fix$Internal$tryToApplyFix, fixes, originalSourceCode);
	});
var $jfmengels$elm_review$Review$Project$Valid$getModuleByPath = F2(function $jfmengels$elm_review$Review$Project$Valid$getModuleByPath$fn(path, _v0) {
		var project = _v0;
		return A2($elm$core$Dict$get, path, project.bz);
	});
var $jfmengels$elm_review$Review$Rule$isFixable = F2(function $jfmengels$elm_review$Review$Rule$isFixable$fn(predicate, err) {
		var _v0 = err.dV;
		switch (_v0.$) {
			case 1:
				var fixes = _v0.a;
				return predicate(
					{eq: err.eq, iu: err.iu, bx: err.bx, f4: err.f4, f8: err.f8}) ? $elm$core$Maybe$Just(fixes) : $elm$core$Maybe$Nothing;
			case 0:
				return $elm$core$Maybe$Nothing;
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Review$Error$FailedToApply = F2(function $jfmengels$elm_review$Review$Error$FailedToApply$fn(a, b) {
		return {$: 2, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Error$markFixesAsProblem = F2(function $jfmengels$elm_review$Review$Error$markFixesAsProblem$fn(fixProblem, error_) {
		var _v0 = error_.dV;
		if (_v0.$ === 1) {
			var fixes = _v0.a;
			return _Utils_update(
				error_,
				{
					dV: A2($jfmengels$elm_review$Review$Error$FailedToApply, fixes, fixProblem)
				});
		} else {
			return error_;
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$readme = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$first, project.f6);
};
var $jfmengels$elm_review$Review$Project$ProjectModule$source = function (_v0) {
	var module_ = _v0;
	return module_.i8;
};
var $jfmengels$elm_review$Review$Rule$findFixHelp = F5(function $jfmengels$elm_review$Review$Rule$findFixHelp$fn(project, fixablePredicate, errors, accErrors, maybeModuleZipper) {
		findFixHelp:
		while (true) {
			if (!errors.b) {
				return $jfmengels$elm_review$Review$Rule$FoundNoFixesHelp(accErrors);
			} else {
				var err = errors.a;
				var headError = err;
				var restOfErrors = errors.b;
				var _v1 = A2($jfmengels$elm_review$Review$Rule$isFixable, fixablePredicate, headError);
				if (_v1.$ === 1) {
					var $temp$project = project,
						$temp$fixablePredicate = fixablePredicate,
						$temp$errors = restOfErrors,
						$temp$accErrors = A2($elm$core$List$cons, err, accErrors),
						$temp$maybeModuleZipper = maybeModuleZipper;
					project = $temp$project;
					fixablePredicate = $temp$fixablePredicate;
					errors = $temp$errors;
					accErrors = $temp$accErrors;
					maybeModuleZipper = $temp$maybeModuleZipper;
					continue findFixHelp;
				} else {
					var fixes = _v1.a;
					var _v2 = headError.hO;
					switch (_v2) {
						case 0:
							var _v3 = A2($jfmengels$elm_review$Review$Project$Valid$getModuleByPath, headError.iu, project);
							if (_v3.$ === 1) {
								var $temp$project = project,
									$temp$fixablePredicate = fixablePredicate,
									$temp$errors = restOfErrors,
									$temp$accErrors = A2($elm$core$List$cons, err, accErrors),
									$temp$maybeModuleZipper = maybeModuleZipper;
								project = $temp$project;
								fixablePredicate = $temp$fixablePredicate;
								errors = $temp$errors;
								accErrors = $temp$accErrors;
								maybeModuleZipper = $temp$maybeModuleZipper;
								continue findFixHelp;
							} else {
								var file = _v3.a;
								var _v4 = A2(
									$elm$core$Result$andThen,
									function (fixResult) {
										return A2(
											$elm$core$Result$fromMaybe,
											$jfmengels$elm_review$Review$Fix$FixProblem$Unchanged,
											A2(
												$elm$core$Maybe$map,
												function (_v5) {
													var newProject = _v5.a;
													var newModuleZipper = _v5.b;
													return {
														bs: $jfmengels$elm_review$Review$Rule$errorToReviewError(headError),
														dU: A2($jfmengels$elm_review$Review$Rule$FixedElmModule, fixResult, newModuleZipper),
														o: newProject
													};
												},
												A3(
													$jfmengels$elm_review$Review$Project$Valid$addParsedModule,
													{h2: fixResult.h2, iX: headError.iu, i8: fixResult.i8},
													maybeModuleZipper,
													project)));
									},
									A2(
										$jfmengels$elm_review$Review$Fix$Internal$fixModule,
										fixes,
										$jfmengels$elm_review$Review$Project$ProjectModule$source(file)));
								if (_v4.$ === 1) {
									var fixProblem = _v4.a;
									var $temp$project = project,
										$temp$fixablePredicate = fixablePredicate,
										$temp$errors = restOfErrors,
										$temp$accErrors = A2(
										$elm$core$List$cons,
										A2($jfmengels$elm_review$Review$Error$markFixesAsProblem, fixProblem, headError),
										accErrors),
										$temp$maybeModuleZipper = maybeModuleZipper;
									project = $temp$project;
									fixablePredicate = $temp$fixablePredicate;
									errors = $temp$errors;
									accErrors = $temp$accErrors;
									maybeModuleZipper = $temp$maybeModuleZipper;
									continue findFixHelp;
								} else {
									var fixResult = _v4.a;
									return A2(
										$jfmengels$elm_review$Review$Rule$FoundFixHelp,
										_Utils_ap(errors, accErrors),
										fixResult);
								}
							}
						case 1:
							var _v6 = $jfmengels$elm_review$Review$Project$Valid$elmJson(project);
							if (_v6.$ === 1) {
								var $temp$project = project,
									$temp$fixablePredicate = fixablePredicate,
									$temp$errors = restOfErrors,
									$temp$accErrors = A2($elm$core$List$cons, err, accErrors),
									$temp$maybeModuleZipper = maybeModuleZipper;
								project = $temp$project;
								fixablePredicate = $temp$fixablePredicate;
								errors = $temp$errors;
								accErrors = $temp$accErrors;
								maybeModuleZipper = $temp$maybeModuleZipper;
								continue findFixHelp;
							} else {
								var elmJson = _v6.a;
								var _v7 = A2(
									$elm$core$Result$map,
									function (fixResult) {
										return A2(
											$jfmengels$elm_review$Review$Project$Valid$addElmJson,
											{iX: elmJson.iX, o: fixResult.o, ed: fixResult.ed},
											project);
									},
									A2($jfmengels$elm_review$Review$Fix$Internal$fixElmJson, fixes, elmJson.ed));
								if (_v7.$ === 1) {
									var fixProblem = _v7.a;
									var $temp$project = project,
										$temp$fixablePredicate = fixablePredicate,
										$temp$errors = restOfErrors,
										$temp$accErrors = A2(
										$elm$core$List$cons,
										A2($jfmengels$elm_review$Review$Error$markFixesAsProblem, fixProblem, headError),
										accErrors),
										$temp$maybeModuleZipper = maybeModuleZipper;
									project = $temp$project;
									fixablePredicate = $temp$fixablePredicate;
									errors = $temp$errors;
									accErrors = $temp$accErrors;
									maybeModuleZipper = $temp$maybeModuleZipper;
									continue findFixHelp;
								} else {
									var newProject = _v7.a;
									return A2(
										$jfmengels$elm_review$Review$Rule$FoundFixHelp,
										_Utils_ap(errors, accErrors),
										{
											bs: $jfmengels$elm_review$Review$Rule$errorToReviewError(headError),
											dU: $jfmengels$elm_review$Review$Rule$FixedElmJson,
											o: newProject
										});
								}
							}
						case 2:
							var _v8 = $jfmengels$elm_review$Review$Project$Valid$readme(project);
							if (_v8.$ === 1) {
								var $temp$project = project,
									$temp$fixablePredicate = fixablePredicate,
									$temp$errors = restOfErrors,
									$temp$accErrors = A2($elm$core$List$cons, err, accErrors),
									$temp$maybeModuleZipper = maybeModuleZipper;
								project = $temp$project;
								fixablePredicate = $temp$fixablePredicate;
								errors = $temp$errors;
								accErrors = $temp$accErrors;
								maybeModuleZipper = $temp$maybeModuleZipper;
								continue findFixHelp;
							} else {
								var readme = _v8.a;
								var _v9 = A2($jfmengels$elm_review$Review$Fix$Internal$fixReadme, fixes, readme.dD);
								if (_v9.$ === 1) {
									var fixProblem = _v9.a;
									var $temp$project = project,
										$temp$fixablePredicate = fixablePredicate,
										$temp$errors = restOfErrors,
										$temp$accErrors = A2(
										$elm$core$List$cons,
										A2($jfmengels$elm_review$Review$Error$markFixesAsProblem, fixProblem, headError),
										accErrors),
										$temp$maybeModuleZipper = maybeModuleZipper;
									project = $temp$project;
									fixablePredicate = $temp$fixablePredicate;
									errors = $temp$errors;
									accErrors = $temp$accErrors;
									maybeModuleZipper = $temp$maybeModuleZipper;
									continue findFixHelp;
								} else {
									var content = _v9.a;
									return A2(
										$jfmengels$elm_review$Review$Rule$FoundFixHelp,
										_Utils_ap(errors, accErrors),
										{
											bs: $jfmengels$elm_review$Review$Rule$errorToReviewError(headError),
											dU: $jfmengels$elm_review$Review$Rule$FixedReadme,
											o: A2(
												$jfmengels$elm_review$Review$Project$Valid$addReadme,
												{dD: content, iX: readme.iX},
												project)
										});
								}
							}
						default:
							var $temp$project = project,
								$temp$fixablePredicate = fixablePredicate,
								$temp$errors = restOfErrors,
								$temp$accErrors = A2($elm$core$List$cons, err, accErrors),
								$temp$maybeModuleZipper = maybeModuleZipper;
							project = $temp$project;
							fixablePredicate = $temp$fixablePredicate;
							errors = $temp$errors;
							accErrors = $temp$accErrors;
							maybeModuleZipper = $temp$maybeModuleZipper;
							continue findFixHelp;
					}
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Fix$FixedErrors$count = function (_v0) {
	var fixedErrors = _v0;
	return fixedErrors.gB;
};
var $jfmengels$elm_review$Review$Rule$fixedError = F2(function $jfmengels$elm_review$Review$Rule$fixedError$fn(fixedErrors, data) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('apply-fix')),
				_Utils_Tuple2(
				'ruleName',
				$elm$json$Json$Encode$string(data.f8)),
				_Utils_Tuple2(
				'filePath',
				$elm$json$Json$Encode$string(data.iu)),
				_Utils_Tuple2(
				'count',
				$elm$json$Json$Encode$int(
					$jfmengels$elm_review$Review$Fix$FixedErrors$count(fixedErrors)))
			]);
	});
var $jfmengels$elm_review$Review$Fix$FixedErrors$insert = F2(function $jfmengels$elm_review$Review$Fix$FixedErrors$insert$fn(error, _v0) {
		var filePath = error.iu;
		var target = error.hO;
		var fixedErrors = _v0;
		return {
			gB: fixedErrors.gB + 1,
			bO: A3(
				$elm$core$Dict$update,
				filePath,
				function (errors) {
					return $elm$core$Maybe$Just(
						A2(
							$elm$core$List$cons,
							error,
							A2($elm$core$Maybe$withDefault, _List_Nil, errors)));
				},
				fixedErrors.bO),
			ff: fixedErrors.ff || (target === 1)
		};
	});
var $jfmengels$elm_review$Review$Logger$log = F3(function $jfmengels$elm_review$Review$Logger$log$fn(_v0, message, data) {
		var logFn = _v0;
		return A2(
			$elm$core$Basics$always,
			data,
			logFn(message));
	});
var $jfmengels$elm_review$Review$Options$Internal$shouldApplyFix = function (reviewOptionsData) {
	var _v0 = reviewOptionsData.aQ;
	if (_v0.$ === 1) {
		return $elm$core$Dict$isEmpty(reviewOptionsData.hL) ? $elm$core$Maybe$Just(
			function (err) {
				return !reviewOptionsData.g2(err);
			}) : $elm$core$Maybe$Just(
			function (err) {
				return (!A2(
					$elm$core$Dict$member,
					_Utils_Tuple2(err.f8, err.iu),
					reviewOptionsData.hL)) && (!reviewOptionsData.g2(err));
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review$Review$Fix$FixedErrors$shouldAbort = function (_v0) {
	var fixedErrors = _v0;
	return fixedErrors.ff;
};
var $jfmengels$elm_review$Review$Options$Internal$shouldContinueLookingForFixes = F2(function $jfmengels$elm_review$Review$Options$Internal$shouldContinueLookingForFixes$fn(reviewOptionsData, fixedErrors) {
		var _v0 = reviewOptionsData.aQ;
		if (_v0.$ === 1) {
			if (!_v0.a.$) {
				var fixLimit = _v0.a.a;
				return (!$jfmengels$elm_review$Review$Fix$FixedErrors$shouldAbort(fixedErrors)) && (_Utils_cmp(
					fixLimit,
					$jfmengels$elm_review$Review$Fix$FixedErrors$count(fixedErrors)) > 0);
			} else {
				var _v1 = _v0.a;
				return !$jfmengels$elm_review$Review$Fix$FixedErrors$shouldAbort(fixedErrors);
			}
		} else {
			return false;
		}
	});
var $jfmengels$elm_review$Review$Rule$findFix = F6(function $jfmengels$elm_review$Review$Rule$findFix$fn(reviewOptions, project, updateErrors, errors, fixedErrors, maybeModuleZipper) {
		var _v0 = $jfmengels$elm_review$Review$Options$Internal$shouldApplyFix(reviewOptions);
		if (_v0.$ === 1) {
			return $jfmengels$elm_review$Review$Rule$FoundNoFixes(
				updateErrors(errors));
		} else {
			var fixablePredicate = _v0.a;
			var _v1 = A5($jfmengels$elm_review$Review$Rule$findFixHelp, project, fixablePredicate, errors, _List_Nil, maybeModuleZipper);
			if (!_v1.$) {
				var errorsWithFailedFixes = _v1.a;
				return $jfmengels$elm_review$Review$Rule$FoundNoFixes(
					updateErrors(errorsWithFailedFixes));
			} else {
				var errorsWithFailedFixes = _v1.a;
				var fixResult = _v1.b;
				var newFixedErrors = A2($jfmengels$elm_review$Review$Fix$FixedErrors$insert, fixResult.bs, fixedErrors);
				var nextStep = A2($jfmengels$elm_review$Review$Options$Internal$shouldContinueLookingForFixes, reviewOptions, newFixedErrors) ? $jfmengels$elm_review$Review$Rule$ShouldContinue(newFixedErrors) : $jfmengels$elm_review$Review$Rule$ShouldAbort(newFixedErrors);
				return A3(
					$jfmengels$elm_review$Review$Logger$log,
					reviewOptions.fW,
					A2(
						$jfmengels$elm_review$Review$Rule$fixedError,
						newFixedErrors,
						{
							iu: $jfmengels$elm_review$Review$Rule$errorFilePath(fixResult.bs),
							f8: $jfmengels$elm_review$Review$Rule$errorRuleName(fixResult.bs)
						}),
					A2(
						$jfmengels$elm_review$Review$Rule$FoundFix,
						updateErrors(errorsWithFailedFixes),
						_Utils_Tuple2(nextStep, fixResult)));
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$standardFindFix = F5(function $jfmengels$elm_review$Review$Rule$standardFindFix$fn(reviewOptions, project, fixedErrors, updateErrors, errors) {
		var _v0 = A6($jfmengels$elm_review$Review$Rule$findFix, reviewOptions, project, updateErrors, errors, fixedErrors, $elm$core$Maybe$Nothing);
		if (!_v0.$) {
			var newRule = _v0.a;
			return $jfmengels$elm_review$Review$Rule$FoundNoFixesStandard(newRule);
		} else {
			var newRule = _v0.a;
			var _v1 = _v0.b;
			var postFixStatus = _v1.a;
			var fixResult = _v1.b;
			var _v2 = function () {
				if (!postFixStatus.$) {
					var newFixedErrors_ = postFixStatus.a;
					return _Utils_Tuple2(newFixedErrors_, $jfmengels$elm_review$Review$Rule$EndAnalysis);
				} else {
					var newFixedErrors_ = postFixStatus.a;
					var _v4 = fixResult.dU;
					switch (_v4.$) {
						case 1:
							return _Utils_Tuple2(newFixedErrors_, $jfmengels$elm_review$Review$Rule$ElmJson);
						case 2:
							return _Utils_Tuple2(newFixedErrors_, $jfmengels$elm_review$Review$Rule$Readme);
						default:
							var zipper = _v4.b;
							return _Utils_Tuple2(
								newFixedErrors_,
								$jfmengels$elm_review$Review$Rule$Modules(zipper));
					}
				}
			}();
			var newFixedErrors = _v2.a;
			var step = _v2.b;
			return $jfmengels$elm_review$Review$Rule$FoundFixStandard(
				{d7: newFixedErrors, d8: fixResult.o, d9: newRule, L: step});
		}
	});
var $jfmengels$elm_review$Review$Rule$computeDependencies = F6(function $jfmengels$elm_review$Review$Rule$computeDependencies$fn(reviewOptions, project, fixedErrors, dependenciesData, remainingRules, accRules) {
		computeDependencies:
		while (true) {
			if (!remainingRules.b) {
				return {
					iv: fixedErrors,
					o: project,
					j: accRules,
					L: $jfmengels$elm_review$Review$Rule$Modules(
						$jfmengels$elm_review$Review$Project$Valid$moduleZipper(project))
				};
			} else {
				var untouched = remainingRules.a;
				var rule = untouched;
				var rest = remainingRules.b;
				var _v1 = rule.V;
				if (!_v1.$) {
					var visitor = _v1.a;
					var _v2 = A2(visitor, project, dependenciesData);
					var errors = _v2.a;
					var updatedRule = _v2.b;
					var _v3 = A5($jfmengels$elm_review$Review$Rule$standardFindFix, reviewOptions, project, fixedErrors, updatedRule.gb, errors);
					if (_v3.$ === 1) {
						var newProject = _v3.a.d8;
						var newRule = _v3.a.d9;
						var newFixedErrors = _v3.a.d7;
						var step = _v3.a.L;
						return {
							iv: newFixedErrors,
							o: newProject,
							j: A2(
								$elm$core$List$cons,
								newRule,
								_Utils_ap(rest, accRules)),
							L: step
						};
					} else {
						var newRule = _v3.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$project = project,
							$temp$fixedErrors = fixedErrors,
							$temp$dependenciesData = dependenciesData,
							$temp$remainingRules = rest,
							$temp$accRules = A2($elm$core$List$cons, newRule, accRules);
						reviewOptions = $temp$reviewOptions;
						project = $temp$project;
						fixedErrors = $temp$fixedErrors;
						dependenciesData = $temp$dependenciesData;
						remainingRules = $temp$remainingRules;
						accRules = $temp$accRules;
						continue computeDependencies;
					}
				} else {
					var $temp$reviewOptions = reviewOptions,
						$temp$project = project,
						$temp$fixedErrors = fixedErrors,
						$temp$dependenciesData = dependenciesData,
						$temp$remainingRules = rest,
						$temp$accRules = A2($elm$core$List$cons, untouched, accRules);
					reviewOptions = $temp$reviewOptions;
					project = $temp$project;
					fixedErrors = $temp$fixedErrors;
					dependenciesData = $temp$dependenciesData;
					remainingRules = $temp$remainingRules;
					accRules = $temp$accRules;
					continue computeDependencies;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$computeElmJson = F6(function $jfmengels$elm_review$Review$Rule$computeElmJson$fn(reviewOptions, project, fixedErrors, elmJsonData, remainingRules, accRules) {
		computeElmJson:
		while (true) {
			if (!remainingRules.b) {
				return {iv: fixedErrors, o: project, j: accRules, L: $jfmengels$elm_review$Review$Rule$Readme};
			} else {
				var untouched = remainingRules.a;
				var rule = untouched;
				var rest = remainingRules.b;
				var _v1 = rule.X;
				if (!_v1.$) {
					var visitor = _v1.a;
					var _v2 = A2(visitor, project, elmJsonData);
					var errors = _v2.a;
					var updatedRule = _v2.b;
					var _v3 = A5($jfmengels$elm_review$Review$Rule$standardFindFix, reviewOptions, project, fixedErrors, updatedRule.gc, errors);
					if (_v3.$ === 1) {
						var newProject = _v3.a.d8;
						var newRule = _v3.a.d9;
						var newFixedErrors = _v3.a.d7;
						var step = _v3.a.L;
						return {
							iv: newFixedErrors,
							o: newProject,
							j: A2(
								$elm$core$List$cons,
								newRule,
								_Utils_ap(rest, accRules)),
							L: step
						};
					} else {
						var newRule = _v3.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$project = project,
							$temp$fixedErrors = fixedErrors,
							$temp$elmJsonData = elmJsonData,
							$temp$remainingRules = rest,
							$temp$accRules = A2($elm$core$List$cons, newRule, accRules);
						reviewOptions = $temp$reviewOptions;
						project = $temp$project;
						fixedErrors = $temp$fixedErrors;
						elmJsonData = $temp$elmJsonData;
						remainingRules = $temp$remainingRules;
						accRules = $temp$accRules;
						continue computeElmJson;
					}
				} else {
					var $temp$reviewOptions = reviewOptions,
						$temp$project = project,
						$temp$fixedErrors = fixedErrors,
						$temp$elmJsonData = elmJsonData,
						$temp$remainingRules = rest,
						$temp$accRules = A2($elm$core$List$cons, untouched, accRules);
					reviewOptions = $temp$reviewOptions;
					project = $temp$project;
					fixedErrors = $temp$fixedErrors;
					elmJsonData = $temp$elmJsonData;
					remainingRules = $temp$remainingRules;
					accRules = $temp$accRules;
					continue computeElmJson;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$computeFinalProjectEvaluation = F5(function $jfmengels$elm_review$Review$Rule$computeFinalProjectEvaluation$fn(reviewOptions, project, fixedErrors, remainingRules, accRules) {
		computeFinalProjectEvaluation:
		while (true) {
			if (!remainingRules.b) {
				return {iv: fixedErrors, o: project, j: accRules, L: $jfmengels$elm_review$Review$Rule$EndAnalysis};
			} else {
				var untouched = remainingRules.a;
				var rule = untouched;
				var rest = remainingRules.b;
				var _v1 = rule.fJ;
				if (!_v1.$) {
					var visitor = _v1.a;
					var _v2 = visitor(0);
					var errors = _v2.a;
					var updatedRule = _v2.b;
					var _v3 = A5($jfmengels$elm_review$Review$Rule$standardFindFix, reviewOptions, project, fixedErrors, updatedRule.gd, errors);
					if (_v3.$ === 1) {
						var newProject = _v3.a.d8;
						var newRule = _v3.a.d9;
						var newFixedErrors = _v3.a.d7;
						var step = _v3.a.L;
						return {
							iv: newFixedErrors,
							o: newProject,
							j: A2(
								$elm$core$List$cons,
								newRule,
								_Utils_ap(rest, accRules)),
							L: step
						};
					} else {
						var newRule = _v3.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$project = project,
							$temp$fixedErrors = fixedErrors,
							$temp$remainingRules = rest,
							$temp$accRules = A2($elm$core$List$cons, newRule, accRules);
						reviewOptions = $temp$reviewOptions;
						project = $temp$project;
						fixedErrors = $temp$fixedErrors;
						remainingRules = $temp$remainingRules;
						accRules = $temp$accRules;
						continue computeFinalProjectEvaluation;
					}
				} else {
					var $temp$reviewOptions = reviewOptions,
						$temp$project = project,
						$temp$fixedErrors = fixedErrors,
						$temp$remainingRules = rest,
						$temp$accRules = A2($elm$core$List$cons, untouched, accRules);
					reviewOptions = $temp$reviewOptions;
					project = $temp$project;
					fixedErrors = $temp$fixedErrors;
					remainingRules = $temp$remainingRules;
					accRules = $temp$accRules;
					continue computeFinalProjectEvaluation;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$FinalProjectEvaluation = {$: 4};
var $jfmengels$elm_review$Review$Rule$ModuleVisitStep = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add$fn(range, moduleName, _v0) {
		var currentModuleName = _v0.a;
		var moduleNameLookupTable = _v0.b;
		return A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$ModuleNameLookupTable,
			currentModuleName,
			A3(
				$elm$core$Dict$insert,
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$toRangeLike(range),
				moduleName,
				moduleNameLookupTable));
	});
var $jfmengels$elm_review$Vendor$ListExtra$find = F2(function $jfmengels$elm_review$Vendor$ListExtra$find$fn(predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $jfmengels$elm_review$NonEmpty$any = F2(function $jfmengels$elm_review$NonEmpty$any$fn(f, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return f(x) || A2($elm$core$List$any, f, xs);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isInScope = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isInScope$fn(name, scopes) {
		return A2(
			$jfmengels$elm_review$NonEmpty$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.cI;
				},
				$elm$core$Dict$member(name)),
			scopes);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isValueDeclaredInModule = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isValueDeclaredInModule$fn(valueName, module_) {
		return A2(
			$elm$core$List$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.cH;
				},
				$elm$core$Basics$eq(valueName)),
			module_.hX) || (A2(
			$elm$core$List$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.cH;
				},
				$elm$core$Basics$eq(valueName)),
			module_.gp) || A2(
			$elm$core$List$any,
			function (union) {
				return A2(
					$elm$core$List$any,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Tuple$first,
						$elm$core$Basics$eq(valueName)),
					union.ji);
			},
			module_.hW));
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue$fn(context, valueName, moduleName) {
		if (!moduleName.b) {
			return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isInScope, valueName, context.z) ? _List_Nil : A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Dict$get, valueName, context.ct));
		} else {
			if (!moduleName.b.b) {
				var moduleNameOrAlias = moduleName.a;
				var _v1 = A2($elm$core$Dict$get, moduleNameOrAlias, context.bQ);
				if (!_v1.$) {
					if (_v1.a.b && (!_v1.a.b.b)) {
						var _v2 = _v1.a;
						var aliasedModuleName = _v2.a;
						return aliasedModuleName;
					} else {
						var aliases = _v1.a;
						var _v3 = A2(
							$jfmengels$elm_review$Vendor$ListExtra$find,
							function (aliasedModuleName) {
								var _v4 = A2($elm$core$Dict$get, aliasedModuleName, context.aU);
								if (!_v4.$) {
									var module_ = _v4.a;
									return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isValueDeclaredInModule, valueName, module_);
								} else {
									return false;
								}
							},
							aliases);
						if (!_v3.$) {
							var aliasedModuleName = _v3.a;
							return aliasedModuleName;
						} else {
							return A2(
								$elm$core$Maybe$withDefault,
								moduleName,
								$elm$core$List$head(aliases));
						}
					}
				} else {
					return moduleName;
				}
			} else {
				return moduleName;
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern$fn(context, patternsToVisit, acc) {
		collectModuleNamesFromPattern:
		while (true) {
			if (patternsToVisit.b) {
				var pattern = patternsToVisit.a;
				var restOfPatternsToVisit = patternsToVisit.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(pattern);
				switch (_v1.$) {
					case 12:
						var moduleName = _v1.a.eY;
						var name = _v1.a.cH;
						var subPatterns = _v1.b;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(pattern),
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, name, moduleName),
							acc);
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 9:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$context = context,
							$temp$patternsToVisit = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfPatternsToVisit)),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 7:
						var subPatterns = _v1.a;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 14:
						var subPattern = _v1.a;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$cons, subPattern, restOfPatternsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 13:
						var subPattern = _v1.a;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$cons, subPattern, restOfPatternsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 10:
						var subPatterns = _v1.a;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					default:
						var $temp$context = context,
							$temp$patternsToVisit = restOfPatternsToVisit,
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
				}
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isTypeDeclaredInModule = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isTypeDeclaredInModule$fn(typeName, module_) {
		return A2(
			$elm$core$List$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.cH;
				},
				$elm$core$Basics$eq(typeName)),
			module_.gp) || A2(
			$elm$core$List$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.cH;
				},
				$elm$core$Basics$eq(typeName)),
			module_.hW);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$joinModuleName = function (name) {
	return A2($elm$core$String$join, '.', name);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForType = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForType$fn(context, typeName, moduleName) {
		if (!moduleName.b) {
			return A2($elm$core$Set$member, typeName, context.cF) ? _List_Nil : A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Dict$get, typeName, context.cv));
		} else {
			if (!moduleName.b.b) {
				var _v1 = A2(
					$elm$core$Dict$get,
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$joinModuleName(moduleName),
					context.bQ);
				if (!_v1.$) {
					if (_v1.a.b && (!_v1.a.b.b)) {
						var _v2 = _v1.a;
						var aliasedModuleName = _v2.a;
						return aliasedModuleName;
					} else {
						var aliases = _v1.a;
						var _v3 = A2(
							$jfmengels$elm_review$Vendor$ListExtra$find,
							function (aliasedModuleName) {
								var _v4 = A2($elm$core$Dict$get, aliasedModuleName, context.aU);
								if (!_v4.$) {
									var module_ = _v4.a;
									return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isTypeDeclaredInModule, typeName, module_);
								} else {
									return false;
								}
							},
							aliases);
						if (!_v3.$) {
							var aliasedModuleName = _v3.a;
							return aliasedModuleName;
						} else {
							return A2(
								$elm$core$Maybe$withDefault,
								moduleName,
								$elm$core$List$head(aliases));
						}
					}
				} else {
					return moduleName;
				}
			} else {
				return moduleName;
			}
		}
	});
var $jfmengels$elm_review$Vendor$ListExtra$orderIndependentMapAppend = F3(function $jfmengels$elm_review$Vendor$ListExtra$orderIndependentMapAppend$fn(fn, left, right) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (element, acc) {
					return A2(
						$elm$core$List$cons,
						fn(element),
						acc);
				}),
			right,
			left);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation$fn(context, typeAnnotationsToVisit, acc) {
		collectModuleNamesFromTypeAnnotation:
		while (true) {
			if (typeAnnotationsToVisit.b) {
				var typeAnnotationNode = typeAnnotationsToVisit.a;
				var remainingTypeAnnotationsToVisit = typeAnnotationsToVisit.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(typeAnnotationNode);
				switch (_v1.$) {
					case 1:
						var _v2 = _v1.a;
						var range = _v2.a;
						var _v3 = _v2.b;
						var moduleName = _v3.a;
						var name = _v3.b;
						var args = _v1.b;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A2($elm$core$List$append, args, remainingTypeAnnotationsToVisit),
							$temp$acc = A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							range,
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForType, context, name, moduleName),
							acc);
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					case 3:
						var nodes = _v1.a;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A2($elm$core$List$append, nodes, remainingTypeAnnotationsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					case 4:
						var fields = _v1.a;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A3(
							$jfmengels$elm_review$Vendor$ListExtra$orderIndependentMapAppend,
							function (field) {
								return $stil4m$elm_syntax$Elm$Syntax$Node$value(field).b;
							},
							fields,
							remainingTypeAnnotationsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					case 5:
						var fields = _v1.b;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A3(
							$jfmengels$elm_review$Vendor$ListExtra$orderIndependentMapAppend,
							function (field) {
								return $stil4m$elm_syntax$Elm$Syntax$Node$value(field).b;
							},
							$stil4m$elm_syntax$Elm$Syntax$Node$value(fields),
							remainingTypeAnnotationsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					case 6:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, remainingTypeAnnotationsToVisit)),
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					default:
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = remainingTypeAnnotationsToVisit,
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
				}
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review$NonEmpty$Nonempty = F2(function $jfmengels$elm_review$NonEmpty$Nonempty$fn(a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$NonEmpty$cons = F2(function $jfmengels$elm_review$NonEmpty$cons$fn(y, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$jfmengels$elm_review$NonEmpty$Nonempty,
			y,
			A2($elm$core$List$cons, x, xs));
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope = {
	en: A2(
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
		$stil4m$elm_syntax$Elm$Syntax$Expression$Literal('root')),
	ia: _List_Nil,
	cI: $elm$core$Dict$empty
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$FunctionParameter = 2;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern$fn(variableType, patternsToVisit, acc) {
		collectNamesFromPattern:
		while (true) {
			if (patternsToVisit.b) {
				var pattern = patternsToVisit.a;
				var restOfPatternsToVisit = patternsToVisit.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(pattern);
				switch (_v1.$) {
					case 11:
						var name = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = restOfPatternsToVisit,
							$temp$acc = A3(
							$elm$core$Dict$insert,
							name,
							{
								ho: A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(pattern),
									name),
								bF: variableType
							},
							acc);
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 12:
						var subPatterns = _v1.b;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 8:
						var names = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = restOfPatternsToVisit,
							$temp$acc = A3(
							$elm$core$List$foldl,
							F2(
								function (nameNode, subAcc) {
									return A3(
										$elm$core$Dict$insert,
										$stil4m$elm_syntax$Elm$Syntax$Node$value(nameNode),
										{ho: nameNode, bF: variableType},
										subAcc);
								}),
							acc,
							names);
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 14:
						var subPattern = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$cons, subPattern, restOfPatternsToVisit),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 13:
						var subPattern = _v1.a;
						var alias = _v1.b;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$cons, subPattern, restOfPatternsToVisit),
							$temp$acc = A3(
							$elm$core$Dict$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(alias),
							{ho: alias, bF: variableType},
							acc);
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 7:
						var subPatterns = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 9:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfPatternsToVisit)),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 10:
						var subPatterns = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					default:
						var $temp$variableType = variableType,
							$temp$patternsToVisit = restOfPatternsToVisit,
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
				}
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$parameters = function (patterns) {
	return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern, 2, patterns, $elm$core$Dict$empty);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$updateScope = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$updateScope$fn(innerContext, scopes) {
		return _Utils_update(
			innerContext,
			{z: scopes});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationEnterVisitor = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationEnterVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 0:
				var _function = _v0.a;
				var newScope = _Utils_update(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope,
					{
						cI: $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$parameters(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).gs)
					});
				var newContext = A2(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$updateScope,
					context,
					A2($jfmengels$elm_review$NonEmpty$cons, newScope, context.z));
				var lookupTableAfterArguments = A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern,
					newContext,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).gs,
					newContext.s);
				var finalLookupTable = function () {
					var _v1 = _function.i7;
					if (!_v1.$) {
						var signature = _v1.a;
						return A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation,
							context,
							_List_fromArray(
								[
									$stil4m$elm_syntax$Elm$Syntax$Node$value(signature).hV
								]),
							lookupTableAfterArguments);
					} else {
						return lookupTableAfterArguments;
					}
				}();
				return _Utils_update(
					newContext,
					{s: finalLookupTable});
			case 2:
				var constructors = _v0.a.ig;
				return _Utils_update(
					context,
					{
						s: A3(
							$elm$core$List$foldl,
							F2(
								function (_v2, acc) {
									var constructor = _v2.b;
									return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation, context, constructor.gs, acc);
								}),
							context.s,
							constructors)
					});
			case 1:
				var typeAnnotation = _v0.a.hV;
				return _Utils_update(
					context,
					{
						s: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation,
							context,
							_List_fromArray(
								[typeAnnotation]),
							context.s)
					});
			case 3:
				var signature = _v0.a;
				return _Utils_update(
					context,
					{
						s: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation,
							context,
							_List_fromArray(
								[signature.hV]),
							context.s)
					});
			default:
				return context;
		}
	});
var $jfmengels$elm_review$NonEmpty$pop = function (_v0) {
	var x = _v0.a;
	var xs = _v0.b;
	if (!xs.b) {
		return A2($jfmengels$elm_review$NonEmpty$Nonempty, x, xs);
	} else {
		var y = xs.a;
		var ys = xs.b;
		return A2($jfmengels$elm_review$NonEmpty$Nonempty, y, ys);
	}
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationExitVisitor = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationExitVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (!_v0.$) {
			return _Utils_update(
				context,
				{
					z: $jfmengels$elm_review$NonEmpty$pop(context.z)
				});
		} else {
			return context;
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$functionToExpression = function (_function) {
	return $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).eC;
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionChildren = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 1:
			var expressions = _v0.a;
			return expressions;
		case 19:
			var elements = _v0.a;
			return elements;
		case 18:
			var fields = _v0.a;
			return A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$stil4m$elm_syntax$Elm$Syntax$Node$value,
					function (_v1) {
						var expr = _v1.b;
						return expr;
					}),
				fields);
		case 22:
			var setters = _v0.b;
			return A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$stil4m$elm_syntax$Elm$Syntax$Node$value,
					function (_v2) {
						var expr = _v2.b;
						return expr;
					}),
				setters);
		case 14:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		case 2:
			var direction = _v0.b;
			var left = _v0.c;
			var right = _v0.d;
			switch (direction) {
				case 0:
					return _List_fromArray(
						[left, right]);
				case 1:
					return _List_fromArray(
						[right, left]);
				default:
					return _List_fromArray(
						[left, right]);
			}
		case 4:
			var cond = _v0.a;
			var then_ = _v0.b;
			var else_ = _v0.c;
			return _List_fromArray(
				[cond, then_, else_]);
		case 15:
			var expression = _v0.a.eC;
			var declarations = _v0.a.gD;
			return A3(
				$elm$core$List$foldr,
				F2(
					function (declaration, acc) {
						var _v4 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
						if (!_v4.$) {
							var _function = _v4.a;
							return A2(
								$elm$core$List$cons,
								$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$functionToExpression(_function),
								acc);
						} else {
							var expr = _v4.b;
							return A2($elm$core$List$cons, expr, acc);
						}
					}),
				_List_fromArray(
					[expression]),
				declarations);
		case 16:
			var expression = _v0.a.eC;
			var cases = _v0.a.ia;
			return A2(
				$elm$core$List$cons,
				expression,
				A2(
					$elm$core$List$map,
					function (_v5) {
						var caseExpression = _v5.b;
						return caseExpression;
					},
					cases));
		case 17:
			var expression = _v0.a.eC;
			return _List_fromArray(
				[expression]);
		case 13:
			var expressions = _v0.a;
			return expressions;
		case 10:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		case 20:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		default:
			return _List_Nil;
	}
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$LetVariable = 3;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$PatternVariable = 4;
var $jfmengels$elm_review$NonEmpty$mapHead = F2(function $jfmengels$elm_review$NonEmpty$mapHead$fn(fn, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$jfmengels$elm_review$NonEmpty$Nonempty,
			fn(x),
			xs);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerVariable = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerVariable$fn(variableInfo, scopes) {
		return A2(
			$jfmengels$elm_review$NonEmpty$mapHead,
			function (scope) {
				return _Utils_update(
					scope,
					{
						cI: A3(
							$elm$core$Dict$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(variableInfo.ho),
							variableInfo,
							scope.cI)
					});
			},
			scopes);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionEnterVisitor = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionEnterVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 15:
				var declarations = _v0.a.gD;
				var newContext = A2(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$updateScope,
					context,
					A3(
						$elm$core$List$foldl,
						F2(
							function (declaration, scopes) {
								var _v3 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
								if (!_v3.$) {
									var _function = _v3.a;
									var _v4 = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii);
									var name = _v4.cH;
									var expression = _v4.eC;
									var _arguments = _v4.gs;
									var withLetVariable = A2(
										$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerVariable,
										{ho: name, bF: 3},
										scopes);
									if ($elm$core$List$isEmpty(_arguments)) {
										return withLetVariable;
									} else {
										var names = A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern, 4, _arguments, $elm$core$Dict$empty);
										return A2(
											$jfmengels$elm_review$NonEmpty$mapHead,
											function (scope) {
												return _Utils_update(
													scope,
													{
														ia: A2(
															$elm$core$List$cons,
															_Utils_Tuple2(expression, names),
															scope.ia)
													});
											},
											withLetVariable);
									}
								} else {
									return scopes;
								}
							}),
						A2($jfmengels$elm_review$NonEmpty$cons, $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope, context.z),
						declarations));
				var lookupTable = A3(
					$elm$core$List$foldl,
					F2(
						function (declaration, acc) {
							var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
							if (!_v1.$) {
								var _function = _v1.a;
								var withDeclarationModuleName = A3(
									$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern,
									newContext,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).gs,
									acc);
								var _v2 = _function.i7;
								if (!_v2.$) {
									var signature = _v2.a;
									return A3(
										$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation,
										context,
										_List_fromArray(
											[
												$stil4m$elm_syntax$Elm$Syntax$Node$value(signature).hV
											]),
										withDeclarationModuleName);
								} else {
									return withDeclarationModuleName;
								}
							} else {
								var pattern = _v1.a;
								return A3(
									$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern,
									newContext,
									_List_fromArray(
										[pattern]),
									acc);
							}
						}),
					newContext.s,
					declarations);
				return _Utils_update(
					newContext,
					{s: lookupTable});
			case 16:
				var caseBlock = _v0.a;
				var _v5 = A3(
					$elm$core$List$foldl,
					F2(
						function (_v6, _v7) {
							var pattern = _v6.a;
							var expression = _v6.b;
							var casesAcc = _v7.a;
							var lookupTableAcc = _v7.b;
							return _Utils_Tuple2(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										expression,
										A3(
											$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern,
											4,
											_List_fromArray(
												[pattern]),
											$elm$core$Dict$empty)),
									casesAcc),
								A3(
									$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern,
									context,
									_List_fromArray(
										[pattern]),
									lookupTableAcc));
						}),
					_Utils_Tuple2(_List_Nil, context.s),
					caseBlock.ia);
				var cases = _v5.a;
				var lookupTable = _v5.b;
				return _Utils_update(
					context,
					{
						s: lookupTable,
						z: A2(
							$jfmengels$elm_review$NonEmpty$mapHead,
							function (scope) {
								return _Utils_update(
									scope,
									{ia: cases});
							},
							context.z)
					});
			case 3:
				var moduleName = _v0.a;
				var name = _v0.b;
				return _Utils_update(
					context,
					{
						s: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, name, moduleName),
							context.s)
					});
			case 22:
				var _v8 = _v0.a;
				var range = _v8.a;
				var name = _v8.b;
				return _Utils_update(
					context,
					{
						s: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							range,
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, name, _List_Nil),
							context.s)
					});
			case 17:
				var args = _v0.a.h0;
				return _Utils_update(
					context,
					{
						s: A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern, context, args, context.s)
					});
			case 5:
				var op = _v0.a;
				return _Utils_update(
					context,
					{
						s: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, op, _List_Nil),
							context.s)
					});
			case 2:
				var op = _v0.a;
				return _Utils_update(
					context,
					{
						s: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, op, _List_Nil),
							context.s)
					});
			default:
				return context;
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionExitVisitor = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionExitVisitor$fn(node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 15:
				return _Utils_update(
					context,
					{
						z: $jfmengels$elm_review$NonEmpty$pop(context.z)
					});
			case 16:
				return _Utils_update(
					context,
					{
						z: A2(
							$jfmengels$elm_review$NonEmpty$mapHead,
							function (scope) {
								return _Utils_update(
									scope,
									{ia: _List_Nil});
							},
							context.z)
					});
			default:
				return context;
		}
	});
var $jfmengels$elm_review$NonEmpty$head = function (_v0) {
	var x = _v0.a;
	return x;
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeEnter = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeEnter$fn(node, context) {
		var currentScope = $jfmengels$elm_review$NonEmpty$head(context.z);
		var caseExpression = A2(
			$jfmengels$elm_review$Vendor$ListExtra$find,
			function (_v2) {
				var expressionNode = _v2.a;
				return _Utils_eq(node, expressionNode);
			},
			currentScope.ia);
		if (caseExpression.$ === 1) {
			return context;
		} else {
			var _v1 = caseExpression.a;
			var names = _v1.b;
			return _Utils_update(
				context,
				{
					z: A2(
						$jfmengels$elm_review$NonEmpty$cons,
						_Utils_update(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope,
							{en: node, cI: names}),
						context.z)
				});
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeExit = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeExit$fn(node, context) {
		var currentScope = $jfmengels$elm_review$NonEmpty$head(context.z);
		return _Utils_eq(node, currentScope.en) ? _Utils_update(
			context,
			{
				z: $jfmengels$elm_review$NonEmpty$pop(context.z)
			}) : context;
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$visitExpressions = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$visitExpressions$fn(node, context) {
		return A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionExitVisitor,
			node,
			A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeExit,
				node,
				function (newContext) {
					return A3(
						$elm$core$List$foldl,
						$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$visitExpressions,
						newContext,
						$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionChildren(node));
				}(
					A2(
						$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionEnterVisitor,
						node,
						A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeEnter, node, context)))));
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectLookupTable = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectLookupTable$fn(declarations, context) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (declaration, ctx) {
					var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
					if (!_v0.$) {
						var _function = _v0.a;
						return A2(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationExitVisitor,
							declaration,
							A2(
								$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$visitExpressions,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).eC,
								A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationEnterVisitor, declaration, ctx)));
					} else {
						return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationEnterVisitor, declaration, ctx);
					}
				}),
			context,
			declarations);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$CustomTypeConstructor = 1;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$Port = 5;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$TopLevelVariable = 0;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope$fn(variableData, innerContext) {
		var newScopes = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerVariable, variableData, innerContext.z);
		return _Utils_update(
			innerContext,
			{z: newScopes});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedCustomType = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedCustomType$fn(constructors, name, innerContext) {
		return _Utils_update(
			innerContext,
			{
				c9: A2(
					$elm$core$List$cons,
					{
						h0: _List_Nil,
						cY: '',
						cH: name,
						ji: A2(
							$elm$core$List$map,
							function (constructor) {
								return _Utils_Tuple2(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(
										$stil4m$elm_syntax$Elm$Syntax$Node$value(constructor).cH),
									_List_Nil);
							},
							constructors)
					},
					innerContext.c9)
			});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedTypeAlias = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedTypeAlias$fn(name, innerContext) {
		return _Utils_update(
			innerContext,
			{
				c8: A2(
					$elm$core$List$cons,
					{
						h0: _List_Nil,
						cY: '',
						cH: name,
						gl: $elm$project_metadata_utils$Elm$Type$Tuple(_List_Nil)
					},
					innerContext.c8)
			});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$recordUpdateToDocsType = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$recordUpdateToDocsType$fn(innerContext, updates) {
		return A2(
			$elm$core$List$map,
			function (_v6) {
				var _v7 = _v6.b;
				var name = _v7.a;
				var typeAnnotation = _v7.b;
				return _Utils_Tuple2(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, typeAnnotation));
			},
			updates);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType$fn(innerContext, _v0) {
		var typeAnnotation = _v0.b;
		switch (typeAnnotation.$) {
			case 0:
				var name = typeAnnotation.a;
				return $elm$project_metadata_utils$Elm$Type$Var(name);
			case 1:
				var _v2 = typeAnnotation.a;
				var _v3 = _v2.b;
				var moduleName = _v3.a;
				var typeName = _v3.b;
				var typeParameters = typeAnnotation.b;
				var realModuleName = A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForType, innerContext, typeName, moduleName);
				return A2(
					$elm$project_metadata_utils$Elm$Type$Type,
					A2($elm$core$String$join, '.', realModuleName) + ('.' + typeName),
					A2(
						$elm$core$List$map,
						function (node) {
							return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, node);
						},
						typeParameters));
			case 2:
				return $elm$project_metadata_utils$Elm$Type$Tuple(_List_Nil);
			case 3:
				var list = typeAnnotation.a;
				return $elm$project_metadata_utils$Elm$Type$Tuple(
					A2(
						$elm$core$List$map,
						function (node) {
							return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, node);
						},
						list));
			case 4:
				var updates = typeAnnotation.a;
				return A2(
					$elm$project_metadata_utils$Elm$Type$Record,
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$recordUpdateToDocsType, innerContext, updates),
					$elm$core$Maybe$Nothing);
			case 5:
				var _v4 = typeAnnotation.a;
				var generic = _v4.b;
				var _v5 = typeAnnotation.b;
				var updates = _v5.b;
				return A2(
					$elm$project_metadata_utils$Elm$Type$Record,
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$recordUpdateToDocsType, innerContext, updates),
					$elm$core$Maybe$Just(generic));
			default:
				var left = typeAnnotation.a;
				var right = typeAnnotation.b;
				return A2(
					$elm$project_metadata_utils$Elm$Type$Lambda,
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, left),
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, right));
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$convertTypeSignatureToDocsType = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$convertTypeSignatureToDocsType$fn(innerContext, maybeSignature) {
		if (!maybeSignature.$) {
			var signature = maybeSignature.a;
			return A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType,
				innerContext,
				$stil4m$elm_syntax$Elm$Syntax$Node$value(signature).hV);
		} else {
			return $elm$project_metadata_utils$Elm$Type$Tuple(_List_Nil);
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedValue = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedValue$fn(_function, name, innerContext) {
		return _Utils_update(
			innerContext,
			{
				da: A2(
					$elm$core$List$cons,
					{
						cY: function () {
							var _v0 = _function.fB;
							if (!_v0.$) {
								var strNode = _v0.a;
								return $stil4m$elm_syntax$Elm$Syntax$Node$value(strNode);
							} else {
								return '';
							}
						}(),
						cH: name,
						gl: A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$convertTypeSignatureToDocsType, innerContext, _function.i7)
					},
					innerContext.da)
			});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed$fn(registerFn, name, innerContext) {
		return (innerContext.eA || A2($elm$core$Set$member, name, innerContext.ez)) ? A2(registerFn, name, innerContext) : innerContext;
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerDeclaration = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerDeclaration$fn(declaration, innerContext) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
		switch (_v0.$) {
			case 0:
				var _function = _v0.a;
				var nameNode = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).cH;
				return A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed,
					F2(
						function (name, ctx) {
							return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedValue, _function, name, ctx);
						}),
					$stil4m$elm_syntax$Elm$Syntax$Node$value(nameNode),
					A2(
						$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope,
						{ho: nameNode, bF: 0},
						innerContext));
			case 1:
				var alias = _v0.a;
				return A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed,
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedTypeAlias,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(alias.cH),
					function (ctx) {
						var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(alias.hV);
						if (_v1.$ === 4) {
							return A2(
								$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope,
								{ho: alias.cH, bF: 0},
								ctx);
						} else {
							return ctx;
						}
					}(
						_Utils_update(
							innerContext,
							{
								cF: A2(
									$elm$core$Set$insert,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(alias.cH),
									innerContext.cF)
							})));
			case 2:
				var name = _v0.a.cH;
				var constructors = _v0.a.ig;
				return A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed,
					F2(
						function (customTypeName, ctx) {
							return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedCustomType, constructors, customTypeName, ctx);
						}),
					$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
					A3(
						$elm$core$List$foldl,
						F2(
							function (constructor, innerContext_) {
								var constructorName = $stil4m$elm_syntax$Elm$Syntax$Node$value(constructor).cH;
								return A2(
									$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope,
									{ho: constructorName, bF: 1},
									innerContext_);
							}),
						_Utils_update(
							innerContext,
							{
								cF: A2(
									$elm$core$Set$insert,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
									innerContext.cF)
							}),
						constructors));
			case 3:
				var signature = _v0.a;
				return A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed,
					F2(
						function (name, ctx) {
							return A3(
								$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedValue,
								{
									fB: $elm$core$Maybe$Nothing,
									i7: $elm$core$Maybe$Just(
										A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration),
											signature))
								},
								name,
								ctx);
						}),
					$stil4m$elm_syntax$Elm$Syntax$Node$value(signature.cH),
					A2(
						$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope,
						{ho: signature.cH, bF: 5},
						innerContext));
			case 4:
				return innerContext;
			default:
				return innerContext;
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationListVisitor = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationListVisitor$fn(declarations, innerContext) {
		return A3($elm$core$List$foldl, $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerDeclaration, innerContext, declarations);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport = function (_v0) {
	var moduleName = _v0.eY;
	var moduleAlias = _v0.iI;
	var exposingList = _v0.fE;
	return A2(
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
		{
			fE: A2(
				$elm$core$Maybe$map,
				$stil4m$elm_syntax$Elm$Syntax$Node$Node($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange),
				exposingList),
			iI: A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$singleton,
					$stil4m$elm_syntax$Elm$Syntax$Node$Node($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)),
				moduleAlias),
			eY: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, moduleName)
		});
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$elmCorePrelude = function () {
	var explicit = function (exposed) {
		return $elm$core$Maybe$Just(
			$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
				A2(
					$elm$core$List$map,
					$stil4m$elm_syntax$Elm$Syntax$Node$Node($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange),
					exposed)));
	};
	return _List_fromArray(
		[
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: $elm$core$Maybe$Just(
					$stil4m$elm_syntax$Elm$Syntax$Exposing$All($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)),
				iI: $elm$core$Maybe$Nothing,
				eY: _List_fromArray(
					['Basics'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{cH: 'List', iU: $elm$core$Maybe$Nothing}),
							$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose('::')
						])),
				iI: $elm$core$Maybe$Nothing,
				eY: _List_fromArray(
					['List'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{
								cH: 'Maybe',
								iU: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)
							})
						])),
				iI: $elm$core$Maybe$Nothing,
				eY: _List_fromArray(
					['Maybe'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{
								cH: 'Result',
								iU: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)
							})
						])),
				iI: $elm$core$Maybe$Nothing,
				eY: _List_fromArray(
					['Result'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{cH: 'String', iU: $elm$core$Maybe$Nothing})
						])),
				iI: $elm$core$Maybe$Nothing,
				eY: _List_fromArray(
					['String'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{cH: 'Char', iU: $elm$core$Maybe$Nothing})
						])),
				iI: $elm$core$Maybe$Nothing,
				eY: _List_fromArray(
					['Char'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: $elm$core$Maybe$Nothing,
				iI: $elm$core$Maybe$Nothing,
				eY: _List_fromArray(
					['Tuple'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: $elm$core$Maybe$Nothing,
				iI: $elm$core$Maybe$Nothing,
				eY: _List_fromArray(
					['Debug'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{cH: 'Program', iU: $elm$core$Maybe$Nothing})
						])),
				iI: $elm$core$Maybe$Nothing,
				eY: _List_fromArray(
					['Platform'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{cH: 'Cmd', iU: $elm$core$Maybe$Nothing})
						])),
				iI: $elm$core$Maybe$Just('Cmd'),
				eY: _List_fromArray(
					['Platform', 'Cmd'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				fE: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{cH: 'Sub', iU: $elm$core$Maybe$Nothing})
						])),
				iI: $elm$core$Maybe$Just('Sub'),
				eY: _List_fromArray(
					['Platform', 'Sub'])
			})
		]);
}();
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportAlias = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportAlias$fn(import_, innerContext) {
		var _v0 = import_.iI;
		if (_v0.$ === 1) {
			var moduleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY);
			if (moduleName.b && (!moduleName.b.b)) {
				var singleSegmentModuleName = moduleName.a;
				return _Utils_update(
					innerContext,
					{
						bQ: A3(
							$elm$core$Dict$update,
							singleSegmentModuleName,
							function (previousValue) {
								return $elm$core$Maybe$Just(
									A2(
										$elm$core$List$cons,
										moduleName,
										A2($elm$core$Maybe$withDefault, _List_Nil, previousValue)));
							},
							innerContext.bQ)
					});
			} else {
				return innerContext;
			}
		} else {
			var alias = _v0.a;
			return _Utils_update(
				innerContext,
				{
					bQ: A3(
						$elm$core$Dict$update,
						$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$joinModuleName(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(alias)),
						function (previousValue) {
							return $elm$core$Maybe$Just(
								A2(
									$elm$core$List$cons,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY),
									A2($elm$core$Maybe$withDefault, _List_Nil, previousValue)));
						},
						innerContext.bQ)
				});
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$typesFromExposingList = function (topLevelExpose) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(topLevelExpose);
	switch (_v0.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			return $elm$core$Maybe$Nothing;
		case 2:
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
		default:
			var name = _v0.a.cH;
			return $elm$core$Maybe$Just(name);
	}
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$valuesFromExposingList = F4(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$valuesFromExposingList$fn(moduleName, module_, topLevelExposeList, acc) {
		valuesFromExposingList:
		while (true) {
			if (!topLevelExposeList.b) {
				return acc;
			} else {
				var topLevelExpose = topLevelExposeList.a;
				var rest = topLevelExposeList.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(topLevelExpose);
				switch (_v1.$) {
					case 0:
						var operator = _v1.a;
						var $temp$moduleName = moduleName,
							$temp$module_ = module_,
							$temp$topLevelExposeList = rest,
							$temp$acc = A3($elm$core$Dict$insert, operator, moduleName, acc);
						moduleName = $temp$moduleName;
						module_ = $temp$module_;
						topLevelExposeList = $temp$topLevelExposeList;
						acc = $temp$acc;
						continue valuesFromExposingList;
					case 1:
						var _function = _v1.a;
						var $temp$moduleName = moduleName,
							$temp$module_ = module_,
							$temp$topLevelExposeList = rest,
							$temp$acc = A3($elm$core$Dict$insert, _function, moduleName, acc);
						moduleName = $temp$moduleName;
						module_ = $temp$module_;
						topLevelExposeList = $temp$topLevelExposeList;
						acc = $temp$acc;
						continue valuesFromExposingList;
					case 2:
						var name = _v1.a;
						if (A2(
							$elm$core$List$any,
							function (alias) {
								return _Utils_eq(alias.cH, name);
							},
							module_.gp)) {
							var $temp$moduleName = moduleName,
								$temp$module_ = module_,
								$temp$topLevelExposeList = rest,
								$temp$acc = A3($elm$core$Dict$insert, name, moduleName, acc);
							moduleName = $temp$moduleName;
							module_ = $temp$module_;
							topLevelExposeList = $temp$topLevelExposeList;
							acc = $temp$acc;
							continue valuesFromExposingList;
						} else {
							var $temp$moduleName = moduleName,
								$temp$module_ = module_,
								$temp$topLevelExposeList = rest,
								$temp$acc = acc;
							moduleName = $temp$moduleName;
							module_ = $temp$module_;
							topLevelExposeList = $temp$topLevelExposeList;
							acc = $temp$acc;
							continue valuesFromExposingList;
						}
					default:
						var name = _v1.a.cH;
						var open = _v1.a.iU;
						if (!open.$) {
							var newAcc = A3(
								$elm$core$List$foldl,
								F2(
									function (union, subAcc) {
										return _Utils_eq(union.cH, name) ? A3(
											$elm$core$List$foldl,
											F2(
												function (_v3, subSubAcc) {
													var tag = _v3.a;
													return A3($elm$core$Dict$insert, tag, moduleName, subSubAcc);
												}),
											subAcc,
											union.ji) : subAcc;
									}),
								acc,
								module_.hW);
							var $temp$moduleName = moduleName,
								$temp$module_ = module_,
								$temp$topLevelExposeList = rest,
								$temp$acc = newAcc;
							moduleName = $temp$moduleName;
							module_ = $temp$module_;
							topLevelExposeList = $temp$topLevelExposeList;
							acc = $temp$acc;
							continue valuesFromExposingList;
						} else {
							var $temp$moduleName = moduleName,
								$temp$module_ = module_,
								$temp$topLevelExposeList = rest,
								$temp$acc = acc;
							moduleName = $temp$moduleName;
							module_ = $temp$module_;
							topLevelExposeList = $temp$topLevelExposeList;
							acc = $temp$acc;
							continue valuesFromExposingList;
						}
				}
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportExposed = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportExposed$fn(import_, innerContext) {
		var _v0 = A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, import_.fE);
		if (_v0.$ === 1) {
			return innerContext;
		} else {
			var exposing_ = _v0.a;
			var moduleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY);
			var module_ = A2(
				$elm$core$Maybe$withDefault,
				{
					gp: _List_Nil,
					gv: _List_Nil,
					cY: '',
					cH: $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$joinModuleName(moduleName),
					hW: _List_Nil,
					hX: _List_Nil
				},
				A2($elm$core$Dict$get, moduleName, innerContext.aU));
			if (!exposing_.$) {
				var foldIntoDict = F2(function foldIntoDict$fn(list, dict) {
						return A3(
							$elm$core$List$foldl,
							F2(
								function (_v3, acc) {
									var name = _v3.cH;
									return A3($elm$core$Dict$insert, name, moduleName, acc);
								}),
							dict,
							list);
					});
				var importedTypes = A2(
					foldIntoDict,
					module_.gp,
					A2(foldIntoDict, module_.hW, innerContext.cv));
				var foldCustomTypesIntoDict = F2(function foldCustomTypesIntoDict$fn(unions, dict) {
						return A3(
							$elm$core$List$foldl,
							F2(
								function (union, acc) {
									return A3(
										$elm$core$List$foldl,
										F2(
											function (_v2, subAcc) {
												var name = _v2.a;
												return A3($elm$core$Dict$insert, name, moduleName, subAcc);
											}),
										acc,
										union.ji);
								}),
							dict,
							unions);
					});
				var importedFunctions = A2(
					foldCustomTypesIntoDict,
					module_.hW,
					A2(
						foldIntoDict,
						module_.gp,
						A2(
							foldIntoDict,
							module_.gv,
							A2(foldIntoDict, module_.hX, innerContext.ct))));
				return _Utils_update(
					innerContext,
					{ct: importedFunctions, cv: importedTypes});
			} else {
				var topLevelExposeList = exposing_.a;
				var importedTypes = A3(
					$elm$core$List$foldl,
					F2(
						function (topLevelExpose, acc) {
							var _v4 = $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$typesFromExposingList(topLevelExpose);
							if (!_v4.$) {
								var name = _v4.a;
								return A3($elm$core$Dict$insert, name, moduleName, acc);
							} else {
								return acc;
							}
						}),
					innerContext.cv,
					topLevelExposeList);
				var importedFunctions = A4($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$valuesFromExposingList, moduleName, module_, topLevelExposeList, innerContext.ct);
				return _Utils_update(
					innerContext,
					{ct: importedFunctions, cv: importedTypes});
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$importVisitor = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$importVisitor$fn(_v0, innerContext) {
		var import_ = _v0.b;
		return A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportExposed,
			import_,
			A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportAlias, import_, innerContext));
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$exposedElements = function (nodes) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (node, acc) {
				var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				switch (_v0.$) {
					case 1:
						var name = _v0.a;
						return A2($elm$core$Set$insert, name, acc);
					case 2:
						var name = _v0.a;
						return A2($elm$core$Set$insert, name, acc);
					case 3:
						var name = _v0.a.cH;
						return A2($elm$core$Set$insert, name, acc);
					default:
						return acc;
				}
			}),
		$elm$core$Set$empty,
		nodes);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleDefinitionVisitor = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleDefinitionVisitor$fn(node, innerContext) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(node));
		if (!_v0.$) {
			return _Utils_update(
				innerContext,
				{eA: true});
		} else {
			var list = _v0.a;
			return _Utils_update(
				innerContext,
				{
					ez: $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$exposedElements(list)
				});
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleDocs = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleDocs$fn(ast, context) {
		return A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationListVisitor,
			ast.gD,
			A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleDefinitionVisitor,
				ast.iJ,
				A3(
					$elm$core$List$foldl,
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$importVisitor,
					context,
					_Utils_ap($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$elmCorePrelude, ast.iz))));
	});
var $jfmengels$elm_review$Review$Project$Valid$directDependencies = function (_v0) {
	var project = _v0;
	return project.fA;
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeDependencies = function (project) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (dependencyModule, acc) {
				return A3(
					$elm$core$Dict$insert,
					A2($elm$core$String$split, '.', dependencyModule.cH),
					dependencyModule,
					acc);
			}),
		$elm$core$Dict$empty,
		A3(
			$elm$core$Dict$foldl,
			F3(
				function (_v0, dep, acc) {
					return A2(
						$elm$core$List$append,
						$jfmengels$elm_review$Review$Project$Dependency$modules(dep),
						acc);
				}),
			_List_Nil,
			$jfmengels$elm_review$Review$Project$Valid$directDependencies(project)));
};
var $jfmengels$elm_review$NonEmpty$fromElement = function (x) {
	return A2($jfmengels$elm_review$NonEmpty$Nonempty, x, _List_Nil);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$fromProjectToModule = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$fromProjectToModule$fn(moduleName, modules) {
		return {
			c8: _List_Nil,
			ez: $elm$core$Set$empty,
			c9: _List_Nil,
			da: _List_Nil,
			eA: false,
			bQ: $elm$core$Dict$empty,
			ct: $elm$core$Dict$empty,
			cv: $elm$core$Dict$empty,
			cF: $elm$core$Set$empty,
			s: $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$empty(moduleName),
			aU: modules,
			z: $jfmengels$elm_review$NonEmpty$fromElement($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope)
		};
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$preludeModuleDocs = function (deps) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, acc) {
				var import_ = _v0.b;
				var importedModuleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY);
				var _v1 = A2($elm$core$Dict$get, importedModuleName, deps);
				if (!_v1.$) {
					var importedModule = _v1.a;
					return A3($elm$core$Dict$insert, importedModuleName, importedModule, acc);
				} else {
					return acc;
				}
			}),
		$elm$core$Dict$empty,
		$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$elmCorePrelude);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImportedModulesDocs = F4(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImportedModulesDocs$fn(modulesByModuleName, deps, _v1, _v2) {
		var import_ = _v1.b;
		var accImported = _v2.a;
		var accProjectCache = _v2.b;
		var importedModuleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY);
		var _v3 = A2($elm$core$Dict$get, importedModuleName, accProjectCache.aU);
		if (!_v3.$) {
			var importedModule = _v3.a;
			return _Utils_Tuple2(
				A3($elm$core$Dict$insert, importedModuleName, importedModule, accImported),
				accProjectCache);
		} else {
			var _v4 = A2($elm$core$Dict$get, importedModuleName, modulesByModuleName);
			if (!_v4.$) {
				var importedModule = _v4.a;
				var _v5 = A5($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeOnlyModuleDocs, importedModuleName, importedModule, modulesByModuleName, deps, accProjectCache);
				var importedModuleDocs = _v5.a;
				var newProjectCacheAcc = _v5.b;
				return _Utils_Tuple2(
					A3($elm$core$Dict$insert, importedModuleName, importedModuleDocs, accImported),
					newProjectCacheAcc);
			} else {
				var _v6 = A2($elm$core$Dict$get, importedModuleName, deps);
				if (!_v6.$) {
					var importedModule = _v6.a;
					return _Utils_Tuple2(
						A3($elm$core$Dict$insert, importedModuleName, importedModule, accImported),
						accProjectCache);
				} else {
					return _Utils_Tuple2(accImported, accProjectCache);
				}
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeOnlyModuleDocs = F5(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeOnlyModuleDocs$fn(moduleName, module_, modulesByModuleName, deps, projectCache) {
		var moduleAst = $jfmengels$elm_review$Review$Project$ProjectModule$ast(module_);
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (node, acc) {
					return A4($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImportedModulesDocs, modulesByModuleName, deps, node, acc);
				}),
			_Utils_Tuple2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$preludeModuleDocs(deps),
				projectCache),
			moduleAst.iz);
		var imported = _v0.a;
		var projectCacheWithComputedImports = _v0.b;
		var moduleContext = A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleDocs,
			moduleAst,
			A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$fromProjectToModule, moduleName, imported));
		var moduleDocs = {
			gp: moduleContext.c8,
			gv: _List_Nil,
			cY: '',
			cH: A2($elm$core$String$join, '.', moduleName),
			hW: moduleContext.c9,
			hX: moduleContext.da
		};
		var modules = A3($elm$core$Dict$insert, moduleName, moduleDocs, projectCacheWithComputedImports.aU);
		return _Utils_Tuple2(
			moduleDocs,
			_Utils_update(
				projectCache,
				{aU: modules}));
	});
var $jfmengels$elm_review$Review$Project$Valid$modulesByModuleName = function (_v0) {
	var project = _v0;
	return project.f_;
};
var $jfmengels$elm_review$Review$Project$Valid$projectCache = function (_v0) {
	var project = _v0;
	return project.eb;
};
var $jfmengels$elm_review$Review$Project$Valid$updateProjectCache = F2(function $jfmengels$elm_review$Review$Project$Valid$updateProjectCache$fn(projectCache_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{eb: projectCache_});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeHelp = F4(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeHelp$fn(cacheKey, moduleName, module_, project) {
		var projectCache = $jfmengels$elm_review$Review$Project$Valid$projectCache(project);
		var modulesByModuleName = $jfmengels$elm_review$Review$Project$Valid$modulesByModuleName(project);
		var moduleAst = $jfmengels$elm_review$Review$Project$ProjectModule$ast(module_);
		var elmJsonContentHash = $jfmengels$elm_review$Review$Project$Valid$elmJsonHash(project);
		var deps = function () {
			var _v2 = projectCache.gG;
			if (!_v2.$) {
				var cache = _v2.a;
				return _Utils_eq(elmJsonContentHash, cache.gO) ? cache.gH : $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeDependencies(project);
			} else {
				return $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeDependencies(project);
			}
		}();
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (node, acc) {
					return A4($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImportedModulesDocs, modulesByModuleName, deps, node, acc);
				}),
			_Utils_Tuple2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$preludeModuleDocs(deps),
				projectCache),
			moduleAst.iz);
		var imported = _v0.a;
		var projectCacheWithComputedImports = _v0.b;
		var _v1 = function () {
			var moduleContext = A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectLookupTable,
				moduleAst.gD,
				A2(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleDocs,
					moduleAst,
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$fromProjectToModule, moduleName, imported)));
			return _Utils_Tuple2(
				moduleContext.s,
				A3(
					$elm$core$Dict$insert,
					moduleName,
					{
						gp: moduleContext.c8,
						gv: _List_Nil,
						cY: '',
						cH: A2($elm$core$String$join, '.', moduleName),
						hW: moduleContext.c9,
						hX: moduleContext.da
					},
					projectCacheWithComputedImports.aU));
		}();
		var lookupTable = _v1.a;
		var modules = _v1.b;
		var newProjectCache = {
			gG: $elm$core$Maybe$Just(
				{gH: deps, gO: elmJsonContentHash}),
			fX: A3(
				$elm$core$Dict$insert,
				moduleName,
				{d_: cacheKey, s: lookupTable},
				projectCacheWithComputedImports.fX),
			aU: modules
		};
		return _Utils_Tuple2(
			lookupTable,
			A2($jfmengels$elm_review$Review$Project$Valid$updateProjectCache, newProjectCache, project));
	});
var $jfmengels$elm_review$Review$Project$ProjectCache$Type = 1;
var $jfmengels$elm_review$Review$Project$ProjectCache$typeElement = function (name) {
	return _Utils_Tuple2(name, 1);
};
var $jfmengels$elm_review$Review$Project$ProjectCache$Value = 0;
var $jfmengels$elm_review$Review$Project$ProjectCache$valueElement = function (name) {
	return _Utils_Tuple2(name, 0);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllAliases = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllAliases$fn(values, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, subAcc) {
					var name = _v0.cH;
					var tipe = _v0.gl;
					return A2(
						$elm$core$List$cons,
						$jfmengels$elm_review$Review$Project$ProjectCache$typeElement(name),
						function () {
							if ((tipe.$ === 4) && (tipe.b.$ === 1)) {
								var _v2 = tipe.b;
								return A2(
									$elm$core$List$cons,
									$jfmengels$elm_review$Review$Project$ProjectCache$valueElement(name),
									subAcc);
							} else {
								return subAcc;
							}
						}());
				}),
			acc,
			values);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$insertConstructors = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$insertConstructors$fn(tags, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, subSubAcc) {
					var tagName = _v0.a;
					return A2(
						$elm$core$List$cons,
						$jfmengels$elm_review$Review$Project$ProjectCache$valueElement(tagName),
						subSubAcc);
				}),
			acc,
			tags);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllTypes = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllTypes$fn(unions, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (union, subAcc) {
					return A2(
						$elm$core$List$cons,
						$jfmengels$elm_review$Review$Project$ProjectCache$typeElement(union.cH),
						A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$insertConstructors, union.ji, subAcc));
				}),
			acc,
			unions);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllValues = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllValues$fn(values, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, subAcc) {
					var name = _v0.cH;
					return A2(
						$elm$core$List$cons,
						$jfmengels$elm_review$Review$Project$ProjectCache$valueElement(name),
						subAcc);
				}),
			acc,
			values);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllExposed = F2(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllExposed$fn(moduleDocs, acc) {
		var importedElements = A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllTypes,
			moduleDocs.hW,
			A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllAliases,
				moduleDocs.gp,
				A2(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllValues,
					moduleDocs.hX,
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Dict$get, moduleDocs.cH, acc)))));
		return A3($elm$core$Dict$insert, moduleDocs.cH, importedElements, acc);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectExplicit = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectExplicit$fn(moduleDocs, list, acc) {
		var importedConstructors = A3(
			$elm$core$List$foldl,
			F2(
				function (node, subAcc) {
					var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
					if (_v0.$ === 3) {
						var name = _v0.a.cH;
						var _v1 = A2(
							$jfmengels$elm_review$Vendor$ListExtra$find,
							function (union) {
								return _Utils_eq(union.cH, name);
							},
							moduleDocs.hW);
						if (!_v1.$) {
							var union = _v1.a;
							return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$insertConstructors, union.ji, subAcc);
						} else {
							return subAcc;
						}
					} else {
						return subAcc;
					}
				}),
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Dict$get, moduleDocs.cH, acc)),
			list);
		return A3($elm$core$Dict$insert, moduleDocs.cH, importedConstructors, acc);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImplicitlyImportedElements = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImplicitlyImportedElements$fn(modules, _v0, acc) {
		var import_ = _v0.b;
		var _v1 = import_.fE;
		if (_v1.$ === 1) {
			return acc;
		} else {
			if (_v1.a.b.$ === 1) {
				var _v2 = _v1.a;
				var list = _v2.b.a;
				var _v3 = A2(
					$elm$core$Dict$get,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY),
					modules);
				if (!_v3.$) {
					var moduleDocs = _v3.a;
					return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectExplicit, moduleDocs, list, acc);
				} else {
					return acc;
				}
			} else {
				var _v4 = _v1.a;
				var _v5 = A2(
					$elm$core$Dict$get,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.eY),
					modules);
				if (!_v5.$) {
					var moduleDocs = _v5.a;
					return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllExposed, moduleDocs, acc);
				} else {
					return acc;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$contentHash = function (_v0) {
	var module_ = _v0;
	return module_.fu;
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$compute = F3(function $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$compute$fn(moduleName, module_, project) {
		var projectCache = $jfmengels$elm_review$Review$Project$Valid$projectCache(project);
		var implicitImports = A3(
			$elm$core$List$foldl,
			F2(
				function (node, acc) {
					return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImplicitlyImportedElements, projectCache.aU, node, acc);
				}),
			$elm$core$Dict$empty,
			$jfmengels$elm_review$Review$Project$ProjectModule$ast(module_).iz);
		var computeLookupTableForModule = function (_v1) {
			return A4(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeHelp,
				{
					fu: $jfmengels$elm_review$Review$Project$ProjectModule$contentHash(module_),
					g3: implicitImports
				},
				moduleName,
				module_,
				project);
		};
		var _v0 = A2($elm$core$Dict$get, moduleName, projectCache.fX);
		if (!_v0.$) {
			var cache = _v0.a;
			return (_Utils_eq(
				cache.d_.fu,
				$jfmengels$elm_review$Review$Project$ProjectModule$contentHash(module_)) && _Utils_eq(cache.d_.g3, implicitImports)) ? _Utils_Tuple2(cache.s, project) : computeLookupTableForModule(0);
		} else {
			return computeLookupTableForModule(0);
		}
	});
var $jfmengels$elm_review$Review$Rule$computeModuleNameLookupTable = F3(function $jfmengels$elm_review$Review$Rule$computeModuleNameLookupTable$fn(requestedData, project, module_) {
		var moduleName = $jfmengels$elm_review$Review$Project$ProjectModule$moduleName(module_);
		return requestedData.eZ ? A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$compute, moduleName, module_, project) : _Utils_Tuple2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$empty(moduleName),
			project);
	});
var $jfmengels$elm_review$Review$Rule$mapLast = F2(function $jfmengels$elm_review$Review$Rule$mapLast$fn(mapper, lines) {
		var _v0 = $elm$core$List$reverse(lines);
		if (!_v0.b) {
			return lines;
		} else {
			var first = _v0.a;
			var rest = _v0.b;
			return $elm$core$List$reverse(
				A2(
					$elm$core$List$cons,
					mapper(first),
					rest));
		}
	});
var $jfmengels$elm_review$Review$Rule$extractSourceCode = F2(function $jfmengels$elm_review$Review$Rule$extractSourceCode$fn(lines, range) {
		return A2(
			$elm$core$String$dropLeft,
			range.dv.bH - 1,
			A2(
				$elm$core$String$join,
				'\n',
				A2(
					$jfmengels$elm_review$Review$Rule$mapLast,
					A2($elm$core$String$slice, 0, range.c4.bH - 1),
					A2(
						$elm$core$List$take,
						(range.c4.b1 - range.dv.b1) + 1,
						A2($elm$core$List$drop, range.dv.b1 - 1, lines)))));
	});
var $jfmengels$elm_review$Review$Rule$findModuleDocumentationBeforeCutOffLine = F2(function $jfmengels$elm_review$Review$Rule$findModuleDocumentationBeforeCutOffLine$fn(cutOffLine, comments) {
		findModuleDocumentationBeforeCutOffLine:
		while (true) {
			if (!comments.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var comment = comments.a;
				var range = comment.a;
				var content = comment.b;
				var restOfComments = comments.b;
				if (_Utils_cmp(range.dv.b1, cutOffLine) > 0) {
					return $elm$core$Maybe$Nothing;
				} else {
					if (A2($elm$core$String$startsWith, '{-|', content)) {
						return $elm$core$Maybe$Just(comment);
					} else {
						var $temp$cutOffLine = cutOffLine,
							$temp$comments = restOfComments;
						cutOffLine = $temp$cutOffLine;
						comments = $temp$comments;
						continue findModuleDocumentationBeforeCutOffLine;
					}
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$findModuleDocumentation = function (ast) {
	var cutOffLine = function () {
		var _v0 = ast.iz;
		if (_v0.b) {
			var firstImport = _v0.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$range(firstImport).dv.b1;
		} else {
			var _v1 = ast.gD;
			if (_v1.b) {
				var firstDeclaration = _v1.a;
				return $stil4m$elm_syntax$Elm$Syntax$Node$range(firstDeclaration).dv.b1;
			} else {
				return 0;
			}
		}
	}();
	return A2($jfmengels$elm_review$Review$Rule$findModuleDocumentationBeforeCutOffLine, cutOffLine, ast.ie);
};
var $jfmengels$elm_review$Review$Project$ProjectModule$isInSourceDirectories = function (_v0) {
	var module_ = _v0;
	return module_.g8;
};
var $jfmengels$elm_review$Review$Rule$fromJsArrayToList = _List_fromArray;
var $jfmengels$elm_review$Review$Rule$JsArray = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$fromListToJsArray = _List_toArray;
var $jfmengels$elm_review$Review$Rule$mutatingMap = F2(function $jfmengels$elm_review$Review$Rule$mutatingMap$fn(mapper, arr) {
    var len = arr.length;
    for (var i = 0; i < len; i++) {
      mapper(arr[i]);
    }
    return arr;
  });
var $jfmengels$elm_review$Review$Rule$runVisitor = F3(function $jfmengels$elm_review$Review$Rule$runVisitor$fn(field, a, original) {
		var ruleModuleVisitor = original;
		var _v0 = field(ruleModuleVisitor);
		if (!_v0.$) {
			var visitor = _v0.a;
			return visitor(a);
		} else {
			return original;
		}
	});
var $jfmengels$elm_review$Review$Rule$functionToExpression = function (_function) {
	return $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).eC;
};
var $jfmengels$elm_review$Review$Rule$expressionChildren = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 1:
			var expressions = _v0.a;
			return expressions;
		case 19:
			var elements = _v0.a;
			return elements;
		case 18:
			var fields = _v0.a;
			return A2(
				$elm$core$List$map,
				function (_v1) {
					var _v2 = _v1.b;
					var expr = _v2.b;
					return expr;
				},
				fields);
		case 22:
			var setters = _v0.b;
			return A2(
				$elm$core$List$map,
				function (_v3) {
					var _v4 = _v3.b;
					var expr = _v4.b;
					return expr;
				},
				setters);
		case 14:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		case 2:
			var direction = _v0.b;
			var left = _v0.c;
			var right = _v0.d;
			switch (direction) {
				case 0:
					return _List_fromArray(
						[left, right]);
				case 1:
					return _List_fromArray(
						[right, left]);
				default:
					return _List_fromArray(
						[left, right]);
			}
		case 4:
			var cond = _v0.a;
			var then_ = _v0.b;
			var else_ = _v0.c;
			return _List_fromArray(
				[cond, then_, else_]);
		case 15:
			var expression = _v0.a.eC;
			var declarations = _v0.a.gD;
			return A3(
				$elm$core$List$foldr,
				F2(
					function (declaration, acc) {
						var _v6 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
						if (!_v6.$) {
							var _function = _v6.a;
							return A2(
								$elm$core$List$cons,
								$jfmengels$elm_review$Review$Rule$functionToExpression(_function),
								acc);
						} else {
							var expr = _v6.b;
							return A2($elm$core$List$cons, expr, acc);
						}
					}),
				_List_fromArray(
					[expression]),
				declarations);
		case 16:
			var expression = _v0.a.eC;
			var cases = _v0.a.ia;
			return A2(
				$elm$core$List$cons,
				expression,
				A2(
					$elm$core$List$map,
					function (_v7) {
						var caseExpression = _v7.b;
						return caseExpression;
					},
					cases));
		case 17:
			var expression = _v0.a.eC;
			return _List_fromArray(
				[expression]);
		case 13:
			var expressions = _v0.a;
			return expressions;
		case 10:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		case 20:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		default:
			return _List_Nil;
	}
};
var $jfmengels$elm_review$Review$Rule$runVisitor2 = F4(function $jfmengels$elm_review$Review$Rule$runVisitor2$fn(field, a, b, original) {
		var ruleModuleVisitor = original;
		var _v0 = field(ruleModuleVisitor);
		if (!_v0.$) {
			var visitor = _v0.a;
			return A2(visitor, a, b);
		} else {
			return original;
		}
	});
var $jfmengels$elm_review$Review$Rule$visitCaseBranch = F3(function $jfmengels$elm_review$Review$Rule$visitCaseBranch$fn(caseBlockWithRange, caseBranch, rules) {
		var caseExpression = caseBranch.b;
		return A2(
			$jfmengels$elm_review$Review$Rule$mutatingMap,
			function (acc) {
				return A4(
					$jfmengels$elm_review$Review$Rule$runVisitor2,
					function ($) {
						return $.a$;
					},
					caseBlockWithRange,
					caseBranch,
					acc);
			},
			A2(
				$jfmengels$elm_review$Review$Rule$visitExpression,
				caseExpression,
				A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A4(
							$jfmengels$elm_review$Review$Rule$runVisitor2,
							function ($) {
								return $.a_;
							},
							caseBlockWithRange,
							caseBranch,
							acc);
					},
					rules)));
	});
var $jfmengels$elm_review$Review$Rule$visitExpression = F2(function $jfmengels$elm_review$Review$Rule$visitExpression$fn(node, rules) {
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v1.$) {
			case 15:
				var letBlock = _v1.a;
				return A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A3(
							$jfmengels$elm_review$Review$Rule$runVisitor,
							function ($) {
								return $.dR;
							},
							node,
							acc);
					},
					A2(
						$jfmengels$elm_review$Review$Rule$visitExpression,
						letBlock.eC,
						function (updatedRules) {
							return A3(
								$elm$core$List$foldl,
								$jfmengels$elm_review$Review$Rule$visitLetDeclaration(
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
										letBlock)),
								updatedRules,
								letBlock.gD);
						}(
							A2(
								$jfmengels$elm_review$Review$Rule$mutatingMap,
								function (acc) {
									return A3(
										$jfmengels$elm_review$Review$Rule$runVisitor,
										function ($) {
											return $.dQ;
										},
										node,
										acc);
								},
								rules))));
			case 16:
				var caseBlock = _v1.a;
				return A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A3(
							$jfmengels$elm_review$Review$Rule$runVisitor,
							function ($) {
								return $.dR;
							},
							node,
							acc);
					},
					function (updatedRules) {
						return A3(
							$elm$core$List$foldl,
							F2(
								function (case_, acc) {
									return A3(
										$jfmengels$elm_review$Review$Rule$visitCaseBranch,
										A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
											caseBlock),
										case_,
										acc);
								}),
							updatedRules,
							caseBlock.ia);
					}(
						A2(
							$jfmengels$elm_review$Review$Rule$visitExpression,
							caseBlock.eC,
							A2(
								$jfmengels$elm_review$Review$Rule$mutatingMap,
								function (acc) {
									return A3(
										$jfmengels$elm_review$Review$Rule$runVisitor,
										function ($) {
											return $.dQ;
										},
										node,
										acc);
								},
								rules))));
			default:
				return A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A3(
							$jfmengels$elm_review$Review$Rule$runVisitor,
							function ($) {
								return $.dR;
							},
							node,
							acc);
					},
					function (updatedRules) {
						return A3(
							$elm$core$List$foldl,
							$jfmengels$elm_review$Review$Rule$visitExpression,
							updatedRules,
							$jfmengels$elm_review$Review$Rule$expressionChildren(node));
					}(
						A2(
							$jfmengels$elm_review$Review$Rule$mutatingMap,
							function (acc) {
								return A3(
									$jfmengels$elm_review$Review$Rule$runVisitor,
									function ($) {
										return $.dQ;
									},
									node,
									acc);
							},
							rules)));
		}
	});
var $jfmengels$elm_review$Review$Rule$visitLetDeclaration = F3(function $jfmengels$elm_review$Review$Rule$visitLetDeclaration$fn(letBlockWithRange, letDeclarationWithRange, rules) {
		var letDeclaration = letDeclarationWithRange.b;
		var expressionNode = function () {
			if (!letDeclaration.$) {
				var _function = letDeclaration.a;
				return $jfmengels$elm_review$Review$Rule$functionToExpression(_function);
			} else {
				var expr = letDeclaration.b;
				return expr;
			}
		}();
		return A2(
			$jfmengels$elm_review$Review$Rule$mutatingMap,
			function (acc) {
				return A4(
					$jfmengels$elm_review$Review$Rule$runVisitor2,
					function ($) {
						return $.a9;
					},
					letBlockWithRange,
					letDeclarationWithRange,
					acc);
			},
			A2(
				$jfmengels$elm_review$Review$Rule$visitExpression,
				expressionNode,
				A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A4(
							$jfmengels$elm_review$Review$Rule$runVisitor2,
							function ($) {
								return $.a8;
							},
							letBlockWithRange,
							letDeclarationWithRange,
							acc);
					},
					rules)));
	});
var $jfmengels$elm_review$Review$Rule$visitDeclarationAndExpressions = F2(function $jfmengels$elm_review$Review$Rule$visitDeclarationAndExpressions$fn(declaration, rules) {
		return A2(
			$jfmengels$elm_review$Review$Rule$mutatingMap,
			function (acc) {
				return A3(
					$jfmengels$elm_review$Review$Rule$runVisitor,
					function ($) {
						return $.aG;
					},
					declaration,
					acc);
			},
			function (updatedRules) {
				var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
				if (!_v0.$) {
					var _function = _v0.a;
					return A2(
						$jfmengels$elm_review$Review$Rule$visitExpression,
						$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.ii).eC,
						updatedRules);
				} else {
					return updatedRules;
				}
			}(
				A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A3(
							$jfmengels$elm_review$Review$Rule$runVisitor,
							function ($) {
								return $.aF;
							},
							declaration,
							acc);
					},
					rules)));
	});
var $jfmengels$elm_review$Review$Rule$visitDeclarationsAndExpressions = F2(function $jfmengels$elm_review$Review$Rule$visitDeclarationsAndExpressions$fn(declarations, rules) {
		return A3($elm$core$List$foldl, $jfmengels$elm_review$Review$Rule$visitDeclarationAndExpressions, rules, declarations);
	});
var $jfmengels$elm_review$Review$Rule$visitModuleForProjectRule = F2(function $jfmengels$elm_review$Review$Rule$visitModuleForProjectRule$fn(availableData, ruleModuleVisitors) {
		return $jfmengels$elm_review$Review$Rule$fromJsArrayToList(
			A2(
				$jfmengels$elm_review$Review$Rule$mutatingMap,
				function (acc) {
					return A3(
						$jfmengels$elm_review$Review$Rule$runVisitor,
						function ($) {
							return $.fI;
						},
						0,
						acc);
				},
				A2(
					$jfmengels$elm_review$Review$Rule$visitDeclarationsAndExpressions,
					availableData.h2.gD,
					A2(
						$jfmengels$elm_review$Review$Rule$mutatingMap,
						function (acc) {
							return A3(
								$jfmengels$elm_review$Review$Rule$runVisitor,
								function ($) {
									return $.a1;
								},
								availableData.h2.gD,
								acc);
						},
						A2(
							$jfmengels$elm_review$Review$Rule$mutatingMap,
							function (acc) {
								return A3(
									$jfmengels$elm_review$Review$Rule$runVisitor,
									function ($) {
										return $.fR;
									},
									availableData.h2.iz,
									acc);
							},
							A2(
								$jfmengels$elm_review$Review$Rule$mutatingMap,
								function (acc) {
									return A3(
										$jfmengels$elm_review$Review$Rule$runVisitor,
										function ($) {
											return $.fs;
										},
										availableData.h2.ie,
										acc);
								},
								A2(
									$jfmengels$elm_review$Review$Rule$mutatingMap,
									function (acc) {
										return A3(
											$jfmengels$elm_review$Review$Rule$runVisitor,
											function ($) {
												return $.bb;
											},
											availableData.d5,
											acc);
									},
									A2(
										$jfmengels$elm_review$Review$Rule$mutatingMap,
										function (acc) {
											return A3(
												$jfmengels$elm_review$Review$Rule$runVisitor,
												function ($) {
													return $.ba;
												},
												availableData.h2.iJ,
												acc);
										},
										$jfmengels$elm_review$Review$Rule$fromListToJsArray(
											A2(
												$elm$core$List$map,
												function (createRuleVisitor) {
													return createRuleVisitor(availableData);
												},
												ruleModuleVisitors))))))))));
	});
var $jfmengels$elm_review$Review$Rule$computeModuleWithRuleVisitors = F5(function $jfmengels$elm_review$Review$Rule$computeModuleWithRuleVisitors$fn(project, module_, inputRuleModuleVisitors, _v0, rulesNotToRun) {
		var requestedData = _v0;
		var ast = $jfmengels$elm_review$Review$Project$ProjectModule$ast(module_);
		var _v1 = A3($jfmengels$elm_review$Review$Rule$computeModuleNameLookupTable, requestedData, project, module_);
		var moduleNameLookupTable = _v1.a;
		var newProject = _v1.b;
		var availableData = {
			h2: ast,
			eD: function () {
				if (requestedData.fg) {
					var lines = $elm$core$String$lines(
						$jfmengels$elm_review$Review$Project$ProjectModule$source(module_));
					return function (range) {
						return A2($jfmengels$elm_review$Review$Rule$extractSourceCode, lines, range);
					};
				} else {
					return $elm$core$Basics$always('');
				}
			}(),
			iu: $jfmengels$elm_review$Review$Project$ProjectModule$path(module_),
			g8: $jfmengels$elm_review$Review$Project$ProjectModule$isInSourceDirectories(module_),
			d5: $jfmengels$elm_review$Review$Rule$findModuleDocumentation(ast),
			eX: $jfmengels$elm_review$Review$Project$ProjectModule$path(module_),
			eZ: moduleNameLookupTable
		};
		var outputRuleProjectVisitors = A2(
			$elm$core$List$map,
			function (_v2) {
				var ruleModuleVisitor = _v2;
				return ruleModuleVisitor.gm(0);
			},
			A2($jfmengels$elm_review$Review$Rule$visitModuleForProjectRule, availableData, inputRuleModuleVisitors));
		return _Utils_Tuple2(
			newProject,
			A2($elm$core$List$append, rulesNotToRun, outputRuleProjectVisitors));
	});
var $jfmengels$elm_review$Review$Rule$computeWhatsRequiredToAnalyze = F4(function $jfmengels$elm_review$Review$Rule$computeWhatsRequiredToAnalyze$fn(project, module_, incoming, ruleProjectVisitors) {
		var filePath = $jfmengels$elm_review$Review$Project$ProjectModule$path(module_);
		return A3(
			$elm$core$List$foldl,
			F2(
				function (rule, _v0) {
					var ruleProjectVisitor = rule;
					var _with = _v0.a;
					var requestedAcc = _v0.b;
					var without = _v0.c;
					var _v1 = ruleProjectVisitor.fv;
					if (!_v1.$) {
						var moduleVisitorCreator = _v1.a;
						var _v2 = A4(
							moduleVisitorCreator,
							project,
							filePath,
							$jfmengels$elm_review$Review$Project$ProjectModule$contentHash(module_),
							incoming);
						if (!_v2.$) {
							var moduleVisitor = _v2.a;
							return _Utils_Tuple3(
								A2($elm$core$List$cons, moduleVisitor, _with),
								A2($jfmengels$elm_review$Review$RequestedData$combineJust, ruleProjectVisitor.i4, requestedAcc),
								without);
						} else {
							return _Utils_Tuple3(
								_with,
								requestedAcc,
								A2($elm$core$List$cons, rule, without));
						}
					} else {
						return _Utils_Tuple3(
							_with,
							requestedAcc,
							A2($elm$core$List$cons, rule, without));
					}
				}),
			_Utils_Tuple3(_List_Nil, $jfmengels$elm_review$Review$RequestedData$none, _List_Nil),
			ruleProjectVisitors);
	});
var $jfmengels$elm_review$Review$Rule$BackToElmJson = {$: 1};
var $jfmengels$elm_review$Review$Rule$BackToReadme = {$: 2};
var $jfmengels$elm_review$Review$Rule$ContinueWithNextStep = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$NextStepAbort = {$: 3};
var $jfmengels$elm_review$Review$Rule$ReComputeModule = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Vendor$Zipper$focusl = F2(function $jfmengels$elm_review$Vendor$Zipper$focusl$fn(fc, zipper) {
		focusl:
		while (true) {
			if (fc(
				$jfmengels$elm_review$Vendor$Zipper$current(zipper))) {
				return $elm$core$Maybe$Just(zipper);
			} else {
				var _v0 = $jfmengels$elm_review$Vendor$Zipper$prev(zipper);
				if (!_v0.$) {
					var z = _v0.a;
					var $temp$fc = fc,
						$temp$zipper = z;
					fc = $temp$fc;
					zipper = $temp$zipper;
					continue focusl;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$findFixInComputeModuleResults = F3(function $jfmengels$elm_review$Review$Rule$findFixInComputeModuleResults$fn(params, remainingRules, rulesSoFar) {
		findFixInComputeModuleResults:
		while (true) {
			var reviewOptions = params.fa;
			var module_ = params.dm;
			var project = params.o;
			var moduleZipper = params.e$;
			var fixedErrors = params.iv;
			var incoming = params.iA;
			if (!remainingRules.b) {
				return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
					{
						iv: fixedErrors,
						bZ: $jfmengels$elm_review$Review$Rule$ModuleVisitStep(
							$jfmengels$elm_review$Vendor$Zipper$next(moduleZipper)),
						o: project,
						j: rulesSoFar
					});
			} else {
				var ruleProjectVisitor = remainingRules.a;
				var rest = remainingRules.b;
				var modulePath = $jfmengels$elm_review$Review$Project$ProjectModule$path(module_);
				var errors = ruleProjectVisitor.fM(modulePath);
				var _v1 = A6(
					$jfmengels$elm_review$Review$Rule$findFix,
					reviewOptions,
					project,
					function (newErrors) {
						return A2(ruleProjectVisitor.ge, modulePath, newErrors);
					},
					errors,
					fixedErrors,
					$elm$core$Maybe$Just(moduleZipper));
				if (_v1.$ === 1) {
					var newRule = _v1.a;
					var _v2 = _v1.b;
					var postFixStatus = _v2.a;
					var fixResult = _v2.b;
					if (!postFixStatus.$) {
						var newFixedErrors = postFixStatus.a;
						return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
							{
								iv: newFixedErrors,
								bZ: $jfmengels$elm_review$Review$Rule$NextStepAbort,
								o: fixResult.o,
								j: A2(
									$elm$core$List$cons,
									newRule,
									_Utils_ap(rest, rulesSoFar))
							});
					} else {
						var newFixedErrors = postFixStatus.a;
						var _v4 = fixResult.dU;
						switch (_v4.$) {
							case 0:
								var source = _v4.a.i8;
								var ast = _v4.a.h2;
								var newModuleZipper_ = _v4.b;
								var filePath = $jfmengels$elm_review$Review$Rule$errorFilePath(fixResult.bs);
								if (_Utils_eq(
									$jfmengels$elm_review$Review$Project$ProjectModule$path(module_),
									filePath)) {
									return $jfmengels$elm_review$Review$Rule$ReComputeModule(
										{
											iv: newFixedErrors,
											iA: incoming,
											e$: newModuleZipper_,
											dm: $jfmengels$elm_review$Review$Project$ProjectModule$create(
												{
													h2: ast,
													g8: $jfmengels$elm_review$Review$Project$ProjectModule$isInSourceDirectories(module_),
													iX: filePath,
													i8: source
												}),
											o: fixResult.o,
											fa: reviewOptions,
											j: A2(
												$elm$core$List$cons,
												newRule,
												_Utils_ap(rest, rulesSoFar))
										});
								} else {
									var _v5 = A2(
										$jfmengels$elm_review$Vendor$Zipper$focusl,
										function (mod) {
											return _Utils_eq(mod.ho.d$, filePath);
										},
										moduleZipper);
									if (!_v5.$) {
										var newModuleZipper = _v5.a;
										return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
											{
												iv: newFixedErrors,
												bZ: $jfmengels$elm_review$Review$Rule$ModuleVisitStep(
													$elm$core$Maybe$Just(newModuleZipper)),
												o: fixResult.o,
												j: A2(
													$elm$core$List$cons,
													newRule,
													_Utils_ap(rest, rulesSoFar))
											});
									} else {
										return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
											{
												iv: fixedErrors,
												bZ: $jfmengels$elm_review$Review$Rule$ModuleVisitStep(
													$jfmengels$elm_review$Vendor$Zipper$next(moduleZipper)),
												o: project,
												j: A2(
													$elm$core$List$cons,
													newRule,
													_Utils_ap(rest, rulesSoFar))
											});
									}
								}
							case 1:
								return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
									{
										iv: A2($jfmengels$elm_review$Review$Fix$FixedErrors$insert, fixResult.bs, fixedErrors),
										bZ: $jfmengels$elm_review$Review$Rule$BackToElmJson,
										o: fixResult.o,
										j: A2(
											$elm$core$List$cons,
											newRule,
											_Utils_ap(rest, rulesSoFar))
									});
							default:
								return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
									{
										iv: A2($jfmengels$elm_review$Review$Fix$FixedErrors$insert, fixResult.bs, fixedErrors),
										bZ: $jfmengels$elm_review$Review$Rule$BackToReadme,
										o: fixResult.o,
										j: A2(
											$elm$core$List$cons,
											newRule,
											_Utils_ap(rest, rulesSoFar))
									});
						}
					}
				} else {
					var newRule = _v1.a;
					var $temp$params = params,
						$temp$remainingRules = rest,
						$temp$rulesSoFar = A2($elm$core$List$cons, newRule, rulesSoFar);
					params = $temp$params;
					remainingRules = $temp$remainingRules;
					rulesSoFar = $temp$rulesSoFar;
					continue findFixInComputeModuleResults;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$computeModule = function (params) {
	computeModule:
	while (true) {
		var _v0 = A4($jfmengels$elm_review$Review$Rule$computeWhatsRequiredToAnalyze, params.o, params.dm, params.iA, params.j);
		var inputRuleModuleVisitors = _v0.a;
		var requestedData = _v0.b;
		var rulesNotToRun = _v0.c;
		var paramsAfterVisit = function () {
			if ($elm$core$List$isEmpty(inputRuleModuleVisitors)) {
				return params;
			} else {
				var _v2 = A5($jfmengels$elm_review$Review$Rule$computeModuleWithRuleVisitors, params.o, params.dm, inputRuleModuleVisitors, requestedData, rulesNotToRun);
				var newProject = _v2.a;
				var newRules = _v2.b;
				return _Utils_update(
					params,
					{o: newProject, j: newRules});
			}
		}();
		var _v1 = A3($jfmengels$elm_review$Review$Rule$findFixInComputeModuleResults, paramsAfterVisit, paramsAfterVisit.j, _List_Nil);
		if (!_v1.$) {
			var nextStepResult = _v1.a;
			return nextStepResult;
		} else {
			var newParams = _v1.a;
			var $temp$params = newParams;
			params = $temp$params;
			continue computeModule;
		}
	}
};
var $jfmengels$elm_review$Review$Rule$computeModuleAndCacheResult = F5(function $jfmengels$elm_review$Review$Rule$computeModuleAndCacheResult$fn(reviewOptions, moduleZipper, project, ruleProjectVisitors, fixedErrors) {
		var _v0 = $jfmengels$elm_review$Vendor$Zipper$current(moduleZipper);
		var node = _v0.ho;
		var incoming = _v0.iA;
		var _v1 = A2($jfmengels$elm_review$Review$Project$Valid$getModuleByPath, node.d$, project);
		if (_v1.$ === 1) {
			return {
				iv: fixedErrors,
				bZ: $jfmengels$elm_review$Review$Rule$ModuleVisitStep(
					$jfmengels$elm_review$Vendor$Zipper$next(moduleZipper)),
				o: project,
				j: ruleProjectVisitors
			};
		} else {
			var module_ = _v1.a;
			return $jfmengels$elm_review$Review$Rule$computeModule(
				{iv: fixedErrors, iA: incoming, e$: moduleZipper, dm: module_, o: project, fa: reviewOptions, j: ruleProjectVisitors});
		}
	});
var $jfmengels$elm_review$Review$Rule$computeModules = F5(function $jfmengels$elm_review$Review$Rule$computeModules$fn(reviewOptions, maybeModuleZipper, initialProject, ruleProjectVisitors, fixedErrors) {
		computeModules:
		while (true) {
			if (maybeModuleZipper.$ === 1) {
				return {iv: fixedErrors, o: initialProject, j: ruleProjectVisitors, L: $jfmengels$elm_review$Review$Rule$FinalProjectEvaluation};
			} else {
				var moduleZipper = maybeModuleZipper.a;
				var result = A5($jfmengels$elm_review$Review$Rule$computeModuleAndCacheResult, reviewOptions, moduleZipper, initialProject, ruleProjectVisitors, fixedErrors);
				var _v1 = result.bZ;
				switch (_v1.$) {
					case 0:
						var newModuleZipper = _v1.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$maybeModuleZipper = newModuleZipper,
							$temp$initialProject = result.o,
							$temp$ruleProjectVisitors = result.j,
							$temp$fixedErrors = result.iv;
						reviewOptions = $temp$reviewOptions;
						maybeModuleZipper = $temp$maybeModuleZipper;
						initialProject = $temp$initialProject;
						ruleProjectVisitors = $temp$ruleProjectVisitors;
						fixedErrors = $temp$fixedErrors;
						continue computeModules;
					case 1:
						return {iv: result.iv, o: result.o, j: result.j, L: $jfmengels$elm_review$Review$Rule$ElmJson};
					case 2:
						return {iv: result.iv, o: result.o, j: result.j, L: $jfmengels$elm_review$Review$Rule$Readme};
					default:
						return {iv: result.iv, o: result.o, j: result.j, L: $jfmengels$elm_review$Review$Rule$EndAnalysis};
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$Dependencies = {$: 2};
var $jfmengels$elm_review$Review$Rule$computeReadme = F6(function $jfmengels$elm_review$Review$Rule$computeReadme$fn(reviewOptions, project, fixedErrors, readmeData, remainingRules, accRules) {
		computeReadme:
		while (true) {
			if (!remainingRules.b) {
				return {iv: fixedErrors, o: project, j: accRules, L: $jfmengels$elm_review$Review$Rule$Dependencies};
			} else {
				var untouched = remainingRules.a;
				var rule = untouched;
				var rest = remainingRules.b;
				var _v1 = rule._;
				if (!_v1.$) {
					var visitor = _v1.a;
					var _v2 = A2(visitor, project, readmeData);
					var errors = _v2.a;
					var updatedRule = _v2.b;
					var _v3 = A5($jfmengels$elm_review$Review$Rule$standardFindFix, reviewOptions, project, fixedErrors, updatedRule.gf, errors);
					if (_v3.$ === 1) {
						var newProject = _v3.a.d8;
						var newRule = _v3.a.d9;
						var newFixedErrors = _v3.a.d7;
						var step = _v3.a.L;
						return {
							iv: newFixedErrors,
							o: newProject,
							j: A2(
								$elm$core$List$cons,
								newRule,
								_Utils_ap(rest, accRules)),
							L: step
						};
					} else {
						var newRule = _v3.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$project = project,
							$temp$fixedErrors = fixedErrors,
							$temp$readmeData = readmeData,
							$temp$remainingRules = rest,
							$temp$accRules = A2($elm$core$List$cons, newRule, accRules);
						reviewOptions = $temp$reviewOptions;
						project = $temp$project;
						fixedErrors = $temp$fixedErrors;
						readmeData = $temp$readmeData;
						remainingRules = $temp$remainingRules;
						accRules = $temp$accRules;
						continue computeReadme;
					}
				} else {
					var $temp$reviewOptions = reviewOptions,
						$temp$project = project,
						$temp$fixedErrors = fixedErrors,
						$temp$readmeData = readmeData,
						$temp$remainingRules = rest,
						$temp$accRules = A2($elm$core$List$cons, untouched, accRules);
					reviewOptions = $temp$reviewOptions;
					project = $temp$project;
					fixedErrors = $temp$fixedErrors;
					readmeData = $temp$readmeData;
					remainingRules = $temp$remainingRules;
					accRules = $temp$accRules;
					continue computeReadme;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$dependencies = function (_v0) {
	var project = _v0;
	return project.gF;
};
var $jfmengels$elm_review$Review$Rule$computeStepsForProject = F2(function $jfmengels$elm_review$Review$Rule$computeStepsForProject$fn(reviewOptions, _v0) {
		computeStepsForProject:
		while (true) {
			var project = _v0.o;
			var ruleProjectVisitors = _v0.j;
			var fixedErrors = _v0.iv;
			var step = _v0.L;
			switch (step.$) {
				case 0:
					var elmJsonData = A2(
						$elm$core$Maybe$map,
						function (elmJson) {
							return {im: elmJson, o: elmJson.o};
						},
						$jfmengels$elm_review$Review$Project$Valid$elmJson(project));
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A6($jfmengels$elm_review$Review$Rule$computeElmJson, reviewOptions, project, fixedErrors, elmJsonData, ruleProjectVisitors, _List_Nil);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				case 1:
					var readmeData = A2(
						$elm$core$Maybe$map,
						function (readme) {
							return {
								dD: readme.dD,
								i$: {dD: readme.dD, iX: readme.iX}
							};
						},
						$jfmengels$elm_review$Review$Project$Valid$readme(project));
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A6($jfmengels$elm_review$Review$Rule$computeReadme, reviewOptions, project, fixedErrors, readmeData, ruleProjectVisitors, _List_Nil);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				case 2:
					var dependenciesData = {
						ab: $jfmengels$elm_review$Review$Project$Valid$dependencies(project),
						gK: $jfmengels$elm_review$Review$Project$Valid$directDependencies(project)
					};
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A6($jfmengels$elm_review$Review$Rule$computeDependencies, reviewOptions, project, fixedErrors, dependenciesData, ruleProjectVisitors, _List_Nil);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				case 3:
					var moduleZipper = step.a;
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A5(
						$jfmengels$elm_review$Review$Rule$computeModules,
						reviewOptions,
						$elm$core$Maybe$Just(moduleZipper),
						project,
						ruleProjectVisitors,
						fixedErrors);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				case 4:
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A5($jfmengels$elm_review$Review$Rule$computeFinalProjectEvaluation, reviewOptions, project, fixedErrors, ruleProjectVisitors, _List_Nil);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				default:
					return {iv: fixedErrors, o: project, j: ruleProjectVisitors};
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$runProjectVisitor = F4(function $jfmengels$elm_review$Review$Rule$runProjectVisitor$fn(reviewOptions, initialRuleProjectVisitors, initialFixedErrors, initialProject) {
		var _v0 = A2(
			$jfmengels$elm_review$Review$Rule$computeStepsForProject,
			reviewOptions,
			{iv: initialFixedErrors, o: initialProject, j: initialRuleProjectVisitors, L: $jfmengels$elm_review$Review$Rule$ElmJson});
		var project = _v0.o;
		var ruleProjectVisitors = _v0.j;
		var fixedErrors = _v0.iv;
		return {iv: fixedErrors, o: project, j: ruleProjectVisitors};
	});
var $jfmengels$elm_review$Review$Fix$FixedErrors$toDict = function (_v0) {
	var fixedErrors = _v0;
	return fixedErrors.bO;
};
var $jfmengels$elm_review$Review$Project$Valid$toRegularProject = function (_v0) {
	var validProject = _v0;
	return {
		h8: validProject.eb,
		gF: validProject.gF,
		es: validProject.es,
		hi: $elm$core$Maybe$Just(validProject.hi),
		aU: validProject.bz,
		dn: _List_Nil,
		f6: validProject.f6,
		gg: validProject.gg
	};
};
var $jfmengels$elm_review$Review$Rule$runRules = F3(function $jfmengels$elm_review$Review$Rule$runRules$fn(_v0, ruleProjectVisitors, project) {
		var reviewOptions = _v0;
		var result = A4($jfmengels$elm_review$Review$Rule$runProjectVisitor, reviewOptions, ruleProjectVisitors, $jfmengels$elm_review$Review$Fix$FixedErrors$empty, project);
		var _v1 = A2($jfmengels$elm_review$Review$Rule$computeErrorsAndRulesAndExtracts, reviewOptions, result.j);
		var errors = _v1.bO;
		var rules = _v1.bi;
		var extracts = _v1.dS;
		return {
			bO: errors,
			dS: extracts,
			iv: $jfmengels$elm_review$Review$Fix$FixedErrors$toDict(result.iv),
			o: $jfmengels$elm_review$Review$Project$Valid$toRegularProject(result.o),
			bi: rules
		};
	});
var $jfmengels$elm_review$Review$Rule$reviewV3 = F3(function $jfmengels$elm_review$Review$Rule$reviewV3$fn(reviewOptions, rules, project) {
		var _v0 = A2($jfmengels$elm_review$Review$Rule$getValidProjectAndRules, project, rules);
		if (!_v0.$) {
			var _v1 = _v0.a;
			var validProject = _v1.a;
			var ruleProjectVisitors = _v1.b;
			return A3($jfmengels$elm_review$Review$Rule$runRules, reviewOptions, ruleProjectVisitors, validProject);
		} else {
			var errors = _v0.a;
			return {bO: errors, dS: $elm$core$Dict$empty, iv: $elm$core$Dict$empty, o: project, bi: rules};
		}
	});
var $author$project$Elm$Review$CliCommunication$send = function (key) {
	return function (message) {
		return A2(
			$elm$core$Basics$always,
			message,
			A2(
				$author$project$Elm$Review$CliCommunication$sendLoggerMessage,
				key,
				A2(
					$elm$json$Json$Encode$encode,
					0,
					$elm$json$Json$Encode$object(message))));
	};
};
var $jfmengels$elm_review$Review$Options$fixedDisabled = $jfmengels$elm_review$Review$Options$Internal$Disabled;
var $jfmengels$elm_review$Review$Options$Internal$Enabled = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Options$fixesEnabledWithLimit = function (limit) {
	return $jfmengels$elm_review$Review$Options$Internal$Enabled(
		$elm$core$Maybe$Just(limit));
};
var $jfmengels$elm_review$Review$Options$fixesEnabledWithoutLimits = $jfmengels$elm_review$Review$Options$Internal$Enabled($elm$core$Maybe$Nothing);
var $author$project$Elm$Review$Main$toReviewOptionsFixMode = F2(function $author$project$Elm$Review$Main$toReviewOptionsFixMode$fn(fixAllAllowed, model) {
		if (!fixAllAllowed) {
			return $jfmengels$elm_review$Review$Options$fixedDisabled;
		} else {
			var _v0 = model.aQ;
			switch (_v0) {
				case 0:
					return $jfmengels$elm_review$Review$Options$fixedDisabled;
				case 1:
					var _v1 = model.cj;
					if (!_v1.$) {
						var fixLimit = _v1.a;
						return $jfmengels$elm_review$Review$Options$fixesEnabledWithLimit(fixLimit);
					} else {
						return $jfmengels$elm_review$Review$Options$fixesEnabledWithLimit(1);
					}
				default:
					var _v2 = model.cj;
					if (!_v2.$) {
						var fixLimit = _v2.a;
						return $jfmengels$elm_review$Review$Options$fixesEnabledWithLimit(fixLimit);
					} else {
						return $jfmengels$elm_review$Review$Options$fixesEnabledWithoutLimits;
					}
			}
		}
	});
var $jfmengels$elm_review$Review$Options$withDataExtraction = F2(function $jfmengels$elm_review$Review$Options$withDataExtraction$fn(extract, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{gT: extract});
	});
var $jfmengels$elm_review$Review$Options$withFixes = F2(function $jfmengels$elm_review$Review$Options$withFixes$fn(fixMode, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{aQ: fixMode});
	});
var $jfmengels$elm_review$Review$Options$withIgnoredFixes = F2(function $jfmengels$elm_review$Review$Options$withIgnoredFixes$fn(ignoreFix, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{g2: ignoreFix});
	});
var $jfmengels$elm_review$Review$Logger$fromFn = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Options$withLogger = F2(function $jfmengels$elm_review$Review$Options$withLogger$fn(maybeLogger, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{
				fW: function () {
					if (!maybeLogger.$) {
						var fn = maybeLogger.a;
						return $jfmengels$elm_review$Review$Logger$fromFn(fn);
					} else {
						return $jfmengels$elm_review$Review$Logger$none;
					}
				}()
			});
	});
var $author$project$Elm$Review$Main$runReview = F3(function $author$project$Elm$Review$Main$runReview$fn(_v0, initialProject, model) {
		var fixesAllowed = _v0.ck;
		var _v1 = A3(
			$author$project$Elm$Review$CliCommunication$timerEnd,
			model.bp,
			'run-review',
			A3(
				$jfmengels$elm_review$Review$Rule$reviewV3,
				A2(
					$author$project$Elm$Review$SuppressedErrors$addToReviewOptions,
					model.aa,
					A2(
						$jfmengels$elm_review$Review$Options$withIgnoredFixes,
						function (error) {
							return A2($author$project$Elm$Review$RefusedErrorFixes$memberUsingRecord, error, model.ee);
						},
						A2(
							$jfmengels$elm_review$Review$Options$withFixes,
							A2($author$project$Elm$Review$Main$toReviewOptionsFixMode, fixesAllowed, model),
							A2(
								$jfmengels$elm_review$Review$Options$withLogger,
								$elm$core$Maybe$Just(
									$author$project$Elm$Review$CliCommunication$send(model.bp)),
								A2($jfmengels$elm_review$Review$Options$withDataExtraction, model.c3 && (model.b0 === 1), $jfmengels$elm_review$Review$Options$defaults))))),
				model.bi,
				A3($author$project$Elm$Review$CliCommunication$timerStart, model.bp, 'run-review', initialProject)));
		var errors = _v1.bO;
		var rules = _v1.bi;
		var project = _v1.o;
		var extracts = _v1.dS;
		var fixedErrors = _v1.iv;
		return _Utils_update(
			model,
			{
				a3: $author$project$Elm$Review$Main$NotAwaiting,
				dS: extracts,
				a5: fixedErrors,
				ci: project,
				db: rules,
				eO: false,
				o: (!model.aQ) ? project : model.o,
				cM: errors,
				bh: A3(
					$author$project$Elm$Review$CliCommunication$timerEnd,
					model.bp,
					'apply-suppressions',
					A3(
						$author$project$Elm$Review$SuppressedErrors$apply,
						model.aZ,
						model.aa,
						A3($author$project$Elm$Review$CliCommunication$timerStart, model.bp, 'apply-suppressions', errors))),
				bi: (model.eO || (!model.aQ)) ? rules : model.bi
			});
	});
var $author$project$Elm$Review$Main$cacheFile = _Platform_outgoingPort('cacheFile', $elm$core$Basics$identity);
var $author$project$Elm$Review$Main$sendFileToBeCached = F2(function $author$project$Elm$Review$Main$sendFileToBeCached$fn(project, source) {
		var _v0 = A2(
			$author$project$Elm$Review$Main$find,
			function (module_) {
				return _Utils_eq(module_.i8, source);
			},
			$jfmengels$elm_review$Review$Project$modules(project));
		if (!_v0.$) {
			var ast = _v0.a.h2;
			return $author$project$Elm$Review$Main$cacheFile(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'source',
							$elm$json$Json$Encode$string(source)),
							_Utils_Tuple2(
							'ast',
							$author$project$Elm$Review$AstCodec$encode(ast))
						])));
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$Elm$Review$Main$suppressionsResponse = _Platform_outgoingPort('suppressionsResponse', $elm$core$Basics$identity);
var $author$project$Elm$Review$Main$update = F2(function $author$project$Elm$Review$Main$update$fn(msg, model) {
		switch (msg.$) {
			case 0:
				var value = msg.a;
				var _v1 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$File$decode, value);
				if (!_v1.$) {
					var rawFile = _v1.a;
					var _v2 = rawFile.h2;
					if (_v2.$ === 1) {
						var project = A2(
							$jfmengels$elm_review$Review$Project$addModule,
							{iX: rawFile.iX, i8: rawFile.i8},
							model.o);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{o: project}),
							$author$project$Elm$Review$Main$acknowledgeFileReceipt(
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'path',
											$elm$json$Json$Encode$string(rawFile.iX)),
											_Utils_Tuple2(
											'cacheRequest',
											A2($author$project$Elm$Review$Main$cacheFileRequest, project, rawFile.i8))
										]))));
					} else {
						var ast = _v2.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									o: A2(
										$jfmengels$elm_review$Review$Project$addParsedModule,
										{h2: ast, iX: rawFile.iX, i8: rawFile.i8},
										model.o)
								}),
							$author$project$Elm$Review$Main$acknowledgeFileReceipt(
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'path',
											$elm$json$Json$Encode$string(rawFile.iX)),
											_Utils_Tuple2('cacheRequest', $elm$json$Json$Encode$null)
										]))));
					}
				} else {
					var err = _v1.a;
					return _Utils_Tuple2(
						model,
						$author$project$Elm$Review$Main$abort(
							$elm$json$Json$Decode$errorToString(err)));
				}
			case 1:
				var path = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							o: A2($jfmengels$elm_review$Review$Project$removeModule, path, model.o)
						}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var rawElmJson = msg.a;
				var _v3 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$Main$elmJsonDecoder, rawElmJson);
				if (!_v3.$) {
					var elmJson = _v3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								o: A2($jfmengels$elm_review$Review$Project$addElmJson, elmJson, model.o)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 3:
				var rawReadme = msg.a;
				var readmeDecoder = A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (path, content) {
							return {dD: content, iX: path};
						}),
					A2($elm$json$Json$Decode$field, 'path', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string));
				var _v4 = A2($elm$json$Json$Decode$decodeValue, readmeDecoder, rawReadme);
				if (!_v4.$) {
					var readme = _v4.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								o: A2($jfmengels$elm_review$Review$Project$addReadme, readme, model.o)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 4:
				var json = msg.a;
				var _v5 = A2(
					$elm$json$Json$Decode$decodeValue,
					$author$project$Elm$Review$Main$dependenciesDecoder(model.cr),
					json);
				if (_v5.$ === 1) {
					var decodeError = _v5.a;
					return _Utils_Tuple2(
						model,
						A2(
							$elm$core$String$contains,
							'I need a valid module name like',
							$elm$json$Json$Decode$errorToString(decodeError)) ? $author$project$Elm$Review$Main$abortWithDetails(
							{
								bx: 'I encountered an error when reading the dependencies of the project. It seems due to dependencies with modules containing `_` in their names. Unfortunately, this is an error I have no control over and I am waiting in one of the libraries I depend on. What I propose you do, is to re-run elm-review like this:\n\n    elm-review --ignore-problematic-dependencies\n\nThis will ignore the problematic dependencies, and can GIVE YOU INCORRECT RESULTS! This is a temporary measure.\n\nIf I am mistaken about the nature of problem, please open a bug report at https://github.com/jfmengels/node-elm-review/issues:\n\n' + $elm$json$Json$Decode$errorToString(decodeError),
								ej: 'FOUND PROBLEMATIC DEPENDENCIES'
							}) : $author$project$Elm$Review$Main$abortWithDetails(
							{
								bx: 'I encountered an error when reading the dependencies of the project. I suggest opening a bug report at https://github.com/jfmengels/node-elm-review/issues.' + $elm$json$Json$Decode$errorToString(decodeError),
								ej: 'PROBLEM READING DEPENDENCIES'
							}));
				} else {
					var dependencies = _v5.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								o: A3(
									$elm$core$List$foldl,
									$jfmengels$elm_review$Review$Project$addDependency,
									$jfmengels$elm_review$Review$Project$removeDependencies(model.o),
									dependencies)
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 5:
				var json = msg.a;
				var _v6 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$SuppressedErrors$decoder, json);
				if (_v6.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var suppressedErrors = _v6.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								dq: $author$project$Elm$Review$SuppressedErrors$count(suppressedErrors),
								aa: suppressedErrors
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 6:
				var json = msg.a;
				var _v7 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$SuppressedErrors$decoder, json);
				if (_v7.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var suppressedErrors = _v7.a;
					return _Utils_eq(suppressedErrors, model.aa) ? _Utils_Tuple2(model, $elm$core$Platform$Cmd$none) : $author$project$Elm$Review$Main$makeReport(
						_Utils_update(
							model,
							{
								bh: A3($author$project$Elm$Review$SuppressedErrors$apply, model.aZ, suppressedErrors, model.cM),
								aa: suppressedErrors
							}));
				}
			case 7:
				var json = msg.a;
				var _v8 = A2(
					$elm$json$Json$Decode$decodeValue,
					$elm$json$Json$Decode$dict($elm$json$Json$Decode$string),
					json);
				if (_v8.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var links = _v8.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{cE: links}),
						$elm$core$Platform$Cmd$none);
				}
			case 8:
				return $author$project$Elm$Review$Main$reportOrFix(
					A3(
						$author$project$Elm$Review$Main$runReview,
						{ck: true},
						model.o,
						_Utils_update(
							model,
							{a5: $elm$core$Dict$empty})));
			case 9:
				var project = $jfmengels$elm_review$Review$Project$precomputeModuleGraph(model.o);
				var newModel = A3(
					$author$project$Elm$Review$Main$runReview,
					{ck: false},
					project,
					_Utils_update(
						model,
						{a5: $elm$core$Dict$empty, o: project}));
				return _Utils_Tuple2(
					newModel,
					$author$project$Elm$Review$Main$suppressionsResponse(
						A2(
							$author$project$Elm$Review$SuppressedErrors$encode,
							_List_Nil,
							$author$project$Elm$Review$SuppressedErrors$fromReviewErrors(newModel.cM))));
			case 10:
				var confirmation = msg.a;
				var _v9 = A2(
					$elm$json$Json$Decode$decodeValue,
					$author$project$Elm$Review$Main$confirmationDecoder(model.cr),
					confirmation);
				if (!_v9.$) {
					if (!_v9.a.$) {
						var rawFiles = _v9.a.a.hx;
						var dependencies = _v9.a.a.gF;
						var previousProject = model.ci;
						var newProject = A3(
							$elm$core$List$foldl,
							F2(
								function (file, acc) {
									return A3($author$project$Elm$Review$Main$addUpdatedFileToProject, dependencies, file, acc);
								}),
							previousProject,
							rawFiles);
						return (_Utils_cmp(
							$elm$core$List$length(
								$jfmengels$elm_review$Review$Project$modulesThatFailedToParse(newProject)),
							$elm$core$List$length(
								$jfmengels$elm_review$Review$Project$modulesThatFailedToParse(previousProject))) > 0) ? _Utils_Tuple2(
							model,
							$author$project$Elm$Review$Main$abort(
								'One file among ' + (A2(
									$elm$core$String$join,
									', ',
									A2(
										$elm$core$List$map,
										function ($) {
											return $.iX;
										},
										rawFiles)) + ' could not be read. An incorrect fix may have been introduced into one of these files...'))) : A2(
							$elm$core$Tuple$mapSecond,
							function (cmd) {
								return $elm$core$Platform$Cmd$batch(
									A2(
										$elm$core$List$cons,
										cmd,
										A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												function ($) {
													return $.i8;
												},
												$author$project$Elm$Review$Main$sendFileToBeCached(newProject)),
											rawFiles)));
							},
							$author$project$Elm$Review$Main$reportOrFix(
								A3(
									$author$project$Elm$Review$Main$runReview,
									{ck: true},
									newProject,
									_Utils_update(
										model,
										{c5: true, a5: $elm$core$Dict$empty, o: newProject, bi: model.db}))));
					} else {
						var _v10 = _v9.a;
						var _v11 = model.a3;
						switch (_v11.$) {
							case 1:
								var error = _v11.a;
								return $author$project$Elm$Review$Main$reportOrFix(
									A3(
										$author$project$Elm$Review$Main$runReview,
										{ck: true},
										model.o,
										A2(
											$author$project$Elm$Review$Main$refuseError,
											error,
											_Utils_update(
												model,
												{a3: $author$project$Elm$Review$Main$NotAwaiting, ci: model.o}))));
							case 2:
								return $author$project$Elm$Review$Main$makeReport(
									A3(
										$author$project$Elm$Review$Main$runReview,
										{ck: false},
										model.o,
										_Utils_update(
											model,
											{a3: $author$project$Elm$Review$Main$NotAwaiting, ci: model.o})));
							default:
								return $author$project$Elm$Review$Main$makeReport(
									A3(
										$author$project$Elm$Review$Main$runReview,
										{ck: false},
										model.o,
										model));
						}
					}
				} else {
					var err = _v9.a;
					return _Utils_Tuple2(
						model,
						$author$project$Elm$Review$Main$abort(
							$elm$json$Json$Decode$errorToString(err)));
				}
			default:
				return _Utils_Tuple2(
					model,
					$author$project$Elm$Review$Main$fixConfirmationStatus(
						!_Utils_eq(model.a3, $author$project$Elm$Review$Main$NotAwaiting)));
		}
	});
var $elm$core$Platform$worker = _Platform_worker;
var $author$project$Elm$Review$Main$main = $elm$core$Platform$worker(
	{
		iC: $author$project$Elm$Review$Main$init,
		jf: function (_v0) {
			return $author$project$Elm$Review$Main$subscriptions;
		},
		jq: $author$project$Elm$Review$Main$update
	});
_Platform_export({'Elm':{'Review':{'Main':{'init':$author$project$Elm$Review$Main$main($elm$json$Json$Decode$value)(0)}}}});}(this));